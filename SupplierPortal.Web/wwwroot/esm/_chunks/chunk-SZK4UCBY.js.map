{
  "version": 3,
  "sources": ["../../../Modules/Administration/UserPermission/PermissionCheckEditor.ts"],
  "sourcesContent": ["\uFEFFimport { DataGrid, Decorators, Dictionary, Fluent, GridUtils, Grouping, IGetEditValue, ISetEditValue, SlickFormatting, SlickTreeHelper, ToolButton, WidgetProps, any, count, getRemoteData, htmlEncode, localText, stripDiacritics, toGrouping, trimToNull, tryGetText, turkishLocaleCompare } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { UserPermissionRow } from \"../\";\n\n@Decorators.registerEditor('SupplierPortal.Administration.PermissionCheckEditor', [IGetEditValue, ISetEditValue])\nexport class PermissionCheckEditor extends DataGrid<PermissionCheckItem, PermissionCheckEditorOptions> {\n\n    protected getIdProperty() { return \"Key\"; }\n\n    private searchText: string;\n    private byParentKey: Grouping<PermissionCheckItem>;\n\n    constructor(props: WidgetProps<PermissionCheckEditorOptions>) {\n        super(props);\n\n        let titleByKey: Dictionary<string> = {};\n        let permissionKeys = this.getSortedGroupAndPermissionKeys(titleByKey);\n        let items = permissionKeys.map(key => <PermissionCheckItem>{\n            Key: key,\n            ParentKey: this.getParentKey(key),\n            Title: titleByKey[key],\n            GrantRevoke: null,\n            IsGroup: key.charAt(key.length - 1) === ':'\n        });\n\n        this.byParentKey = toGrouping(items, x => x.ParentKey);\n        this.setItems(items);\n    }\n\n    private getItemGrantRevokeClass(item: PermissionCheckItem, grant: boolean): string {\n        if (!item.IsGroup) {\n            return ((item.GrantRevoke === grant) ? ' checked' : '');\n        }\n\n        let desc = this.getDescendants(item, true);\n        let granted = desc.filter(x => x.GrantRevoke === grant);\n\n        if (!granted.length) {\n            return '';\n        }\n\n        if (desc.length === granted.length) {\n            return 'checked';\n        }\n\n        return 'checked partial';\n    }\n\n    private roleOrImplicit(key): boolean {\n        if (this._rolePermissions[key])\n            return true;\n\n        for (var k of Object.keys(this._rolePermissions)) {\n            var d = this._implicitPermissions[k];\n            if (d && d[key])\n                return true;\n        }\n\n        for (var i of Object.keys(this._implicitPermissions)) {\n            var item = this.view.getItemById(i);\n            if (item && item.GrantRevoke == true) {\n                var d = this._implicitPermissions[i];\n                if (d && d[key])\n                    return true;\n            }\n        }\n    }\n\n    private getItemEffectiveClass(item: PermissionCheckItem): string {\n\n        if (item.IsGroup) {\n            let desc = this.getDescendants(item, true);\n            let grantCount = count(desc, x => x.GrantRevoke === true ||\n                (x.GrantRevoke == null && this.roleOrImplicit(x.Key)));\n\n            if (grantCount === desc.length || desc.length === 0) {\n                return 'allow';\n            }\n\n            if (grantCount === 0) {\n                return 'deny';\n            }\n\n            return 'partial';\n        }\n\n        let granted = item.GrantRevoke === true ||\n            (item.GrantRevoke == null && this.roleOrImplicit(item.Key));\n\n        return (granted ? ' allow' : ' deny');\n    }\n\n    protected getColumns(): Column[] {\n        let columns: Column[] = [{\n            name: localText('Site.UserPermissionDialog.Permission'),\n            field: 'Title',\n            format: SlickFormatting.treeToggle(() => this.view, x => x.Key, ctx => {\n                let item = ctx.item;\n                let klass = this.getItemEffectiveClass(item);\n                return '<span class=\"effective-permission ' + klass + '\">' + htmlEncode(ctx.value) + '</span>';\n            }),\n            width: 495,\n            sortable: false\n        }, {\n            name: localText('Site.UserPermissionDialog.Grant'), field: 'Grant',\n            format: ctx => {\n                let item1 = ctx.item;\n                let klass1 = this.getItemGrantRevokeClass(item1, true);\n                return \"<span class='check-box grant no-float \" + klass1 + \"'></span>\";\n            },\n            width: 65,\n            sortable: false,\n            headerCssClass: 'align-center',\n            cssClass: 'align-center'\n        }];\n\n        if (this.options.showRevoke) {\n            columns.push({\n                name: localText('Site.UserPermissionDialog.Revoke'), field: 'Revoke',\n                format: ctx => {\n                    let item2 = ctx.item;\n                    let klass2 = this.getItemGrantRevokeClass(item2, false);\n                    return '<span class=\"check-box revoke no-float ' + klass2 + '\"></span>';\n                },\n                width: 65,\n                sortable: false,\n                headerCssClass: 'align-center',\n                cssClass: 'align-center'\n            });\n        }\n\n        return columns;\n    }\n\n    public setItems(items: PermissionCheckItem[]): void {\n        SlickTreeHelper.setIndents(items, x => x.Key, x => x.ParentKey, false);\n        this.view.setItems(items, true);\n    }\n\n    protected onViewSubmit() {\n        return false;\n    }\n\n    protected onViewFilter(item: PermissionCheckItem): boolean {\n        if (!super.onViewFilter(item)) {\n            return false;\n        }\n\n        if (!SlickTreeHelper.filterById(item, this.view, x => x.ParentKey))\n            return false;\n\n        if (this.searchText) {\n            return this.matchContains(item) || item.IsGroup && any(this.getDescendants(item, false), x => this.matchContains(x));\n        }\n\n        return true;\n    }\n\n    private matchContains(item: PermissionCheckItem): boolean {\n        return stripDiacritics(item.Title || '').toLowerCase().indexOf(this.searchText) >= 0 ||\n            stripDiacritics(item.Key || '').toLowerCase().indexOf(this.searchText) >= 0;\n    }\n\n    private getDescendants(item: PermissionCheckItem, excludeGroups: boolean): PermissionCheckItem[] {\n        let result: PermissionCheckItem[] = [];\n        let stack = [item];\n        while (stack.length > 0) {\n            let i = stack.pop();\n            let children = this.byParentKey[i.Key];\n            if (!children)\n                continue;\n\n            for (let child of children) {\n                if (!excludeGroups || !child.IsGroup) {\n                    result.push(child);\n                }\n\n                stack.push(child);\n            }\n        }\n\n        return result;\n    }\n\n    protected onClick(e: MouseEvent, row, cell): void {\n        super.onClick(e, row, cell);\n\n        if (!e.defaultPrevented && !(e as any).isDefaultPrevented?.()) {\n            SlickTreeHelper.toggleClick(e, row, cell, this.view, x => x.Key);\n        }\n\n        if (e.defaultPrevented || (e as any).isDefaultPrevented?.()) {\n            return;\n        }\n\n        let target = Fluent(e.target);\n        let grant = target.hasClass('grant');\n\n        if (grant || target.hasClass('revoke')) {\n            e.preventDefault();\n\n            let item = this.itemAt(row);\n            let checkedOrPartial = target.hasClass('checked') || target.hasClass('partial');\n\n            if (checkedOrPartial) {\n                grant = null;\n            }\n            else {\n                grant = grant !== checkedOrPartial;\n            }\n\n            if (item.IsGroup) {\n                for (var d of this.getDescendants(item, true)) {\n                    d.GrantRevoke = grant;\n                }\n            }\n            else\n                item.GrantRevoke = grant;\n\n            this.slickGrid.invalidate();\n        }\n    }\n\n    private getParentKey(key): string {\n        if (key.charAt(key.length - 1) === ':') {\n            key = key.substr(0, key.length - 1);\n        }\n\n        let idx = key.lastIndexOf(':');\n        if (idx >= 0) {\n            return key.substr(0, idx + 1);\n        }\n        return null;\n    }\n\n    protected getButtons(): ToolButton[] {\n        return [];\n    }\n\n    protected createToolbarExtensions(): void {\n        super.createToolbarExtensions();\n        GridUtils.addQuickSearchInputCustom(this.toolbar.element, (_, text) => {\n            this.searchText = stripDiacritics(trimToNull(text) || '').toLowerCase();\n            this.view.setItems(this.view.getItems(), true);\n        });\n    }\n\n    private getSortedGroupAndPermissionKeys(titleByKey: Dictionary<string>): string[] {\n        let keys = <string[]>getRemoteData('Administration.PermissionKeys');\n        let titleWithGroup = {};\n        for (var k of keys) {\n            let s = k;\n\n            if (!s) {\n                continue;\n            }\n\n            if (s.charAt(s.length - 1) == ':') {\n                s = s.substring(0, s.length - 1);\n                if (s.length === 0) {\n                    continue;\n                }\n            }\n\n            if (titleByKey[s]) {\n                continue;\n            }\n\n            titleByKey[s] = tryGetText('Permission.' + s) ?? s;\n            let parts = s.split(':');\n            let group = '';\n            let groupTitle = '';\n            for (let i = 0; i < parts.length - 1; i++) {\n                group = group + parts[i] + ':';\n                let txt = tryGetText('Permission.' + group);\n                if (txt == null) {\n                    txt = parts[i];\n                }\n                titleByKey[group] = txt;\n                groupTitle = groupTitle + titleByKey[group] + ':';\n                titleWithGroup[group] = groupTitle;\n            }\n\n            titleWithGroup[s] = groupTitle + titleByKey[s];\n        }\n\n        keys = Object.keys(titleByKey);\n        keys = keys.sort((x, y) => turkishLocaleCompare(titleWithGroup[x], titleWithGroup[y]));\n\n        return keys;\n    }\n\n    get value(): UserPermissionRow[] {\n\n        let result: UserPermissionRow[] = [];\n\n        for (let item of this.view.getItems()) {\n            if (item.GrantRevoke != null && item.Key.charAt(item.Key.length - 1) != ':') {\n                result.push({ PermissionKey: item.Key, Granted: item.GrantRevoke });\n            }\n        }\n\n        return result;\n    }\n\n    set value(value: UserPermissionRow[]) {\n\n        for (let item of this.view.getItems()) {\n            item.GrantRevoke = null;\n        }\n\n        if (value != null) {\n            for (let row of value) {\n                let r = this.view.getItemById(row.PermissionKey);\n                if (r) {\n                    r.GrantRevoke = row.Granted ?? true;\n                }\n            }\n        }\n\n        this.setItems(this.getItems());\n    }\n\n    private _rolePermissions: Dictionary<boolean> = {};\n\n    get rolePermissions(): string[] {\n        return Object.keys(this._rolePermissions);\n    }\n\n    set rolePermissions(value: string[]) {\n        this._rolePermissions = {};\n\n        if (value) {\n            for (let k of value) {\n                this._rolePermissions[k] = true;\n            }\n        }\n\n        this.setItems(this.getItems());\n    }\n\n    private _implicitPermissions: Dictionary<Dictionary<boolean>> = {};\n\n    set implicitPermissions(value: Dictionary<string[]>) {\n        this._implicitPermissions = {};\n\n        if (value) {\n            for (var k of Object.keys(value)) {\n                this._implicitPermissions[k] = this._implicitPermissions[k] || {};\n                var l = value[k];\n                if (l) {\n                    for (var s of l)\n                        this._implicitPermissions[k][s] = true;\n                }\n            }\n        }\n    }\n}\n\nexport interface PermissionCheckEditorOptions {\n    showRevoke?: boolean;\n}\n\nexport interface PermissionCheckItem {\n    ParentKey?: string;\n    Key?: string;\n    Title?: string;\n    IsGroup?: boolean;\n    GrantRevoke?: boolean;\n}\n"],
  "mappings": "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",
  "names": ["import_corelib", "_PermissionCheckEditor_decorators", "_init", "_a", "_PermissionCheckEditor", "props", "titleByKey", "items", "key", "x", "item", "grant", "desc", "granted", "k", "d", "i", "grantCount", "columns", "ctx", "__name", "item1", "item2", "excludeGroups", "result", "stack", "children", "child", "row", "cell", "_b", "target", "checkedOrPartial", "idx", "_", "text", "keys", "titleWithGroup", "s", "parts", "group", "groupTitle", "txt", "y", "value", "l", "__decoratorStart", "__decorateElement", "__runInitializers", "PermissionCheckEditor"]
}

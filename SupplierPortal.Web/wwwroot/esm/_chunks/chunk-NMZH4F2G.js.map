{
  "version": 3,
  "sources": ["../../../Modules/ServerTypes/Item/ItemsColumns.ts", "../../../Modules/ServerTypes/Item/ItemsRow.ts", "../../../Modules/ServerTypes/Item/ItemsService.ts", "../../../Modules/ServerTypes/Item/OffersColumns.ts", "../../../Modules/ServerTypes/Item/OffersRow.ts", "../../../Modules/ServerTypes/Item/OffersService.ts", "../../../Modules/ServerTypes/Item/SupplierColumns.ts", "../../../Modules/ServerTypes/Item/SupplierRow.ts", "../../../Modules/ServerTypes/Item/SupplierService.ts", "../../../Modules/ServerTypes/Item/ItemsForm.ts", "../../../Modules/ServerTypes/Item/OffersForm.ts", "../../../Modules/ServerTypes/Item/SupplierForm.ts"],
  "sourcesContent": ["\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { ItemsRow } from \"./ItemsRow\";\n\nexport interface ItemsColumns {\n    Id: Column<ItemsRow>;\n    ItemCode: Column<ItemsRow>;\n    ItemName: Column<ItemsRow>;\n}\n\nexport class ItemsColumns extends ColumnsBase<ItemsRow> {\n    static readonly columnsKey = 'Item.Items';\n    static readonly Fields = fieldsProxy<ItemsColumns>();\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib\";\n\nexport interface ItemsRow {\n    Id?: number;\n    ItemCode?: number;\n    ItemName?: string;\n}\n\nexport abstract class ItemsRow {\n    static readonly idProperty = 'Id';\n    static readonly nameProperty = 'ItemName';\n    static readonly localTextPrefix = 'Item.Items';\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<ItemsRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { ItemsRow } from \"./ItemsRow\";\n\nexport namespace ItemsService {\n    export const baseUrl = 'Item/Items';\n\n    export declare function Create(request: SaveRequest<ItemsRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Update(request: SaveRequest<ItemsRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): PromiseLike<DeleteResponse>;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<ItemsRow>) => void, opt?: ServiceOptions<any>): PromiseLike<RetrieveResponse<ItemsRow>>;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<ItemsRow>) => void, opt?: ServiceOptions<any>): PromiseLike<ListResponse<ItemsRow>>;\n\n    export const Methods = {\n        Create: \"Item/Items/Create\",\n        Update: \"Item/Items/Update\",\n        Delete: \"Item/Items/Delete\",\n        Retrieve: \"Item/Items/Retrieve\",\n        List: \"Item/Items/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>ItemsService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { OffersRow } from \"./OffersRow\";\n\nexport interface OffersColumns {\n    Id: Column<OffersRow>;\n    ItemCode: Column<OffersRow>;\n    ItemName: Column<OffersRow>;\n    CompanyName: Column<OffersRow>;\n    Email: Column<OffersRow>;\n    State: Column<OffersRow>;\n    ItemItemName: Column<OffersRow>;\n    SupplierCompanyName: Column<OffersRow>;\n}\n\nexport class OffersColumns extends ColumnsBase<OffersRow> {\n    static readonly columnsKey = 'Item.Offers';\n    static readonly Fields = fieldsProxy<OffersColumns>();\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib\";\n\nexport interface OffersRow {\n    Id?: number;\n    ItemCode?: number;\n    ItemName?: string;\n    CompanyName?: string;\n    Email?: string;\n    State?: number[];\n    ItemId?: number;\n    SupplierId?: number;\n    ItemItemName?: string;\n    SupplierCompanyName?: string;\n}\n\nexport abstract class OffersRow {\n    static readonly idProperty = 'Id';\n    static readonly nameProperty = 'ItemName';\n    static readonly localTextPrefix = 'Item.Offers';\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<OffersRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { OffersRow } from \"./OffersRow\";\n\nexport namespace OffersService {\n    export const baseUrl = 'Item/Offers';\n\n    export declare function Create(request: SaveRequest<OffersRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Update(request: SaveRequest<OffersRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): PromiseLike<DeleteResponse>;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<OffersRow>) => void, opt?: ServiceOptions<any>): PromiseLike<RetrieveResponse<OffersRow>>;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<OffersRow>) => void, opt?: ServiceOptions<any>): PromiseLike<ListResponse<OffersRow>>;\n\n    export const Methods = {\n        Create: \"Item/Offers/Create\",\n        Update: \"Item/Offers/Update\",\n        Delete: \"Item/Offers/Delete\",\n        Retrieve: \"Item/Offers/Retrieve\",\n        List: \"Item/Offers/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>OffersService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\nimport { Column } from \"@serenity-is/sleekgrid\";\nimport { SupplierRow } from \"./SupplierRow\";\n\nexport interface SupplierColumns {\n    Id: Column<SupplierRow>;\n    CompanyName: Column<SupplierRow>;\n    Email: Column<SupplierRow>;\n}\n\nexport class SupplierColumns extends ColumnsBase<SupplierRow> {\n    static readonly columnsKey = 'Item.Supplier';\n    static readonly Fields = fieldsProxy<SupplierColumns>();\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib\";\n\nexport interface SupplierRow {\n    Id?: number;\n    CompanyName?: string;\n    Email?: string;\n}\n\nexport abstract class SupplierRow {\n    static readonly idProperty = 'Id';\n    static readonly nameProperty = 'CompanyName';\n    static readonly localTextPrefix = 'Item.Supplier';\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<SupplierRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\nimport { SupplierRow } from \"./SupplierRow\";\n\nexport namespace SupplierService {\n    export const baseUrl = 'Item/Supplier';\n\n    export declare function Create(request: SaveRequest<SupplierRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Update(request: SaveRequest<SupplierRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): PromiseLike<DeleteResponse>;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<SupplierRow>) => void, opt?: ServiceOptions<any>): PromiseLike<RetrieveResponse<SupplierRow>>;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<SupplierRow>) => void, opt?: ServiceOptions<any>): PromiseLike<ListResponse<SupplierRow>>;\n\n    export const Methods = {\n        Create: \"Item/Supplier/Create\",\n        Update: \"Item/Supplier/Update\",\n        Delete: \"Item/Supplier/Delete\",\n        Retrieve: \"Item/Supplier/Retrieve\",\n        List: \"Item/Supplier/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>SupplierService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { IntegerEditor, StringEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\n\nexport interface ItemsForm {\n    ItemCode: IntegerEditor;\n    ItemName: StringEditor;\n}\n\nexport class ItemsForm extends PrefixedContext {\n    static readonly formKey = 'Item.Items';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!ItemsForm.init)  {\n            ItemsForm.init = true;\n\n            var w0 = IntegerEditor;\n            var w1 = StringEditor;\n\n            initFormType(ItemsForm, [\n                'ItemCode', w0,\n                'ItemName', w1\n            ]);\n        }\n    }\n}", "\uFEFFimport { IntegerEditor, StringEditor, ServiceLookupEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\n\nexport interface OffersForm {\n    ItemCode: IntegerEditor;\n    ItemName: StringEditor;\n    CompanyName: StringEditor;\n    Email: StringEditor;\n    State: StringEditor;\n    ItemId: ServiceLookupEditor;\n    SupplierId: ServiceLookupEditor;\n}\n\nexport class OffersForm extends PrefixedContext {\n    static readonly formKey = 'Item.Offers';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!OffersForm.init)  {\n            OffersForm.init = true;\n\n            var w0 = IntegerEditor;\n            var w1 = StringEditor;\n            var w2 = ServiceLookupEditor;\n\n            initFormType(OffersForm, [\n                'ItemCode', w0,\n                'ItemName', w1,\n                'CompanyName', w1,\n                'Email', w1,\n                'State', w1,\n                'ItemId', w2,\n                'SupplierId', w2\n            ]);\n        }\n    }\n}", "\uFEFFimport { StringEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\n\nexport interface SupplierForm {\n    CompanyName: StringEditor;\n    Email: StringEditor;\n}\n\nexport class SupplierForm extends PrefixedContext {\n    static readonly formKey = 'Item.Supplier';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!SupplierForm.init)  {\n            SupplierForm.init = true;\n\n            var w0 = StringEditor;\n\n            initFormType(SupplierForm, [\n                'CompanyName', w0,\n                'Email', w0\n            ]);\n        }\n    }\n}"],
  "mappings": "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",
  "names": ["import_corelib", "_ItemsColumns", "__name", "ItemsColumns", "import_corelib", "_ItemsRow", "__name", "ItemsRow", "import_corelib", "ItemsService", "x", "r", "s", "o", "import_corelib", "_OffersColumns", "__name", "OffersColumns", "import_corelib", "_OffersRow", "__name", "OffersRow", "import_corelib", "OffersService", "x", "r", "s", "o", "import_corelib", "_SupplierColumns", "__name", "SupplierColumns", "import_corelib", "_SupplierRow", "__name", "SupplierRow", "import_corelib", "SupplierService", "x", "r", "s", "o", "import_corelib", "_ItemsForm", "prefix", "w0", "w1", "__name", "ItemsForm", "import_corelib", "_OffersForm", "prefix", "w0", "w1", "w2", "__name", "OffersForm", "import_corelib", "_SupplierForm", "prefix", "w0", "__name", "SupplierForm"]
}

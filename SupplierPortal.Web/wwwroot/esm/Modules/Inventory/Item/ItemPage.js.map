{
  "version": 3,
  "sources": ["../../../../../Modules/Inventory/Item/ItemPage.ts", "../../../../../Modules/ServerTypes/Inventory/ItemColumns.ts", "../../../../../Modules/ServerTypes/Inventory/ItemForm.ts", "../../../../../Modules/ServerTypes/Inventory/ItemRow.ts", "../../../../../Modules/ServerTypes/Inventory/ItemService.ts", "../../../../../Modules/Inventory/Item/ItemGrid.ts", "../../../../../Modules/Inventory/Item/ItemDialog.ts"],
  "sourcesContent": ["\uFEFFimport { gridPageInit } from '@serenity-is/corelib';\r\nimport { ItemGrid } from './ItemGrid';\r\n\r\nexport default () => gridPageInit(ItemGrid);", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\r\nimport { Column } from \"@serenity-is/sleekgrid\";\r\nimport { ItemRow } from \"./ItemRow\";\r\n\r\nexport interface ItemColumns {\r\n    Id: Column<ItemRow>;\r\n    ItemCode: Column<ItemRow>;\r\n    ItemName: Column<ItemRow>;\r\n}\r\n\r\nexport class ItemColumns extends ColumnsBase<ItemRow> {\r\n    static readonly columnsKey = 'Inventory.Item';\r\n    static readonly Fields = fieldsProxy<ItemColumns>();\r\n}", "\uFEFFimport { IntegerEditor, StringEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\r\n\r\nexport interface ItemForm {\r\n    ItemCode: IntegerEditor;\r\n    ItemName: StringEditor;\r\n}\r\n\r\nexport class ItemForm extends PrefixedContext {\r\n    static readonly formKey = 'Inventory.Item';\r\n    private static init: boolean;\r\n\r\n    constructor(prefix: string) {\r\n        super(prefix);\r\n\r\n        if (!ItemForm.init)  {\r\n            ItemForm.init = true;\r\n\r\n            var w0 = IntegerEditor;\r\n            var w1 = StringEditor;\r\n\r\n            initFormType(ItemForm, [\r\n                'ItemCode', w0,\r\n                'ItemName', w1\r\n            ]);\r\n        }\r\n    }\r\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib\";\r\n\r\nexport interface ItemRow {\r\n    Id?: number;\r\n    ItemCode?: number;\r\n    ItemName?: string;\r\n}\r\n\r\nexport abstract class ItemRow {\r\n    static readonly idProperty = 'Id';\r\n    static readonly nameProperty = 'ItemName';\r\n    static readonly localTextPrefix = 'Inventory.Item';\r\n    static readonly deletePermission = 'Administration:General';\r\n    static readonly insertPermission = 'Administration:General';\r\n    static readonly readPermission = 'Administration:General';\r\n    static readonly updatePermission = 'Administration:General';\r\n\r\n    static readonly Fields = fieldsProxy<ItemRow>();\r\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\r\nimport { ItemRow } from \"./ItemRow\";\r\n\r\nexport namespace ItemService {\r\n    export const baseUrl = 'Inventory/Item';\r\n\r\n    export declare function Create(request: SaveRequest<ItemRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\r\n    export declare function Update(request: SaveRequest<ItemRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): PromiseLike<SaveResponse>;\r\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): PromiseLike<DeleteResponse>;\r\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<ItemRow>) => void, opt?: ServiceOptions<any>): PromiseLike<RetrieveResponse<ItemRow>>;\r\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<ItemRow>) => void, opt?: ServiceOptions<any>): PromiseLike<ListResponse<ItemRow>>;\r\n\r\n    export const Methods = {\r\n        Create: \"Inventory/Item/Create\",\r\n        Update: \"Inventory/Item/Update\",\r\n        Delete: \"Inventory/Item/Delete\",\r\n        Retrieve: \"Inventory/Item/Retrieve\",\r\n        List: \"Inventory/Item/List\"\r\n    } as const;\r\n\r\n    [\r\n        'Create', \r\n        'Update', \r\n        'Delete', \r\n        'Retrieve', \r\n        'List'\r\n    ].forEach(x => {\r\n        (<any>ItemService)[x] = function (r, s, o) {\r\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\r\n        };\r\n    });\r\n}", "import { ItemColumns, ItemRow, ItemService } from '@/ServerTypes/Inventory';\r\nimport { Decorators, EntityGrid } from '@serenity-is/corelib';\r\nimport { ItemDialog } from './ItemDialog';\r\n\r\n@Decorators.registerClass('SupplierPortal.Inventory.ItemGrid')\r\nexport class ItemGrid extends EntityGrid<ItemRow> {\r\n    protected getColumnsKey() { return ItemColumns.columnsKey; }\r\n    protected getDialogType() { return ItemDialog; }\r\n    protected getRowDefinition() { return ItemRow; }\r\n    protected getService() { return ItemService.baseUrl; }\r\n}", "import { ItemForm, ItemRow, ItemService } from '@/ServerTypes/Inventory';\r\nimport { Decorators, EntityDialog } from '@serenity-is/corelib';\r\n\r\n@Decorators.registerClass('SupplierPortal.Inventory.ItemDialog')\r\nexport class ItemDialog extends EntityDialog<ItemRow, any> {\r\n    protected getFormKey() { return ItemForm.formKey; }\r\n    protected getRowDefinition() { return ItemRow; }\r\n    protected getService() { return ItemService.baseUrl; }\r\n\r\n    protected form = new ItemForm(this.idPrefix);\r\n}"],
  "mappings": "0FAAC,IAAAA,EAA6B,SCA7B,IAAAC,EAAyC,SAUnC,IAAMC,EAAN,MAAMA,UAAoB,aAAqB,CAGtD,EAHsDC,EAAAD,EAAA,eAAzCA,EACO,WAAa,iBADpBA,EAEO,UAAS,eAAyB,EAF/C,IAAME,EAANF,ECVN,IAAAG,EAA2E,SAOrE,IAAMC,EAAN,MAAMA,UAAiB,iBAAgB,CAI1C,YAAYC,EAAgB,CAGxB,GAFA,MAAMA,CAAM,EAER,CAACD,EAAS,KAAO,CACjBA,EAAS,KAAO,GAEhB,IAAIE,EAAK,gBACLC,EAAK,kBAET,gBAAaH,EAAU,CACnB,WAAYE,EACZ,WAAYC,CAChB,CAAC,CACL,CACJ,CACJ,EAnB8CC,EAAAJ,EAAA,YAAjCA,EACO,QAAU,iBADvB,IAAMK,EAANL,ECPN,IAAAM,EAA4B,SAQtB,IAAeC,EAAf,MAAeA,CAAQ,CAU9B,EAV8BC,EAAAD,EAAA,WAARA,EACF,WAAa,KADXA,EAEF,aAAe,WAFbA,EAGF,gBAAkB,iBAHhBA,EAIF,iBAAmB,yBAJjBA,EAKF,iBAAmB,yBALjBA,EAMF,eAAiB,yBANfA,EAOF,iBAAmB,yBAPjBA,EASF,UAAS,eAAqB,EAT3C,IAAeE,EAAfF,ECRN,IAAAG,EAAuK,SAGvJC,OACAA,EAAA,QAAU,iBAQVA,EAAA,QAAU,CACnB,OAAQ,wBACR,OAAQ,wBACR,OAAQ,wBACR,SAAU,0BACV,KAAM,qBACV,EAEA,CACI,SACA,SACA,SACA,WACA,MACJ,EAAE,QAAQC,GAAK,CACLD,EAAaC,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CACvC,SAAO,kBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IA3BYJ,MAAA,KCFjB,IAAAK,EAAuC,SCAvC,IAAAC,EAAyC,SADzC,IAAAC,EAAAC,EAAAC,EAGAF,EAAA,CAAC,aAAW,cAAc,qCAAqC,GACxD,IAAMG,EAAN,MAAMA,UAAmBD,EAAA,eAA2B,CAApD,kCAKH,KAAU,KAAO,IAAIE,EAAS,KAAK,QAAQ,EAJjC,YAAa,CAAE,OAAOA,EAAS,OAAS,CACxC,kBAAmB,CAAE,OAAOC,CAAS,CACrC,YAAa,CAAE,OAAOC,EAAY,OAAS,CAGzD,EANOL,EAAAM,EAAAL,GAAMC,EAANK,EAAAP,EAAA,eADPD,EACaG,GAA8CM,EAAAN,EAAA,cAApDO,EAAAT,EAAA,EAAME,GAAN,IAAMQ,EAANR,EDJP,IAAAS,EAAAC,EAAAC,EAIAF,EAAA,CAAC,aAAW,cAAc,mCAAmC,GACtD,IAAMG,EAAN,MAAMA,UAAiBD,EAAA,aAAoB,CACpC,eAAgB,CAAE,OAAOE,EAAY,UAAY,CACjD,eAAgB,CAAE,OAAOC,CAAY,CACrC,kBAAmB,CAAE,OAAOC,CAAS,CACrC,YAAa,CAAE,OAAOC,EAAY,OAAS,CACzD,EALON,EAAAO,EAAAN,GAAMC,EAANM,EAAAR,EAAA,aADPD,EACaG,GAAqCO,EAAAP,EAAA,YAA3CQ,EAAAV,EAAA,EAAME,GAAN,IAAMS,EAANT,ELFP,IAAOU,GAAQC,EAAA,OAAM,gBAAaC,CAAQ,EAA3B",
  "names": ["import_corelib", "import_corelib", "_ItemColumns", "__name", "ItemColumns", "import_corelib", "_ItemForm", "prefix", "w0", "w1", "__name", "ItemForm", "import_corelib", "_ItemRow", "__name", "ItemRow", "import_corelib", "ItemService", "x", "r", "s", "o", "import_corelib", "import_corelib", "_ItemDialog_decorators", "_init", "_a", "_ItemDialog", "ItemForm", "ItemRow", "ItemService", "__decoratorStart", "__decorateElement", "__name", "__runInitializers", "ItemDialog", "_ItemGrid_decorators", "_init", "_a", "_ItemGrid", "ItemColumns", "ItemDialog", "ItemRow", "ItemService", "__decoratorStart", "__decorateElement", "__name", "__runInitializers", "ItemGrid", "ItemPage_default", "__name", "ItemGrid"]
}

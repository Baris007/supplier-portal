{
  "version": 3,
  "sources": ["../../../../../Modules/Administration/Translation/TranslationPage.ts", "../../../../../Modules/Administration/Translation/TranslationGrid.ts"],
  "sourcesContent": ["import { gridPageInit } from \"@serenity-is/corelib\"\nimport { TranslationGrid } from \"./TranslationGrid\";\n\nexport default () => gridPageInit(TranslationGrid);", "import { confirmDialog, Decorators, EntityGrid, Fluent, GridUtils, isEmptyOrNull, isTrimmedEmpty, localText, LookupEditor, LookupEditorOptions, notifySuccess, outerHtml, stripDiacritics, ToolButton, trimToEmpty, trimToNull, Widget } from \"@serenity-is/corelib\";\r\nimport { Column } from \"@serenity-is/sleekgrid\";\r\nimport { TranslationItem, TranslationService } from \"../\";\r\n\n@Decorators.registerClass()\nexport class TranslationGrid extends EntityGrid<TranslationItem, any> {\n    protected getIdProperty() { return \"Key\"; }\n    protected getLocalTextPrefix() { return \"Administration.Translation\"; }\n    protected getService() { return TranslationService.baseUrl; }\n\n    private hasChanges: boolean;\n    private searchText: string;\n    private sourceLanguage: LookupEditor; \n    private targetLanguage: LookupEditor;\n    private targetLanguageKey: string;\n\n    constructor(props: any) {\n        super(props);\n\n        this.element.on('keyup.' + this.uniqueName + ' change.' + this.uniqueName,\n            'input.custom-text', e =>\n        {\n            var value = trimToNull(Fluent(e.target).val());\n            if (value === '') {\n                value = null;\n            }\n            this.view.getItemById(Fluent(e.target).data('key')).CustomText = value;\n            this.hasChanges = true;\n        });\n    }\n\n    protected onClick(e: MouseEvent, row: number, cell: number): any {\n        super.onClick(e, row, cell);\n\n        if (e.defaultPrevented || (e as any)?.isDefaultPrevented?.()) {\n            return;\n        }\n\n        let item = this.itemAt(row);\n        let done: () => void;\n\n        if (Fluent(e.target).hasClass('source-text')) {\n            e.preventDefault();\n                \n            done = () => {\n                item.CustomText = item.SourceText;\n                this.view.updateItem(item.Key, item);\n                this.hasChanges = true;\n            };\n\n            if (isTrimmedEmpty(item.CustomText) ||\n                (trimToEmpty(item.CustomText) === trimToEmpty(item.SourceText))) {\n                done();\n                return;\n            }\n\n            confirmDialog(localText('Db.Administration.Translation.OverrideConfirmation'), done);\n            return;\n        }\n\n        if (Fluent(e.target).hasClass('target-text')) {\n            e.preventDefault();\n\n            done = () => {\n                item.CustomText = item.TargetText;\n                this.view.updateItem(item.Key, item);\n                this.hasChanges = true;\n            };\n\n            if (isTrimmedEmpty(item.CustomText) ||\n                (trimToEmpty(item.CustomText) === trimToEmpty(item.TargetText))) {\n                done();\n                return;\n            }\n\n            confirmDialog(localText('Db.Administration.Translation.OverrideConfirmation'), done);\n            return;\n        }\n    }\n\n    protected getColumns(): Column[] {\n\n        var columns: Column[] = [];\n        columns.push({ field: 'Key', width: 300, sortable: false });\n\n        columns.push({\n            field: 'SourceText',\n            width: 300,\n            sortable: false,\n            format: ctx => {\n                return outerHtml(Fluent('a')\n                    .addClass('source-text')\n                    .text(ctx.value || ''));\n            }\n        });\n\n        columns.push({\n            field: 'CustomText',\n            width: 300,\n            sortable: false,\n            format: ctx => outerHtml(Fluent('input')\n                .addClass('custom-text')\n                .attr('value', ctx.value)\n                .attr('type', 'text')\n                .attr('data-key', ctx.item.Key))\n        });\n\n        columns.push({\n            field: 'TargetText',\n            width: 300,\n            sortable: false,\n            format: ctx => outerHtml(Fluent('a')\n                .addClass('target-text')\n                .text(ctx.value || ''))\n        });\n\n        return columns;\n    }\n\n    protected createToolbarExtensions(): void {\n        super.createToolbarExtensions();\n\n        let opt: LookupEditorOptions = {\n            lookupKey: 'Administration.Language'\n        };\n\n        this.sourceLanguage = Widget.create({\n            type: LookupEditor,\n            element: el => el.appendTo(this.toolbar.element).attr('placeholder', '--- ' +\n                localText('Db.Administration.Translation.SourceLanguage') + ' ---'),\n            options: opt\n        });\n\n        this.sourceLanguage.changeSelect2(e => {\n            if (this.hasChanges) {\n                this.saveChanges(this.targetLanguageKey).then(() => this.refresh());\n            }\n            else {\n                this.refresh();\n            }\n        });\n\n        this.targetLanguage = Widget.create({\n            type: LookupEditor,\n            element: el => el.appendTo(this.toolbar.element).attr('placeholder', '--- ' +\n                localText('Db.Administration.Translation.TargetLanguage') + ' ---'),\n            options: opt\n        });\n\n        this.targetLanguage.changeSelect2(e => {\n            if (this.hasChanges) {\n                this.saveChanges(this.targetLanguageKey).then(() => this.refresh());\n            }\n            else {\n                this.refresh();\n            }\n        });\n    }\n\n    protected saveChanges(language: string): PromiseLike<any> {\n        var translations: { [key: string]: string } = {};\n        for (let item of this.getItems()) {\n            translations[item.Key] = item.CustomText;\n        }\n\n        return Promise.resolve(TranslationService.Update({\n            TargetLanguageID: language,\n            Translations: translations\n        })).then(() => {\n            this.hasChanges = false;\n            language = trimToNull(language) || 'invariant';\n            notifySuccess('User translations in \"' + language +\n                '\" language are saved to \"user.texts.' +\n                language + '.json\" ' + 'file under \"~/App_Data/texts/\"', '');\n        });\n    }\n\n    protected onViewSubmit(): boolean {\n        var request = this.view.params;\n        request.SourceLanguageID = this.sourceLanguage.value;\n        this.targetLanguageKey = this.targetLanguage.value || '';\n        request.TargetLanguageID = this.targetLanguageKey;\n        this.hasChanges = false;\n        return super.onViewSubmit();\n    }\n    \n    protected getButtons(): ToolButton[] {\n        return [{\n            title: localText('Db.Administration.Translation.SaveChangesButton'),\n            onClick: e => this.saveChanges(this.targetLanguageKey).then(() => this.refresh()),\n            cssClass: 'apply-changes-button'\n        }];\n    }\n\n    protected createQuickSearchInput() {\n        GridUtils.addQuickSearchInputCustom(this.toolbar.element,\n            (field, searchText) => {\n                this.searchText = searchText;\n                this.view.setItems(this.view.getItems(), true);\n            });\n    }\n\n    protected onViewFilter(item: TranslationItem) {\n        if (!super.onViewFilter(item)) {\n            return false;\n        }\n\n        if (!this.searchText) {\n            return true;\n        }\n\n        var sd = stripDiacritics;\n        var searching = sd(this.searchText).toLowerCase();\n\n        function match(str: string) {\n            if (!str)\n                return false;\n\n            return str.toLowerCase().indexOf(searching) >= 0;\n        }\n\n        return isEmptyOrNull(searching) || match(item.Key) || match(item.SourceText) ||\n            match(item.TargetText) || match(item.CustomText);\n    }\n\n    protected usePager() {\n        return false;\n    }\n}"],
  "mappings": "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",
  "names": ["import_corelib", "import_corelib", "_TranslationGrid_decorators", "_init", "_a", "_TranslationGrid", "TranslationService", "props", "e", "value", "row", "cell", "item", "done", "__name", "columns", "ctx", "opt", "el", "language", "translations", "request", "field", "searchText", "sd", "searching", "match", "str", "__decoratorStart", "__decorateElement", "__runInitializers", "TranslationGrid", "TranslationPage_default", "__name", "TranslationGrid"]
}

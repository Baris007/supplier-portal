{
  "version": 3,
  "sources": ["../../../../../Modules/Administration/Role/RolePage.ts", "../../../../../Modules/Administration/RolePermission/RolePermissionDialog.ts", "../../../../../Modules/Administration/Role/RoleDialog.ts", "../../../../../Modules/Administration/Role/RoleGrid.ts"],
  "sourcesContent": ["import { gridPageInit } from \"@serenity-is/corelib\";\r\nimport { RoleGrid } from \"./RoleGrid\";\n\nexport default () => gridPageInit(RoleGrid);", "import { Decorators, TemplatedDialog } from \"@serenity-is/corelib\";\nimport { format, getRemoteData, notifySuccess, localText } from \"@serenity-is/corelib\";\nimport { RolePermissionService, UserPermissionRow } from \"../\";\nimport { PermissionCheckEditor } from \"../UserPermission/PermissionCheckEditor\";\n\nexport class RolePermissionDialog extends TemplatedDialog<RolePermissionDialogOptions> {\n\n    private permissions: PermissionCheckEditor;\n\n    constructor(opt: RolePermissionDialogOptions) {\n        super(opt);\n\n        this.permissions = new PermissionCheckEditor({ element: this.byId('Permissions'), ... {\n            showRevoke: false\n        }});\n\n        RolePermissionService.List({\n            RoleID: this.options.roleID\n        }, response => {\n            this.permissions.value = response.Entities.map(x => (<UserPermissionRow>{ PermissionKey: x }));\n        });\n\n        this.permissions.implicitPermissions = getRemoteData('Administration.ImplicitPermissions');\n    }\n\n    protected getDialogOptions()  {\n        let opt = super.getDialogOptions();\n\n        opt.buttons = [\n            {\n                text: localText('Dialogs.OkButton'),\n                click: e => {\n                    RolePermissionService.Update({\n                        RoleID: this.options.roleID,\n                        Permissions: this.permissions.value.map(x => x.PermissionKey)\n                    }, response => {\n                        this.dialogClose();\n                        window.setTimeout(() => notifySuccess(localText('Site.RolePermissionDialog.SaveSuccess')), 0);\n                    });\n                }\n            }, {\n                text: localText('Dialogs.CancelButton'),\n                click: () => this.dialogClose()\n            }];\n\n        opt.title = format(localText('Site.RolePermissionDialog.DialogTitle'),\n            this.options.title);\n\n        return opt;\n    }\n\n    protected getTemplate(): string {\n        return '<div id=\"~_Permissions\"></div>';\n    }\n}\n\nexport interface RolePermissionDialogOptions {\n    roleID?: number;\n    title?: string;\n}", "\uFEFFimport { RoleRow, RoleForm, RoleService } from \"../\";\nimport { RolePermissionDialog } from \"../RolePermission/RolePermissionDialog\";\nimport { Texts } from \"../../ServerTypes/Texts\"\nimport { Decorators, EntityDialog } from \"@serenity-is/corelib\";\n\nconst editPermissions = \"edit-permissions\";\n\n@Decorators.registerClass('SupplierPortal.Administration.RoleDialog')\nexport class RoleDialog extends EntityDialog<RoleRow, any> {\n    protected getFormKey() { return RoleForm.formKey; }\n    protected getIdProperty() { return RoleRow.idProperty; }\n    protected getLocalTextPrefix() { return RoleRow.localTextPrefix; }\n    protected getNameProperty() { return RoleRow.nameProperty; }\n    protected getService() { return RoleService.baseUrl; }\n\n    protected form = new RoleForm(this.idPrefix);\n\n    protected getToolbarButtons()\n    {\n        let buttons = super.getToolbarButtons();\n\n        buttons.push({\n            title: Texts.Site.RolePermissionDialog.EditButton,\n            cssClass: editPermissions,\n            icon: 'fa-lock text-green',\n            onClick: () =>\n            {\n                new RolePermissionDialog({\n                    roleID: this.entity.RoleId,\n                    title: this.entity.RoleName\n                }).dialogOpen();\n            }\n        });\n\n        return buttons;\n    }\n\n    protected updateInterface() {\n        super.updateInterface();\n\n        this.toolbar.findButton(editPermissions).toggleClass(\"disabled\", this.isNewOrDeleted());\n    }\n}", "\uFEFFimport { RoleDialog } from \"./RoleDialog\";\nimport { RoleColumns, RoleRow, RoleService } from \"../\";\nimport { Decorators, EntityGrid } from \"@serenity-is/corelib\";\n\n@Decorators.registerClass('SupplierPortal.Administration.RoleGrid')\nexport class RoleGrid extends EntityGrid<RoleRow, any> {\n    protected getColumnsKey() { return RoleColumns.columnsKey; }\n    protected getDialogType() { return RoleDialog; }\n    protected getIdProperty() { return RoleRow.idProperty; }\n    protected getLocalTextPrefix() { return RoleRow.localTextPrefix; }\n    protected getService() { return RoleService.baseUrl; }\n\n    constructor(props: any) {\n        super(props);\n    }\n\n    protected getDefaultSortBy() {\n        return [RoleRow.Fields.RoleName];\n    }\n}"],
  "mappings": "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",
  "names": ["import_corelib", "import_corelib", "_RolePermissionDialog", "opt", "PermissionCheckEditor", "RolePermissionService", "response", "x", "__name", "e", "RolePermissionDialog", "import_corelib", "editPermissions", "_RoleDialog_decorators", "_init", "_a", "_RoleDialog", "RoleForm", "RoleRow", "RoleService", "buttons", "Texts", "__name", "RolePermissionDialog", "__decoratorStart", "__decorateElement", "__runInitializers", "RoleDialog", "import_corelib", "_RoleGrid_decorators", "_init", "_a", "_RoleGrid", "RoleColumns", "RoleDialog", "RoleRow", "RoleService", "props", "__decoratorStart", "__decorateElement", "__name", "__runInitializers", "RoleGrid", "RolePage_default", "__name", "RoleGrid"]
}

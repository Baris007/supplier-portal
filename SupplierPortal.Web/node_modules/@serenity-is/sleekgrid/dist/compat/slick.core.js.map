{
  "version": 3,
  "sources": ["../../src/core/index.ts", "../../src/core/base.ts", "../../src/core/column.ts", "../../src/core/editing.ts", "../../src/core/event.ts", "../../src/core/util.ts", "../../src/core/formatting.ts", "../../src/core/group.ts", "../../src/core/cellrange.ts"],
  "sourcesContent": ["export * from \"./base\";\nexport * from \"./column\";\nexport * from \"./editing\";\nexport * from \"./event\";\nexport * from \"./formatting\";\nexport * from \"./group\";\nexport * from \"./cellrange\";\nexport * from \"./util\";\n\n", "/***\n * A base class that all special / non-data rows (like Group and GroupTotals) derive from.\n */\nexport class NonDataRow {\n    __nonDataRow: boolean = true;\n}\n\nexport const preClickClassName = \"slick-edit-preclick\";", "import { EditorClass, ValidationResult } from \"./editing\";\nimport type { AsyncPostCleanup, AsyncPostRender, ColumnFormat, CompatFormatter } from \"./formatting\";\nimport { GroupTotals } from \"./group\";\n\nexport interface Column<TItem = any> {\n    asyncPostRender?: AsyncPostRender<TItem>;\n    asyncPostRenderCleanup?: AsyncPostCleanup<TItem>;\n    behavior?: any;\n    cannotTriggerInsert?: boolean;\n    cssClass?: string;\n    defaultSortAsc?: boolean;\n    editor?: EditorClass;\n    editorFixedDecimalPlaces?: number;\n    field?: string;\n    frozen?: boolean;\n    focusable?: boolean;\n    footerCssClass?: string;\n    format?: ColumnFormat<TItem>;\n    /** @deprecated */\n    formatter?: CompatFormatter<TItem>;\n    groupTotalsFormatter?: (p1?: GroupTotals<TItem>, p2?: Column<TItem>, grid?: unknown) => string;\n    headerCssClass?: string;\n    id?: string;\n    maxWidth?: any;\n    minWidth?: number;\n    name?: string;\n    nameIsHtml?: boolean;\n    previousWidth?: number;\n    referencedFields?: string[];\n    rerenderOnResize?: boolean;\n    resizable?: boolean;\n    selectable?: boolean;\n    sortable?: boolean;\n    sortOrder?: number;\n    toolTip?: string;\n    validator?: (value: any, editorArgs?: any) => ValidationResult;\n    visible?: boolean;\n    width?: number;\n}\n\nexport const columnDefaults: Partial<Column> = {\n    nameIsHtml: false,\n    resizable: true,\n    sortable: false,\n    minWidth: 30,\n    rerenderOnResize: false,\n    defaultSortAsc: true,\n    focusable: true,\n    selectable: true\n};\n\nexport interface ColumnMetadata<TItem = any> {\n    colspan: number | '*';\n    cssClasses?: string;\n    editor?: EditorClass;\n    format?: ColumnFormat<TItem>;\n    /** @deprecated */\n    formatter?: CompatFormatter<TItem>;\n}\n\nexport interface ColumnSort {\n    columnId: string;\n    sortAsc?: boolean;\n}\n\nexport interface ItemMetadata<TItem = any> {\n    cssClasses?: string;\n    columns?: { [key: string]: ColumnMetadata<TItem> };\n    focusable?: boolean;\n    format?: ColumnFormat<TItem>;\n    /** @deprecated */\n    formatter?: CompatFormatter<TItem>;\n    selectable?: boolean;\n}\n\nexport function initializeColumns(columns: Column[], defaults: Partial<Column<any>>) {\n    var usedIds: { [key: string]: boolean } = {};\n\n    for (var i = 0; i < columns.length; i++) {\n        var m = columns[i];\n\n        if (defaults != null) {\n            for (var k in defaults) {\n                if ((m as any)[k] === undefined)\n                    (m as any)[k] = (defaults as any)[k];\n            }\n        }\n\n        if (m.minWidth && m.width < m.minWidth)\n            m.width = m.minWidth;\n\n        if (m.maxWidth && m.width > m.maxWidth)\n            m.width = m.maxWidth;\n\n        if (m.id == null ||\n            usedIds[m.id]) {\n            const prefix = m.id != null && m.id.length ? m.id :\n                m.field != null ? m.field : ('col');\n            var x = 0;\n            while (usedIds[(m.id = prefix + (x == 0 ? \"\" : '_' + x.toString()))]) x++;\n        }\n\n        usedIds[m.id] = true;\n\n        if (m.name === void 0) {\n            m.name = titleize(m.field ?? m.id);\n            delete m.nameIsHtml;\n        }\n    }\n}\n\nexport function titleize(str: string) {\n    if (!str)\n        return str;\n\n    str = (\"\" + str).replace(/([A-Z]+)([A-Z][a-z])/, \"$1_$2\")\n        .replace(/([a-z\\d])([A-Z])/, \"$1_$2\")\n        .replace(/[-\\s]/, \"_\").toLowerCase();\n\n    return str.replace(/\\s/, '_').split('_').filter(x => x.length)\n        .map(x => x.charAt(0).toUpperCase() + x.substring(1).toLowerCase()).join(' ');\n}\n", "import { Column, ColumnMetadata } from \"./column\";\nimport { EventEmitter, IEventData } from \"./event\";\n\nexport interface Position {\n    bottom?: number;\n    height?: number;\n    left?: number;\n    right?: number;\n    top?: number;\n    visible?: boolean;\n    width?: number;\n}\n\nexport interface ValidationResult {\n    valid: boolean;\n    msg?: string;\n}\n\nexport interface RowCell {\n    row: number;\n    cell: number;\n}\n\nexport interface EditorHost {\n    getActiveCell(): RowCell;\n    navigateNext(): boolean;\n    navigatePrev(): boolean;\n    onCompositeEditorChange: EventEmitter<any>;\n}\n\ninterface CompositeEditorOptions {\n    formValues: any;\n}\n\nexport interface EditorOptions {\n    grid: EditorHost;\n    gridPosition?: Position;\n    position?: Position;\n    editorCellNavOnLRKeys?: boolean;\n    column?: Column;\n    columnMetaData?: ColumnMetadata<any>;\n    compositeEditorOptions?: CompositeEditorOptions;\n    container?: HTMLElement;\n    item?: any;\n    event?: IEventData;\n    commitChanges?: () => void,\n    cancelChanges?: () => void\n}\n\nexport interface EditorFactory {\n    getEditor(column: Column, row?: number): EditorClass;\n}\n\nexport interface EditCommand {\n    row: number;\n    cell: number;\n    editor: Editor;\n    serializedValue: any;\n    prevSerializedValue: any;\n    execute: () => void;\n    undo: () => void;\n}\n\nexport interface EditorClass {\n    new(options: EditorOptions): Editor;\n    suppressClearOnEdit?: boolean;\n}\n\nexport interface Editor {\n    destroy(): void;\n    applyValue(item: any, value: any): void;\n    focus(): void;\n    isValueChanged(): boolean;\n    keyCaptureList?: number[];\n    loadValue(value: any): void;\n    serializeValue(): any;\n    position?(pos: Position): void;\n    preClick?(): void;\n    hide?(): void;\n    show?(): void;\n    validate?(): ValidationResult;\n}\n\nexport interface EditController {\n    commitCurrentEdit(): boolean;\n    cancelCurrentEdit(): boolean;\n}\n\n/***\n * A locking helper to track the active edit controller and ensure that only a single controller\n * can be active at a time.  This prevents a whole class of state and validation synchronization\n * issues.  An edit controller (such as SleekGrid) can query if an active edit is in progress\n * and attempt a commit or cancel before proceeding.\n * @class EditorLock\n * @constructor\n */\nexport class EditorLock {\n    declare private activeEditController: EditController;\n\n    /***\n     * Returns true if a specified edit controller is active (has the edit lock).\n     * If the parameter is not specified, returns true if any edit controller is active.\n     * @method isActive\n     * @param editController {EditController}\n     * @return {Boolean}\n     */\n    isActive(editController?: EditController): boolean {\n        return (editController ? this.activeEditController === editController : this.activeEditController != null);\n    }\n\n    /***\n     * Sets the specified edit controller as the active edit controller (acquire edit lock).\n     * If another edit controller is already active, and exception will be thrown.\n     * @method activate\n     * @param editController {EditController} edit controller acquiring the lock\n     */\n    activate(editController: EditController) {\n        if (editController === this.activeEditController) { // already activated?\n            return;\n        }\n        if (this.activeEditController != null) {\n            throw \"SleekGrid.EditorLock.activate: an editController is still active, can't activate another editController\";\n        }\n        if (!editController.commitCurrentEdit) {\n            throw \"SleekGrid.EditorLock.activate: editController must implement .commitCurrentEdit()\";\n        }\n        if (!editController.cancelCurrentEdit) {\n            throw \"SleekGrid.EditorLock.activate: editController must implement .cancelCurrentEdit()\";\n        }\n        this.activeEditController = editController;\n    }\n\n    /***\n     * Unsets the specified edit controller as the active edit controller (release edit lock).\n     * If the specified edit controller is not the active one, an exception will be thrown.\n     * @method deactivate\n     * @param editController {EditController} edit controller releasing the lock\n     */\n    deactivate(editController: EditController) {\n        if (this.activeEditController !== editController) {\n            throw \"SleekGrid.EditorLock.deactivate: specified editController is not the currently active one\";\n        }\n        this.activeEditController = null;\n    }\n\n    /***\n     * Attempts to commit the current edit by calling \"commitCurrentEdit\" method on the active edit\n     * controller and returns whether the commit attempt was successful (commit may fail due to validation\n     * errors, etc.).  Edit controller's \"commitCurrentEdit\" must return true if the commit has succeeded\n     * and false otherwise.  If no edit controller is active, returns true.\n     * @method commitCurrentEdit\n     * @return {Boolean}\n     */\n    commitCurrentEdit(): boolean {\n        return (this.activeEditController ? this.activeEditController.commitCurrentEdit() : true);\n    }\n\n    /***\n     * Attempts to cancel the current edit by calling \"cancelCurrentEdit\" method on the active edit\n     * controller and returns whether the edit was successfully cancelled.  If no edit controller is\n     * active, returns true.\n     * @method cancelCurrentEdit\n     * @return {Boolean}\n     */\n    cancelCurrentEdit(): boolean {\n        return (this.activeEditController ? this.activeEditController.cancelCurrentEdit() : true);\n    }\n}\n\n/***\n * A global singleton editor lock.\n * @class GlobalEditorLock\n * @static\n * @constructor\n */\nexport const GlobalEditorLock = new EditorLock();\n", "export interface IEventData {\n    readonly type?: string;\n    currentTarget?: EventTarget | null;\n    target?: EventTarget | null;\n    originalEvent?: any;\n    defaultPrevented?: boolean;\n    preventDefault?(): void;\n    stopPropagation?(): void;\n    stopImmediatePropagation?(): void;\n    isDefaultPrevented?(): boolean;\n    isImmediatePropagationStopped?(): boolean;\n    isPropagationStopped?(): boolean;\n}\n\n/***\n * An event object for passing data to event handlers and letting them control propagation.\n * <p>This is pretty much identical to how W3C and jQuery implement events.</p>\n */\nexport class EventData implements IEventData {\n    private _isPropagationStopped = false;\n    private _isImmediatePropagationStopped = false;\n\n    /***\n     * Stops event from propagating up the DOM tree.\n     * @method stopPropagation\n     */\n    stopPropagation() {\n        this._isPropagationStopped = true;\n    }\n\n    /***\n     * Returns whether stopPropagation was called on this event object.\n     */\n    isPropagationStopped(): boolean {\n        return this._isPropagationStopped;\n    }\n\n    /***\n     * Prevents the rest of the handlers from being executed.\n     */\n    stopImmediatePropagation() {\n        this._isImmediatePropagationStopped = true;\n    }\n\n    /***\n     * Returns whether stopImmediatePropagation was called on this event object.\\\n     */\n    isImmediatePropagationStopped(): boolean {\n        return this._isImmediatePropagationStopped;\n    }\n}\n\n/***\n * A simple publisher-subscriber implementation.\n */\nexport class EventEmitter<TArgs = any, TEventData extends IEventData = IEventData> {\n\n    private _handlers: ((e: TEventData, args: TArgs) => void)[] = [];\n\n    /***\n     * Adds an event handler to be called when the event is fired.\n     * <p>Event handler will receive two arguments - an <code>EventData</code> and the <code>data</code>\n     * object the event was fired with.<p>\n     * @method subscribe\n     * @param fn {Function} Event handler.\n     */\n    subscribe(fn: ((e: TEventData, args: TArgs) => void)) {\n        this._handlers.push(fn);\n    }\n\n    /***\n     * Removes an event handler added with <code>subscribe(fn)</code>.\n     * @method unsubscribe\n     * @param fn {Function} Event handler to be removed.\n     */\n    unsubscribe(fn: ((e: TEventData, args: TArgs) => void)) {\n        for (var i = this._handlers.length - 1; i >= 0; i--) {\n            if (this._handlers[i] === fn) {\n                this._handlers.splice(i, 1);\n            }\n        }\n    }\n\n    /***\n     * Fires an event notifying all subscribers.\n     * @param args {Object} Additional data object to be passed to all handlers.\n     * @param e {EventData}\n     *      Optional.\n     *      An <code>EventData</code> object to be passed to all handlers.\n     *      For DOM events, an existing W3C/jQuery event object can be passed in.\n     * @param scope {Object}\n     *      Optional.\n     *      The scope (\"this\") within which the handler will be executed.\n     *      If not specified, the scope will be set to the <code>Event</code> instance.\n     */\n    notify(args?: any, e?: TEventData, scope?: object) {\n        e = patchEvent(e) || new EventData() as any;\n        scope = scope || this;\n\n        var returnValue;\n        for (var i = 0; i < this._handlers.length && !(e.isPropagationStopped() || e.isImmediatePropagationStopped()); i++) {\n            returnValue = this._handlers[i].call(scope, e, args);\n        }\n\n        return returnValue;\n    }\n\n    clear() {\n        this._handlers = [];\n    }\n}\n\ninterface EventSubscriberEntry<TArgs = any, TEventData extends IEventData = IEventData> {\n    event: EventEmitter<TArgs, TEventData>;\n    handler: ((e: TEventData, args: TArgs) => void);\n}\n\nexport class EventSubscriber<TArgs = any, TEventData extends IEventData = IEventData>  {\n    private _handlers: EventSubscriberEntry<TArgs, TEventData>[] = [];\n\n    subscribe(event: EventEmitter<TArgs, TEventData>, handler: ((e: TEventData, args: TArgs) => void)): this {\n        this._handlers.push({\n            event: event,\n            handler: handler\n        });\n        event.subscribe(handler);\n\n        return this;\n    }\n\n    unsubscribe(event: EventEmitter<TArgs, TEventData>, handler: ((e: TEventData, args: TArgs) => void)): this {\n        var i = this._handlers.length;\n        while (i--) {\n            if (this._handlers[i].event === event &&\n                this._handlers[i].handler === handler) {\n                this._handlers.splice(i, 1);\n                event.unsubscribe(handler);\n                return this;\n            }\n        }\n\n        return this;\n    }\n\n    unsubscribeAll(): EventSubscriber<TArgs, TEventData> {\n        var i = this._handlers.length;\n        while (i--) {\n            this._handlers[i].event.unsubscribe(this._handlers[i].handler);\n        }\n        this._handlers = [];\n\n        return this;  // allow chaining\n    }\n}\n\n/** @deprecated */\nexport const keyCode = {\n    BACKSPACE: 8,\n    DELETE: 46,\n    DOWN: 40,\n    END: 35,\n    ENTER: 13,\n    ESCAPE: 27,\n    HOME: 36,\n    INSERT: 45,\n    LEFT: 37,\n    PAGEDOWN: 34,\n    PAGEUP: 33,\n    RIGHT: 39,\n    TAB: 9,\n    UP: 38\n}\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// patches event so that it has methods jQuery event objects provides, for backward compatibility when jQuery is not loaded\nexport function patchEvent(e: IEventData) {\n    if (e == null)\n        return e;\n\n    if (!e.isDefaultPrevented && e.preventDefault)\n        e.isDefaultPrevented = function() { return this.defaultPrevented; }\n\n    var org1: () => void, org2: () => void;\n    if (!e.isImmediatePropagationStopped && (org1 = e.stopImmediatePropagation)) {\n        e.isImmediatePropagationStopped = returnFalse;\n        e.stopImmediatePropagation = function() { this.isImmediatePropagationStopped = returnTrue; org1.call(this); }\n    }\n\n    if (!e.isPropagationStopped && (org2 = e.stopPropagation)) {\n        e.isPropagationStopped = returnFalse;\n        e.stopPropagation = function() { this.isPropagationStopped = returnTrue; org2.call(this); }\n    }\n\n    return e;\n}\n", "export function addClass(el: Element, cls: string) {\n    if (cls == null || !cls.length)\n        return;\n\n    if (cls.indexOf(' ') >= 0) {\n        var arr = cls.split(' ').map(x => x.trim()).filter(x => x.length);\n        for (var a of arr)\n            el.classList.add(a);\n    }\n    else\n        el.classList.add(cls);\n}\n\nconst esc: Record<string, string> = {\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": \"&apos;\",\n    '&': '&amp;',\n}\n\nfunction escFunc(a: string) {\n    return esc[a];\n}\n\nexport function escapeHtml(s: any) {\n    if (!arguments.length && this) {\n        s = this.value;\n    }\n\n    if (s == null)\n        return '';\n\n    if (typeof s !== \"string\")\n        s = \"\" + s;\n\n    return s.replace(/[<>\"'&]/g, escFunc)\n}\n\nexport function basicRegexSanitizer(dirtyHtml: string) {\n    return (dirtyHtml ?? \"\").replace(/(\\b)(on[a-z]+)(\\s*)=|javascript:([^>]*)[^>]*|(<\\s*)(\\/*)script([<>]*).*(<\\s*)(\\/*)script(>*)|(&lt;)(\\/*)(script|script defer)(.*)(&gt;|&gt;\">)/gi, '');\n}\n\nexport function disableSelection(target: HTMLElement) {\n    if (target) {\n        target.setAttribute('unselectable', 'on');\n        target.style.userSelect = \"none\";\n        target.addEventListener('selectstart', () => false);\n    }\n}\n\nexport function removeClass(el: Element, cls: string) {\n    if (cls == null || !cls.length)\n        return;\n\n    if (cls.indexOf(' ') >= 0) {\n        var arr = cls.split(' ').map(x => x.trim()).filter(x => x.length);\n        for (var a of arr)\n            el.classList.remove(a);\n    }\n    else\n        el.classList.remove(cls);\n}\n\nexport function H<K extends keyof HTMLElementTagNameMap>(tag: K, attr?: { ref?: (el?: HTMLElementTagNameMap[K]) => void, [key: string]: string | number | boolean | ((el?: HTMLElementTagNameMap[K]) => void) | null | undefined }, ...children: (string | Node)[]): HTMLElementTagNameMap[K] {\n    var el = document.createElement(tag);\n    var k: string, v: any, c: Node | string;\n    if (attr) {\n        for (k in attr) {\n            v = attr[k];\n            if (v != null && v !== false) {\n                if (k === \"ref\" && typeof v === \"function\") {\n                    (v as any)(el);\n                    continue;\n                }\n\n                var key = k === \"className\" ? \"class\" : k;\n                el.setAttribute(key, v === true ? '' : v as string);\n            }\n        }\n    }\n\n    if (children && children.length)\n        el.append(...children);\n\n    return el;\n}\n\nexport function spacerDiv(width: string): HTMLDivElement {\n    return H('div', { style: 'display:block;height:1px;position:absolute;top:0;left:0;', width });\n}\n\nexport function parsePx(str: string) {\n    var value = parseFloat(str);\n    if (isNaN(value))\n        return 0;\n    return value;\n}\n", "import type { Column } from \"./column\";\nimport { addClass, escapeHtml, removeClass } from \"./util\";\n\n/**\n * Context object for column formatters. It provides access to the\n * current cell value, row index, column index, etc.\n * Use grid.getFormatterContext() to create a new instance.\n */\nexport interface FormatterContext<TItem = any> {\n\n    /**\n     * Additional attributes to be added to the cell node.\n     */\n    addAttrs?: { [key: string]: string; };\n\n    /**\n     * Additional classes to be added to the cell node.\n     */\n    addClass?: string;\n\n    /**\n     * Returns html escaped ctx.value if called without arguments.\n     * prefer this over ctx.value to avoid html injection attacks!\n     */\n    escape(value?: any): string;\n\n    /**\n     * The row index of the cell.\n     */\n    row?: number;\n\n    /**\n     * The column index of the cell.\n     */\n    cell?: number;\n\n    /**\n     * The column definition of the cell.\n     */\n    column?: Column<TItem>;\n\n    /**\n     * The grid instance.\n     */\n    grid?: any;\n\n    /**\n     * The item of the row.\n     */\n    item?: TItem;\n\n    /**\n     * Tooltip text to be added to the cell node as title attribute.\n     */\n    tooltip?: string;\n\n    /** when returning a formatter result, prefer ctx.escape() to avoid script injection attacks! */\n    value?: any;\n}\n\nexport type FormatterResult = (string | Element | DocumentFragment);\nexport type ColumnFormat<TItem = any> = (ctx: FormatterContext<TItem>) => FormatterResult;\n\nexport interface CompatFormatterResult {\n    addClasses?: string;\n    text?: FormatterResult;\n    toolTip?: string;\n}\n\nexport type CompatFormatter<TItem = any> = (row: number, cell: number, value: any, column: Column<TItem>, item: TItem, grid?: any) => string | CompatFormatterResult;\n\nexport interface FormatterFactory<TItem = any> {\n    getFormat?(column: Column<TItem>): ColumnFormat<TItem>;\n    getFormatter?(column: Column<TItem>): CompatFormatter<TItem>;\n}\n\nexport type AsyncPostRender<TItem = any> = (cellNode: HTMLElement, row: number, item: TItem, column: Column<TItem>, reRender: boolean) => void;\nexport type AsyncPostCleanup<TItem = any> = (cellNode: HTMLElement, row?: number, column?: Column<TItem>) => void;\n\nexport type CellStylesHash = { [row: number]: { [columnId: string]: string } }\n\nexport function defaultColumnFormat(ctx: FormatterContext) {\n    return escapeHtml(ctx.value);\n}\n\nexport function convertCompatFormatter(compatFormatter: CompatFormatter): ColumnFormat {\n    if (compatFormatter == null)\n        return null;\n\n    return function(ctx: FormatterContext): FormatterResult {\n        var fmtResult = compatFormatter(ctx.row, ctx.cell, ctx.value, ctx.column, ctx.item, ctx.grid);\n        if (fmtResult != null && typeof fmtResult !== 'string' && Object.prototype.toString.call(fmtResult) === '[object Object]') {\n            ctx.addClass = fmtResult.addClasses;\n            ctx.tooltip = fmtResult.toolTip;\n            return fmtResult.text;\n        }\n        return fmtResult as string;\n    }\n}\n\nexport function applyFormatterResultToCellNode(ctx: FormatterContext, html: FormatterResult, node: HTMLElement) {\n    var oldFmtAtt = node.dataset.fmtatt as string;\n    if (oldFmtAtt?.length > 0) {\n        for (var k of oldFmtAtt.split(','))\n            node.removeAttribute(k);\n        delete node.dataset.fmtatt;\n    }\n\n    var oldFmtCls = node.dataset.fmtcls;\n    if (oldFmtCls?.length && (ctx.addClass != oldFmtCls)) {\n        removeClass(node, oldFmtCls);\n        if (!ctx.addClass?.length)\n            delete node.dataset.fmtcls;\n    }\n\n    var oldTooltip = node.getAttribute('tooltip');\n    if (oldTooltip != null && ctx.tooltip != oldTooltip)\n        node.removeAttribute('tooltip');\n\n    if (ctx.tooltip !== undefined && oldTooltip != ctx.tooltip)\n        node.setAttribute('tooltip', ctx.tooltip);\n\n    if (html == void 0)\n        node.innerHTML = \"\";\n    else if (html instanceof Node) {\n        node.appendChild(html);\n    }\n    else\n        node.innerHTML = \"\" + html;\n\n    if (ctx.addAttrs != null) {\n        var keys = Object.keys(ctx.addAttrs);\n        if (keys.length) {\n            for (var k of keys) {\n                node.setAttribute(k, ctx.addAttrs[k]);\n            }\n            node.dataset.fmtatt = keys.join(',');\n        }\n    }\n\n    if (ctx.addClass?.length) {\n        addClass(node, ctx.addClass);\n        node.dataset.fmtcls = ctx.addClass;\n    }\n}\n", "import { NonDataRow } from \"./base\";\n\n/***\n * Information about a group of rows.\n */\nexport class Group<TEntity = any> extends NonDataRow {\n    readonly __group = true;\n\n    /**\n     * Grouping level, starting with 0.\n     * @property level\n     * @type {Number}\n     */\n    level: number = 0;\n\n    /***\n     * Number of rows in the group.\n     * @property count\n     * @type {Number}\n     */\n    count: number = 0;\n\n    /***\n     * Grouping value.\n     * @property value\n     * @type {Object}\n     */\n    value: any;\n\n    /***\n     * Formatted display value of the group.\n     * @property title\n     * @type {String}\n     */\n    title: string;\n\n    /***\n     * Whether a group is collapsed.\n     * @property collapsed\n     * @type {Boolean}\n     */\n    collapsed: boolean = false;\n\n    /***\n     * GroupTotals, if any.\n     * @property totals\n     * @type {GroupTotals}\n     */\n    totals: GroupTotals<TEntity>;\n\n    /**\n     * Rows that are part of the group.\n     * @property rows\n     * @type {Array}\n     */\n    rows: TEntity[] = [];\n\n    /**\n     * Sub-groups that are part of the group.\n     * @property groups\n     * @type {Array}\n     */\n    groups: Group<TEntity>[];\n\n    /**\n     * A unique key used to identify the group.  This key can be used in calls to DataView\n     * collapseGroup() or expandGroup().\n     * @property groupingKey\n     * @type {Object}\n     */\n    groupingKey: string;\n\n\n  /***\n   * Compares two Group instances.\n   * @method equals\n   * @return {Boolean}\n   * @param group {Group} Group instance to compare to.\n   */\n    equals(group: Group): boolean {\n        return this.value === group.value &&\n            this.count === group.count &&\n            this.collapsed === group.collapsed &&\n            this.title === group.title;\n    }\n}\n\n/***\n * Information about group totals.\n * An instance of GroupTotals will be created for each totals row and passed to the aggregators\n * so that they can store arbitrary data in it.  That data can later be accessed by group totals\n * formatters during the display.\n * @class GroupTotals\n * @extends NonDataRow\n * @constructor\n */\n export class GroupTotals<TEntity = any> extends NonDataRow {\n\n    readonly __groupTotals = true;\n\n    /***\n     * Parent Group.\n     * @param group\n     * @type {Group}\n     */\n    group: Group<TEntity>;\n\n    /***\n     * Whether the totals have been fully initialized / calculated.\n     * Will be set to false for lazy-calculated group totals.\n     * @param initialized\n     * @type {Boolean}\n     */\n    initialized: boolean = false;\n\n    /**\n     * Contains sum\n     */\n    sum?: number;\n\n    /**\n     * Contains avg\n     */\n    avg?: number;\n\n    /**\n     * Contains min\n     */\n    min?: any;\n\n    /**\n     * Contains max\n     */\n    max?: any;\n}\n", "/*\n * A structure containing a range of cells.\n * @param fromRow {Integer} Starting row.\n * @param fromCell {Integer} Starting cell.\n * @param toRow {Integer} Optional. Ending row. Defaults to <code>fromRow</code>.\n * @param toCell {Integer} Optional. Ending cell. Defaults to <code>fromCell</code>.\n */\nexport class CellRange {\n\n    declare public fromRow: number;\n    declare public fromCell: number;\n    declare public toRow: number;\n    declare public toCell: number;\n\n    constructor(fromRow: number, fromCell: number, toRow?: number, toCell?: number) {\n        if (toRow === undefined && toCell === undefined) {\n            toRow = fromRow;\n            toCell = fromCell;\n        }\n\n        this.fromRow = Math.min(fromRow, toRow);\n        this.fromCell = Math.min(fromCell, toCell);\n        this.toRow = Math.max(fromRow, toRow);\n        this.toCell = Math.max(fromCell, toCell);\n    }\n\n    /***\n     * Returns whether a range represents a single row.\n     */\n    isSingleRow(): boolean {\n        return this.fromRow == this.toRow;\n    }\n\n    /***\n     * Returns whether a range represents a single cell.\n     */\n    isSingleCell(): boolean {\n        return this.fromRow == this.toRow && this.fromCell == this.toCell;\n    }\n\n    /***\n     * Returns whether a range contains a given cell.\n     */\n    contains(row: number, cell: number): boolean {\n        return row >= this.fromRow && row <= this.toRow &&\n            cell >= this.fromCell && cell <= this.toCell;\n    }\n\n    /***\n     * Returns a readable representation of a range.\n     */\n    toString(): string {\n        if (this.isSingleCell()) {\n            return \"(\" + this.fromRow + \":\" + this.fromCell + \")\";\n        }\n        else {\n            return \"(\" + this.fromRow + \":\" + this.fromCell + \" - \" + this.toRow + \":\" + this.toCell + \")\";\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": []
}

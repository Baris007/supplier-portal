{
  "version": 3,
  "sources": ["../../src/data/groupitemmetadataprovider.ts", "global-externals:_"],
  "sourcesContent": ["import { Column, ColumnFormat, CompatFormatter, convertCompatFormatter, FormatterContext, Group, GroupTotals, ItemMetadata } from \"../core\";\nimport { ArgsCell, Grid } from \"../grid\";\n\nexport interface GroupItemMetadataProviderOptions {\n    enableExpandCollapse?: boolean;\n    groupCellCssClass?: string;\n    groupCssClass?: string;\n    groupIndentation?: number;\n    groupFocusable?: boolean;\n    groupFormat?: ColumnFormat<Group>;\n    groupFormatter?: CompatFormatter<Group>;\n    groupLevelPrefix?: string;\n    groupRowTotals?: boolean;\n    groupTitleCssClass?: string;\n    hasSummaryType?: (column: Column) => boolean;\n    toggleCssClass?: string;\n    toggleExpandedCssClass?: string;\n    toggleCollapsedCssClass?: string;\n    totalsCssClass?: string;\n    totalsFocusable?: boolean;\n    totalsFormat?: ColumnFormat<GroupTotals>;\n    totalsFormatter?: CompatFormatter<GroupTotals>;\n}\n\nexport class GroupItemMetadataProvider {\n    declare protected grid: Grid;\n    declare private options: GroupItemMetadataProviderOptions;\n\n    constructor(opt?: GroupItemMetadataProviderOptions) {\n        this.options = Object.assign({}, GroupItemMetadataProvider.defaults, opt);\n        this.options.groupFormat ??= opt?.groupFormatter ? convertCompatFormatter(opt.groupFormatter) :\n            ctx => GroupItemMetadataProvider.defaultGroupFormat(ctx, this.options);\n        this.options.totalsFormat ??= opt?.totalsFormatter ? convertCompatFormatter(opt.totalsFormatter) :\n            ctx => GroupItemMetadataProvider.defaultTotalsFormat(ctx, this.grid);\n    }\n\n    public static readonly defaults: GroupItemMetadataProviderOptions = {\n        enableExpandCollapse: true,\n        groupCellCssClass: \"slick-group-cell\",\n        groupCssClass: \"slick-group\",\n        groupFocusable: true,\n        groupIndentation: 15,\n        groupLevelPrefix: \"slick-group-level-\",\n        groupTitleCssClass: \"slick-group-title\",\n        hasSummaryType: (col: any) => col.summaryType && col.summaryType != -1,\n        totalsCssClass: \"slick-group-totals\",\n        toggleCssClass: \"slick-group-toggle\",\n        toggleCollapsedCssClass: \"collapsed\",\n        toggleExpandedCssClass: \"expanded\",\n        totalsFocusable: false\n    }\n\n    public static defaultGroupFormat(ctx: FormatterContext, opt?: GroupItemMetadataProviderOptions) {\n        opt ??= GroupItemMetadataProvider.defaults;\n        let item = ctx.item as Group;\n        if (!opt.enableExpandCollapse)\n            return item?.title;\n        let indentation = item.level * opt.groupIndentation;\n        return `<span class=\"${ctx.escape(opt.toggleCssClass + \" \" + (item.collapsed ? opt.toggleCollapsedCssClass : opt.toggleExpandedCssClass))}\" style=\"margin-left: ${indentation}px\">\n<span class=\"${ctx.escape(opt.groupTitleCssClass)}\" level=\"${ctx.escape(item.level)}\">${item.title}</span>`;\n    }\n\n    public static defaultTotalsFormat(ctx: FormatterContext, grid?: Grid): string {\n        var item = ctx.item as GroupTotals;\n        if (!item.__groupTotals && (item as any).totals)\n            item = (item as any).totals;\n        return (ctx.column?.groupTotalsFormatter?.(item, ctx.column)) ??\n            ((grid ?? ctx.grid)?.groupTotalsFormatter?.(item, ctx.column)) ?? \"\";\n    }\n\n    init(grid: Grid) {\n        this.grid = grid;\n        grid.onClick.subscribe(this.handleGridClick);\n        grid.onKeyDown.subscribe(this.handleGridKeyDown);\n    }\n\n    readonly pluginName = \"GroupItemMetadataProvider\";\n\n    destroy() {\n        if (this.grid) {\n            this.grid.onClick?.unsubscribe(this.handleGridClick);\n            this.grid.onKeyDown?.unsubscribe(this.handleGridKeyDown);\n        }\n    }\n\n    getOptions() {\n        return this.options;\n    }\n\n    setOptions(value: GroupItemMetadataProviderOptions) {\n        Object.assign(this.options, value);\n    }\n\n    handleGridClick = (e: MouseEvent, args: ArgsCell) => {\n        let grid = args?.grid ?? this.grid;\n        if (!grid)\n            return;\n        var item = grid.getDataItem(args.row);\n        if (!item ||\n            !(item instanceof Group) ||\n            !this.options.toggleCssClass ||\n            !(e.target as HTMLElement).classList.contains(this.options.toggleCssClass))\n            return;\n\n        e.stopImmediatePropagation();\n        e.preventDefault();\n\n        var range = grid.getRenderedRange();\n        grid.getData().setRefreshHints?.({\n            ignoreDiffsBefore: range.top,\n            ignoreDiffsAfter: range.bottom + 1\n        });\n\n        if (item.collapsed)\n            grid.getData().expandGroup?.(item.groupingKey);\n        else\n            grid.getData().collapseGroup?.(item.groupingKey);\n    }\n\n    handleGridKeyDown = (e: KeyboardEvent, args: ArgsCell) => {\n        if (!this.options.enableExpandCollapse ||\n            (e.key !== \" \" && e.key !== \"-\" && e.key !== \"+\"))\n            return;\n\n        let grid = args?.grid ?? this.grid;\n        if (!grid)\n            return;\n\n        var activeCell = grid.getActiveCell();\n        if (!activeCell)\n            return;\n\n        var item = grid.getDataItem(activeCell.row);\n        if (!item || !(item instanceof Group))\n            return;\n\n        e.stopImmediatePropagation();\n        e.preventDefault();\n\n        if ((e.key == \"+\" && !item.collapsed) ||\n            (e.key == \"-\" && item.collapsed))\n            return;\n\n        var range = (grid.getRenderedRange as any)();\n        grid.getData().setRefreshHints?.({\n            ignoreDiffsBefore: range.top,\n            ignoreDiffsAfter: range.bottom + 1\n        });\n\n        if (item.collapsed)\n            grid.getData().expandGroup?.(item.groupingKey);\n        else\n            grid.getData().collapseGroup?.(item.groupingKey);\n    }\n\n    groupCellPosition = () => {\n\n        const result = {\n            cell: 0,\n            colspan: <\"*\" | number>\"*\"\n        }\n\n        if (!this.options.groupRowTotals ||\n            !this.grid) {\n            return result;\n        }\n\n        var cols = this.grid.getColumns();\n        var col1: Column;\n        for (var idx = 0; idx < cols.length; idx++) {\n            col1 = cols[idx];\n            if (!this.options.hasSummaryType?.(cols[idx])) {\n                result.cell = idx;\n                break;\n            }\n        }\n\n        result.colspan = 0;\n        for (var idx = result.cell + 1; idx < cols.length; idx++) {\n            var col2 = cols[idx];\n            if (!this.options.hasSummaryType?.(col2) &&\n                (!!(col1?.frozen) === !!(col2?.frozen))) {\n                result.colspan++;\n            }\n            else\n                break;\n        }\n\n        result.colspan = Math.max(1, result.colspan);\n        return result;\n    }\n\n    getGroupRowMetadata: ((item: Group) => ItemMetadata) = (item) => {\n\n        const opt = this.options;\n        const gcp = this.groupCellPosition();\n        const result: ItemMetadata = {\n            selectable: false,\n            focusable: opt.groupFocusable,\n            cssClasses: opt.groupCssClass + \" \" + opt.groupLevelPrefix + item?.level,\n            columns: {\n                [gcp.cell]: {\n                    colspan: gcp.colspan,\n                    cssClasses: opt.groupCellCssClass,\n                    format: opt.groupFormat,\n                    editor: null\n                }\n            }\n        };\n\n        if (opt.groupRowTotals)\n            result.format = opt.totalsFormat;\n\n        return result;\n    }\n\n    getTotalsRowMetadata: ((item: GroupTotals) => ItemMetadata) = (item) => {\n        const opt = this.options;\n        return {\n          selectable: false,\n          focusable: opt.totalsFocusable,\n          cssClasses: opt.totalsCssClass + \" \" + opt.groupLevelPrefix + item?.group?.level,\n          format: opt.totalsFormat,\n          editor: null\n        };\n      }\n\n}\n", "const { convertCompatFormatter, Group } = Slick;export {\n     convertCompatFormatter, Group\n};"],
  "mappings": "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",
  "names": []
}

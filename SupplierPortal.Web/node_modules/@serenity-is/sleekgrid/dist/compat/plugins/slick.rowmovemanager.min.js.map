{
  "version": 3,
  "sources": ["../../../src/plugins/rowmovemanager.ts", "global-externals:_"],
  "sourcesContent": ["import { EventEmitter, EventSubscriber, H } from \"../core\";\nimport { Grid, IPlugin } from \"../grid\";\n\nexport interface RowMoveManagerOptions {\n    cancelEditOnDrag?: boolean;\n}\n\ninterface RowMoveManagerDragData {\n    selectedRows: number[],\n    selectionProxy: HTMLDivElement,\n    guide: HTMLDivElement,\n    insertBefore: number,\n    canMove: boolean\n}\n\ninterface ArgsMoveRows {\n    rows: number[];\n    insertBefore: number;\n}\n\nexport class RowMoveManager implements IPlugin {\n    declare private grid: Grid;\n    declare private options: RowMoveManagerOptions;\n    declare private dragging: boolean;\n    private handler = new EventSubscriber();\n    onBeforeMoveRows = new EventEmitter<ArgsMoveRows>();\n    onMoveRows = new EventEmitter<ArgsMoveRows>();\n\n    constructor(options?: RowMoveManagerOptions) {\n        this.options = Object.assign({}, RowMoveManager.defaults, options);\n    }\n\n    public static readonly defaults: RowMoveManagerOptions = {\n        cancelEditOnDrag: false\n    }\n\n    init(grid: Grid) {\n        this.grid = grid;\n        this.handler.subscribe(grid.onDragInit, this.handleDragInit.bind(this))\n            .subscribe(grid.onDragStart, this.handleDragStart.bind(this))\n            .subscribe(grid.onDrag, this.handleDrag.bind(this))\n            .subscribe(grid.onDragEnd, this.handleDragEnd.bind(this));\n    }\n\n    destroy() {\n        this.handler?.unsubscribeAll();\n    }\n\n    private handleDragInit(e: UIEvent) {\n        // prevent the grid from cancelling drag'n'drop by default\n        e.stopImmediatePropagation();\n    }\n\n    private handleDragStart(e: UIEvent, dd: RowMoveManagerDragData) {\n        let cell = this.grid.getCellFromEvent(e);\n\n        if (this.options.cancelEditOnDrag && this.grid.getEditorLock().isActive()) {\n            this.grid.getEditorLock().cancelCurrentEdit();\n        }\n\n        if (this.grid.getEditorLock().isActive() ||\n            !/move|selectAndMove/.test(this.grid.getColumns()[cell.cell].behavior)) {\n            return false;\n        }\n\n        this.dragging = true;\n        e.stopImmediatePropagation();\n\n        let selectedRows = this.grid.getSelectedRows();\n\n        if (selectedRows.length == 0 || selectedRows.indexOf(cell.row) == -1) {\n            selectedRows = [cell.row];\n            this.grid.setSelectedRows(selectedRows);\n        }\n\n        let rowHeight = this.grid.getOptions().rowHeight;\n\n        dd.selectedRows = selectedRows;\n        let canvas = this.grid.getCanvasNode();\n        dd.selectionProxy = canvas.appendChild(H('div', {\n            'class': 'slick-reorder-proxy',\n            'style': `position: absolute; z-index: 9999; width: ${canvas.clientWidth}px; height: ${rowHeight * selectedRows.length}px`\n        }));\n        dd.guide = canvas.appendChild(H('div', {\n            'class': 'slick-reorder-guide',\n            'style': `position: absolute; z-index: 99998; width: ${canvas.clientWidth}px; top: -1000`\n        }));\n\n        dd.insertBefore = -1;\n    }\n\n    private handleDrag(e: UIEvent, dd: RowMoveManagerDragData) {\n        if (!this.dragging)\n            return;\n\n        e.stopImmediatePropagation();\n        let canvas = this.grid.getCanvasNode();\n\n        let box = canvas.getBoundingClientRect();\n        let docElem = document.documentElement;\n        let canvasTop = box.top + window.scrollY - docElem.clientTop;\n\n        let top = (e as any).pageY - canvasTop;\n        dd.selectionProxy.style.top = (top - 5) + 'px';\n\n        let insertBefore = Math.max(0, Math.min(Math.round(top / this.grid.getOptions().rowHeight), this.grid.getDataLength()));\n        if (insertBefore !== dd.insertBefore) {\n            let eventData = {\n                rows: dd.selectedRows,\n                insertBefore: insertBefore\n            };\n\n            if (this.onBeforeMoveRows.notify(eventData) === false) {\n                dd.guide.style.top = \"-1000\";\n                dd.canMove = false;\n            } else {\n                dd.guide.style.top = (insertBefore * this.grid.getOptions().rowHeight) + 'px';\n                dd.canMove = true;\n            }\n\n            dd.insertBefore = insertBefore;\n        }\n    }\n\n    private handleDragEnd(e: UIEvent, dd: RowMoveManagerDragData) {\n        if (!this.dragging)\n            return;\n\n        this.dragging = false;\n        e.stopImmediatePropagation();\n\n        dd.guide.remove();\n        dd.selectionProxy.remove();\n\n        if (dd.canMove) {\n            let eventData = {\n                rows: dd.selectedRows,\n                insertBefore: dd.insertBefore\n            };\n            // TODO: _grid.remapCellCssClasses ?\n            this.onMoveRows.notify(eventData);\n        }\n    }\n}\n", "const { EventEmitter, EventSubscriber, H } = Slick;export {\n     EventEmitter, EventSubscriber, H\n};"],
  "mappings": "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",
  "names": ["rowmovemanager_exports", "__export", "RowMoveManager", "EventEmitter", "EventSubscriber", "H", "_RowMoveManager", "options", "EventSubscriber", "EventEmitter", "grid", "_a", "dd", "cell", "selectedRows", "rowHeight", "canvas", "H", "box", "docElem", "canvasTop", "top", "insertBefore", "eventData", "RowMoveManager"]
}

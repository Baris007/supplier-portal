{
  "version": 3,
  "sources": ["../../../src/plugins/rowmovemanager.ts", "global-externals:_"],
  "sourcesContent": ["import { EventEmitter, EventSubscriber, H } from \"../core\";\nimport { Grid, IPlugin } from \"../grid\";\n\nexport interface RowMoveManagerOptions {\n    cancelEditOnDrag?: boolean;\n}\n\ninterface RowMoveManagerDragData {\n    selectedRows: number[],\n    selectionProxy: HTMLDivElement,\n    guide: HTMLDivElement,\n    insertBefore: number,\n    canMove: boolean\n}\n\ninterface ArgsMoveRows {\n    rows: number[];\n    insertBefore: number;\n}\n\nexport class RowMoveManager implements IPlugin {\n    declare private grid: Grid;\n    declare private options: RowMoveManagerOptions;\n    declare private dragging: boolean;\n    private handler = new EventSubscriber();\n    onBeforeMoveRows = new EventEmitter<ArgsMoveRows>();\n    onMoveRows = new EventEmitter<ArgsMoveRows>();\n\n    constructor(options?: RowMoveManagerOptions) {\n        this.options = Object.assign({}, RowMoveManager.defaults, options);\n    }\n\n    public static readonly defaults: RowMoveManagerOptions = {\n        cancelEditOnDrag: false\n    }\n\n    init(grid: Grid) {\n        this.grid = grid;\n        this.handler.subscribe(grid.onDragInit, this.handleDragInit.bind(this))\n            .subscribe(grid.onDragStart, this.handleDragStart.bind(this))\n            .subscribe(grid.onDrag, this.handleDrag.bind(this))\n            .subscribe(grid.onDragEnd, this.handleDragEnd.bind(this));\n    }\n\n    destroy() {\n        this.handler?.unsubscribeAll();\n    }\n\n    private handleDragInit(e: UIEvent) {\n        // prevent the grid from cancelling drag'n'drop by default\n        e.stopImmediatePropagation();\n    }\n\n    private handleDragStart(e: UIEvent, dd: RowMoveManagerDragData) {\n        let cell = this.grid.getCellFromEvent(e);\n\n        if (this.options.cancelEditOnDrag && this.grid.getEditorLock().isActive()) {\n            this.grid.getEditorLock().cancelCurrentEdit();\n        }\n\n        if (this.grid.getEditorLock().isActive() ||\n            !/move|selectAndMove/.test(this.grid.getColumns()[cell.cell].behavior)) {\n            return false;\n        }\n\n        this.dragging = true;\n        e.stopImmediatePropagation();\n\n        let selectedRows = this.grid.getSelectedRows();\n\n        if (selectedRows.length == 0 || selectedRows.indexOf(cell.row) == -1) {\n            selectedRows = [cell.row];\n            this.grid.setSelectedRows(selectedRows);\n        }\n\n        let rowHeight = this.grid.getOptions().rowHeight;\n\n        dd.selectedRows = selectedRows;\n        let canvas = this.grid.getCanvasNode();\n        dd.selectionProxy = canvas.appendChild(H('div', {\n            'class': 'slick-reorder-proxy',\n            'style': `position: absolute; z-index: 9999; width: ${canvas.clientWidth}px; height: ${rowHeight * selectedRows.length}px`\n        }));\n        dd.guide = canvas.appendChild(H('div', {\n            'class': 'slick-reorder-guide',\n            'style': `position: absolute; z-index: 99998; width: ${canvas.clientWidth}px; top: -1000`\n        }));\n\n        dd.insertBefore = -1;\n    }\n\n    private handleDrag(e: UIEvent, dd: RowMoveManagerDragData) {\n        if (!this.dragging)\n            return;\n\n        e.stopImmediatePropagation();\n        let canvas = this.grid.getCanvasNode();\n\n        let box = canvas.getBoundingClientRect();\n        let docElem = document.documentElement;\n        let canvasTop = box.top + window.scrollY - docElem.clientTop;\n\n        let top = (e as any).pageY - canvasTop;\n        dd.selectionProxy.style.top = (top - 5) + 'px';\n\n        let insertBefore = Math.max(0, Math.min(Math.round(top / this.grid.getOptions().rowHeight), this.grid.getDataLength()));\n        if (insertBefore !== dd.insertBefore) {\n            let eventData = {\n                rows: dd.selectedRows,\n                insertBefore: insertBefore\n            };\n\n            if (this.onBeforeMoveRows.notify(eventData) === false) {\n                dd.guide.style.top = \"-1000\";\n                dd.canMove = false;\n            } else {\n                dd.guide.style.top = (insertBefore * this.grid.getOptions().rowHeight) + 'px';\n                dd.canMove = true;\n            }\n\n            dd.insertBefore = insertBefore;\n        }\n    }\n\n    private handleDragEnd(e: UIEvent, dd: RowMoveManagerDragData) {\n        if (!this.dragging)\n            return;\n\n        this.dragging = false;\n        e.stopImmediatePropagation();\n\n        dd.guide.remove();\n        dd.selectionProxy.remove();\n\n        if (dd.canMove) {\n            let eventData = {\n                rows: dd.selectedRows,\n                insertBefore: dd.insertBefore\n            };\n            // TODO: _grid.remapCellCssClasses ?\n            this.onMoveRows.notify(eventData);\n        }\n    }\n}\n", "const { EventEmitter, EventSubscriber, H } = Slick;export {\n     EventEmitter, EventSubscriber, H\n};"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;;;ACAA,MAAM,EAAE,cAAc,iBAAiB,EAAE,IAAI;;;ADoBtC,MAAM,kBAAN,MAAM,gBAAkC;AAAA,IAQ3C,YAAY,SAAiC;AAJ7C,WAAQ,UAAU,IAAI,gBAAgB;AACtC,8BAAmB,IAAI,aAA2B;AAClD,wBAAa,IAAI,aAA2B;AAGxC,WAAK,UAAU,OAAO,OAAO,CAAC,GAAG,gBAAe,UAAU,OAAO;AAAA,IACrE;AAAA,IAMA,KAAK,MAAY;AACb,WAAK,OAAO;AACZ,WAAK,QAAQ,UAAU,KAAK,YAAY,KAAK,eAAe,KAAK,IAAI,CAAC,EACjE,UAAU,KAAK,aAAa,KAAK,gBAAgB,KAAK,IAAI,CAAC,EAC3D,UAAU,KAAK,QAAQ,KAAK,WAAW,KAAK,IAAI,CAAC,EACjD,UAAU,KAAK,WAAW,KAAK,cAAc,KAAK,IAAI,CAAC;AAAA,IAChE;AAAA,IAEA,UAAU;AA5Cd;AA6CQ,iBAAK,YAAL,mBAAc;AAAA,IAClB;AAAA,IAEQ,eAAe,GAAY;AAE/B,QAAE,yBAAyB;AAAA,IAC/B;AAAA,IAEQ,gBAAgB,GAAY,IAA4B;AAC5D,UAAI,OAAO,KAAK,KAAK,iBAAiB,CAAC;AAEvC,UAAI,KAAK,QAAQ,oBAAoB,KAAK,KAAK,cAAc,EAAE,SAAS,GAAG;AACvE,aAAK,KAAK,cAAc,EAAE,kBAAkB;AAAA,MAChD;AAEA,UAAI,KAAK,KAAK,cAAc,EAAE,SAAS,KACnC,CAAC,qBAAqB,KAAK,KAAK,KAAK,WAAW,EAAE,KAAK,IAAI,EAAE,QAAQ,GAAG;AACxE,eAAO;AAAA,MACX;AAEA,WAAK,WAAW;AAChB,QAAE,yBAAyB;AAE3B,UAAI,eAAe,KAAK,KAAK,gBAAgB;AAE7C,UAAI,aAAa,UAAU,KAAK,aAAa,QAAQ,KAAK,GAAG,KAAK,IAAI;AAClE,uBAAe,CAAC,KAAK,GAAG;AACxB,aAAK,KAAK,gBAAgB,YAAY;AAAA,MAC1C;AAEA,UAAI,YAAY,KAAK,KAAK,WAAW,EAAE;AAEvC,SAAG,eAAe;AAClB,UAAI,SAAS,KAAK,KAAK,cAAc;AACrC,SAAG,iBAAiB,OAAO,YAAY,EAAE,OAAO;AAAA,QAC5C,SAAS;AAAA,QACT,SAAS,6CAA6C,OAAO,WAAW,eAAe,YAAY,aAAa,MAAM;AAAA,MAC1H,CAAC,CAAC;AACF,SAAG,QAAQ,OAAO,YAAY,EAAE,OAAO;AAAA,QACnC,SAAS;AAAA,QACT,SAAS,8CAA8C,OAAO,WAAW;AAAA,MAC7E,CAAC,CAAC;AAEF,SAAG,eAAe;AAAA,IACtB;AAAA,IAEQ,WAAW,GAAY,IAA4B;AACvD,UAAI,CAAC,KAAK;AACN;AAEJ,QAAE,yBAAyB;AAC3B,UAAI,SAAS,KAAK,KAAK,cAAc;AAErC,UAAI,MAAM,OAAO,sBAAsB;AACvC,UAAI,UAAU,SAAS;AACvB,UAAI,YAAY,IAAI,MAAM,OAAO,UAAU,QAAQ;AAEnD,UAAI,MAAO,EAAU,QAAQ;AAC7B,SAAG,eAAe,MAAM,MAAO,MAAM,IAAK;AAE1C,UAAI,eAAe,KAAK,IAAI,GAAG,KAAK,IAAI,KAAK,MAAM,MAAM,KAAK,KAAK,WAAW,EAAE,SAAS,GAAG,KAAK,KAAK,cAAc,CAAC,CAAC;AACtH,UAAI,iBAAiB,GAAG,cAAc;AAClC,YAAI,YAAY;AAAA,UACZ,MAAM,GAAG;AAAA,UACT;AAAA,QACJ;AAEA,YAAI,KAAK,iBAAiB,OAAO,SAAS,MAAM,OAAO;AACnD,aAAG,MAAM,MAAM,MAAM;AACrB,aAAG,UAAU;AAAA,QACjB,OAAO;AACH,aAAG,MAAM,MAAM,MAAO,eAAe,KAAK,KAAK,WAAW,EAAE,YAAa;AACzE,aAAG,UAAU;AAAA,QACjB;AAEA,WAAG,eAAe;AAAA,MACtB;AAAA,IACJ;AAAA,IAEQ,cAAc,GAAY,IAA4B;AAC1D,UAAI,CAAC,KAAK;AACN;AAEJ,WAAK,WAAW;AAChB,QAAE,yBAAyB;AAE3B,SAAG,MAAM,OAAO;AAChB,SAAG,eAAe,OAAO;AAEzB,UAAI,GAAG,SAAS;AACZ,YAAI,YAAY;AAAA,UACZ,MAAM,GAAG;AAAA,UACT,cAAc,GAAG;AAAA,QACrB;AAEA,aAAK,WAAW,OAAO,SAAS;AAAA,MACpC;AAAA,IACJ;AAAA,EACJ;AA/GI,EAZS,gBAYc,WAAkC;AAAA,IACrD,kBAAkB;AAAA,EACtB;AAdG,MAAM,iBAAN;",
  "names": []
}

{
  "version": 3,
  "sources": ["../../../src/plugins/rowselectionmodel.ts", "global-externals:_"],
  "sourcesContent": ["import { EventEmitter, EventSubscriber, IEventData, CellRange } from \"../core\";\nimport { ArgsCell, Grid, IPlugin, SelectionModel } from \"../grid\";\n\nexport interface RowSelectionModelOptions {\n    selectActiveRow?: boolean;\n}\n\nfunction getRowsRange(from: number, to: number): number[] {\n    let i: number, rows: number[] = [];\n    for (i = from; i <= to; i++) {\n        rows.push(i);\n    }\n    for (i = to; i < from; i++) {\n        rows.push(i);\n    }\n    return rows;\n}\n\nfunction rangesToRows(ranges: CellRange[]) {\n    let rows = [];\n    for (let i = 0; i < ranges.length; i++) {\n        for (let j = ranges[i].fromRow; j <= ranges[i].toRow; j++) {\n            rows.push(j);\n        }\n    }\n    return rows;\n}\n\nexport class RowSelectionModel implements IPlugin, SelectionModel {\n    declare private grid: Grid;\n    private handler = new EventSubscriber();\n    declare private options: RowSelectionModelOptions;\n    declare private ranges: CellRange[];\n    onSelectedRangesChanged = new EventEmitter<CellRange[]>();\n\n    constructor(options?: RowSelectionModelOptions) {\n        this.options = Object.assign({}, RowSelectionModel.defaults, options);\n    }\n\n    public static readonly defaults: RowSelectionModelOptions = {\n        selectActiveRow: true\n    }\n\n    init(grid: Grid): void {\n        this.grid = grid;\n        this.handler.subscribe(grid.onActiveCellChanged, this.wrapHandler(this.handleActiveCellChange));\n        this.handler.subscribe(grid.onKeyDown, this.wrapHandler(this.handleKeyDown));\n        this.handler.subscribe(grid.onClick, this.wrapHandler(this.handleClick));\n    }\n\n    destroy(): void {\n        this.handler?.unsubscribeAll();\n    }\n\n    private wrapHandler(handler: Function): () => void {\n        return (function() {\n            if (!this.inHandler) {\n                this.inHandler = true;\n                handler.apply(this, arguments);\n                this.inHandler = false;\n            }\n        }).bind(this);\n    }\n\n    private rowsToRanges(rows: number[]): CellRange[] {\n        let ranges = [];\n        let lastCell = this.grid.getColumns().length - 1;\n        for (let i = 0; i < rows.length; i++) {\n            ranges.push(new CellRange(rows[i], 0, rows[i], lastCell));\n        }\n        return ranges;\n    }\n\n\n    getSelectedRows(): number[] {\n        return rangesToRows(this.ranges);\n    }\n\n    setSelectedRows(rows: number[]): void {\n        this.setSelectedRanges(this.rowsToRanges(rows));\n    }\n\n    setSelectedRanges(ranges: CellRange[]): void {\n        // simle check for: empty selection didn't change, prevent firing onSelectedRangesChanged\n        if ((!this.ranges || this.ranges.length === 0) && (!ranges || ranges.length === 0))\n            return;\n        this.ranges = ranges;\n        this.onSelectedRangesChanged.notify(this.ranges);\n    }\n\n    getSelectedRanges(): CellRange[] {\n        return this.ranges;\n    }\n\n    private handleActiveCellChange(_: IEventData, data: ArgsCell) {\n        if (this.options.selectActiveRow && data.row != null) {\n            this.setSelectedRanges([new CellRange(data.row, 0, data.row, this.grid.getColumns().length - 1)]);\n        }\n    }\n\n    private handleKeyDown(e: KeyboardEvent) {\n        let activeRow = this.grid.getActiveCell();\n        if (!(activeRow && e.shiftKey && !e.ctrlKey && !e.altKey && !e.metaKey && (e.which == 38 || e.which == 40)))\n            return;\n\n        let selectedRows = this.getSelectedRows();\n        selectedRows.sort(function (x, y) {\n            return x - y\n        });\n\n        if (!selectedRows.length) {\n            selectedRows = [activeRow.row];\n        }\n\n        let top = selectedRows[0];\n        let bottom = selectedRows[selectedRows.length - 1];\n        let active;\n\n        if (e.which == 40) {\n            active = activeRow.row < bottom || top == bottom ? ++bottom : ++top;\n        } else {\n            active = activeRow.row < bottom ? --bottom : --top;\n        }\n\n        if (active >= 0 && active < this.grid.getDataLength()) {\n            this.grid.scrollRowIntoView(active);\n            this.ranges = this.rowsToRanges(getRowsRange(top, bottom));\n            this.setSelectedRanges(this.ranges);\n        }\n\n        e.preventDefault();\n        e.stopPropagation();\n    }\n\n    private handleClick(e: MouseEvent) {\n        let cell = this.grid.getCellFromEvent(e);\n        if (!cell || !this.grid.canCellBeActive(cell.row, cell.cell)) {\n            return false;\n        }\n\n        if (!this.grid.getOptions().multiSelect || (\n            !e.ctrlKey && !e.shiftKey && !e.metaKey)) {\n            return false;\n        }\n\n        let selection = rangesToRows(this.ranges);\n        let idx = selection.indexOf(cell.row);\n\n        if (idx === -1 && (e.ctrlKey || e.metaKey)) {\n            selection.push(cell.row);\n            this.grid.setActiveCell(cell.row, cell.cell);\n        } else if (idx !== -1 && (e.ctrlKey || e.metaKey)) {\n            selection = selection.filter(o => {\n                return (o !== cell.row);\n            });\n            this.grid.setActiveCell(cell.row, cell.cell);\n        } else if (selection.length && e.shiftKey) {\n            let last = selection.pop();\n            let from = Math.min(cell.row, last);\n            let to = Math.max(cell.row, last);\n            selection = [];\n            for (let i = from; i <= to; i++) {\n                if (i !== last) {\n                    selection.push(i);\n                }\n            }\n            selection.push(last);\n            this.grid.setActiveCell(cell.row, cell.cell);\n        }\n\n        this.ranges = this.rowsToRanges(selection);\n        this.setSelectedRanges(this.ranges);\n        e.stopImmediatePropagation();\n\n        return true;\n    }\n}\n", "const { EventEmitter, EventSubscriber, CellRange } = Slick;export {\n     EventEmitter, EventSubscriber, CellRange\n};"],
  "mappings": "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",
  "names": ["rowselectionmodel_exports", "__export", "RowSelectionModel", "EventEmitter", "EventSubscriber", "CellRange", "getRowsRange", "from", "to", "i", "rows", "rangesToRows", "ranges", "j", "_RowSelectionModel", "options", "EventSubscriber", "EventEmitter", "grid", "_a", "handler", "lastCell", "CellRange", "_", "data", "activeRow", "selectedRows", "x", "y", "top", "bottom", "active", "cell", "selection", "idx", "o", "last", "RowSelectionModel"]
}

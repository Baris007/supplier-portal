{
  "version": 3,
  "sources": ["../../../src/layouts/frozenlayout.ts", "global-externals:_"],
  "sourcesContent": ["import { Column, disableSelection, H, parsePx, spacerDiv } from \"../core\";\nimport { GridOptions, LayoutEngine, LayoutHost, ViewRange } from \"../grid\";\n\nexport const FrozenLayout: { new(): LayoutEngine } = function(): LayoutEngine {\n    var canvasWidth: number;\n    var canvasWidthL: number;\n    var canvasWidthR: number;\n    var frozenBottom: boolean;\n    var frozenRowIdx: number;\n    var frozenCols: number;\n    var frozenRows: number;\n    var headersWidthL: number;\n    var headersWidthR: number;\n    var viewportTopH: number;\n\n    var canvasBottomL: HTMLDivElement;\n    var canvasBottomR: HTMLDivElement;\n    var canvasTopL: HTMLDivElement;\n    var canvasTopR: HTMLDivElement;\n    var headerColsL: HTMLDivElement;\n    var headerColsR: HTMLDivElement;\n    var headerRowColsL: HTMLDivElement;\n    var headerRowColsR: HTMLDivElement;\n    var headerRowSpacerL: HTMLDivElement;\n    var headerRowSpacerR: HTMLDivElement;\n    var footerRowColsL: HTMLDivElement;\n    var footerRowColsR: HTMLDivElement;\n    var footerRowSpacerL: HTMLDivElement;\n    var footerRowSpacerR: HTMLDivElement;\n    var paneBottomL: HTMLDivElement;\n    var paneBottomR: HTMLDivElement;\n    var paneHeaderL: HTMLDivElement;\n    var paneHeaderR: HTMLDivElement;\n    var paneTopL: HTMLDivElement;\n    var paneTopR: HTMLDivElement;\n    var scrollContainerX: HTMLDivElement;\n    var scrollContainerY: HTMLDivElement;\n    var topPanelL: HTMLDivElement;\n    var topPanelR: HTMLDivElement;\n    var viewportBottomL: HTMLDivElement;\n    var viewportBottomR: HTMLDivElement;\n    var viewportTopL: HTMLDivElement;\n    var viewportTopR: HTMLDivElement;\n\n    function appendCachedRow(row: number, rowNodeL: HTMLDivElement, rowNodeR: HTMLDivElement): void {\n        var bottom = frozenRows && row >= frozenRowIdx + (frozenBottom ? 0 : 1);\n        if (bottom) {\n            rowNodeL && canvasBottomL.appendChild(rowNodeL);\n            frozenCols && rowNodeR && canvasBottomR.appendChild(rowNodeR);\n        }\n        else {\n            rowNodeL && canvasTopL.appendChild(rowNodeL);\n            frozenCols && rowNodeR && canvasTopR.appendChild(rowNodeR);\n        }\n    }\n\n    const calcCanvasWidth = () => {\n        var cols = host.getColumns(), i = cols.length;\n\n        canvasWidthL = canvasWidthR = 0;\n\n        while (i--) {\n            if (frozenCols > 0 && i >= frozenCols) {\n                canvasWidthR += cols[i].width;\n            } else {\n                canvasWidthL += cols[i].width;\n            }\n        }\n\n        var totalRowWidth = canvasWidthL + canvasWidthR;\n        return host.getOptions().fullWidthRows ? Math.max(totalRowWidth, host.getAvailableWidth()) : totalRowWidth;\n    }\n\n    var host: LayoutHost;\n\n    function init(hostGrid: LayoutHost) {\n        host = hostGrid;\n        const spacerW = calcCanvasWidth() + host.getScrollDims().width + 'px';\n        const options = host.getOptions();\n        const uisd = options.useLegacyUI ? ' ui-state-default' : '';\n\n        // -- PANE HEADER LEFT\n        headerColsL = H('div', { class: 'slick-header-columns slick-header-columns-left', style: (options.rtl ? \"right\" : \"left\") + ':-1000px' });\n        paneHeaderL = H('div', { class: \"slick-pane slick-pane-header slick-pane-left\", tabIndex: '0' },\n            H('div', { class: 'slick-header slick-header-left' + uisd, style: !options.showColumnHeader && 'display: none' }, headerColsL));\n\n        // -- PANE HEADER RIGHT\n        headerColsR = H('div', { class: 'slick-header-columns slick-header-columns-right', style: (options.rtl ? \"right\" : \"left\") + ':-1000px' });\n        paneHeaderR = H('div', { class: \"slick-pane slick-pane-header slick-pane-right\", tabIndex: '0' },\n            H('div', { class: 'slick-header slick-header-right' + uisd, style: !options.showColumnHeader && 'display: none' }, headerColsR));\n\n        // -- PANE TOP LEFT (headerrow left + top panel left + viewport top left + footer row right)\n        headerRowColsL = H('div', { class: 'slick-headerrow-columns slick-headerrow-columns-left' });\n        headerRowSpacerL = spacerDiv(spacerW);\n        var headerRowL = H('div', { class: 'slick-headerrow' + uisd, style: !options.showHeaderRow && 'display: none' }, headerRowColsL, headerRowSpacerL);\n\n        topPanelL = H('div', { class: 'slick-top-panel', style: 'width: 10000px' })\n        var topPanelLS = H('div', { class: 'slick-top-panel-scroller' + uisd, style: !options.showTopPanel && 'display: none' }, topPanelL);\n\n        canvasTopL = H('div', { class: \"grid-canvas grid-canvas-top grid-canvas-left\", tabIndex: \"0\", hideFocus: '' });\n        viewportTopL = H('div', { class: \"slick-viewport slick-viewport-top slick-viewport-left\", tabIndex: \"0\", hideFocus: '' }, canvasTopL);\n\n        footerRowColsL = H('div', { class: 'slick-footerrow-columns slick-footerrow-columns-left' });\n        footerRowSpacerL = spacerDiv(spacerW);\n        var footerRowL = H('div', { class: 'slick-footerrow' + uisd, style: !options.showFooterRow && 'display: none' }, footerRowColsL, footerRowSpacerL);\n\n        paneTopL = H('div', { class: \"slick-pane slick-pane-top slick-pane-left\", tabIndex: \"0\" }, headerRowL, topPanelLS, viewportTopL, footerRowL);\n\n        // -- PANE TOP RIGHT (headerrow right + top panel right + viewport top right + footer row right)\n        headerRowColsR = H('div', { class: 'slick-headerrow-columns slick-headerrow-columns-right' });\n        headerRowSpacerR = spacerDiv(spacerW);\n        var headerRowR = H('div', { class: 'slick-headerrow' + uisd, style: !options.showHeaderRow && 'display: none' }, headerRowColsR, headerRowSpacerR);\n\n        topPanelR = H('div', { class: 'slick-top-panel', style: 'width: 10000px' });\n        var topPanelRS = H('div', { class: 'slick-top-panel-scroller' + uisd, style: !options.showTopPanel && 'display: none' }, topPanelR);\n\n        canvasTopR = H('div', { class: \"grid-canvas grid-canvas-top grid-canvas-right\", tabIndex: \"0\", hideFocus: '' })\n        viewportTopR = H('div', { class: \"slick-viewport slick-viewport-top slick-viewport-right\", tabIndex: \"0\", hideFocus: '' }, canvasTopR);\n\n        footerRowColsR = H('div', { class: 'slick-footerrow-columns slick-footerrow-columns-right' });\n        footerRowSpacerR = H('div', { style: 'display:block;height:1px;position:absolute;top:0;left:0;', width: spacerW });\n        var footerRowR = H('div', { class: 'slick-footer-row' + uisd, style: !options.showFooterRow && 'display: none' }, footerRowColsR, footerRowSpacerR);\n\n        paneTopR = H('div', { class: \"slick-pane slick-pane-top slick-pane-right\", tabIndex: \"0\" }, headerRowR, topPanelRS, viewportTopR, footerRowR);\n\n        // -- PANE BOTTOM LEFT\n        canvasBottomL = H('div', { class: \"grid-canvas grid-canvas-bottom grid-canvas-left\", tabIndex: \"0\", hideFocus: '' });\n        viewportBottomL = H('div', { class: \"slick-viewport slick-viewport-bottom slick-viewport-left\", tabIndex: \"0\", hideFocus: '' }, canvasBottomL);\n        paneBottomL = H('div', { class: \"slick-pane slick-pane-bottom slick-pane-left\", tabIndex: \"0\" }, viewportBottomL);\n\n        canvasBottomR = H('div', { class: \"grid-canvas grid-canvas-bottom grid-canvas-right\", tabIndex: \"0\", hideFocus: '' });\n        viewportBottomR = H('div', { class: \"slick-viewport slick-viewport-bottom slick-viewport-right\", tabIndex: \"0\", hideFocus: '' });\n        paneBottomR = H('div', { class: \"slick-pane slick-pane-bottom slick-pane-right\", tabIndex: \"0\" }, viewportBottomR);\n\n        host.getContainerNode().append(\n            paneHeaderL,\n            paneHeaderR,\n            paneTopL,\n            paneTopR,\n            paneBottomL,\n            paneBottomR);\n\n        // disable all text selection in header (including input and textarea)\n        disableSelection(headerColsL);\n        disableSelection(headerColsR);\n\n        adjustFrozenRowOption();\n    }\n\n    function getHeaderCols() {\n        return [headerColsL, headerColsR];\n    }\n\n    function getHeaderRowCols() {\n        return [headerRowColsL, headerRowColsR];\n    }\n\n    function getFooterRowCols() {\n        return [footerRowColsL, footerRowColsR];\n    }\n\n    const getCanvasNodeFor = (cell: number, row: number) => {\n        if (row == null && cell == null)\n            return canvasTopL;\n\n        var rightSide = cell >= frozenCols;\n\n        if (frozenRows > 0 && (row >= frozenRowIdx + (frozenBottom ? 0 : 1)))\n            return rightSide ? canvasBottomR : canvasBottomL;\n\n        return rightSide ? canvasTopR : canvasTopL;\n    }\n\n    function getCanvasWidth() {\n        return canvasWidth;\n    }\n\n    function getCanvasNodes() {\n        return [canvasTopL, canvasTopR, canvasBottomL, canvasBottomR];\n    }\n\n    function getScrollContainerX() {\n        return scrollContainerX;\n    }\n\n    function getScrollContainerY() {\n        return scrollContainerY;\n    }\n\n    function getViewportNodeFor(cell: number, row: number) {\n        if (row == null && cell == null)\n            return canvasTopL;\n\n        var rightSide = cell >= frozenCols;\n\n        if (frozenRows > 0 && (row >= frozenRowIdx + (frozenBottom ? 0 : 1)))\n            return rightSide ? canvasBottomR : canvasBottomL;\n\n        return rightSide ? canvasTopR : canvasTopL;\n    }\n\n    function getViewportNodes() {\n        return [viewportTopL, viewportTopR, viewportBottomL, viewportBottomR];\n    }\n\n    const updateCanvasWidth = () => {\n        var oldCanvasWidth = canvasWidth;\n        var oldCanvasWidthL = canvasWidthL;\n        var oldCanvasWidthR = canvasWidthR;\n        var widthChanged;\n        canvasWidth = calcCanvasWidth();\n        var scrollWidth = host.getScrollDims().width;\n\n        widthChanged = canvasWidth !== oldCanvasWidth || canvasWidthL !== oldCanvasWidthL || canvasWidthR !== oldCanvasWidthR;\n        var vpi = host.getViewportInfo();\n\n        if (widthChanged || frozenCols || frozenRows) {\n            var cwlPX = canvasWidthL + 'px'\n            var cwrPX = canvasWidthR + 'px';\n\n            canvasTopL.style.width = cwlPX;\n\n            calcHeaderWidths();\n\n            if (frozenCols) {\n                var vpminusPX = (vpi.width - canvasWidthL) + 'px';\n                const rtl = host.getOptions().rtl;\n\n                canvasTopR.style.width = cwrPX;\n                paneHeaderL.style.width = cwlPX;\n                paneHeaderR.style[rtl ? \"right\" : \"left\"] = cwlPX;\n                paneHeaderR.style.width = vpminusPX;\n\n                paneTopL.style.width = cwlPX;\n                paneTopR.style[rtl ? \"right\" : \"left\"] = cwlPX;\n                paneTopR.style.width = vpminusPX;\n\n                headerRowColsL.style.width = cwlPX;\n                headerRowColsL.parentElement.style.width = cwlPX;\n                headerRowColsR.style.width = cwrPX;\n                headerRowColsR.parentElement.style.width = vpminusPX;\n\n                footerRowColsL.style.width = cwlPX;\n                footerRowColsL.parentElement.style.width = cwlPX;\n                footerRowColsR.style.width = cwrPX;\n                footerRowColsR.parentElement.style.width = vpminusPX;\n\n                viewportTopL.style.width = cwlPX;\n                viewportTopR.style.width = vpminusPX;\n\n                if (frozenRows) {\n                    paneBottomL.style.width = cwlPX;\n                    paneBottomR.style[rtl ? \"right\" : \"left\"] = cwlPX;\n\n                    viewportBottomL.style.width = cwlPX;\n                    viewportBottomR.style.width = vpminusPX;\n\n                    canvasBottomL.style.width = cwlPX;\n                    canvasBottomR.style.width = cwrPX;\n                }\n            } else {\n                paneHeaderL.style.width = '100%';\n                paneTopL.style.width = '100%';\n                headerRowColsL.parentElement.style.width = '100%';\n                headerRowColsL.style.width = canvasWidth + 'px';\n                footerRowColsL.parentElement.style.width = '100%';\n                footerRowColsL.style.width = canvasWidth + 'px';\n                viewportTopL.style.width = '100%';\n\n                if (frozenRows) {\n                    viewportBottomL.style.width = '100%';\n                    canvasBottomL.style.width = cwlPX;\n                }\n            }\n\n            vpi.hasHScroll = (canvasWidth > vpi.width - scrollWidth);\n        }\n\n        var w = (canvasWidth + (vpi.hasHScroll ? scrollWidth : 0)) + 'px';\n\n        headerRowSpacerL.style.width = w;\n        headerRowSpacerR.style.width = w;\n        footerRowSpacerL.style.width = w;\n        footerRowSpacerR.style.width = w;\n\n        return widthChanged;\n    }\n\n    const getHeaderColumn = (cell: number) => {\n        return (frozenCols > 0 && cell >= frozenCols ?\n            headerColsR.children.item(cell - frozenCols) : headerColsL.children.item(cell)) as HTMLDivElement;\n    }\n\n    const getHeaderRowColumn = (cell: number) => {\n        var target: HTMLDivElement;\n\n        if (frozenCols <= 0 || cell < frozenCols) {\n            target = headerRowColsL;\n        }\n        else {\n            target = headerRowColsR;\n            cell -= frozenCols;\n        }\n\n        return target.childNodes.item(cell) as HTMLDivElement;\n    }\n\n    const getFooterRowColumn = (cell: number) => {\n        var target: HTMLDivElement;\n\n        if (frozenCols <= 0 || cell < frozenCols) {\n            target = footerRowColsL;\n        }\n        else {\n            target = footerRowColsR;\n            cell -= frozenCols;\n        }\n\n        return target.childNodes.item(cell) as HTMLDivElement;\n    }\n\n    const getHeaderRowColsFor = (cell: number) => {\n        return frozenCols > 0 && cell >= frozenCols ? headerRowColsR : headerRowColsL;\n    }\n\n    const getFooterRowColsFor = (cell: number) => {\n        return frozenCols > 0 && cell >= frozenCols ? footerRowColsR : footerRowColsL;\n    }\n\n    const calcHeaderWidths = () => {\n        headersWidthL = headersWidthR = 0;\n\n        var scrollWidth = host.getScrollDims().width;\n        var cols = host.getColumns();\n        for (var i = 0, ii = cols.length; i < ii; i++) {\n            var width = cols[i].width;\n\n            if (frozenCols > 0 && i >= frozenCols) {\n                headersWidthR += width;\n            } else {\n                headersWidthL += width;\n            }\n        }\n\n        const vs = host.getViewportInfo();\n\n        if (frozenCols > 0) {\n            headersWidthL = headersWidthL + 1000;\n            headersWidthR = Math.max(headersWidthR, vs.width) + headersWidthL;\n            headersWidthR += scrollWidth;\n        } else {\n            headersWidthL += scrollWidth;\n            headersWidthL = Math.max(headersWidthL, vs.width) + 1000;\n        }\n\n        headerColsL.style.width = headersWidthL + 'px';\n        headerColsR.style.width = headersWidthR + 'px';\n    }\n\n    const getHeaderColsFor = (cell: number) => {\n        return frozenCols > 0 && cell >= frozenCols ? headerColsR : headerColsL;\n    }\n\n    const handleScrollH = () => {\n        const options = host.getOptions();\n        const scrollLeft = host.getScrollLeft();\n        if (frozenCols) {\n            options.showColumnHeader && (headerColsR.parentElement.scrollLeft = scrollLeft);\n            options.showTopPanel && (topPanelR.parentElement.scrollLeft = scrollLeft);\n            options.showHeaderRow && (headerRowColsR.parentElement.scrollLeft = scrollLeft);\n            options.showFooterRow && (footerRowColsR.parentElement.scrollLeft = scrollLeft);\n            if (frozenRows) {\n                viewportTopR.scrollLeft = scrollLeft;\n            }\n        } else {\n            options.showColumnHeader && (headerColsL.parentElement.scrollLeft = scrollLeft);\n            options.showTopPanel && (topPanelL.parentElement.scrollLeft = scrollLeft);\n            options.showHeaderRow && (headerRowColsL.parentElement.scrollLeft = scrollLeft);\n            options.showFooterRow && (footerRowColsL.parentElement.scrollLeft = scrollLeft);\n            if (frozenRows) {\n                viewportTopL.scrollLeft = scrollLeft;\n            }\n        }\n    }\n\n    const handleScrollV = () => {\n        if (frozenCols) {\n            if (frozenRows && !frozenBottom) {\n                viewportBottomL.scrollTop = host.getScrollTop();\n            } else {\n                viewportTopL.scrollTop = host.getScrollTop();\n            }\n        }\n    }\n\n    const setScroller = () => {\n        if (frozenCols) {\n            if (frozenRows) {\n                if (frozenBottom) {\n                    scrollContainerX = viewportBottomR;\n                    scrollContainerY = viewportTopR;\n                } else {\n                    scrollContainerX = scrollContainerY = viewportBottomR;\n                }\n            } else {\n                scrollContainerX = scrollContainerY = viewportTopR;\n            }\n        } else {\n            if (frozenRows) {\n                if (frozenBottom) {\n                    scrollContainerX = viewportBottomL;\n                    scrollContainerY = viewportTopL;\n                } else {\n                    scrollContainerX = scrollContainerY = viewportBottomL;\n                }\n            } else {\n                scrollContainerX = scrollContainerY = viewportTopL;\n            }\n        }\n    }\n\n    const setPaneVisibility = () => {\n        paneHeaderR.style.display = paneTopR.style.display = frozenCols ? '' : 'none';\n        paneBottomL.style.display = frozenRows ? '' : 'none';\n        paneBottomR.style.display = frozenRows && frozenCols ? '' : 'none';\n    }\n\n    const setOverflow = () => {\n        const options = host.getOptions();\n        var alwaysHS = options.alwaysAllowHorizontalScroll;\n        var alwaysVS = options.alwaysShowVerticalScroll;\n\n        viewportTopL.style.overflowX = viewportTopR.style.overflowX = (frozenRows && !alwaysHS) ? 'hidden' : (frozenCols ? 'scroll' : 'auto');\n        viewportTopL.style.overflowY = viewportBottomL.style.overflowY = (!frozenCols && alwaysVS) ? 'scroll' :\n            (frozenCols ? 'hidden' : (frozenRows ? 'scroll' : (options.autoHeight ? 'hidden' : 'auto')));\n        viewportTopR.style.overflowY = (alwaysVS || frozenRows) ? 'scroll' : (options.autoHeight ? 'hidden' : 'auto');\n        viewportBottomL.style.overflowX = viewportBottomR.style.overflowX = (frozenCols && !alwaysHS) ? 'scroll' : 'auto';\n        viewportBottomR.style.overflowY = (alwaysVS) ? 'scroll' : 'auto';\n    }\n\n    const bindAncestorScrollEvents = () => {\n        var elem: HTMLElement = (frozenRows && !frozenBottom) ? canvasBottomL : canvasTopL;\n        while ((elem = elem.parentNode as HTMLElement) != document.body && elem != null) {\n            // bind to scroll containers only\n            if (elem == viewportTopL || elem.scrollWidth != elem.clientWidth || elem.scrollHeight != elem.clientHeight) {\n                host.bindAncestorScroll(elem);\n            }\n        }\n    }\n\n    const afterHeaderColumnDrag = () => {\n        const oldCanvasWidthL = canvasWidthL;\n        canvasWidth = calcCanvasWidth();\n        if (frozenCols &&  canvasWidthL != oldCanvasWidthL) {\n            headerColsL.style.width = canvasWidthL + 1000 + 'px';\n            paneHeaderR.style[host.getOptions().rtl ? 'right' : 'left'] = canvasWidthL + 'px';\n        }\n    }\n\n    const applyColumnWidths = () => {\n        var x = 0, w, rule, cols = host.getColumns(), opts = host.getOptions(), rtl = opts.rtl,\n            s = rtl ? 'right' : 'left',\n            e = rtl ? 'left' : 'right';\n\n        if (opts.useCssVars) {\n            var styles = host.getContainerNode().style;\n            for (var i = 0; i < cols.length; i++) {\n                if (frozenCols == i)\n                    x = 0;\n                w = cols[i].width;\n                var prop = \"--l\" + i;\n                var oldVal = styles.getPropertyValue(prop);\n                var newVal = x + \"px\";\n                if (oldVal !== newVal) \n                    styles.setProperty(prop, newVal);\n                prop = \"--r\" + i;\n                oldVal = styles.getPropertyValue(prop);\n                newVal = (((frozenCols > 0 && i >= frozenCols) ? canvasWidthR : canvasWidthL) - x - w) + \"px\"\n                if (oldVal !== newVal) \n                    styles.setProperty(prop, newVal);\n                x += w;\n            }\n        }\n        else {\n            for (var i = 0; i < cols.length; i++) {\n                if (frozenCols == i)\n                    x = 0;\n                w = cols[i].width;\n                rule = host.getColumnCssRules(i);\n                (rule as any)[s].style[s] = x + \"px\";\n                (rule as any)[e].style[e] = (((frozenCols > 0 && i >= frozenCols) ? canvasWidthR : canvasWidthL) - x - w) + \"px\";\n                x += w;\n            }\n        }\n    }\n\n    const getTopPanelFor = (cell: number) => {\n        return frozenCols > 0 && cell >= frozenCols ? topPanelR : topPanelL;\n    }\n\n    const getTopPanelNodes = () => [topPanelL, topPanelR];\n\n    const resizeCanvas = () => {\n        var _paneTopH = 0\n        var _paneBottomH = 0\n        const vs = host.getViewportInfo();\n        const options = host.getOptions();\n\n        // Account for Frozen Rows\n        if (frozenRows) {\n            const frozenRowsHeight = frozenRows * options.rowHeight;\n            if (frozenBottom) {\n                _paneTopH = vs.height - frozenRowsHeight;\n                _paneBottomH = frozenRowsHeight + host.getScrollDims().height;\n            } else {\n                _paneTopH = frozenRowsHeight;\n                _paneBottomH = vs.height - frozenRowsHeight;\n            }\n        } else {\n            _paneTopH = vs.height;\n        }\n\n        // The top pane includes the top panel, the header row and the footer row\n        _paneTopH += vs.topPanelHeight + vs.headerRowHeight + vs.footerRowHeight;\n\n        // The top viewport does not contain the top panel, the header row or the footer row\n        viewportTopH = _paneTopH - vs.topPanelHeight - vs.headerRowHeight - vs.footerRowHeight;\n\n        if (options.autoHeight) {\n            host.getContainerNode().style.height = (_paneTopH + vs.groupingPanelHeight +\n                parsePx(getComputedStyle(headerColsL.parentElement).height)) + 'px';\n        }\n\n        paneTopL.style.top = (vs.groupingPanelHeight + (parsePx(getComputedStyle(paneHeaderL).height) || vs.headerHeight)) + \"px\";\n        paneTopL.style.height = _paneTopH + 'px';\n\n        var paneBottomTop = paneTopL.offsetTop + _paneTopH;\n\n        if (options.autoHeight) {\n            viewportTopL.style.height = '';\n        }\n        else {\n            viewportTopL.style.height = viewportTopH + 'px'\n        }\n\n        if (frozenCols) {\n            paneTopR.style.top = paneTopL.style.top;\n            paneTopR.style.height = paneTopL.style.height;\n\n            viewportTopR.style.height = viewportTopL.style.height;\n\n            if (frozenRows) {\n                paneBottomL.style.top = paneBottomR.style.top = paneBottomTop + 'px';\n                paneBottomL.style.height = paneBottomR.style.height = viewportBottomR.style.height = _paneBottomH + 'px';\n            }\n        } else {\n            if (frozenRows) {\n                paneBottomL.style.width = '100%';\n                paneBottomL.style.height = _paneBottomH + 'px';\n                paneBottomL.style.top = paneBottomTop + 'px';\n            }\n        }\n\n        if (frozenRows) {\n            viewportBottomL.style.height = _paneBottomH + 'px';\n            const frozenRowsHeight = frozenRows * options.rowHeight;\n            if (frozenBottom) {\n                canvasBottomL.style.height = frozenRowsHeight + 'px';\n\n                if (frozenCols) {\n                    canvasBottomR.style.height = frozenRowsHeight + 'px';\n                }\n            } else {\n                canvasTopL.style.height = frozenRowsHeight + 'px';\n\n                if (frozenCols) {\n                    canvasTopR.style.height = frozenRowsHeight + 'px';\n                }\n            }\n        } else {\n            viewportTopR.style.height = viewportTopH + 'px';\n        }\n    }\n\n    function reorderViewColumns(viewCols: Column[], options?: GridOptions): Column[] {\n\n        options = options || host?.getOptions();\n        if (options?.frozenColumns == null) {\n            delete options?.frozenColumns;\n        }\n        else {\n            var toFreeze = options.frozenColumns;\n            options.frozenColumns = 0;\n            var i = 0;\n            while (i < viewCols.length) {\n                var col = viewCols[i++];\n                if (toFreeze > 0 && col.visible !== false) {\n                    col.frozen = true;\n                    options.frozenColumns++;\n                    toFreeze--;\n                }\n                else if (col.frozen !== undefined)\n                    delete col.frozen;\n            }\n        }\n\n        var frozenColumns = viewCols.filter(x => x.frozen);\n        frozenCols = frozenColumns.length;\n        if (frozenCols)\n            return frozenColumns.concat(viewCols.filter(x => !x.frozen));\n\n        return viewCols;\n    }\n\n    function afterSetOptions(arg: GridOptions) {\n        if (arg.frozenRows != null || arg.frozenBottom != null)\n            adjustFrozenRowOption();\n    }\n\n    function adjustFrozenRowOption(): void {\n        const options = host.getOptions();\n        if (options.autoHeight) {\n            frozenRows = 0;\n            return;\n        }\n\n        frozenRows = (options.frozenRows > 0 && options.frozenRows <= host.getViewportInfo().numVisibleRows) ? options.frozenRows : 0;\n\n        if (frozenRows) {\n            frozenRowIdx = options.frozenBottom ? (host.getDataLength() - frozenRows) : (frozenRows - 1);\n        }\n    }\n\n    function getScrollCanvasY() {\n        return frozenRows && !frozenBottom ? canvasBottomL : canvasTopL;\n    }\n\n    function realScrollHeightChange() {\n        const h = host.getViewportInfo().realScrollHeight;\n        if (frozenRows && !frozenBottom) {\n            canvasBottomL.style.height = h + 'px';\n\n            if (frozenCols) {\n                canvasBottomR.style.height = h + 'px';\n            }\n        } else {\n            canvasTopL.style.height = h + 'px'\n            canvasTopR.style.height = h + 'px'\n        }\n    }\n\n    function isFrozenRow(row: number) {\n        return frozenRows && ((frozenBottom && row >= frozenRowIdx) || (!frozenBottom && row <= frozenRowIdx));\n    }\n\n    function beforeCleanupAndRenderCells(rendered: ViewRange) {\n        if (frozenRows) {\n\n            var renderedFrozenRows = Object.assign({}, rendered);\n\n            if (frozenBottom) {\n                renderedFrozenRows.top = frozenRowIdx;\n                renderedFrozenRows.bottom = host.getDataLength() - 1;\n            }\n            else {\n\n                renderedFrozenRows.top = 0;\n                renderedFrozenRows.bottom = frozenRowIdx;\n            }\n\n            host.cleanUpAndRenderCells(renderedFrozenRows);\n        }\n    }\n\n    function afterRenderRows(rendered: ViewRange) {\n        // Render frozen rows\n        if (frozenRows) {\n            if (frozenBottom) {\n                host.renderRows({\n                    top: frozenRowIdx,\n                    bottom: host.getDataLength() - 1,\n                    leftPx: rendered.leftPx,\n                    rightPx: rendered.rightPx\n                });\n            }\n            else {\n                host.renderRows({\n                    top: 0,\n                    bottom: frozenRowIdx,\n                    leftPx: rendered.leftPx,\n                    rightPx: rendered.rightPx\n                });\n            }\n        }\n    }\n\n    function getRowOffset(row: number): number {\n        if (!frozenRows || (frozenBottom && row < frozenRowIdx) || (!frozenBottom && row <= frozenRowIdx))\n            return 0;\n\n        if (!frozenBottom)\n            return frozenRows * host.getOptions().rowHeight;\n\n        var realScrollHeight = host.getViewportInfo().realScrollHeight;\n        if (realScrollHeight >= viewportTopH)\n            return realScrollHeight;\n\n        return frozenRowIdx * host.getOptions().rowHeight;\n    }\n\n    function getRowFromCellNode(cellNode: HTMLElement, clientX: number, clientY: number): number {\n        var row = host.getRowFromNode(cellNode.parentNode as HTMLElement);\n\n        if (frozenRows) {\n\n            var bcr = cellNode.closest('.grid-canvas').getBoundingClientRect();\n\n            var rowOffset = 0;\n            var isBottom = cellNode.closest('.grid-canvas-bottom') != null;\n\n            if (isBottom) {\n                rowOffset = frozenBottom ? Math.round(parsePx(getComputedStyle(canvasTopL).height)) : (frozenRows * host.getOptions().rowHeight);\n            }\n\n            return host.getCellFromPoint(clientX - bcr[host.getOptions().rtl ? 'right' : 'left'] - document.body.scrollLeft, clientY - bcr.top + document.body.scrollTop + rowOffset + document.body.scrollTop).row;\n        }\n\n        return row;\n    }\n\n    function getFrozenCols() {\n        return frozenCols;\n    }\n\n    function getFrozenRows() {\n        return frozenRows;\n    }\n\n    function destroy(): void {\n        host = null;\n    }\n\n    return {\n        afterHeaderColumnDrag,\n        afterRenderRows,\n        afterSetOptions,\n        appendCachedRow,\n        applyColumnWidths,\n        bindAncestorScrollEvents,\n        beforeCleanupAndRenderCells,\n        calcCanvasWidth,\n        updateHeadersWidth: calcHeaderWidths,\n        isFrozenRow,\n        destroy,\n        getCanvasNodeFor,\n        getCanvasNodes,\n        getCanvasWidth,\n        getFooterRowCols,\n        getFooterRowColsFor,\n        getFooterRowColumn,\n        getFrozenCols,\n        getFrozenRows,\n        getHeaderCols,\n        getHeaderColsFor,\n        getHeaderColumn,\n        getHeaderRowCols,\n        getHeaderRowColsFor,\n        getHeaderRowColumn,\n        getRowFromCellNode,\n        getFrozenRowOffset: getRowOffset,\n        getScrollCanvasY,\n        getScrollContainerX,\n        getScrollContainerY,\n        getTopPanelFor,\n        getTopPanelNodes,\n        getViewportNodeFor,\n        getViewportNodes,\n        handleScrollH,\n        handleScrollV,\n        init,\n        layoutName: \"frozen\",\n        realScrollHeightChange,\n        reorderViewColumns,\n        resizeCanvas,\n        setPaneVisibility,\n        setScroller,\n        setOverflow,\n        updateCanvasWidth\n    }\n} as any;\n", "const { disableSelection, H, parsePx, spacerDiv } = Slick;export {\n     disableSelection, H, parsePx, spacerDiv\n};"],
  "mappings": "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",
  "names": ["frozenlayout_exports", "__export", "FrozenLayout", "disableSelection", "H", "parsePx", "spacerDiv", "FrozenLayout", "canvasWidth", "canvasWidthL", "canvasWidthR", "frozenBottom", "frozenRowIdx", "frozenCols", "frozenRows", "headersWidthL", "headersWidthR", "viewportTopH", "canvasBottomL", "canvasBottomR", "canvasTopL", "canvasTopR", "headerColsL", "headerColsR", "headerRowColsL", "headerRowColsR", "headerRowSpacerL", "headerRowSpacerR", "footerRowColsL", "footerRowColsR", "footerRowSpacerL", "footerRowSpacerR", "paneBottomL", "paneBottomR", "paneHeaderL", "paneHeaderR", "paneTopL", "paneTopR", "scrollContainerX", "scrollContainerY", "topPanelL", "topPanelR", "viewportBottomL", "viewportBottomR", "viewportTopL", "viewportTopR", "appendCachedRow", "row", "rowNodeL", "rowNodeR", "bottom", "calcCanvasWidth", "cols", "host", "i", "totalRowWidth", "init", "hostGrid", "spacerW", "options", "uisd", "H", "spacerDiv", "headerRowL", "topPanelLS", "footerRowL", "headerRowR", "topPanelRS", "footerRowR", "disableSelection", "adjustFrozenRowOption", "getHeaderCols", "getHeaderRowCols", "getFooterRowCols", "getCanvasNodeFor", "cell", "rightSide", "getCanvasWidth", "getCanvasNodes", "getScrollContainerX", "getScrollContainerY", "getViewportNodeFor", "getViewportNodes", "updateCanvasWidth", "oldCanvasWidth", "oldCanvasWidthL", "oldCanvasWidthR", "widthChanged", "scrollWidth", "vpi", "cwlPX", "cwrPX", "calcHeaderWidths", "vpminusPX", "rtl", "w", "getHeaderColumn", "getHeaderRowColumn", "target", "getFooterRowColumn", "getHeaderRowColsFor", "getFooterRowColsFor", "ii", "width", "vs", "getHeaderColsFor", "handleScrollH", "scrollLeft", "handleScrollV", "setScroller", "setPaneVisibility", "setOverflow", "alwaysHS", "alwaysVS", "bindAncestorScrollEvents", "elem", "afterHeaderColumnDrag", "applyColumnWidths", "x", "rule", "opts", "s", "e", "styles", "prop", "oldVal", "newVal", "getTopPanelFor", "getTopPanelNodes", "resizeCanvas", "_paneTopH", "_paneBottomH", "frozenRowsHeight", "parsePx", "paneBottomTop", "reorderViewColumns", "viewCols", "toFreeze", "col", "frozenColumns", "afterSetOptions", "arg", "getScrollCanvasY", "realScrollHeightChange", "h", "isFrozenRow", "beforeCleanupAndRenderCells", "rendered", "renderedFrozenRows", "afterRenderRows", "getRowOffset", "realScrollHeight", "getRowFromCellNode", "cellNode", "clientX", "clientY", "bcr", "rowOffset", "isBottom", "getFrozenCols", "getFrozenRows", "destroy"]
}

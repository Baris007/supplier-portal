var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __decoratorStart = (base) => {
  var _a68;
  return [, , , __create((_a68 = base == null ? void 0 : base[__knownSymbol("metadata")]) != null ? _a68 : null)];
};
var __decoratorStrings = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
var __expectFn = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError("Function expected") : fn;
var __decoratorContext = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError("Already initialized") : fns.push(__expectFn(fn || null)) });
var __decoratorMetadata = (array, target) => __defNormalProp(target, __knownSymbol("metadata"), array[3]);
var __runInitializers = (array, flags, self2, value) => {
  for (var i = 0, fns = array[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self2) : value = fns[i].call(self2, value);
  return value;
};
var __decorateElement = (array, flags, name, decorators, target, extra) => {
  var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
  var j = k > 3 ? array.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings[k + 5];
  var initializers = k > 3 && (array[j - 1] = []), extraInitializers = array[j] || (array[j] = []);
  var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc(k < 4 ? target : { get [name]() {
    return __privateGet(this, extra);
  }, set [name](x) {
    return __privateSet(this, extra, x);
  } }, name));
  k ? p && k < 4 && __name(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name(target, name);
  for (var i = decorators.length - 1; i >= 0; i--) {
    ctx = __decoratorContext(k, name, done = {}, array[3], extraInitializers);
    if (k) {
      ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn(target, x) : (x) => name in x };
      if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet : __privateMethod)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
      if (k > 2) access.set = p ? (x, y) => __privateSet(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
    }
    it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
    if (k ^ 4 || it === void 0) __expectFn(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
    else if (typeof it !== "object" || it === null) __typeError("Object expected");
    else __expectFn(fn = it.get) && (desc.get = fn), __expectFn(fn = it.set) && (desc.set = fn), __expectFn(fn = it.init) && initializers.unshift(fn);
  }
  return k || __decoratorMetadata(array, target), desc && __defProp(target, name, desc), p ? k ^ 4 ? extra : desc : target;
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateIn = (member, obj) => Object(obj) !== obj ? __typeError('Cannot use the "in" operator on this value') : member.has(obj);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/base/blockui.ts
var blockUICount = 0;
function blockUI(options) {
  function block() {
    var _a68;
    if (blockUICount++ > 0 || typeof document === "undefined")
      return;
    var div = document.createElement("div");
    div.className = "blockUI blockOverlay";
    div.setAttribute("style", `z-index: ${(_a68 = options == null ? void 0 : options.zIndex) != null ? _a68 : 2e3}; border: none; margin: 0px; padding: 0px; width: 100%; height: 100%; top: 0px; left: 0px; opacity: 0; cursor: wait; position: fixed;`);
    document.body.appendChild(div);
  }
  (options == null ? void 0 : options.useTimeout) && window.setTimeout(block, 0) || block();
}
function blockUndo() {
  var _a68;
  if (blockUICount < 1)
    return;
  if (--blockUICount === 0 && typeof document !== "undefined")
    (_a68 = document.body.querySelector(":scope > .blockUI.blockOverlay")) == null ? void 0 : _a68.remove();
}

// src/base/config.ts
var Config = {
  /**
   * This is the root path of your application. If your application resides under http://localhost/mysite/,
   * your root path is "/mysite/". This variable is automatically initialized by reading from a <link> element
   * with ID "ApplicationPath" from current page, which is usually located in your _LayoutHead.cshtml file
   */
  applicationPath: "/",
  /**
   * Email validation by default only allows ASCII characters. Set this to true if you want to allow unicode.
   */
  emailAllowOnlyAscii: true,
  /**
   * This is an optional callback that is used to load types lazily when they are not found in the
   * type registry. This is useful when a type is not available in currently loaded scripts 
   * (e.g. chunks / entry modules) but is available via some other means (e.g. a separate script file).
   * The method may return a type or a promise that resolves to a type. If either returns null, 
   * the type is considered to be not found.
   * The method is called with the type key and an optional kind parameter, which is used to distinguish
   * between different kinds of types (e.g. "editor" or "dialog" or "enum").
   */
  lazyTypeLoader: null,
  /**
   * This is the list of root namespaces that may be searched for types. For example, if you specify an editor type
   * of "MyEditor", first a class with name "MyEditor" will be searched, if not found, search will be followed by
   * "Serenity.MyEditor" and "MyApp.MyEditor" if you added "MyApp" to the list of root namespaces.
   *
   * You should usually add your application root namespace to this list in ScriptInit(ialization).ts file.
   */
  rootNamespaces: ["Serenity"],
  /**
   * This is an optional method for handling when user is not logged in. If a users session is expired 
   * and when a NotAuthorized response is received from a service call, Serenity will call this handler, so
   * you may intercept it and notify user about this situation and ask if she wants to login again...
   */
  notLoggedInHandler: null
};
if (typeof document !== "undefined") {
  pathLink = document.querySelector("link#ApplicationPath");
  if (pathLink != null) {
    Config.applicationPath = pathLink.getAttribute("href");
  }
}
var pathLink;

// src/base/criteria.ts
var CriteriaBuilder = class extends Array {
  /**
   * Creates a between criteria.
   * @param fromInclusive from value
   * @param toInclusive to value
   */
  bw(fromInclusive, toInclusive) {
    return [[this, ">=", fromInclusive], "and", [this, "<=", toInclusive]];
  }
  /**
   * Creates a contains criteria
   * @param value contains value
   */
  contains(value) {
    return [this, "like", "%" + value + "%"];
  }
  /**
   * Creates a endsWith criteria
   * @param value endsWith value
   */
  endsWith(value) {
    return [this, "like", "%" + value];
  }
  /**
   * Creates an equal (=) criteria
   * @param value equal value
   */
  eq(value) {
    return [this, "=", value];
  }
  /**
   * Creates a greater than criteria
   * @param value greater than value
   */
  gt(value) {
    return [this, ">", value];
  }
  /**
   * Creates a greater than or equal criteria
   * @param value greater than or equal value
   */
  ge(value) {
    return [this, ">=", value];
  }
  /**
   * Creates a in criteria
   * @param values in values
   */
  in(values) {
    return [this, "in", [values]];
  }
  /**
   * Creates a IS NULL criteria
   */
  isNull() {
    return ["is null", this];
  }
  /**
   * Creates a IS NOT NULL criteria
   */
  isNotNull() {
    return ["is not null", this];
  }
  /**
   * Creates a less than or equal to criteria
   * @param value less than or equal to value
   */
  le(value) {
    return [this, "<=", value];
  }
  /**
   * Creates a less than criteria
   * @param value less than value
   */
  lt(value) {
    return [this, "<", value];
  }
  /**
   * Creates a not equal criteria
   * @param value not equal value
   */
  ne(value) {
    return [this, "!=", value];
  }
  /**
   * Creates a LIKE criteria
   * @param value like value
   */
  like(value) {
    return [this, "like", value];
  }
  /**
   * Creates a STARTS WITH criteria
   * @param value startsWith value
   */
  startsWith(value) {
    return [this, "like", value + "%"];
  }
  /**
   * Creates a NOT IN criteria
   * @param values array of NOT IN values
   */
  notIn(values) {
    return [this, "not in", [values]];
  }
  /**
   * Creates a NOT LIKE criteria
   * @param value not like value
   */
  notLike(value) {
    return [this, "not like", value];
  }
};
var TOKEN_IDENTIFIER = 1;
var TOKEN_OPERATOR = 2;
var TOKEN_VALUE = 3;
var TOKEN_PARAM = 4;
var ParseError = function(expression, error, position) {
  this.expression = expression;
  this.error = error;
  this.position = position;
  this.toString = function() {
    return 'Error parsing expression: "' + expression + '", "' + error + ", position: " + position;
  };
};
function tokenize(expression) {
  var end, v;
  var tokens = [];
  var l = expression.length;
  var l1 = expression.length - 1;
  var openParens = 0;
  var index;
  var ch;
  function skipWhiteSpace() {
    while (index < l) {
      ch = expression.charAt(index);
      if (ch === " " || ch === "	") {
        index++;
        continue;
      }
      break;
    }
  }
  function readString() {
    end = index;
    var foundDoubles = false;
    while (end++ < l1) {
      ch = expression.charAt(end);
      if (ch === "'") {
        if (end < l1 && expression.charAt(end + 1) === "'") {
          end++;
          foundDoubles = true;
          continue;
        } else
          break;
      }
    }
    if (end === index || expression.charAt(end) !== "'")
      throw new ParseError(expression, "unterminated string", index);
    v = expression.substr(index + 1, end - index - 1);
    if (foundDoubles)
      v = v.replace(/''/g, "'");
  }
  function readNumber() {
    end = index;
    var foundDot = false;
    while (end < l1) {
      ch = expression.charAt(end + 1);
      if (ch >= "0" && ch <= "9" || !foundDot && ch === ".") {
        if (ch === ".")
          foundDot = true;
        end++;
      } else
        break;
    }
    v = parseFloat(expression.substring(index, end + 1));
  }
  function readIdentifier() {
    end = index;
    while (end < l1) {
      ch = expression.charAt(end + 1);
      if (ch == "_" || ch >= "A" && ch <= "Z" || ch >= "a" && ch <= "z" || ch >= "0" && ch <= "9") {
        end++;
      } else
        break;
    }
    v = expression.substr(index, end - index + 1);
  }
  function readParam() {
    index++;
    readIdentifier();
    if (!v.length)
      throw new ParseError(expression, "expected parameter name", index);
  }
  function readArrayList() {
    skipWhiteSpace();
    if (index >= l || expression.charAt(index) != "(") {
      if (index < l && expression.charAt(index) == "@") {
        readParam();
        index = end;
        return;
      }
      throw new ParseError(expression, "expected parenthesis", index);
    }
    index++;
    let values = [];
    while (true) {
      skipWhiteSpace();
      if (index >= l)
        throw new ParseError(expression, "expected parenthesis", index);
      ch = expression.charAt(index);
      if (ch == ",") {
        if (values.length == 0)
          throw new ParseError(expression, "unexpected comma", index);
        index++;
        skipWhiteSpace();
        ch = expression.charAt(index);
      } else if (ch == ")") {
        break;
      } else if (values.length > 0)
        throw new ParseError(expression, "expected comma", index);
      if (ch === "'") {
        readString();
        values.push(v);
        index = end + 1;
        continue;
      }
      if (ch >= "0" && ch <= "9") {
        readNumber();
        values.push(v);
        index = end + 1;
        continue;
      }
      if (ch == "n") {
        readIdentifier();
        if (v === "null") {
          values.push(null);
          index = end + 1;
          continue;
        }
      }
      throw new ParseError(expression, "unexpected token", index);
    }
    v = values;
  }
  for (index = 0; index < l; index++) {
    ch = expression.charAt(index);
    if (ch === " " || ch === "	")
      continue;
    if (ch == "_" || ch >= "A" && ch <= "Z" || ch >= "a" && ch <= "z") {
      readIdentifier();
      var w = v.toLowerCase();
      if (w == "is") {
        index = end + 1;
        skipWhiteSpace();
        readIdentifier();
        w = v.toLowerCase();
        if (w === "not") {
          index = end + 1;
          skipWhiteSpace();
          readIdentifier();
          if (v.toLowerCase() === "null") {
            tokens.push({
              t: TOKEN_OPERATOR,
              v: "is not null"
            });
          } else
            throw new ParseError(expression, 'expected "null"', index);
        } else if (w === "null") {
          tokens.push({
            t: TOKEN_OPERATOR,
            v: "is null"
          });
        } else
          throw new ParseError(expression, 'expected "null" or "not" keyword', index);
      } else if (w === "and" || w === "or" || w === "xor") {
        tokens.push({
          t: TOKEN_OPERATOR,
          v: w
        });
      } else if (w === "not") {
        const currentEnd = end;
        index = end + 1;
        skipWhiteSpace();
        readIdentifier();
        w = v.toLowerCase();
        if (w === "in") {
          index = end + 1;
          tokens.push({
            t: TOKEN_OPERATOR,
            v: "not in"
          });
          readArrayList();
          if (typeof v === "string") {
            tokens.push({
              t: TOKEN_PARAM,
              v
            });
          } else {
            tokens.push({
              t: TOKEN_VALUE,
              v
            });
          }
        } else if (w === "like") {
          tokens.push({
            t: TOKEN_OPERATOR,
            v: "not like"
          });
          index = end;
        } else {
          tokens.push({
            t: TOKEN_OPERATOR,
            v: "not"
          });
          index = currentEnd;
        }
        continue;
      } else if (w === "in") {
        tokens.push({
          t: TOKEN_OPERATOR,
          v: "in"
        });
        index = end + 1;
        readArrayList();
        if (typeof v === "string") {
          tokens.push({
            t: TOKEN_PARAM,
            v
          });
        } else {
          tokens.push({
            t: TOKEN_VALUE,
            v
          });
        }
        continue;
      } else if (w === "like") {
        tokens.push({
          t: TOKEN_OPERATOR,
          v: "like"
        });
      } else {
        tokens.push({
          t: TOKEN_IDENTIFIER,
          v
        });
      }
      index = end;
      continue;
    }
    if (ch === "@") {
      readParam();
      tokens.push({
        t: TOKEN_PARAM,
        v
      });
      index = end;
      continue;
    }
    if ((ch === "-" || ch === "+") && index < l1 && expression.charAt(index + 1) >= "0" && expression.charAt(index + 1) <= "9" || ch >= "0" && ch <= "9") {
      end = index;
      readNumber();
      tokens.push({
        t: TOKEN_VALUE,
        v
      });
      index = end;
      continue;
    }
    if (ch === "'") {
      end = index;
      readString();
      tokens.push({
        t: TOKEN_VALUE,
        v
      });
      index = end;
      continue;
    }
    if (ch === "=") {
      tokens.push({
        t: TOKEN_OPERATOR,
        v: ch
      });
      continue;
    }
    if (ch === "(") {
      openParens++;
      tokens.push({
        t: TOKEN_OPERATOR,
        v: ch
      });
      continue;
    }
    if (ch == ")") {
      if (openParens <= 0)
        throw new ParseError(expression, "unexpected parenthesis", index);
      openParens--;
      tokens.push({
        t: TOKEN_OPERATOR,
        v: ch
      });
      continue;
    }
    if (ch === ">" || ch === "<") {
      if (index < l1 && expression.charAt(index + 1) === "=") {
        tokens.push({
          t: TOKEN_OPERATOR,
          v: ch + "="
        });
        index++;
      } else {
        tokens.push({
          t: TOKEN_OPERATOR,
          v: ch
        });
      }
      continue;
    }
    throw new ParseError(expression, "unknown token", index);
  }
  if (openParens > 0)
    throw new ParseError(expression, "missing parenthesis", index);
  return tokens;
}
var operatorPrecedence = {
  "=": 4,
  ">": 4,
  "<": 4,
  ">=": 4,
  "<=": 4,
  "<>": 4,
  "!=": 4,
  "like": 5,
  "not like": 5,
  "in": 5,
  "not in": 5,
  "is null": 5,
  "is not null": 5,
  "not": 6,
  "and": 7,
  "xor": 8,
  "or": 9
};
function shuntingYard(tokens) {
  var result = [];
  var stack = [];
  for (var token of tokens) {
    if (token.t === TOKEN_OPERATOR) {
      var precedence = operatorPrecedence[token.v];
      if (precedence != null) {
        while (stack.length) {
          var prev = stack[stack.length - 1];
          if (prev.t !== TOKEN_OPERATOR || prev.v == "(")
            break;
          var prevPrecedence = operatorPrecedence[prev.v];
          if (prevPrecedence == null || prevPrecedence > precedence)
            break;
          result.push(stack.pop());
        }
        stack.push(token);
      } else if (token.v === "(") {
        stack.push(token);
      } else if (token.v === ")") {
        while (stack.length && (stack[stack.length - 1].t !== TOKEN_OPERATOR || stack[stack.length - 1].v !== "(")) {
          result.push(stack.pop());
        }
        stack.pop();
      } else
        result.push(token);
    } else
      result.push(token);
  }
  while (stack.length) {
    var tok = stack.pop();
    if (tok.t == TOKEN_OPERATOR && (tok.v === "(" || tok.v === ")"))
      throw "Mismatched parentheses in criteria expression!";
    result.push(tok);
  }
  return result;
}
function rpnTokensToCriteria(rpnTokens, getParam) {
  var stack = [];
  for (var token of rpnTokens) {
    switch (token.t) {
      case TOKEN_IDENTIFIER: {
        stack.push([token.v]);
        break;
      }
      case TOKEN_VALUE: {
        stack.push(Array.isArray(token.v) ? [token.v] : token.v);
        break;
      }
      case TOKEN_PARAM: {
        if (!getParam)
          throw new Error("getParam must be passed for parameterized expressions!");
        var prm = getParam(token.v);
        stack.push(Array.isArray(prm) ? [prm] : prm);
        break;
      }
      case TOKEN_OPERATOR: {
        switch (token.v) {
          case "not":
          case "is null":
          case "is not null":
            if (!stack.length)
              throw new Error("Unary operator " + token.v + " requires a value!");
            stack.push([token.v, stack.pop()]);
            break;
          default:
            if (stack.length < 2)
              throw new Error("Binary operator " + token.v + " requires two values!");
            var r = stack.pop();
            var l = stack.pop();
            stack.push([l, token.v, r]);
            break;
        }
        break;
      }
      default:
        throw new Error("Invalid operator type: " + token.t + "!");
    }
  }
  if (stack.length != 1)
    throw new Error("Error evaluating expression!");
  return stack.pop();
}
function internalParse(expression, getParam) {
  var tokens = tokenize(expression);
  var rpnTokens = shuntingYard(tokens);
  return rpnTokensToCriteria(rpnTokens, getParam);
}
function parseCriteria(exprOrStrings, ...values) {
  if (!(exprOrStrings == null ? void 0 : exprOrStrings.length))
    return [];
  if (typeof exprOrStrings === "string") {
    return internalParse(
      exprOrStrings,
      values == null || values[0] == null ? null : (name) => values[0][name]
    );
  } else if (!values.length)
    return internalParse(exprOrStrings.join(""));
  var expression = String.raw({ raw: exprOrStrings }, ...values.map((x, i) => "@__" + i));
  return internalParse(expression, (name) => name.startsWith("__") ? values[parseInt(name.substring(2), 10)] : void 0);
}
var CriteriaOperator = /* @__PURE__ */ ((CriteriaOperator2) => {
  CriteriaOperator2["paren"] = "()";
  CriteriaOperator2["not"] = "not";
  CriteriaOperator2["isNull"] = "is null";
  CriteriaOperator2["isNotNull"] = "is not null";
  CriteriaOperator2["exists"] = "exists";
  CriteriaOperator2["and"] = "and";
  CriteriaOperator2["or"] = "or";
  CriteriaOperator2["xor"] = "xor";
  CriteriaOperator2["eq"] = "=";
  CriteriaOperator2["ne"] = "!=";
  CriteriaOperator2["gt"] = ">";
  CriteriaOperator2["ge"] = ">=";
  CriteriaOperator2["lt"] = "<";
  CriteriaOperator2["le"] = "<=";
  CriteriaOperator2["in"] = "in";
  CriteriaOperator2["notIn"] = "not in";
  CriteriaOperator2["like"] = "like";
  CriteriaOperator2["notLike"] = "not like";
  return CriteriaOperator2;
})(CriteriaOperator || {});
function Criteria(field) {
  var builder = CriteriaBuilder.of(field);
  !builder.eq && (builder.__proto__ = CriteriaBuilder.prototype);
  return builder;
}
Criteria.and = function and(c1, c2, ...rest) {
  var result = Criteria.join(c1, "and", c2);
  if (rest) {
    for (let k of rest)
      result = Criteria.join(result, "and", k);
  }
  return result;
};
Criteria.Operator = CriteriaOperator;
Criteria.isEmpty = function isEmpty(c) {
  return c == null || c.length === 0 || c.length === 1 && typeof c[0] === "string" && c[0].length === 0;
};
Criteria.join = function join(c1, op, c2) {
  if (Criteria.isEmpty(c1))
    return c2;
  if (Criteria.isEmpty(c2))
    return c1;
  return [c1, op, c2];
};
Criteria.not = function not(c) {
  return ["not", c];
};
Criteria.or = function or(c1, c2, ...rest) {
  var result = Criteria.join(c1, "or", c2);
  if (rest) {
    for (let k of rest)
      result = Criteria.join(result, "or", k);
  }
  return result;
};
Criteria.paren = function parent(c) {
  return Criteria.isEmpty(c) ? c : ["()", c];
};
Criteria.parse = parseCriteria;

// src/base/debounce.ts
function debounce(func, wait, immediate) {
  var timeout, args, context, timestamp, result;
  if (null == wait) wait = 100;
  var later = function() {
    var last = Date.now() - timestamp;
    if (last < wait && last >= 0) {
      timeout = setTimeout(later, wait - last);
    } else {
      timeout = null;
      if (!immediate)
        result = func.apply(context, args);
      if (!timeout)
        context = args = null;
    }
  };
  var debounced = function() {
    context = this;
    args = arguments;
    timestamp = Date.now();
    if (!timeout) {
      timeout = setTimeout(later, wait);
      if (immediate)
        result = func.apply(context, args);
    }
    return result;
  };
  debounced.clear = function() {
    if (timeout) {
      clearTimeout(timeout);
      timeout = null;
    }
  };
  debounced.flush = function() {
    if (timeout) {
      result = func.apply(context, args);
      context = args = null;
      clearTimeout(timeout);
      timeout = null;
    }
  };
  return debounced;
}

// src/base/environment.ts
function getjQuery() {
  return typeof jQuery === "function" ? jQuery : typeof $ === "function" && $.fn ? $ : void 0;
}
function isBS3() {
  var _a68, _b, _c, _d;
  return (((_d = (_c = (_b = (_a68 = getjQuery()) == null ? void 0 : _a68.fn) == null ? void 0 : _b.modal) == null ? void 0 : _c.Constructor) == null ? void 0 : _d.VERSION) + "").charAt(0) == "3";
}
function isBS5Plus() {
  return typeof bootstrap !== "undefined" && !!bootstrap.Modal && (bootstrap.Modal.VERSION + "").charAt(0) != "4";
}

// src/base/fluent-events.ts
var namespaceRegex = /[^.]*(?=\..*)\.|.*/;
var stripNameRegex = /\..*/;
var stripUidRegex = /::\d+$/;
var uidEvent = 1;
var customEvents = {
  mouseenter: "mouseover",
  mouseleave: "mouseout"
};
function makeEventUid(prefix) {
  return `${prefix}::${uidEvent++}`;
}
var eventRegistry = /* @__PURE__ */ new WeakMap();
function disposeDescendants(element) {
  element.querySelectorAll("*").forEach((node) => disposeElement(node));
}
function disposeElement(element) {
  let events = eventRegistry.get(element);
  if (!events)
    return;
  eventRegistry.delete(element);
  var disposeHandlers = events["disposing"];
  if (disposeHandlers) {
    for (const [_, handler] of Object.entries(disposeHandlers)) {
      if (typeof handler.callable === "function") {
        try {
          handler.callable.call(element, { target: element });
        } catch (e) {
        }
      }
    }
  }
  for (const [typeEvent, handlers] of Object.entries(events)) {
    for (const [handlerKey, handler] of Object.entries(handlers)) {
      element.removeEventListener(typeEvent, handler, Boolean(handler.delegationSelector));
      delete handlers[handlerKey];
    }
  }
}
function getElementEvents(element) {
  var events = eventRegistry.get(element);
  if (!events)
    eventRegistry.set(element, events = {});
  return events;
}
function hydrateEvent(obj, meta = {}) {
  for (const [key, value] of Object.entries(meta)) {
    if (key === "bubbles" || key === "cancelable") {
      continue;
    }
    try {
      obj[key] = value;
    } catch (e) {
      Object.defineProperty(obj, key, {
        configurable: true,
        get() {
          return value;
        }
      });
    }
  }
  return obj;
}
function baseHandler(element, fn) {
  return function handler(event) {
    hydrateEvent(event, { delegateTarget: element });
    if (handler.oneOff) {
      removeListener(element, event.type, fn);
    }
    return fn.apply(element, [event]);
  };
}
function delegationHandler(element, selector, fn) {
  return function handler(event) {
    const domElements = element.querySelectorAll(selector);
    for (let { target } = event; target && target !== this; target = target.parentNode) {
      for (const domElement of domElements) {
        if (domElement !== target) {
          continue;
        }
        hydrateEvent(event, { delegateTarget: target });
        if (handler.oneOff) {
          removeListener(element, event.type, selector, fn);
        }
        return fn.apply(target, [event]);
      }
    }
  };
}
function findHandler(handlers, callable, delegationSelector = null) {
  return Object.values(handlers).find((event) => event.callable === callable && event.delegationSelector === delegationSelector);
}
function normalizeParameters(originalTypeEvent, handler, delegationFunction) {
  const isDelegated = typeof handler === "string";
  const callable = isDelegated ? delegationFunction : handler || delegationFunction;
  let typeEvent = getTypeEvent(originalTypeEvent);
  if (originalTypeEvent.indexOf(".bs.") >= 0)
    typeEvent = originalTypeEvent;
  return [isDelegated, callable, typeEvent];
}
function addListener(element, originalTypeEvent, handler, delegationFunction, oneOff) {
  if (typeof originalTypeEvent !== "string" || !element) {
    return;
  }
  const $2 = getjQuery();
  if ($2) {
    let $element = $2(element);
    if (oneOff)
      $element.one(originalTypeEvent, handler, delegationFunction);
    else
      $element.on(originalTypeEvent, handler, delegationFunction);
    return;
  }
  let [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction);
  if (!callable)
    return;
  if (originalTypeEvent in customEvents) {
    const wrapFunction = (fn2) => {
      return function(event) {
        if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {
          return fn2.call(this, event);
        }
      };
    };
    callable = wrapFunction(callable);
  }
  const events = getElementEvents(element);
  const handlers = events[typeEvent] || (events[typeEvent] = {});
  const previousFunction = findHandler(handlers, callable, isDelegated ? handler : null);
  if (previousFunction) {
    previousFunction.oneOff = previousFunction.oneOff && oneOff;
    return;
  }
  const uid = makeEventUid(originalTypeEvent.replace(namespaceRegex, ""));
  const fn = isDelegated ? delegationHandler(element, handler, callable) : baseHandler(element, callable);
  fn.delegationSelector = isDelegated ? handler : null;
  fn.callable = callable;
  fn.oneOff = oneOff;
  fn.uidEvent = uid;
  handlers[uid] = fn;
  element.addEventListener(typeEvent, fn, isDelegated);
}
function removeHandler(element, events, typeEvent, handler, delegationSelector) {
  const fn = findHandler(events[typeEvent], handler, delegationSelector);
  if (!fn) {
    return;
  }
  element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));
  delete events[typeEvent][fn.uidEvent];
}
function removeNamespacedHandlers(element, events, typeEvent, namespace) {
  const handlers = events[typeEvent] || {};
  for (const [handlerKey, handler] of Object.entries(handlers)) {
    if (handlerKey.includes(namespace)) {
      removeHandler(element, events, typeEvent, handler.callable, handler.delegationSelector);
    }
  }
}
function getTypeEvent(event) {
  event = event.replace(stripNameRegex, "");
  return customEvents[event] || event;
}
function removeListener(element, originalTypeEvent, handler, delegationHandler2) {
  if (typeof originalTypeEvent !== "string" || !element) {
    return;
  }
  const $2 = getjQuery();
  if ($2) {
    $2(element).off(originalTypeEvent, handler, delegationHandler2);
    return;
  }
  const [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationHandler2);
  const inNamespace = typeEvent !== originalTypeEvent;
  const events = getElementEvents(element);
  const handlers = events[typeEvent] || {};
  const isNamespace = originalTypeEvent.startsWith(".");
  if (typeof callable !== "undefined") {
    if (!Object.keys(handlers).length) {
      return;
    }
    removeHandler(element, events, typeEvent, callable, isDelegated ? handler : null);
    return;
  }
  if (isNamespace) {
    for (const elementEvent of Object.keys(events)) {
      removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));
    }
  }
  for (const [keyHandlers, handler2] of Object.entries(handlers)) {
    const handlerKey = keyHandlers.replace(stripUidRegex, "");
    if (!inNamespace || originalTypeEvent.includes(handlerKey)) {
      removeHandler(element, events, typeEvent, handler2.callable, handler2.delegationSelector);
    }
  }
}
function triggerEvent(element, type, args) {
  var _a68, _b;
  if (typeof type !== "string" || !element) {
    return null;
  }
  const $2 = getjQuery();
  const typeEvent = getTypeEvent(type);
  const inNamespace = type !== typeEvent;
  let jQueryEvent = null;
  let bubbles = (_a68 = args == null ? void 0 : args.bubbles) != null ? _a68 : true;
  let nativeDispatch = true;
  let defaultPrevented = false;
  if (inNamespace && $2) {
    jQueryEvent = $2.Event(type, args);
    $2(element).trigger(jQueryEvent);
    bubbles = bubbles && !jQueryEvent.isPropagationStopped();
    nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();
    defaultPrevented = jQueryEvent.isDefaultPrevented();
  }
  const evt = hydrateEvent(new Event(type, { bubbles, cancelable: (_b = args == null ? void 0 : args.cancelable) != null ? _b : true }), args);
  if (defaultPrevented) {
    evt.preventDefault();
  }
  if (nativeDispatch) {
    element.dispatchEvent(evt);
  }
  if (evt.defaultPrevented && jQueryEvent) {
    jQueryEvent.preventDefault();
  }
  return evt;
}

// src/base/symbols.ts
var isAssignableFromSymbol = Symbol.for("Serenity.isAssignableFrom");
var isInstanceOfTypeSymbol = Symbol.for("Serenity.isInstanceOfType");
var implementedInterfacesSymbol = Symbol.for("Serenity.implementedInterfaces");
var localTextTableSymbol = Symbol.for("Serenity.localTextTable");
var scriptDataHashSymbol = Symbol.for("Serenity.scriptDataHash");
var scriptDataSymbol = Symbol.for("Serenity.scriptData");
var isInterfaceTypeSymbol = Symbol.for("Serenity.isInterfaceType");
var typeRegistrySymbol = Symbol.for("Serenity.typeRegistry");

// src/base/system-internal.ts
var typeInfoProperty = "typeInfo";
var globalObject = typeof globalThis !== "undefined" && globalThis || typeof window !== "undefined" && window || typeof self !== "undefined" && self || // @ts-ignore check for global
typeof global !== "undefined" && global || {};
function merge(arr1, arr2) {
  if (!arr1 || !arr2)
    return (arr1 || arr2 || []).slice();
  function distinct(arr) {
    return arr.filter((item, pos) => arr.indexOf(item) === pos);
  }
  return distinct(arr1.concat(arr2));
}
function getTypeRegistry() {
  let typeRegistry = globalObject[typeRegistrySymbol];
  if (!typeRegistry)
    typeRegistry = globalObject[typeRegistrySymbol] = {};
  return typeRegistry;
}
function autoRegisterViaTypeInfo(type) {
  var _a68;
  if (!Object.prototype.hasOwnProperty.call(type, typeInfoProperty))
    return;
  var typeInfo = type[typeInfoProperty];
  if (!typeInfo || typeInfo.registered || !typeInfo.typeName)
    return;
  if (!getTypeRegistry()[typeInfo.typeName])
    getTypeRegistry()[typeInfo.typeName] = type;
  if (((_a68 = typeInfo.interfaces) == null ? void 0 : _a68.length) && !Object.prototype.hasOwnProperty.call(implementedInterfacesSymbol)) {
    Object.defineProperty(type, implementedInterfacesSymbol, {
      value: merge(type[implementedInterfacesSymbol], typeInfo.interfaces),
      configurable: true
    });
  }
  if (!Object.prototype.hasOwnProperty.call(isInterfaceTypeSymbol)) {
    if (typeInfo.typeKind === "class" || typeInfo.typeKind === "editor" || typeInfo.typeKind === "formatter") {
      Object.defineProperty(type, isInterfaceTypeSymbol, { value: false, configurable: true });
    } else if (typeInfo.typeKind === "enum") {
      Object.defineProperty(type, isInterfaceTypeSymbol, { value: null, configurable: true });
    } else if (typeInfo.typeKind === "interface") {
      Object.defineProperty(type, isInterfaceTypeSymbol, { value: true, configurable: true });
    }
  }
  typeInfo.registered = true;
  return;
}
function internalRegisterType(type, typeName, interfaces) {
  let typeInfo = ensureTypeInfo(type);
  if (typeName && typeName !== typeInfo.typeName)
    typeInfo.typeName = typeName;
  if (typeInfo.typeName)
    getTypeRegistry()[typeInfo.typeName] = type;
  if ((interfaces == null ? void 0 : interfaces.length) && typeInfo.interfaces !== interfaces) {
    interfaces = typeInfo.interfaces = merge(typeInfo.interfaces, interfaces);
    Object.defineProperty(type, implementedInterfacesSymbol, {
      value: merge(type[implementedInterfacesSymbol], interfaces),
      configurable: true
    });
  }
  typeInfo.registered = true;
  return typeInfo;
}
function ensureTypeInfo(type) {
  let typeInfo;
  if (!Object.prototype.hasOwnProperty.call(type, typeInfoProperty) || !(typeInfo = type[typeInfoProperty])) {
    typeInfo = {};
    Object.defineProperty(type, typeInfoProperty, { value: typeInfo, configurable: true });
    return typeInfo;
  }
  if (!typeInfo.registered)
    autoRegisterViaTypeInfo(type);
  return typeInfo;
}
function peekTypeInfo(type) {
  if (!type || !Object.prototype.hasOwnProperty.call(type, typeInfoProperty))
    return void 0;
  var typeInfo = type[typeInfoProperty];
  if (typeInfo && !typeInfo.registered)
    autoRegisterViaTypeInfo(type);
  return typeInfo;
}
function getTypeNameProp(type) {
  var _a68;
  return ((_a68 = peekTypeInfo(type)) == null ? void 0 : _a68.typeName) || void 0;
}
function setTypeNameProp(type, value) {
  ensureTypeInfo(type).typeName = value;
  autoRegisterViaTypeInfo(type);
}

// src/base/system.ts
function getGlobalObject() {
  return globalObject;
}
function omitUndefined(x) {
  if (x == null)
    return x;
  let obj = /* @__PURE__ */ Object.create(null);
  Object.entries(x).forEach(([key, value]) => value !== void 0 && (obj[key] = value));
  return obj;
}
function getNested(from, name) {
  var a = name.split(".");
  for (var i = 0; i < a.length; i++) {
    from = from[a[i]];
    if (from == null)
      return null;
  }
  return from;
}
function getType(name, target) {
  var type;
  if (target == null) {
    type = getTypeRegistry()[name];
    if (type != null || globalObject == void 0 || name === "Object")
      return type;
    target = globalObject;
  }
  type = getNested(target, name);
  if (typeof type !== "function")
    return null;
  return type;
}
function getTypeFullName(type) {
  return getTypeNameProp(type) || type.name || (type.toString().match(/^\s*function\s*([^\s(]+)/) || [])[1] || "Object";
}
function getTypeShortName(type) {
  var fullName = getTypeFullName(type);
  var bIndex = fullName == null ? void 0 : fullName.indexOf("[");
  var nsIndex = fullName == null ? void 0 : fullName.lastIndexOf(".", bIndex >= 0 ? bIndex : fullName.length);
  return nsIndex > 0 ? fullName.substring(nsIndex + 1) : fullName;
}
function getInstanceType(instance) {
  if (instance == null)
    throw "Can't get instance type of null or undefined!";
  try {
    return instance.constructor;
  } catch (ex) {
    return Object;
  }
}
function isAssignableFrom(target, type) {
  if (target === type || type.prototype instanceof target)
    return true;
  if (typeof target[isAssignableFromSymbol] === "function")
    return target[isAssignableFromSymbol](type);
  return false;
}
function isInstanceOfType(instance, type) {
  if (instance == null)
    return false;
  if (typeof type[isInstanceOfTypeSymbol] === "function")
    return type[isInstanceOfTypeSymbol](instance);
  return isAssignableFrom(type, getInstanceType(instance));
}
function getBaseType(type) {
  if (type == null || type === Object || !type.prototype || type[isInterfaceTypeSymbol] === true)
    return null;
  return Object.getPrototypeOf(type.prototype).constructor;
}
function interfaceIsAssignableFrom(from) {
  return from != null && Array.isArray(from[implementedInterfacesSymbol]) && from[implementedInterfacesSymbol].some((x) => x === this || getTypeNameProp(this) && x[isInterfaceTypeSymbol] && getTypeNameProp(x) === getTypeNameProp(this));
}
function registerClass(type, name, intf) {
  internalRegisterType(type, name, intf);
  Object.defineProperty(type, isInterfaceTypeSymbol, { value: false, configurable: true });
}
function registerEnum(type, name, enumKey) {
  internalRegisterType(type, name, void 0);
  if (enumKey && enumKey != name) {
    const typeStore = getTypeRegistry();
    if (!typeStore[enumKey])
      typeStore[enumKey] = type;
  }
  Object.defineProperty(type, isInterfaceTypeSymbol, { value: null, configurable: true });
}
function registerInterface(type, name, intf) {
  internalRegisterType(type, name, intf);
  Object.defineProperty(type, isInterfaceTypeSymbol, { value: true, configurable: true });
  Object.defineProperty(type, isAssignableFromSymbol, { value: interfaceIsAssignableFrom, configurable: true });
}
var Enum;
((Enum2) => {
  Enum2.toString = (enumType, value) => {
    var _a68;
    if (value == null)
      return "";
    if (typeof value !== "number")
      return "" + value;
    var values = enumType;
    if (value === 0 || !((_a68 = peekTypeInfo(enumType)) == null ? void 0 : _a68.enumFlags)) {
      for (var i in values) {
        if (values[i] === value) {
          return i;
        }
      }
      return value == null ? "" : value.toString();
    } else {
      var parts = [];
      for (var i in values) {
        if (typeof values[i] !== "number")
          continue;
        if (values[i] & value) {
          parts.push(i);
          value -= values[i];
        }
      }
      if (value != 0)
        parts.push(value.toString());
      return parts.join(" | ");
    }
  };
  Enum2.getValues = (enumType) => {
    var parts = [];
    var values = enumType;
    for (var i in values) {
      if (Object.prototype.hasOwnProperty.call(values, i) && typeof values[i] === "number")
        parts.push(values[i]);
    }
    return parts;
  };
})(Enum || (Enum = {}));
var isEnum = (type) => {
  return typeof type !== "function" && type[isInterfaceTypeSymbol] === null;
};
function initFormType(typ, nameWidgetPairs) {
  for (var i = 0; i < nameWidgetPairs.length - 1; i += 2) {
    (function(name, widget) {
      Object.defineProperty(typ.prototype, name, {
        get: function() {
          return this.w(name, widget);
        },
        enumerable: true,
        configurable: true
      });
    })(nameWidgetPairs[i], nameWidgetPairs[i + 1]);
  }
}
var _fieldsProxy = new Proxy({}, { get: (_, p) => p });
function fieldsProxy() {
  return _fieldsProxy;
}
function isArrayLike(obj) {
  return typeof obj === "object" && obj != null && typeof obj.length === "number" && typeof obj.nodeType !== "number";
}
function isPromiseLike(obj) {
  return obj instanceof Promise || typeof obj === "object" && obj != null && typeof obj.then === "function" && typeof obj.catch === "function";
}
var EditorAttribute = class {
};
registerClass(EditorAttribute, "Serenity.EditorAttribute");
var ISlickFormatter = class {
};
registerInterface(ISlickFormatter, "Serenity.ISlickFormatter");
function registerFormatter(type, name, intf) {
  return registerClass(type, name, merge([ISlickFormatter], intf));
}
function registerEditor(type, name, intf) {
  var _a68;
  registerClass(type, name, intf);
  if (!((_a68 = peekTypeInfo(type).customAttributes) == null ? void 0 : _a68.some((x) => getInstanceType(x) === x)))
    addCustomAttribute(type, new EditorAttribute());
}
function addCustomAttribute(type, attr2) {
  let typeInfo = ensureTypeInfo(type);
  if (!typeInfo.customAttributes)
    typeInfo.customAttributes = [attr2];
  else
    typeInfo.customAttributes.push(attr2);
}
function getCustomAttribute(type, attrType, inherit = true) {
  var _a68;
  if (!type || attrType == null)
    return null;
  do {
    let attrs = (_a68 = peekTypeInfo(type)) == null ? void 0 : _a68.customAttributes;
    if (attrs) {
      for (var i = attrs.length - 1; i >= 0; i--) {
        let attr2 = attrs[i];
        if (attr2 != null && isInstanceOfType(attr2, attrType))
          return attr2;
      }
    }
  } while (inherit && (type = getBaseType(type)));
}
function hasCustomAttribute(type, attrType, inherit = true) {
  return getCustomAttribute(type, attrType, inherit) != null;
}
function getCustomAttributes(type, attrType, inherit = true) {
  var _a68;
  if (!type)
    return [];
  const allTypes = attrType === void 0;
  var result = [];
  do {
    let attrs = (_a68 = peekTypeInfo(type)) == null ? void 0 : _a68.customAttributes;
    if (attrs) {
      for (var i = attrs.length - 1; i >= 0; i--) {
        let attr2 = attrs[i];
        if (attr2 && (allTypes || attrType && isInstanceOfType(attr2, attrType))) {
          result.push(attr2);
        }
      }
    }
  } while (inherit && (type = getBaseType(type)));
  return result;
}
function classTypeInfo(typeName, interfaces) {
  return { typeKind: "class", typeName, interfaces };
}
function editorTypeInfo(typeName, interfaces) {
  return { typeKind: "editor", typeName, interfaces, customAttributes: [new EditorAttribute()] };
}
function formatterTypeInfo(typeName, interfaces) {
  return { typeKind: "formatter", typeName, interfaces: merge([ISlickFormatter], interfaces) };
}
function interfaceTypeInfo(typeName, interfaces) {
  return { typeKind: "interface", typeName, interfaces };
}
function registerType(type) {
  if (!type)
    throw "Decorators.register is called with null target!";
  let typeInfo = peekTypeInfo(type);
  if (!typeInfo)
    throw `Decorators.register is called on type "${type.name}" that does not have a static typeInfo property!`;
  if (!typeInfo.typeName)
    throw `Decorators.register is called on type "${type.name}", but it's typeInfo property does not have a typeName!`;
}

// src/base/html.ts
var esc = {
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;",
  "&": "&amp;"
};
function escFunc(a) {
  return esc[a];
}
function htmlEncode(s) {
  if (s == null)
    return "";
  if (typeof s !== "string")
    s = "" + s;
  return s.replace(/[<>"'&]/g, escFunc);
}
function toggleClass(el, cls, add) {
  if (!el || cls == null || !cls.length)
    return;
  if (cls.indexOf(" ") < 0) {
    el.classList.toggle(cls, add);
    return;
  }
  var k = cls.split(" ").map((x) => x.trim()).filter((x) => x.length);
  for (var a of k)
    el.classList.toggle(a, add);
}
function addClass(el, cls) {
  return toggleClass(el, cls, true);
}
function removeClass(el, cls) {
  return toggleClass(el, cls, false);
}
function appendToNode(parent2, child) {
  if (child == null || child === false)
    return;
  if (isArrayLike(child)) {
    for (var i = 0; i < child.length; i++) {
      appendToNode(parent2, child[i]);
    }
  } else if (typeof child === "string") {
    parent2.appendChild(document.createTextNode(child));
  } else if (child instanceof Node) {
    parent2.appendChild(child);
  } else if (isPromiseLike(child)) {
    const placeholder = parent2.appendChild(document.createComment("Loading content..."));
    child.then((result) => {
      var _a68;
      const fragment = document.createDocumentFragment();
      appendToNode(fragment, result);
      (_a68 = placeholder.parentElement) == null ? void 0 : _a68.replaceChild(fragment, placeholder);
    }, (error) => {
      placeholder.textContent = "Error loading content: " + error;
      throw error;
    });
  } else {
    parent2.append(child);
  }
}

// src/base/fluent.ts
function Fluent(tagOrElement) {
  if (!(this instanceof Fluent)) {
    if (typeof tagOrElement === "string")
      return new Fluent(document.createElement(tagOrElement));
    return new Fluent(tagOrElement);
  }
  this.el = tagOrElement;
  return this;
}
((Fluent2) => {
  function on(element, type, handler, delegationHandler2) {
    addListener(
      element,
      type,
      handler,
      delegationHandler2,
      /*oneOff*/
      false
    );
  }
  Fluent2.on = on;
  function one(element, type, handler, delegationHandler2) {
    addListener(element, type, handler, delegationHandler2, true);
  }
  Fluent2.one = one;
  function off(element, originalTypeEvent, handler, delegationHandler2) {
    return removeListener(element, originalTypeEvent, handler, delegationHandler2);
  }
  Fluent2.off = off;
  function trigger(element, type, args) {
    return triggerEvent(element, type, args);
  }
  Fluent2.trigger = trigger;
  function addClass2(element, value) {
    toggleClass(element, toClassName(value), true);
  }
  Fluent2.addClass = addClass2;
  function empty(element) {
    if (!element)
      return;
    if (typeof element.hasChildNodes === "function" && element.hasChildNodes()) {
      let $2 = getjQuery();
      if ($2)
        $2(element).empty();
      else {
        disposeDescendants(element);
        element.innerHTML = "";
      }
    } else
      element.innerHTML = "";
  }
  Fluent2.empty = empty;
  function isVisibleLike(element) {
    return !!(element && (element.offsetWidth || element.offsetHeight || element.getClientRects().length));
  }
  Fluent2.isVisibleLike = isVisibleLike;
  function remove(element) {
    if (!element)
      return;
    let $2 = getjQuery();
    if ($2) {
      $2(element).remove();
    } else {
      disposeDescendants(element);
      disposeElement(element);
      element.remove();
    }
  }
  Fluent2.remove = remove;
  function removeClass2(element, value) {
    toggleClass(element, toClassName(value), false);
  }
  Fluent2.removeClass = removeClass2;
  function toggle(element, flag) {
    element && element.style && (element.style.display = flag ? "" : flag != null && !flag ? "none" : element.style.display == "none" ? "" : "none");
  }
  Fluent2.toggle = toggle;
  function toggleClass2(element, value, add) {
    element && toggleClass(element, toClassName(value), add);
  }
  Fluent2.toggleClass = toggleClass2;
  function toClassName(value) {
    if (typeof value === "string")
      return value;
    if (Array.isArray(value))
      return value.map(toClassName).filter(Boolean).join(" ");
    if (typeof value !== "boolean" && value != null)
      return "" + value;
    return "";
  }
  Fluent2.toClassName = toClassName;
  function isInputLike(element) {
    return isInputTag(element == null ? void 0 : element.nodeName);
  }
  Fluent2.isInputLike = isInputLike;
  Fluent2.inputLikeSelector = "input,select,textarea,button";
  function isInputTag(tag) {
    return /^(?:input|select|textarea|button)$/i.test(tag);
  }
  Fluent2.isInputTag = isInputTag;
  function isDefaultPrevented(event) {
    return event != null && (!!event.defaultPrevented || typeof event.isDefaultPrevented === "function" && !!event.isDefaultPrevented());
  }
  Fluent2.isDefaultPrevented = isDefaultPrevented;
  function eventProp(event, prop) {
    if (!event)
      return void 0;
    if (typeof event[prop] !== "undefined")
      return event[prop];
    if (typeof event.originalEvent === "object" && typeof event.originalEvent[prop] !== "undefined")
      return event.originalEvent[prop];
    if (typeof event.detail === "object")
      return event.detail[prop];
  }
  Fluent2.eventProp = eventProp;
})(Fluent || (Fluent = {}));
function extractNode(element) {
  return element instanceof EventTarget || typeof element === "string" ? element : element == null ? void 0 : element.el;
}
function extractElement(element) {
  return element instanceof EventTarget || typeof element === "string" ? element : element == null ? void 0 : element.el;
}
Fluent.prototype.addClass = function(value) {
  Fluent.addClass(this.el, value);
  return this;
};
Fluent.prototype.after = function(content) {
  if (this.el) {
    const node = extractNode(content);
    if (node instanceof Element)
      this.el.insertAdjacentElement("afterend", node);
    else if (node instanceof DocumentFragment) {
      Fluent(node).insertAfter(this.el);
    } else if (node != null) {
      this.el.insertAdjacentText("afterend", "" + node);
    }
  }
  return this;
};
Fluent.prototype.append = function(child) {
  this.el && this.el.append(extractNode(child));
  return this;
};
Fluent.prototype.appendTo = function(parent2) {
  if (this.el) {
    parent2 = extractElement(parent2);
    if (!parent2)
      this.el.remove();
    else
      parent2.appendChild(this.el);
  }
  return this;
};
Fluent.prototype.attr = function(name, value) {
  var _a68;
  if (value === void 0 && arguments.length < 2)
    return (_a68 = this.el) == null ? void 0 : _a68.getAttribute(name);
  if (this.el) {
    if (value == null || value === false)
      this.el.removeAttribute(name);
    else if (typeof value === "string")
      this.el.setAttribute(name, value);
    else if (typeof value === "number")
      this.el.setAttribute(name, "" + value);
    else
      this.el.setAttribute(name, "true");
  }
  return this;
};
Fluent.prototype.before = function(content) {
  if (this.el) {
    const node = extractNode(content);
    if (node instanceof Element)
      this.el.insertAdjacentElement("beforebegin", node);
    else if (node instanceof DocumentFragment) {
      Fluent(node).insertBefore(this.el);
    } else if (node != null) {
      this.el.insertAdjacentText("beforebegin", "" + node);
    }
  }
  return this;
};
Fluent.prototype.children = function(selector) {
  var _a68, _b;
  if (selector == null)
    return Array.from(((_a68 = this.el) == null ? void 0 : _a68.children) || []);
  return Array.from(((_b = this.el) == null ? void 0 : _b.children) || []).filter((x) => x.matches(selector));
};
Fluent.prototype.class = function(value) {
  this.el && (this.el.className = Fluent.toClassName(value));
  return this;
};
Fluent.prototype.click = function(listener) {
  if (listener === void 0 && !arguments.length) {
    this.el && typeof this.el.click === "function" && this.el.click();
    return this;
  } else {
    return this.on("click", listener);
  }
};
Fluent.prototype.closest = function(selector) {
  var _a68;
  return new Fluent((_a68 = this.el) == null ? void 0 : _a68.closest(selector));
};
Fluent.prototype.each = function(callback) {
  this.el && callback(this.el);
  return this;
};
Fluent.prototype.empty = function() {
  Fluent.empty(this.el);
  return this;
};
Fluent.prototype.focus = function() {
  this.el && typeof this.el.focus === "function" && this.el.focus();
  return this;
};
Fluent.prototype.getNode = function() {
  return this.el;
};
Fluent.prototype.hasClass = function(klass) {
  var _a68;
  return !!((_a68 = this.el) == null ? void 0 : _a68.classList.contains(klass));
};
Fluent.prototype.insertAfter = function(referenceNode) {
  if (!this.el)
    return this;
  referenceNode = extractElement(referenceNode);
  let parent2 = referenceNode == null ? void 0 : referenceNode.parentNode;
  if (!parent2)
    this.el.remove();
  else
    parent2.insertBefore(this.el, referenceNode.nextSibling);
  return this;
};
Fluent.prototype.isVisibleLike = function() {
  return Fluent.isVisibleLike(this.el);
};
Fluent.prototype.insertBefore = function(referenceNode) {
  if (!this.el)
    return this;
  referenceNode = extractElement(referenceNode);
  let parent2 = referenceNode == null ? void 0 : referenceNode.parentElement;
  if (!parent2)
    this.el.remove();
  else
    parent2.insertBefore(this.el, referenceNode);
  return this;
};
Fluent.prototype.prependTo = function(parent2) {
  if (this.el) {
    parent2 = extractElement(parent2);
    if (!parent2)
      this.el.remove();
    else
      parent2.prepend(this.el);
  }
  return this;
};
Fluent.prototype.removeAttr = function(name) {
  var _a68;
  (_a68 = this.el) == null ? void 0 : _a68.removeAttribute(name);
  return this;
};
Fluent.prototype.data = function(name, value) {
  if (value === void 0 && arguments.length < 2)
    return this.attr("data-" + name);
  return this.attr("data-" + name, value);
};
Fluent.prototype.off = function(type, handler, delegationHandler2) {
  this.el && removeListener(this.el, type, handler, delegationHandler2);
  return this;
};
Fluent.prototype.on = function(type, handler, delegationHandler2) {
  this.el && addListener(this.el, type, handler, delegationHandler2, false);
  return this;
};
Fluent.prototype.one = function(type, handler, delegationHandler2) {
  this.el && addListener(this.el, type, handler, delegationHandler2, true);
  return this;
};
Fluent.prototype.removeClass = function(value) {
  Fluent.removeClass(this.el, value);
  return this;
};
Fluent.prototype.findFirst = function(selector) {
  var _a68;
  return new Fluent((_a68 = this.el) == null ? void 0 : _a68.querySelector(selector));
};
Fluent.prototype.findAll = function(selector) {
  if (!this.el)
    return [];
  return Array.from(this.el.querySelectorAll(selector));
};
Fluent.prototype.findEach = function(selector, callback) {
  if (!this.el || !callback)
    return this;
  this.el.querySelectorAll(selector).forEach((x, i) => callback(Fluent(x), i));
  return this;
};
Fluent.prototype.hide = function() {
  this.el && (this.el.style.display = "none");
  return this;
};
Fluent.prototype.matches = function(selector) {
  return !!this.el && typeof this.el.matches === "function" && this.el.matches(selector);
};
Fluent.prototype.nextSibling = function(selector) {
  var _a68;
  var sibling = (_a68 = this.el) == null ? void 0 : _a68.nextElementSibling;
  while (sibling && selector != null && !sibling.matches(selector))
    sibling = sibling.nextElementSibling;
  return new Fluent(sibling);
};
Fluent.prototype.parent = function() {
  var _a68;
  return new Fluent((_a68 = this.el) == null ? void 0 : _a68.parentNode);
};
Fluent.prototype.prepend = function(child) {
  this.el && this.el.prepend(extractNode(child));
  return this;
};
Fluent.prototype.prevSibling = function(selector) {
  var _a68;
  var sibling = (_a68 = this.el) == null ? void 0 : _a68.previousElementSibling;
  while (sibling && selector != null && !sibling.matches(selector))
    sibling = sibling.previousElementSibling;
  return new Fluent(sibling);
};
Fluent.prototype.remove = function() {
  Fluent.remove(this.el);
  return this;
};
Fluent.prototype.show = function() {
  this.el && (this.el.style.display = "");
  return this;
};
Fluent.prototype.style = function(callback) {
  if (this.el && this.el.style instanceof CSSStyleDeclaration)
    callback(this.el.style);
  return this;
};
Fluent.prototype.trigger = function(type, args) {
  this.el && triggerEvent(this.el, type, args);
  return this;
};
Fluent.prototype.val = function(value) {
  if (value === void 0 && !arguments.length) {
    if (!this.el)
      return void 0;
    return Fluent.isInputLike(this.el) ? this.el.value : "";
  }
  if (this.el && Fluent.isInputLike(this.el))
    this.el.value = value != null ? value : "";
  return this;
};
Fluent.prototype.text = function(value) {
  var _a68;
  if (value === void 0 && !arguments.length)
    return (_a68 = this.el) == null ? void 0 : _a68.textContent;
  if (!this.el)
    return this;
  if (typeof this.el.hasChildNodes === "function" && this.el.hasChildNodes()) {
    let $2 = getjQuery();
    if ($2)
      $2(this.el).text(value != null ? value : "");
    else {
      disposeDescendants(this.el);
      this.el.textContent = value != null ? value : "";
    }
  } else
    this.el.textContent = value != null ? value : "";
  return this;
};
Fluent.prototype.toggle = function(flag) {
  Fluent.toggle(this.el, flag);
  return this;
};
Fluent.prototype.toggleClass = function(value, add) {
  Fluent.toggleClass(this.el, value, add);
  return this;
};
Object.defineProperty(Fluent.prototype, "length", { get: function() {
  return this.el ? 1 : 0;
} });
Object.defineProperty(Fluent.prototype, 0, { get: function() {
  return this.el;
} });
Object.defineProperty(Fluent.prototype, Symbol.iterator, { get: function() {
  return (this.el ? [this.el] : [])[Symbol.iterator];
} });
Fluent.ready = function(callback) {
  if (!callback)
    return;
  let $2 = getjQuery();
  if ($2) {
    $2(callback);
    return;
  }
  if (typeof document !== "undefined" && document.readyState === "loading") {
    const loaded = () => {
      document.removeEventListener("DOMContentLoaded", loaded);
      callback();
    };
    document.addEventListener("DOMContentLoaded", loaded);
    return;
  }
  setTimeout(callback, 0);
};
Fluent.byId = function(id) {
  return Fluent(document.getElementById(id));
};
Fluent.findAll = function(selector) {
  return Array.from(document.querySelectorAll(selector));
};
Fluent.findEach = function(selector, callback) {
  if (!callback)
    return;
  document.querySelectorAll(selector).forEach((x) => callback(Fluent(x)));
};
Fluent.findFirst = function(selector) {
  return Fluent(document.querySelector(selector));
};

// src/base/icons.ts
function bgColor(color) {
  return "bg-" + color;
}
function textColor(color) {
  return "text-" + color;
}
function faIcon(key, color) {
  return "fa fa-" + key + (color ? " " + textColor(color) : "");
}
function fabIcon(key, color) {
  return "fab fa-" + key + (color ? " " + textColor(color) : "");
}
function iconClassName(icon) {
  let klass = Array.isArray(icon) ? icon.join(" ") : icon;
  if (!klass)
    return klass;
  if (klass.startsWith("fa-") && klass.indexOf("fa ") < 0 && !klass.endsWith(" fa"))
    return "fa " + klass;
  return klass;
}

// src/base/localtext.ts
function getTable() {
  let localTextTable = getGlobalObject()[localTextTableSymbol];
  if (!localTextTable)
    getGlobalObject()[localTextTableSymbol] = localTextTable = {};
  return localTextTable;
}
function addLocalText(obj, pre) {
  if (!obj)
    return;
  let table = getTable();
  if (typeof obj === "string") {
    table[obj] = pre;
    return;
  }
  pre != null ? pre : pre = "";
  for (let k of Object.keys(obj)) {
    let actual = pre + k;
    let o = obj[k];
    if (typeof o === "object") {
      addLocalText(o, actual + ".");
    } else {
      table[actual] = o;
    }
  }
}
function localText(key, defaultText) {
  var _a68, _b, _c;
  return (_c = (_b = (_a68 = getTable()[key]) != null ? _a68 : defaultText) != null ? _b : key) != null ? _c : "";
}
function tryGetText(key) {
  return getTable()[key];
}
function proxyTexts(o, p, t) {
  return new Proxy(o, {
    get: (_, y) => {
      if (typeof y === "symbol")
        return;
      var tv = t[y];
      if (tv == null)
        return localText(p + y);
      else {
        var z = o[y];
        if (z != null)
          return z;
        o[y] = z = proxyTexts({}, p + y + ".", tv);
        return z;
      }
    },
    ownKeys: (_) => Object.keys(t)
  });
}
var global2 = getGlobalObject();
(global2.Serenity || (global2.Serenity = {})).addLocalText = addLocalText;

// src/base/dialogs.ts
var _Dialog = class _Dialog {
  constructor(opt, create = true) {
    var _a68, _b;
    if (isArrayLike(opt == null ? void 0 : opt.element))
      this.el = opt.element[0];
    else if (typeof (opt == null ? void 0 : opt.element) !== "function")
      this.el = opt == null ? void 0 : opt.element;
    this.dialogResult = (_a68 = this.el) == null ? void 0 : _a68.dataset.dialogResult;
    if (!create) {
      return;
    }
    (_b = this.el) != null ? _b : this.el = document.createElement("div");
    opt = Object.assign({}, _Dialog.defaults, omitUndefined(opt));
    if (opt.closeOnEscape === void 0 && opt.closeButton)
      opt.closeOnEscape = true;
    if (typeof opt.element === "function")
      opt.element(this.el);
    if (this.el.classList.contains("hidden") && typeof opt.element !== "function")
      this.el.classList.remove("hidden");
    if (opt.preferPanel || !hasBSModal() && !hasUIDialog)
      this.createPanel(opt);
    else if (hasUIDialog() && (!hasBSModal() || !opt.preferBSModal))
      this.createUIDialog(opt);
    else {
      this.createBSModal(opt);
    }
    if (opt.onOpen)
      this.onOpen(opt.onOpen);
    if (opt.onClose)
      this.onClose(opt.onClose);
    if (opt.autoDispose)
      this.onClose(() => setTimeout(this.dispose.bind(this), 0));
    if (opt.title !== void 0) {
      this.title(opt.title);
    }
    if (opt.autoOpen)
      this.open();
  }
  /**
   * Gets the dialog instance for the specified element.
   * @param el The dialog body element (.s-Panel, .ui-dialog-content, or .modal-body) or the root element (.modal, .ui-dialog, .s-Panel)
   * @returns The dialog instance, or null if the element is not a dialog.
   */
  static getInstance(el) {
    el = getDialogContentNode(el);
    if (!el)
      return null;
    return new _Dialog({ element: el }, false);
  }
  /** The result code of the button that is clicked. Also attached to the dialog element as data-dialog-result */
  get result() {
    return this.el ? this.el.dataset.dialogResult : this.dialogResult;
  }
  close(result) {
    var _a68, _b, _c, _d, _e, _f, _g, _h, _i, _j;
    this.el && (this.el.dataset.dialogResult = result != null ? result : null);
    this.dialogResult = result != null ? result : null;
    var target = getDialogEventsNode(this.el);
    if (!target)
      return;
    if (target.classList.contains("panel-body"))
      closePanel(this.el);
    else if (target.classList.contains("ui-dialog-content"))
      (_c = (_a68 = getjQuery()) == null ? void 0 : (_b = _a68(this.el)).dialog) == null ? void 0 : _c.call(_b, "close");
    else if (target.classList.contains("modal")) {
      if (isBS5Plus()) {
        (_g = (_f = (_e = (_d = bootstrap == null ? void 0 : bootstrap.Modal) == null ? void 0 : _d.getInstance) == null ? void 0 : _e.call(_d, target)) == null ? void 0 : _f.hide) == null ? void 0 : _g.call(_f);
      } else {
        let $2 = getjQuery();
        if ((_h = $2 == null ? void 0 : $2.fn) == null ? void 0 : _h.modal)
          (_j = (_i = $2(target)).modal) == null ? void 0 : _j.call(_i, "close");
      }
    }
    return this;
  }
  /**
   * Adds an event handler that is called when the dialog is closed. If the opt.before is true, the handler is called before the dialog is closed and
   * the closing can be cancelled by calling preventDefault on the event object.
   * @param handler The event handler function
   * @param opt Options to determine whether the handler should be called before the dialog is closed, and whether the handler should be called only once. 
   * The default for oneOff is true unless opt.before is true.
   * @returns The dialog instance
   */
  onClose(handler, opt) {
    var _a68, _b;
    var target = getDialogEventsNode(this.el);
    if (!target)
      return;
    const before = (_a68 = opt == null ? void 0 : opt.before) != null ? _a68 : false;
    const onOrOne = ((_b = opt == null ? void 0 : opt.oneOff) != null ? _b : !(opt == null ? void 0 : opt.before)) ? Fluent.one : Fluent.on;
    if (target.classList.contains("panel-body"))
      onOrOne(target, before ? "panelbeforeclose" : "panelclose", (e) => handler(this.result, e));
    else if (target.classList.contains("ui-dialog-content"))
      onOrOne(target, before ? "dialogbeforeclose" : "dialogclose", (e) => handler(this.result, e));
    else if (target.classList.contains("modal"))
      onOrOne(target, before ? "hide.bs.modal" : "hidden.bs.modal", (e) => handler(this.result, e));
    return this;
  }
  /**
   * Adds an event handler that is called when the dialog is closed. If the opt.before is true, the handler is called before the dialog is closed and
   * the closing can be cancelled by calling preventDefault on the event object. Note that if the dialog is not yet initialized, the first argument must be
   * the body element of the dialog.
   * @param el The dialog body element (.s-Panel, .ui-dialog-content, or .modal-body)
   * @param handler The event handler function
   * @param opt Options to determine whether the handler should be called before the dialog is closed, and whether the handler should be called only once. 
   * The default for oneOff is true unless opt.before is true.
   */
  static onClose(el, handler, opt) {
    var _a68;
    var instance = _Dialog.getInstance(el);
    if (instance) {
      instance.onClose(handler, opt);
      return;
    }
    const target = isArrayLike(el) ? el[0] : el;
    if (target) {
      const before = (_a68 = opt == null ? void 0 : opt.before) != null ? _a68 : false;
      const events = [before ? "panelbeforeclose" : "panelclose", before ? "dialogbeforeclose" : "dialogclose", before ? "modalbeforeclose" : "modalclose"];
      const wrapper = (e) => {
        var _a69, _b;
        handler((_a69 = _Dialog.getInstance(el)) == null ? void 0 : _a69.result, e);
        if ((_b = opt == null ? void 0 : opt.oneOff) != null ? _b : !before) {
          events.forEach((type) => Fluent.off(target, type, wrapper));
        }
      };
      events.forEach((type) => Fluent.on(target, type, wrapper));
    }
  }
  /**
   * Adds an event handler that is called when the dialog is opened. If the second parameter is true, the handler is called before the dialog is opened and
   * the opening can be cancelled by calling preventDefault on the event object.
   * Note that if the dialog is not yet initialized, the first argument must be the body element of the dialog.
   * @param handler The event handler function
   * @param opt Options to determine whether the handler should be called before the dialog is opened, and whether the handler should be called only once. 
   * The default for oneOff is true unless opt.before is true.
   * @returns The dialog instance
   */
  onOpen(handler, opt) {
    var _a68, _b;
    var target = getDialogEventsNode(this.el);
    if (!target)
      return;
    const before = (_a68 = opt == null ? void 0 : opt.before) != null ? _a68 : false;
    const onOrOne = ((_b = opt == null ? void 0 : opt.oneOff) != null ? _b : !(opt == null ? void 0 : opt.before)) ? Fluent.one : Fluent.on;
    if (target.classList.contains("panel-body"))
      onOrOne(target, before ? "panelbeforeopen" : "panelopen", handler);
    else if (target.classList.contains("ui-dialog-content"))
      onOrOne(target, before ? "dialogbeforeopen" : "dialogopen", handler);
    else if (target.classList.contains("modal"))
      onOrOne(target, before ? "show.bs.modal" : "shown.bs.modal", handler);
    return this;
  }
  /**
   * Adds an event handler that is called when the dialog is opened. If the second parameter is true, the handler is called before the dialog is opened and
   * the opening can be cancelled by calling preventDefault on the event object. Note that if the dialog is not yet initialized, the first argument must be
   * the body element of the dialog.
   * @param el The dialog body element (.s-Panel, .ui-dialog-content, or .modal-body)
   * @param handler The event handler function
   * @param opt Options to determine whether the handler should be called before the dialog is opened, and whether the handler should be called only once. 
   * The default for oneOff is true unless opt.before is true.
   * @returns The dialog instance
   */
  static onOpen(el, handler, opt) {
    var _a68;
    var instance = _Dialog.getInstance(el);
    if (instance) {
      instance.onOpen(handler, opt);
      return;
    }
    const target = isArrayLike(el) ? el[0] : el;
    if (target) {
      const before = (_a68 = opt == null ? void 0 : opt.before) != null ? _a68 : false;
      const events = [before ? "panelbeforeopen" : "panelopen", before ? "dialogbeforeopen" : "dialogopen", before ? "modalbeforeopen" : "modalopen"];
      const wrapper = (e) => {
        var _a69;
        handler(e);
        if ((_a69 = opt == null ? void 0 : opt.oneOff) != null ? _a69 : !before) {
          events.forEach((type) => Fluent.off(target, type, wrapper));
        }
      };
      events.forEach((type) => Fluent.on(target, type, wrapper));
    }
  }
  /** Opens the dialog */
  open() {
    var _a68, _b, _c, _d, _e, _f, _g, _h;
    var target = getDialogEventsNode(this.el);
    if (!target)
      return;
    if (target.classList.contains("panel-body"))
      openPanel(this.el);
    else if (target.classList.contains("ui-dialog-content"))
      (_a68 = getjQuery()) == null ? void 0 : _a68(target).dialog("open");
    else if (target.classList.contains("modal")) {
      if (isBS5Plus()) {
        (_e = (_d = (_c = (_b = bootstrap == null ? void 0 : bootstrap.Modal) == null ? void 0 : _b.getInstance) == null ? void 0 : _c.call(_b, target)) == null ? void 0 : _d.show) == null ? void 0 : _e.call(_d);
      } else {
        let $2 = getjQuery();
        if ((_f = $2 == null ? void 0 : $2.fn) == null ? void 0 : _f.modal)
          (_h = (_g = $2(target)).modal) == null ? void 0 : _h.call(_g, "show");
      }
    }
    return this;
  }
  title(value) {
    var _a68;
    let title = (_a68 = this.getHeaderNode()) == null ? void 0 : _a68.querySelector(".modal-title, .panel-titlebar-text, .ui-dialog-title");
    if (value === void 0 && !arguments.length)
      return title == null ? void 0 : title.textContent;
    title && (title.textContent = value);
    return this;
  }
  /** Returns the type of the dialog, or null if no dialog on the current element or if the element is null, e.g. dialog was disposed  */
  get type() {
    var root = getDialogNode(this.el);
    if (!root)
      return null;
    if (root.classList.contains("modal"))
      return "bsmodal";
    if (root.classList.contains("ui-dialog"))
      return "uidialog";
    if (root.classList.contains("s-Panel"))
      return "panel";
    return null;
  }
  /** Gets the body/content element of the dialog */
  getContentNode() {
    return this.el;
  }
  /** Gets the dialog element of the dialog */
  getDialogNode() {
    return getDialogNode(this.el);
  }
  /** Gets the node that receives events for the dialog. It's .ui-dialog-content, .modal, or .panel-body */
  getEventsNode() {
    return getDialogEventsNode(this.el);
  }
  /** Gets the footer element of the dialog */
  getFooterNode() {
    var _a68;
    return (_a68 = this.getDialogNode()) == null ? void 0 : _a68.querySelector(".modal-footer, .panel-footer, .ui-dialog-footer");
  }
  /** Gets the header element of the dialog */
  getHeaderNode() {
    var _a68;
    return (_a68 = this.getDialogNode()) == null ? void 0 : _a68.querySelector(".modal-header, .panel-titlebar, .ui-dialog-titlebar");
  }
  onButtonClick(e, btn) {
    e != null ? e : e = new Event("click");
    if (!btn.click) {
      if (btn.result)
        this.close(btn.result);
      return;
    }
    var value = btn.click(e);
    if (!btn.result)
      return;
    if (isPromiseLike(value))
      value.then((value2) => value2 !== false && !Fluent.isDefaultPrevented(e) && this.close(btn.result));
    else if (value !== false && !Fluent.isDefaultPrevented(e))
      this.close(btn.result);
  }
  createBSButtons(footer, buttons) {
    for (let btn of buttons) {
      Fluent(dialogButtonToBS(btn)).appendTo(footer).on("click", (e) => this.onButtonClick(e, btn));
    }
  }
  createBSModal(opt) {
    var _a68, _b, _c;
    var modal = Fluent("div").class(["modal", opt.dialogClass, opt.fade && "fade"]).attr("tabindex", "-1").appendTo(document.body);
    let header = Fluent("div").class("modal-header").append(Fluent("h5").class("modal-title"));
    let bs5 = isBS5Plus();
    if (opt.closeButton) {
      let closeButton = Fluent("button").class(bs5 ? "btn-close" : "close").attr("type", "button").data(`${bs5 ? "bs-" : ""}dismiss`, "modal").attr("aria-label", DialogTexts.CloseButton);
      if (!bs5) {
        closeButton.append(Fluent("span").attr("aria-hidden", "true").text("\u2715"));
      }
      if (isBS3()) {
        closeButton.prependTo(header);
      } else {
        closeButton.appendTo(header);
      }
    }
    this.el.classList.add("modal-body");
    let footer = Fluent("div").class("modal-footer");
    Fluent("div").class([
      "modal-dialog",
      opt.size && "modal-" + opt.size,
      opt.fullScreen && "modal-fullscreen" + (typeof opt.fullScreen === "string" ? `-${opt.fullScreen}` : ""),
      opt.centered && "modal-dialog-centered",
      opt.scrollable && "modal-scrollable"
    ]).append(Fluent("div").class("modal-content").append(header).append(this.el).append(footer)).appendTo(modal);
    if (opt.buttons) {
      this.createBSButtons(footer, opt.buttons);
    }
    let modalOpt = {
      backdrop: opt.backdrop,
      keyboard: opt.closeOnEscape
    };
    if (opt.providerOptions)
      Object.assign(modalOpt, opt.providerOptions("bsmodal", opt));
    if (bs5 && bootstrap.Modal) {
      var modalObj = new bootstrap.Modal(modal.getNode(), modalOpt);
      if (modalObj && modalObj._focustrap && modalObj._focustrap._handleFocusin) {
        var org = modalObj._focustrap._handleFocusin;
        modalObj._focustrap._handleFocusin = function(event) {
          if (event.target && event.target.closest(".ui-datepicker, .select2-drop, .cke, .cke_dialog, .flatpickr-calendar"))
            return;
          org.apply(this, arguments);
        };
      }
    } else {
      (_c = (_b = (_a68 = getjQuery()) == null ? void 0 : _a68(modal.getNode())) == null ? void 0 : _b.modal) == null ? void 0 : _c.call(_b, modalOpt);
    }
    ;
  }
  createPanel(opt) {
    let titlebar = Fluent("div").class("panel-titlebar").append(Fluent("div").class("panel-titlebar-text"));
    let panel = Fluent("div").class(["s-Panel", "hidden", opt.dialogClass]).append(titlebar);
    this.el.classList.add("panel-body");
    if (this.el.parentElement && this.el.parentElement !== document.body) {
      this.el.parentElement.insertBefore(panel.getNode(), this.el);
    }
    panel.append(this.el);
    if (opt.closeButton) {
      Fluent("button").class("panel-titlebar-close").attr("type", "button").on("click", this.close.bind(this, null)).appendTo(titlebar);
    }
    opt.buttons && this.createBSButtons(Fluent("div").class("panel-footer").appendTo(panel), opt.buttons);
  }
  createUIDialog(opt) {
    var _a68;
    let uiOpt = {
      autoOpen: opt.autoOpen,
      dialogClass: opt.dialogClass,
      title: opt.title,
      modal: opt.modal,
      width: opt.width,
      resizable: false
    };
    if (opt.centered)
      uiOpt.position = { my: "center", at: "center", of: window };
    if (opt.buttons) {
      uiOpt.buttons = opt.buttons.map((btn) => {
        let uiButton = dialogButtonToUI(btn);
        uiButton.click = (e) => this.onButtonClick(e, btn);
        return uiButton;
      });
    }
    if (opt.providerOptions)
      uiOpt = Object.assign(uiOpt, opt.providerOptions("uidialog", omitUndefined(opt)));
    (_a68 = getjQuery()) == null ? void 0 : _a68(this.el).dialog(uiOpt);
  }
  /**
   * Disposes the dialog, removing it from the DOM and unbinding all event handlers.
   */
  dispose() {
    var _a68, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
    try {
      let target = (_a68 = getDialogEventsNode(this.el)) != null ? _a68 : this.el;
      if (!target)
        return;
      try {
        if (target.classList.contains("ui-dialog-content")) {
          (_d = (_c = (_b = getjQuery) == null ? void 0 : _b()(target)) == null ? void 0 : _c.dialog) == null ? void 0 : _d.call(_c, "destroy");
          target.classList.remove("ui-dialog-content");
          target = (_e = target.closest(".ui-dialog")) != null ? _e : target;
        } else if (target.classList.contains("modal")) {
          if (!getjQuery() && isBS5Plus()) {
            if (typeof bootstrap !== "undefined")
              (_h = (_g = (_f = bootstrap.Modal) == null ? void 0 : _f.getInstance(target)) == null ? void 0 : _g.dispose) == null ? void 0 : _h.call(_g);
          } else {
            (_k = (_j = (_i = getjQuery()) == null ? void 0 : _i(target)) == null ? void 0 : _j.modal) == null ? void 0 : _k.call(_j, isBS3() ? "destroy" : "dispose");
          }
          (_l = this.el) == null ? void 0 : _l.classList.remove("modal-body");
        } else {
          (_m = this.el) == null ? void 0 : _m.classList.remove("panel-body");
          target = (_n = target.closest(".s-Panel")) != null ? _n : target;
        }
      } finally {
        Fluent.remove(target);
      }
    } finally {
      this.el = null;
    }
  }
};
/** Default set of dialog options */
_Dialog.defaults = {
  autoDispose: true,
  autoOpen: true,
  backdrop: false,
  centered: true,
  closeButton: true,
  fade: false,
  fullScreen: "md-down",
  modal: true,
  preferBSModal: true,
  size: "lg"
};
/** Default set of message dialog options */
_Dialog.messageDefaults = {
  autoDispose: true,
  autoOpen: true,
  backdrop: false,
  centered: true,
  closeButton: true,
  closeOnEscape: true,
  fade: true,
  fullScreen: null,
  htmlEncode: true,
  modal: true,
  preferBSModal: true,
  preWrap: true,
  size: "md"
};
var Dialog = _Dialog;
function hasBSModal() {
  var _a68, _b;
  return isBS5Plus() || !!((_b = (_a68 = getjQuery()) == null ? void 0 : _a68.fn) == null ? void 0 : _b.modal);
}
function hasUIDialog() {
  var _a68, _b;
  return !!((_b = (_a68 = getjQuery()) == null ? void 0 : _a68.ui) == null ? void 0 : _b.dialog);
}
function uiAndBSButtonNoConflict() {
  var _a68, _b, _c;
  const $2 = getjQuery();
  if ($2 && ((_b = (_a68 = $2.fn) == null ? void 0 : _a68.button) == null ? void 0 : _b.noConflict) && ((_c = $2.ui) == null ? void 0 : _c.button)) {
    $2.fn.btn = $2.fn.button.noConflict();
  }
}
uiAndBSButtonNoConflict();
function dialogButtonToBS(x) {
  var _a68;
  let html = htmlEncode(x.text);
  let iconClass = iconClassName(x.icon);
  if (iconClass)
    html = '<i class="' + htmlEncode(iconClass) + '"><i>' + (html ? " " + html : "");
  let button = document.createElement("button");
  button.type = "button";
  button.classList.add("btn");
  Fluent.addClass(button, (_a68 = x.cssClass) != null ? _a68 : "btn-secondary");
  if (x.hint)
    button.setAttribute("title", x.hint);
  button.innerHTML = html;
  return button;
}
function dialogButtonToUI(x) {
  let html = htmlEncode(x.text);
  let iconClass = iconClassName(x.icon);
  if (iconClass)
    html = '<i class="' + htmlEncode(iconClass) + '"></i>' + (html ? " " + html : "");
  let button = {
    text: html,
    click: x.click
  };
  if (x.cssClass)
    button.cssClass = x.cssClass;
  return button;
}
function okDialogButton(opt) {
  return {
    text: (opt == null ? void 0 : opt.text) != void 0 ? opt.text : DialogTexts.OkButton,
    cssClass: (opt == null ? void 0 : opt.cssClass) != void 0 ? opt.cssClass : "btn-info",
    result: (opt == null ? void 0 : opt.result) != void 0 ? opt.result : "ok",
    click: opt == null ? void 0 : opt.click
  };
}
function yesDialogButton(opt) {
  return {
    text: (opt == null ? void 0 : opt.text) != void 0 ? opt.text : DialogTexts.YesButton,
    cssClass: (opt == null ? void 0 : opt.cssClass) != void 0 ? opt.cssClass : "btn-primary",
    result: (opt == null ? void 0 : opt.result) != void 0 ? opt.result : "yes",
    click: opt == null ? void 0 : opt.click
  };
}
function noDialogButton(opt) {
  return {
    text: (opt == null ? void 0 : opt.text) != void 0 ? opt.text : DialogTexts.NoButton,
    cssClass: (opt == null ? void 0 : opt.cssClass) != void 0 ? opt.cssClass : isBS5Plus() ? "btn-danger" : "btn-default",
    result: (opt == null ? void 0 : opt.result) != void 0 ? opt.result : "no",
    click: opt == null ? void 0 : opt.click
  };
}
function cancelDialogButton(opt) {
  return {
    text: (opt == null ? void 0 : opt.text) != void 0 ? opt.text : DialogTexts.CancelButton,
    cssClass: (opt == null ? void 0 : opt.cssClass) != void 0 ? opt.cssClass : isBS5Plus() ? "btn-secondary" : "btn-default",
    result: (opt == null ? void 0 : opt.result) != void 0 ? opt.result : "cancel",
    click: opt == null ? void 0 : opt.click
  };
}
var DialogTexts;
((DialogTexts2) => {
  const defaultTxt = {
    AlertTitle: "Alert",
    CancelButton: "Cancel",
    CloseButton: "Close",
    ConfirmationTitle: "Confirm",
    InformationTitle: "Information",
    MaximizeHint: "Maximize",
    NoButton: "No",
    OkButton: "OK",
    RestoreHint: "Restore",
    SuccessTitle: "Success",
    WarningTitle: "Warning",
    YesButton: "Yes"
  };
  function get() {
    return htmlEncode(localText("Dialogs." + this, defaultTxt[this]));
  }
  for (let k of Object.keys(defaultTxt)) {
    Object.defineProperty(DialogTexts2, k, {
      get: get.bind(k)
    });
  }
})(DialogTexts || (DialogTexts = {}));
function closePanel(el) {
  var _a68;
  let panel = getDialogNode(el);
  if (!panel || panel.classList.contains("hidden"))
    return;
  var eventsNode = (_a68 = getDialogEventsNode(el)) != null ? _a68 : panel;
  let event = Fluent.trigger(eventsNode, "panelbeforeclose");
  if (Fluent.isDefaultPrevented(event))
    return;
  panel.classList.add("hidden");
  let uniqueName = panel.dataset.paneluniquename;
  if (uniqueName) {
    document.querySelectorAll(`[data-hiddenby="${uniqueName}"]`).forEach((hiddenBy) => {
      hiddenBy.removeAttribute("data-hiddenby");
    });
  }
  Fluent.trigger(window, "resize");
  document.querySelectorAll(".require-layout").forEach((rl) => Fluent.isVisibleLike(rl) && Fluent.trigger(rl, "layout"));
  Fluent.trigger(eventsNode, "panelclose");
}
function openPanel(element, uniqueName) {
  var _a68, _b, _c, _d;
  let panel = getDialogNode(element);
  if (!panel)
    return;
  let container = panel.parentElement && panel.parentElement !== document.body ? panel.parentElement : (_c = (_b = (_a68 = document.querySelector(".panels-container")) != null ? _a68 : document.querySelector("section.content")) != null ? _b : panel.parentElement) != null ? _c : document.body;
  if (panel.parentElement !== container) {
    container.appendChild(panel);
  }
  let eventNode = (_d = getDialogEventsNode(element)) != null ? _d : panel;
  let event = Fluent.trigger(eventNode, "panelbeforeopen");
  if (Fluent.isDefaultPrevented(event))
    return;
  panel.dataset.paneluniquename = uniqueName || panel.id || (/* @__PURE__ */ new Date()).getTime().toString();
  function setHideBy(e) {
    if (e === panel || e.tagName === "LINK" || e.tagName === "SCRIPT" || e.classList.contains("hidden") || e.dataset.hiddenby || container && e.parentElement !== container && !Fluent.isVisibleLike(e))
      return;
    e.dataset.hiddenby = panel.dataset.paneluniquename;
  }
  if (container) {
    let c = container.children;
    const cl = c.length;
    for (let i = 0; i < cl; i++) {
      setHideBy(c[i]);
    }
  }
  document.querySelectorAll(".ui-dialog, .ui-widget-overlay, .modal.show, .modal.in").forEach(setHideBy);
  panel.classList.remove("hidden");
  delete panel.dataset.hiddenby;
  Fluent.trigger(eventNode, "panelopen");
}
function getDialogNode(element) {
  if (isArrayLike(element))
    element = element[0];
  if (!element)
    return null;
  return element.closest(".modal, .s-Panel, .ui-dialog");
}
function getDialogEventsNode(element) {
  var _a68, _b;
  if (isArrayLike(element))
    element = element[0];
  if (!element)
    return null;
  return (_b = element.closest(".modal, .panel-body, .ui-dialog-content")) != null ? _b : (_a68 = getDialogNode(element)) == null ? void 0 : _a68.querySelector(".panel-body, .ui-dialog-content");
}
function getDialogContentNode(element) {
  var _a68, _b;
  if (isArrayLike(element))
    element = element[0];
  if (!element)
    return null;
  return (_b = element.closest(".modal-body, .panel-body, .ui-dialog-content")) != null ? _b : (_a68 = getDialogNode(element)) == null ? void 0 : _a68.querySelector(".modal-body, .panel-body, .ui-dialog-content");
}
function getMessageBodyHtml(message, options) {
  let encode = options == null || options.htmlEncode == null || options.htmlEncode;
  if (encode)
    message = htmlEncode(message);
  let preWrap = options == null || options.preWrap == null && encode || options.preWrap;
  return '<div class="message"' + (preWrap ? ' style="white-space: pre-wrap">' : ">") + message + "</div>";
}
function createMessageDialog(opt) {
  var _a68;
  if (!hasBSModal() && !hasUIDialog()) {
    var result = opt.native(opt.message);
    (_a68 = opt.options) == null ? void 0 : _a68.onClose(result);
    return {
      result
    };
  }
  let options = Object.assign({}, Dialog.messageDefaults, {
    dialogClass: "s-MessageDialog" + (opt.cssClass ? " " + opt.cssClass : ""),
    title: opt.title
  }, opt.options);
  if (options.buttons == void 0) {
    options.buttons = opt.getButtons();
  }
  if (options.providerOptions === void 0) {
    options.providerOptions = (type) => {
      if (type === "uidialog") {
        return {
          width: "40%",
          maxWidth: 450,
          minWidth: 180,
          resizable: false
        };
      }
    };
  }
  if (options.element === void 0) {
    options.element = (el) => el.innerHTML = getMessageBodyHtml(opt.message, options);
  }
  return new Dialog(options);
}
function alertDialog(message, options) {
  return createMessageDialog({
    message,
    options,
    cssClass: "s-AlertDialog",
    title: DialogTexts.AlertTitle,
    getButtons: () => [okDialogButton({ cssClass: "btn-danger" })],
    native: (msg) => {
      alert(msg);
      return "ok";
    }
  });
}
function confirmDialog(message, onYes, options) {
  return createMessageDialog({
    message,
    options,
    cssClass: "s-ConfirmDialog",
    title: DialogTexts.ConfirmationTitle,
    getButtons: () => {
      let buttons = [yesDialogButton({ click: onYes }), noDialogButton({ click: options == null ? void 0 : options.onNo })];
      if (options == null ? void 0 : options.cancelButton)
        buttons.push(cancelDialogButton({ click: options == null ? void 0 : options.onCancel }));
      return buttons;
    },
    native: (msg) => {
      var result = window.confirm(msg);
      if (result) {
        onYes == null ? void 0 : onYes();
        return "yes";
      } else {
        options == null ? void 0 : options.onNo();
        return result === false ? "no" : "";
      }
    }
  });
}
function informationDialog(message, onOk, options) {
  return createMessageDialog({
    message,
    options,
    cssClass: "s-InformationDialog",
    title: DialogTexts.InformationTitle,
    getButtons: () => [okDialogButton({ click: onOk, cssClass: "btn-info" })],
    native: (msg) => {
      alert(msg);
      onOk == null ? void 0 : onOk();
      return "ok";
    }
  });
}
function successDialog(message, onOk, options) {
  return createMessageDialog({
    message,
    options,
    cssClass: "s-SuccessDialog",
    title: DialogTexts.SuccessTitle,
    getButtons: () => [okDialogButton({ click: onOk, cssClass: "btn-success" })],
    native: (msg) => {
      alert(msg);
      onOk == null ? void 0 : onOk();
      return "ok";
    }
  });
}
function warningDialog(message, options) {
  return createMessageDialog({
    message,
    options,
    cssClass: "s-WarningDialog",
    title: DialogTexts.WarningTitle,
    getButtons: () => [okDialogButton({ cssClass: "btn-warning" })],
    native: (msg) => {
      alert(msg);
      return "ok";
    }
  });
}
function iframeDialog(options) {
  if (!hasBSModal() && !hasUIDialog()) {
    window.alert(options.html);
    return {
      result: "ok"
    };
  }
  let doc;
  function onOpen(div) {
    if (div) {
      let iframe = div.appendChild(document.createElement("iframe"));
      iframe.setAttribute("style", "border: none; width: 100%; height: 100%;");
      doc = iframe.contentDocument;
      if (doc) {
        doc.open();
        doc.write(options.html);
        doc.close();
      }
    }
  }
  return new Dialog({
    title: DialogTexts.AlertTitle,
    dialogClass: "s-IFrameDialog",
    size: "lg",
    autoOpen: true,
    element: (el) => {
      let div = document.createElement("div");
      div.style.overflow = "hidden";
      el.append(div);
      onOpen(div);
    },
    providerOptions: (type) => {
      if (type == "uidialog") {
        return {
          width: "60%",
          height: "400"
        };
      }
    }
  });
}
var modalShow = (e) => {
  var _a68;
  var body = (_a68 = Dialog.getInstance(e.target)) == null ? void 0 : _a68.getContentNode();
  if (body) {
    var evt = Fluent.trigger(body, "modalbeforeopen");
    if (Fluent.isDefaultPrevented(evt))
      e.preventDefault();
  }
};
var modalShown = (e) => {
  var _a68;
  var body = (_a68 = Dialog.getInstance(e.target)) == null ? void 0 : _a68.getContentNode();
  if (body) {
    Fluent.trigger(body, "modalopen");
  }
};
var modalHide = (e) => {
  var _a68;
  var body = (_a68 = Dialog.getInstance(e.target)) == null ? void 0 : _a68.getContentNode();
  if (body) {
    var evt = Fluent.trigger(body, "modalbeforeclose");
    if (Fluent.isDefaultPrevented(evt))
      e.preventDefault();
  }
};
var modalHidden = (e) => {
  var _a68;
  var body = (_a68 = Dialog.getInstance(e.target)) == null ? void 0 : _a68.getContentNode();
  if (body) {
    Fluent.trigger(body, "modalclose");
  }
};
function installBsModalEventPropagation() {
  uninstallBsModalEventPropagation();
  if (typeof document === "undefined" || typeof document.addEventListener !== "function")
    return;
  document.addEventListener("show.bs.modal", modalShow);
  document.addEventListener("shown.bs.modal", modalShown);
  document.addEventListener("hide.bs.modal", modalHide);
  document.addEventListener("hidden.bs.modal", modalHidden);
}
function uninstallBsModalEventPropagation() {
  if (typeof document === "undefined" || typeof document.removeEventListener !== "function")
    return;
  document.removeEventListener("show.bs.modal", modalShow);
  document.removeEventListener("shown.bs.modal", modalShown);
  document.removeEventListener("hide.bs.modal", modalHide);
  document.removeEventListener("hidden.bs.modal", modalHidden);
}
installBsModalEventPropagation();

// src/base/formatting.ts
var Invariant = {
  decimalSeparator: ".",
  groupSeparator: ",",
  decimalDigits: 2,
  negativeSign: "-",
  positiveSign: "+",
  percentSymbol: "%",
  currencySymbol: "$",
  dateSeparator: "/",
  dateOrder: "mdy",
  dateFormat: "MM/dd/yyyy",
  dateTimeFormat: "MM/dd/yyyy HH:mm:ss",
  amDesignator: "AM",
  pmDesignator: "PM",
  timeSeparator: ":",
  firstDayOfWeek: 0,
  dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  minimizedDayNames: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""],
  shortMonthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""],
  stringCompare: (a, b) => a < b ? -1 : a > b ? 1 : 0
};
function compareStringFactory(order) {
  var o = {};
  for (let z = 0; z < order.length; z++) {
    o[order.charAt(z)] = z + 1;
  }
  return function(a, b) {
    a = a || "";
    b = b || "";
    if (a == b)
      return 0;
    let c;
    for (let i = 0, _len = Math.min(a.length, b.length); i < _len; i++) {
      let x = a.charAt(i), y = b.charAt(i);
      if (x === y) {
        continue;
      }
      let ix = o[x], iy = o[y];
      if (ix != null && iy != null)
        return ix < iy ? -1 : 1;
      c = x.localeCompare(y);
      if (c == 0)
        continue;
      return c;
    }
    if (c != null)
      return c;
    return a.localeCompare(b);
  };
}
var Culture = {
  decimalSeparator: ".",
  groupSeparator: ",",
  dateSeparator: "/",
  dateOrder: "dmy",
  dateFormat: "dd/MM/yyyy",
  dateTimeFormat: "dd/MM/yyyy HH:mm:ss",
  stringCompare: compareStringFactory("AaBbCc\xC7\xE7FfGg\u011E\u011FHhI\u0131\u0130iJjKkLlMmNnOo\xD6\xF6PpRrSs\u015E\u015FTtUu\xDC\xFCVvYyZz")
};
(function() {
  var _a68, _b, _c;
  let k;
  for (k in Invariant)
    if (Culture[k] === void 0 && Object.prototype.hasOwnProperty.call(Invariant, k))
      Culture[k] = Invariant[k];
  if (typeof document !== "undefined" && ((_c = k = (_b = (_a68 = document.querySelector("script#ScriptCulture")) == null ? void 0 : _a68.textContent) == null ? void 0 : _b.trim()) == null ? void 0 : _c.length)) {
    var sc = JSON.parse(k);
    if (sc.DecimalSeparator != null)
      Culture.decimalSeparator = sc.DecimalSeparator;
    if (sc.GroupSeparator != null && sc.GroupSeparator != Culture.decimalSeparator)
      Culture.groupSeparator = sc.GroupSeparator;
    else if (Culture.groupSeparator == Culture.decimalSeparator)
      Culture.groupSeparator = Culture.decimalSeparator == "." ? "," : ".";
    delete sc.GroupSeparator;
    delete sc.DecimalSeparator;
    for (k in sc) {
      if (Culture[k] === void 0 && Object.prototype.hasOwnProperty.call(sc, k))
        Culture[k.charAt(0).toLowerCase() + k.substring(1)] = sc[k];
    }
  }
})();
function insertGroupSeperator(num, dec, grp, neg) {
  var decPart = null;
  var decIndex = num.indexOf(dec);
  if (decIndex > 0) {
    decPart = num.substring(decIndex);
    num = num.substring(0, decIndex);
  }
  var negative = num.startsWith(neg);
  if (negative) {
    num = num.substring(1);
  }
  var groupSize = 3;
  if (num.length < groupSize) {
    return (negative ? neg : "") + (decPart ? num + decPart : num);
  }
  var index = num.length;
  var s = "";
  var done = false;
  while (!done) {
    var length = groupSize;
    var startIndex = index - length;
    if (startIndex < 0) {
      groupSize += startIndex;
      length += startIndex;
      startIndex = 0;
      done = true;
    }
    if (!length)
      break;
    var part = num.substring(startIndex, startIndex + length);
    if (s.length)
      s = part + grp + s;
    else
      s = part;
    index -= length;
  }
  if (negative)
    s = "-" + s;
  return decPart ? s + decPart : s;
}
var _formatRE = /\{\{|\}\}|\{[^\}\{]+\}/g;
function _formatString(format2, l, values, from) {
  return format2.replace(
    _formatRE,
    function(m) {
      if (m === "{{" || m === "}}")
        return m.charAt(0);
      var index = parseInt(m.substring(1), 10);
      var value = values[index + from];
      if (value == null) {
        return "";
      }
      var formatSpec = null;
      var formatIndex = m.indexOf(":");
      if (formatIndex > 0) {
        formatSpec = m.substring(formatIndex + 1, m.length - 1);
      }
      return _formatObject(value, formatSpec, l);
    }
  );
}
function stringFormat(format2, ...prm) {
  return _formatString(format2, Culture, arguments, 1);
}
function stringFormatLocale(l, format2, ...prm) {
  return _formatString(format2, l, arguments, 2);
}
function _formatObject(obj, format2, fmt2) {
  if (typeof obj === "number")
    return formatNumber(obj, format2, fmt2);
  else if (Object.prototype.toString.call(obj) === "[object Date]")
    return formatDate(obj, format2, fmt2);
  else if (obj.format)
    return obj.format(format2, fmt2 != null ? fmt2 : Culture);
  return String(obj);
}
var round = (n, d, rounding) => {
  var m = Math.pow(10, d || 0);
  n *= m;
  var sign = n > 0 | -(n < 0);
  if (n % 1 === 0.5 * sign) {
    var f = Math.floor(n);
    return (f + (rounding ? sign > 0 : f % 2 * sign)) / m;
  }
  return Math.round(n) / m;
};
var trunc = (n) => n != null ? n > 0 ? Math.floor(n) : Math.ceil(n) : null;
function formatNumber(num, format2, decOrLoc, grp) {
  var _a68, _b, _c, _d, _e, _f, _g, _h;
  if (num == null)
    return "";
  var fmt2 = typeof decOrLoc !== "string" ? decOrLoc != null ? decOrLoc : Culture : {
    decimalSeparator: decOrLoc,
    groupSeparator: grp != null ? grp : decOrLoc == "," ? "." : ","
  };
  if (isNaN(num)) {
    return (_a68 = fmt2.nanSymbol) != null ? _a68 : Culture.nanSymbol;
  }
  if (format2 === "i") {
    return num.toString();
  }
  if (format2 == null || format2 == "") {
    format2 = "g";
  }
  var dec = (_b = fmt2.decimalSeparator) != null ? _b : Culture.decimalSeparator;
  grp = (_c = grp != null ? grp : fmt2.groupSeparator) != null ? _c : Culture.groupSeparator;
  var neg = (_d = fmt2.negativeSign) != null ? _d : Culture.negativeSign;
  var s = "";
  var precision = -1;
  if (format2.length > 1) {
    precision = parseInt(format2.substring(1), 10);
  }
  var fs = format2.charAt(0);
  switch (fs) {
    case "g":
    case "G":
      if (precision != -1)
        s = num.toFixed(precision);
      else
        s = num.toString();
      if (dec != ".")
        s = s.replace(".", dec);
      break;
    case "d":
    case "D":
      s = parseInt(Math.abs(num)).toString();
      if (precision != -1)
        s = s.padStart(precision, "0");
      if (num < 0)
        s = neg + s;
      break;
    case "x":
    case "X":
      s = parseInt(Math.abs(num)).toString(16);
      if (fs == "X")
        s = s.toUpperCase();
      if (precision != -1)
        s = s.padStart(precision, "0");
      break;
    case "e":
    case "E":
      if (precision == -1)
        s = num.toExponential(6);
      else
        s = num.toExponential(precision);
      if (fs == "E")
        s = s.toUpperCase();
      break;
    case "f":
    case "F":
    case "n":
    case "N":
      if (precision == -1) {
        precision = (_e = fmt2.decimalDigits) != null ? _e : Culture.decimalDigits;
      }
      s = num.toFixed(precision).toString();
      if (precision && dec != ".") {
        var index = s.indexOf(".");
        s = s.substring(0, index) + dec + s.substring(index + 1);
      }
      if (fs == "n" || fs == "N") {
        s = insertGroupSeperator(s, dec, grp, neg);
      }
      break;
    case "c":
    case "C":
    case "p":
    case "P":
      if (precision == -1) {
        precision = (_f = fmt2.decimalDigits) != null ? _f : Culture.decimalDigits;
      }
      var symbol;
      if (fs === "p" || fs == "P") {
        num *= 100;
        symbol = (_g = fmt2.percentSymbol) != null ? _g : Culture.percentSymbol;
      } else {
        symbol = (_h = fmt2.currencySymbol) != null ? _h : Culture.currencySymbol;
      }
      s = num.toFixed(precision).toString();
      if (precision && dec != ".") {
        var index = s.indexOf(".");
        s = s.substring(0, index) + dec + s.substring(index + 1);
      }
      s = insertGroupSeperator(s, dec, grp, neg) + symbol;
      break;
    default:
      var prefix = "";
      var mid = "";
      var suffix = "";
      var endPrefix = false;
      var inQuote = false;
      for (var i = 0; i < format2.length; i++) {
        var c = format2.charAt(i);
        if (c == "'") {
          inQuote = !inQuote;
          continue;
        } else if (!inQuote) {
          if (c == "\\") {
            var c = format2.charAt(i + 1) || "";
            i++;
          } else if (c == "#" || c == "," || c == "." || c == "0") {
            endPrefix = true;
            mid += c;
            continue;
          }
        }
        endPrefix ? suffix += c : prefix += c;
      }
      format2 = mid;
      let r = "";
      if (format2.indexOf(".") > -1) {
        let dp = dec;
        let df = format2.substring(format2.lastIndexOf(".") + 1);
        num = roundNumber(num, df.length);
        let dv = num % 1;
        let ds = new String(dv.toFixed(df.length));
        ds = ds.substring(ds.lastIndexOf(".") + 1);
        for (let i2 = 0; i2 < df.length; i2++) {
          if (df.charAt(i2) == "#" && ds.charAt(i2) != "0") {
            dp += ds.charAt(i2);
            continue;
          } else if (df.charAt(i2) == "#" && ds.charAt(i2) == "0") {
            let notParsed = ds.substring(i2);
            if (notParsed.match("[1-9]")) {
              dp += ds.charAt(i2);
              continue;
            } else
              break;
          } else if (df.charAt(i2) == "0")
            dp += ds.charAt(i2);
          else
            dp += df.charAt(i2);
        }
        r += dp;
      } else
        num = Math.round(num);
      let ones = Math.floor(num);
      if (num < 0)
        ones = Math.ceil(num);
      let of = "";
      if (format2.indexOf(".") == -1)
        of = format2;
      else
        of = format2.substring(0, format2.indexOf("."));
      let op = "";
      if (!(ones == 0 && of.substring(of.length - 1) == "#")) {
        let oneText = new String(Math.abs(ones));
        let gl = 9999;
        if (of.lastIndexOf(",") != -1)
          gl = of.length - of.lastIndexOf(",") - 1;
        let gc = 0;
        for (let i2 = oneText.length - 1; i2 > -1; i2--) {
          op = oneText.charAt(i2) + op;
          gc++;
          if (gc == gl && i2 != 0) {
            op = grp + op;
            gc = 0;
          }
        }
        if (of.length > op.length) {
          let padStart = of.indexOf("0");
          if (padStart != -1) {
            let padLen = of.length - padStart;
            let pos = of.length - op.length - 1;
            while (op.length < padLen) {
              let pc = of.charAt(pos);
              if (pc == ",")
                pc = grp;
              op = pc + op;
              pos--;
            }
          }
        }
      }
      if (!op && of.indexOf("0", of.length - 1) !== -1)
        op = "0";
      r = op + r;
      if (num < 0)
        r = neg + r;
      if (r.lastIndexOf(dec) == r.length - 1) {
        r = r.substring(0, r.length - 1);
      }
      return prefix + r + suffix;
  }
  return s;
}
function parseInteger(s) {
  if (s == null)
    return null;
  s = s.toString().trim();
  if (!s.length)
    return null;
  let ts = Culture.groupSeparator;
  if (s && s.length && s.indexOf(ts) > 0) {
    s = s.replace(new RegExp("(\\b\\d{1,3})\\" + ts + "(?=\\d{3}(\\D|$))", "g"), "$1");
  }
  if (!/^[-\+]?\d+$/.test(s))
    return NaN;
  return parseInt(s, 10);
}
function parseDecimal(s) {
  if (s == null)
    return null;
  s = s.toString().trim();
  if (s.length == 0)
    return null;
  let ts = Culture.groupSeparator;
  if (s && s.length && s.indexOf(ts) > 0) {
    s = s.replace(new RegExp("(\\b\\d{1,3})\\" + ts + "(?=\\d{3}(\\D|$))", "g"), "$1");
  }
  if (!new RegExp("^\\s*([-\\+])?(\\d*)\\" + Culture.decimalSeparator + "?(\\d*)\\s*$").test(s))
    return NaN;
  return parseFloat(s.toString().replace(Culture.decimalSeparator, "."));
}
function roundNumber(n, dec) {
  let power = Math.pow(10, dec || 0);
  let value = (Math.round(n * power) / power).toString();
  if (dec > 0) {
    let dp = value.indexOf(".");
    if (dp == -1) {
      value += ".";
      dp = 0;
    } else {
      dp = value.length - (dp + 1);
    }
    while (dp < dec) {
      value += "0";
      dp++;
    }
  }
  return parseFloat(value);
}
function toId(id) {
  if (id == null)
    return null;
  if (typeof id == "number")
    return id;
  if (typeof id == "string")
    id = id.trim();
  if (!id.length)
    return null;
  if (id.length >= 15 || !/^-?\d+$/.test(id))
    return id;
  return parseInt(id, 10);
}
var _dateFormatRE = /'.*?[^\\]'|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|\//g;
function formatDate(d, format2, locale) {
  var _a68, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
  if (!d)
    return "";
  let date;
  if (typeof d == "string") {
    date = parseDate(d, locale == null ? void 0 : locale.dateOrder);
    if (!date)
      return "";
    if (isNaN(date.valueOf()))
      return d;
  } else
    date = d;
  if (format2 == "i")
    return date.toString();
  if (format2 == "id")
    return date.toDateString();
  if (format2 == "it")
    return date.toTimeString();
  if (locale == null)
    locale = Culture;
  if (format2 == null || format2 == "d")
    format2 = (_a68 = locale.dateFormat) != null ? _a68 : Culture.dateFormat;
  else if (format2.length == 1) {
    switch (format2) {
      case "g":
        format2 = ((_b = locale.dateTimeFormat) != null ? _b : Culture.dateTimeFormat).replace(":ss", "");
        break;
      case "G":
        format2 = (_c = locale.dateTimeFormat) != null ? _c : Culture.dateTimeFormat;
        break;
      case "s":
        format2 = "yyyy-MM-ddTHH:mm:ss";
        break;
      case "t":
        format2 = locale.dateTimeFormat && locale.dateFormat ? locale.dateTimeFormat.replace(locale.dateFormat + " ", "") : "HH:mm";
        break;
      case "u":
      case "U":
        format2 = format2 == "u" ? "yyyy-MM-ddTHH:mm:ss.fffZ" : (_d = locale.dateTimeFormat) != null ? _d : Culture.dateTimeFormat;
        date = new Date(
          date.getUTCFullYear(),
          date.getUTCMonth(),
          date.getUTCDate(),
          date.getUTCHours(),
          date.getUTCMinutes(),
          date.getUTCSeconds(),
          date.getUTCMilliseconds()
        );
        break;
    }
  }
  if (format2.charAt(0) == "%") {
    format2 = format2.substring(1);
  }
  var re = _dateFormatRE;
  var sb = [];
  re.lastIndex = 0;
  while (true) {
    var index = re.lastIndex;
    var match = re.exec(format2);
    sb.push(format2.slice(index, match ? match.index : format2.length));
    if (!match) {
      break;
    }
    var fs = match[0];
    var part = fs;
    var n;
    switch (fs) {
      case "/":
        part = (_e = locale.dateSeparator) != null ? _e : Culture.dateSeparator;
        break;
      case "dddd":
        part = ((_f = locale.dayNames) != null ? _f : Culture.dayNames)[date.getDay()];
        break;
      case "ddd":
        part = ((_g = locale.shortDayNames) != null ? _g : Culture.shortDayNames)[date.getDay()];
        break;
      case "dd":
        part = date.getDate().toString().padStart(2, "0");
        break;
      case "d":
        part = date.getDate().toString();
        break;
      case "MMMM":
        part = ((_h = locale.monthNames) != null ? _h : Culture.monthNames)[date.getMonth()];
        break;
      case "MMM":
        part = ((_i = locale.shortMonthNames) != null ? _i : Culture.shortMonthNames)[date.getMonth()];
        break;
      case "MM":
        part = (date.getMonth() + 1).toString().padStart(2, "0");
        break;
      case "M":
        part = (date.getMonth() + 1).toString();
        break;
      case "yyyy":
        part = date.getFullYear().toString().padStart(4, "0");
        break;
      case "yy":
        part = (date.getFullYear() % 100).toString().padStart(2, "0");
        break;
      case "y":
        part = (date.getFullYear() % 100).toString();
        break;
      case "h":
      case "hh":
        n = date.getHours() % 12;
        if (!n) {
          part = "12";
        } else {
          part = n.toString();
          if (fs == "hh")
            part = part.padStart(2, "0");
        }
        break;
      case "HH":
        part = date.getHours().toString().padStart(2, "0");
        break;
      case "H":
        part = date.getHours().toString();
        break;
      case "mm":
        part = date.getMinutes().toString().padStart(2, "0");
        break;
      case "m":
        part = date.getMinutes().toString();
        break;
      case "ss":
        part = date.getSeconds().toString().padStart(2, "0");
        break;
      case "s":
        part = date.getSeconds().toString();
        break;
      case "t":
      case "tt":
        part = date.getHours() < 12 ? (_j = locale.amDesignator) != null ? _j : Culture.amDesignator : (_k = locale.pmDesignator) != null ? _k : Culture.pmDesignator;
        if (fs == "t") {
          part = part.charAt(0);
        }
        break;
      case "fff":
        part = date.getMilliseconds().toString().padStart(3, "0");
        break;
      case "ff":
        part = date.getMilliseconds().toString().padStart(3, "0").substring(0, 2);
        break;
      case "f":
        part = date.getMilliseconds().toString().padStart(3, "0").charAt(0);
        break;
      case "z":
        n = date.getTimezoneOffset() / 60;
        part = (n >= 0 ? "-" : "+") + Math.floor(Math.abs(n));
        break;
      case "zz":
      case "zzz":
        n = date.getTimezoneOffset() / 60;
        part = (n >= 0 ? "-" : "+") + Math.floor(Math.abs(n)).toString().padStart(2, "0");
        if (fs == "zzz") {
          part += ((_l = locale.timeSeparator) != null ? _l : Culture.timeSeparator) + Math.abs(date.getTimezoneOffset() % 60).toString().padStart(2, "0");
        }
        break;
      default:
        if (part.charAt(0) == "'") {
          part = part.substring(1, part.length - 1).replace(/\\'/g, "'");
        }
        break;
    }
    sb.push(part);
  }
  return sb.join("");
}
function formatISODateTimeUTC(d) {
  if (d == null)
    return "";
  let zeropad = function(num) {
    return (num < 10 ? "0" : "") + num;
  };
  let str = d.getUTCFullYear() + "-" + zeropad(d.getUTCMonth() + 1) + "-" + zeropad(d.getUTCDate()) + "T" + zeropad(d.getUTCHours()) + ":" + zeropad(d.getUTCMinutes());
  let secs = Number(d.getUTCSeconds() + "." + (d.getUTCMilliseconds() < 100 ? "0" : "") + zeropad(d.getUTCMilliseconds()));
  str += ":" + zeropad(secs) + "Z";
  return str;
}
var isoRegexp = /(\d{4,})(?:-(\d{1,2})(?:-(\d{1,2})(?:[T ](\d{1,2}):(\d{1,2})(?::(\d{1,2})(?:\.(\d+))?)?(?:(Z)|([+-])(\d{1,2})(?::(\d{1,2}))?)?)?)?)?/;
function parseISODateTime(s) {
  if (s == null)
    return null;
  if (typeof s !== "string")
    s = s + "";
  if (!s.length)
    return null;
  if (!isoRegexp.test(s))
    return /* @__PURE__ */ new Date(NaN);
  return /* @__PURE__ */ new Date(s + (s.length == 10 ? "T00:00:00" : ""));
}
function parseDate(s, dateOrder) {
  if (!s || !s.length)
    return null;
  s = s.trim();
  if (!s.length)
    return null;
  if (s.length >= 10 && s.charAt(4) === "-" && s.charAt(7) === "-" && (s.length === 10 || s.length > 10 && s.charAt(10) === "T")) {
    return parseISODateTime(s);
  }
  if (s.indexOf(" ") > 0 && s.indexOf(":") > s.indexOf(" ") + 1) {
    var datePart = parseDate(s.substring(0, s.indexOf(" ")));
    if (!datePart || isNaN(datePart.valueOf()))
      return /* @__PURE__ */ new Date(NaN);
    return parseISODateTime(formatDate(datePart, "yyyy-MM-dd") + "T" + s.substring(s.indexOf(" ") + 1).trim());
  }
  let d, m, y;
  let dArray = splitDateString(s);
  if (dArray.length == 3) {
    if (dArray.some((x) => !/^[0-9]+$/.test(x)))
      return /* @__PURE__ */ new Date(NaN);
    dateOrder = dateOrder || Culture.dateOrder;
    switch (dateOrder) {
      case "dmy":
        d = parseInt(dArray[0], 10);
        m = parseInt(dArray[1], 10) - 1;
        y = parseInt(dArray[2], 10);
        break;
      case "ymd":
        d = parseInt(dArray[2], 10);
        m = parseInt(dArray[1], 10) - 1;
        y = parseInt(dArray[0], 10);
        break;
      case "mdy":
      default:
        d = parseInt(dArray[1], 10);
        m = parseInt(dArray[0], 10) - 1;
        y = parseInt(dArray[2], 10);
        break;
    }
    if (isNaN(d) || isNaN(m) || isNaN(y) || d < 1 || d > 31 || m < 0 || m > 11 || y > 9999 || y < 0)
      return /* @__PURE__ */ new Date(NaN);
    if (y < 100) {
      let fullYear = (/* @__PURE__ */ new Date()).getFullYear();
      let shortYearCutoff = fullYear % 100 + 10;
      y += fullYear - fullYear % 100 + (y <= shortYearCutoff ? 0 : -100);
    }
    return new Date(y, m, d);
  } else if (dArray.length == 1) {
    try {
      return new Date(dArray[0]);
    } catch (e) {
      return /* @__PURE__ */ new Date(NaN);
    }
  }
  return /* @__PURE__ */ new Date(NaN);
}
function splitDateString(s) {
  s = s == null ? void 0 : s.trim();
  if (!(s == null ? void 0 : s.length))
    return null;
  if (s.indexOf("/") >= 0)
    return s.split("/");
  else if (s.indexOf(".") >= 0)
    return s.split(".");
  else if (s.indexOf("-") >= 0)
    return s.split("-");
  else if (s.indexOf("\\") >= 0)
    return s.split("\\");
  else
    return [s];
}

// src/base/toastr2.ts
var initialOptions = {
  tapToDismiss: true,
  toastClass: "toast",
  containerId: "toast-container",
  onShown: () => {
  },
  onHidden: () => {
  },
  closeOnHover: true,
  extendedTimeOut: 1e3,
  iconClass: "toast-info",
  positionClass: "toast-top-right",
  timeOut: 5e3,
  // Set timeOut to 0 to make it sticky
  titleClass: "toast-title",
  messageClass: "toast-message",
  escapeHtml: true,
  target: "body",
  closeHtml: '<button type="button">&times;</button>',
  closeClass: "toast-close-button",
  newestOnTop: true,
  preventDuplicates: false,
  rtl: false,
  onCloseClick: () => {
  },
  closeButton: false,
  onclick: () => {
  }
};
var initialInstance = null;
var Toastr = class {
  constructor(options) {
    var _a68;
    this.toastId = 0;
    this.previousToast = null;
    this.options = Object.assign(Object.assign({}, (_a68 = initialInstance == null ? void 0 : initialInstance.options) != null ? _a68 : initialOptions), options);
  }
  getContainer(options, create = false) {
    var _a68, _b, _c;
    let container = document.getElementById((_a68 = options == null ? void 0 : options.containerId) != null ? _a68 : this.options.containerId);
    if (container || !create)
      return container;
    container = document.createElement("div");
    container.setAttribute("id", this.options.containerId);
    let positionClass = (_b = options == null ? void 0 : options.positionClass) != null ? _b : this.options.positionClass;
    if (positionClass)
      addClass(container, positionClass);
    let targetSelector = (_c = options == null ? void 0 : options.target) != null ? _c : this.options.target;
    const target = document.querySelector(targetSelector);
    if (target)
      target.appendChild(container);
    return container;
  }
  error(message, title, opt) {
    return this.notify({
      type: "error",
      iconClass: "toast-error",
      message,
      title
    }, opt);
  }
  warning(message, title, opt) {
    return this.notify({
      type: "warning",
      iconClass: "toast-warning",
      message,
      title
    }, opt);
  }
  success(message, title, opt) {
    return this.notify({
      type: "success",
      iconClass: "toast-success",
      message,
      title
    }, opt);
  }
  info(message, title, opt) {
    return this.notify({
      type: "info",
      iconClass: "toast-info",
      message,
      title
    }, opt);
  }
  subscribe(callback) {
    this.listener = callback;
  }
  publish(args) {
    if (!this.listener) {
      return;
    }
    this.listener(args);
  }
  removeContainerIfEmpty(options) {
    var _a68;
    let container = this.getContainer(options);
    if (!container)
      return;
    if (!((_a68 = container.hasChildNodes) == null ? void 0 : _a68.call(container)) && container.parentNode)
      container.parentNode.removeChild(container);
  }
  removeToast(toastElement, options) {
    var _a68;
    if (!toastElement)
      return;
    if (toastElement !== document.activeElement) {
      (_a68 = toastElement.parentNode) == null ? void 0 : _a68.removeChild(toastElement);
      this.previousToast = null;
      this.removeContainerIfEmpty(options);
    }
  }
  clear(options) {
    let container = this.getContainer(options);
    if (!container)
      return;
    const toastsToClear = Array.from(container.childNodes);
    for (let i = toastsToClear.length - 1; i >= 0; i -= 1)
      this.removeToast(toastsToClear[i], options);
    this.removeContainerIfEmpty();
  }
  notify(map, opt) {
    opt = Object.assign(Object.assign(Object.assign({}, this.options), map), opt);
    const shouldExit = (opts, exitMap) => {
      if (opts.preventDuplicates) {
        if (exitMap.message === this.previousToast) {
          return true;
        }
        this.previousToast = exitMap.message || "";
      }
      return false;
    };
    if (shouldExit(opt, map)) {
      return null;
    }
    this.toastId += 1;
    var container = this.getContainer(opt, true);
    let intervalId = null;
    const toastElement = document.createElement("div");
    const $titleElement = document.createElement("div");
    const $messageElement = document.createElement("div");
    const closeContainer = document.createElement("div");
    closeContainer.innerHTML = opt.closeHtml.trim();
    const closeElement = closeContainer.firstChild;
    const response = {
      toastId: this.toastId,
      state: "visible",
      startTime: /* @__PURE__ */ new Date(),
      endTime: void 0,
      opt,
      map
    };
    const hideToast = (override = null) => {
      if (toastElement === document.activeElement && !override) {
        return;
      }
      this.removeToast(toastElement);
      if (intervalId) {
        clearTimeout(intervalId);
      }
      if (opt.onHidden && response.state !== "hidden") {
        opt.onHidden();
      }
      response.state = "hidden";
      response.endTime = /* @__PURE__ */ new Date();
      this.publish(response);
    };
    const setAria = () => {
      let ariaValue = "";
      switch (opt.iconClass) {
        case "toast-success":
        case "toast-info":
          ariaValue = "polite";
          break;
        default:
          ariaValue = "assertive";
      }
      toastElement.setAttribute("aria-live", ariaValue);
    };
    const handleEvents = () => {
      if (opt.closeOnHover) {
        toastElement.addEventListener("mouseover", () => {
          if (intervalId) {
            clearTimeout(intervalId);
          }
        });
        toastElement.addEventListener("mouseout", () => {
          if (opt.timeOut >= 0 && (opt.timeOut > 0 || opt.extendedTimeOut > 0)) {
            intervalId = setTimeout(hideToast, opt.extendedTimeOut);
          }
        });
      }
      if (!opt.onclick && opt.tapToDismiss) {
        toastElement.addEventListener("click", hideToast);
      }
      if (opt.closeButton && closeElement) {
        closeElement.addEventListener("click", (event) => {
          event.stopPropagation();
          if (opt.onCloseClick) {
            opt.onCloseClick(event);
          }
          hideToast(true);
        });
      }
      if (opt.onclick) {
        toastElement.addEventListener("click", (event) => {
          if (opt.onclick) {
            opt.onclick(event);
          }
          if (opt.tapToDismiss)
            hideToast();
        });
      }
    };
    const setTitle = () => {
      if (map.title) {
        let suffix = map.title;
        if (opt.escapeHtml) {
          suffix = htmlEncode(map.title);
        }
        $titleElement.innerHTML = suffix;
        addClass($titleElement, opt.titleClass);
        toastElement.appendChild($titleElement);
      }
    };
    const setMessage = () => {
      if (map.message) {
        let suffix = map.message;
        if (opt.escapeHtml) {
          suffix = htmlEncode(map.message);
        }
        $messageElement.innerHTML = suffix;
        addClass($messageElement, opt.messageClass);
        toastElement.appendChild($messageElement);
      }
    };
    const setCloseButton = () => {
      if (opt.closeButton && closeElement) {
        addClass(closeElement, opt.closeClass);
        closeElement.setAttribute("role", "button");
        toastElement.insertBefore(closeElement, toastElement.firstChild);
      }
    };
    const setSequence = () => {
      if (opt.newestOnTop) {
        container.insertBefore(toastElement, container.firstChild);
      } else {
        container.appendChild(toastElement);
      }
    };
    const displayToast = () => {
      if (opt.onShown) {
        opt.onShown();
      }
      if (opt.timeOut > 0) {
        intervalId = setTimeout(hideToast, opt.timeOut);
      }
    };
    const personalizeToast = () => {
      toastElement.classList.add("show");
      opt.rtl && toastElement.classList.add("rtl");
      opt.toastClass && addClass(toastElement, opt.toastClass);
      opt.iconClass && addClass(toastElement, opt.iconClass);
      setTitle();
      setMessage();
      setCloseButton();
      setSequence();
      setAria();
    };
    personalizeToast();
    displayToast();
    handleEvents();
    this.publish(response);
    return toastElement;
  }
};
initialInstance = new Toastr();
var toastr2_default = initialInstance;

// src/base/notify.ts
var defaultNotifyOptions = {
  timeOut: 5e3,
  escapeHtml: true,
  positionClass: "position-toast toast-top-full-width"
};
function positionToastContainer(options, create = true) {
  let container = toastr2_default.getContainer(options, create);
  if (!container || !container.classList.contains("position-toast") || typeof document === "undefined" || !document.body)
    return;
  let dialogs = Array.from(document.body.children);
  let dialogIndex = dialogs.findIndex((x) => x.matches(".ui-dialog, .modal.in, .modal.show") && !x.matches('[style*="display:none"], [style*="display: none"], .hidden'));
  let dialog = dialogs[dialogIndex];
  if (dialog) {
    const { top, left, right } = dialog.getBoundingClientRect();
    container.classList.add("positioned-toast");
    container.style.position = "absolute";
    container.style.top = top + 28 + "px";
    container.style.left = left + 6 + "px";
    container.style.width = Math.max(right - left - 12, 150) + "px";
  } else if (container.classList.contains("positioned-toast")) {
    container.classList.remove("positioned-toast");
    container.style.position = "";
    container.style.top = "";
    container.style.left = "";
    container.style.width = "";
  }
}
function getToastrOptions(options) {
  options = Object.assign(Object.assign({}, defaultNotifyOptions), options);
  positionToastContainer(options);
  return options;
}
function showToast(type, message, title, options) {
  return toastr2_default[type](message, title, getToastrOptions(options));
}
function notifyError(message, title, options) {
  showToast("error", message, title, options);
}
function notifyInfo(message, title, options) {
  showToast("info", message, title, options);
}
function notifySuccess(message, title, options) {
  showToast("success", message, title, options);
}
function notifyWarning(message, title, options) {
  showToast("warning", message, title, options);
}

// src/base/errorhandling.ts
var ErrorHandling;
((ErrorHandling3) => {
  function showServiceError(error, errorInfo, errorMode) {
    var _a68, _b;
    const showMessage = errorMode == "notification" ? notifyError : alertDialog;
    if (error || !errorInfo) {
      showMessage((_b = (_a68 = error == null ? void 0 : error.Message) != null ? _a68 : error == null ? void 0 : error.Code) != null ? _b : localText("Services.GenericErrorMessage", "An error occurred while processing your request."));
      return;
    }
    const seeBrowserConsole = !ErrorHandling3.isDevelopmentMode() ? " " + localText("Services.SeeBrowserConsole", "See browser console (F12) for more information.") : "";
    if (!errorInfo.responseText) {
      if (!errorInfo.status) {
        if (errorInfo.statusText != "abort")
          showMessage(localText("Services.UnknownConnectionEror", "An error occured while connecting to the server.") + seeBrowserConsole);
      } else if (errorInfo.status == 500)
        showMessage(localText("Services.InternalServerError", "Internal Server Error (500).") + seeBrowserConsole);
      else
        showMessage(stringFormat(localText("Services.HttpError", "HTTP Error {0}."), errorInfo.status) + seeBrowserConsole);
    } else if (errorMode == "notification")
      notifyError(errorInfo.responseText);
    else
      iframeDialog({ html: errorInfo.responseText });
  }
  ErrorHandling3.showServiceError = showServiceError;
  function runtimeErrorHandler(message, filename, lineno, colno, error) {
    var _a68;
    try {
      if (!ErrorHandling3.isDevelopmentMode())
        return;
      var errorInfo = (_a68 = error == null ? void 0 : error.stack) != null ? _a68 : error == null ? void 0 : error.toString();
      message = "<p></p><p>Message: " + htmlEncode(message) + "</p><p>File: " + htmlEncode(filename) + ", Line: " + lineno + ", Column: " + colno + (errorInfo ? "</p><p>" + htmlEncode(errorInfo) : "") + "</p>";
      window.setTimeout(function() {
        try {
          notifyError(message, "SCRIPT ERROR! See browser console (F12) for details.", {
            escapeHtml: false,
            timeOut: 15e3
          });
        } catch (e) {
        }
      }, 0);
    } catch (e) {
    }
  }
  ErrorHandling3.runtimeErrorHandler = runtimeErrorHandler;
  function isDevelopmentMode() {
    var _a68;
    var hostname = ((_a68 = window.location.hostname) != null ? _a68 : "").toLowerCase();
    return hostname === "localhost" || hostname === "127.0.0.1" || hostname === "[::1]" || hostname.endsWith(".local") || hostname.endsWith(".localhost");
  }
  ErrorHandling3.isDevelopmentMode = isDevelopmentMode;
  function unhandledRejectionHandler(err) {
    var _a68;
    try {
      if (!err || !err.reason)
        return;
      const reason2 = err.reason;
      if (reason2.origin == "serviceCall") {
        err.preventDefault();
        if (!reason2.silent && ((_a68 = reason2.kind) != null ? _a68 : "exception") === "exception") {
          console.error(err);
        }
      }
    } catch (e) {
    }
  }
  ErrorHandling3.unhandledRejectionHandler = unhandledRejectionHandler;
})(ErrorHandling || (ErrorHandling = {}));

// src/base/lookup.ts
var Lookup = class {
  constructor(options, items) {
    this.items = [];
    this.itemById = {};
    options = options || {};
    this.idField = options.idField;
    this.parentIdField = options.parentIdField;
    this.textField = options.textField;
    if (items != null)
      this.update(items);
  }
  update(value) {
    this.items = [];
    this.itemById = {};
    if (value) {
      for (var k of value) {
        if (k == null || typeof k !== "object")
          this.items.push({ [this.idField]: k, [this.textField]: k });
        else
          this.items.push(k);
      }
    }
    var idField = this.idField;
    if (idField) {
      for (var r of this.items) {
        var v = r[idField];
        if (v != null) {
          this.itemById[v] = r;
        }
      }
    }
  }
};

// src/base/propertyitem.ts
var SummaryType = /* @__PURE__ */ ((SummaryType2) => {
  SummaryType2[SummaryType2["Disabled"] = -1] = "Disabled";
  SummaryType2[SummaryType2["None"] = 0] = "None";
  SummaryType2[SummaryType2["Sum"] = 1] = "Sum";
  SummaryType2[SummaryType2["Avg"] = 2] = "Avg";
  SummaryType2[SummaryType2["Min"] = 3] = "Min";
  SummaryType2[SummaryType2["Max"] = 4] = "Max";
  return SummaryType2;
})(SummaryType || {});
registerEnum(SummaryType, "Serenity.SummaryType");

// src/base/services.ts
function resolveUrl(url) {
  if (url != null && url.charAt(0) == "~" && url.charAt(1) == "/")
    return Config.applicationPath + url.substring(2);
  return url;
}
function resolveServiceUrl(url) {
  if (url && url.length && url.charAt(0) != "~" && url.charAt(0) != "/" && url.indexOf("://") < 0)
    return resolveUrl("~/Services/") + url;
  return resolveUrl(url);
}
function getCookie(name) {
  let $2 = getjQuery();
  if (typeof ($2 == null ? void 0 : $2.cookie) === "function")
    return $2.cookie(name);
  name += "=";
  for (var ca = document.cookie.split(/;\s*/), i = ca.length - 1; i >= 0; i--)
    if (!ca[i].indexOf(name))
      return ca[i].replace(name, "");
}
function isSameOrigin(url) {
  var loc = window.location, a = document.createElement("a");
  a.href = url;
  return a.hostname == loc.hostname && a.port == loc.port && a.protocol == loc.protocol;
}
function serviceOptions(url, options) {
  var _a68, _b, _c, _d, _e;
  options = Object.assign({
    allowRedirect: true,
    async: true,
    blockUI: true,
    method: "POST"
  }, options);
  (_a68 = options.headers) != null ? _a68 : options.headers = {};
  (_c = (_b = options.headers)["Accept"]) != null ? _c : _b["Accept"] = "application/json";
  (_e = (_d = options.headers)["Content-Type"]) != null ? _e : _d["Content-Type"] = "application/json";
  if (isSameOrigin(url)) {
    var token = getCookie("CSRF-TOKEN");
    if (token)
      options.headers["X-CSRF-TOKEN"] = token;
  }
  return options;
}
var activeRequests = 0;
function requestStarting() {
  var _a68, _b;
  activeRequests++;
  let $2 = getjQuery();
  if ($2 && typeof $2.active === "number") {
    $2.active++ === 0 && ((_b = (_a68 = $2.event) == null ? void 0 : _a68.trigger) == null ? void 0 : _b.call(_a68, "ajaxStart"));
  } else if (activeRequests === 1) {
    typeof document !== "undefined" && document.dispatchEvent(new Event("ajaxStart"));
  }
}
function requestFinished() {
  var _a68, _b;
  activeRequests--;
  let $2 = getjQuery();
  if ($2 && typeof $2.active === "number") {
    !--$2.active && ((_b = (_a68 = $2.event) == null ? void 0 : _a68.trigger) == null ? void 0 : _b.call(_a68, "ajaxStop"));
  } else if (!activeRequests) {
    typeof document !== "undefined" && document.dispatchEvent(new Event("ajaxStop"));
  }
}
function getActiveRequests() {
  return activeRequests;
}
function serviceFetch(options) {
  if (typeof fetch !== "function")
    return Promise.reject(reason("The fetch method is not available!", "fetch-missing"));
  return function() {
    return __async(this, null, function* () {
      var _b, _c;
      let url = options.service ? resolveServiceUrl(options.service) : resolveUrl(options.url);
      options = serviceOptions(url, options);
      requestStarting();
      try {
        options.blockUI && blockUI();
        try {
          let _a68 = options, {
            allowRedirect: _1,
            async: _2,
            blockUI: _3,
            request: _4,
            service: _5,
            url: _6,
            onCleanup: _7,
            onError: _8,
            onSuccess: _9
          } = _a68, fetchInit = __objRest(_a68, [
            "allowRedirect",
            "async",
            "blockUI",
            "request",
            "service",
            "url",
            "onCleanup",
            "onError",
            "onSuccess"
          ]);
          fetchInit.body = JSON.stringify(options.request);
          let fetchResponse;
          try {
            fetchResponse = fetchResponse = yield fetch(url, fetchInit);
          } catch (ex) {
            if (ex.name === "AbortError") {
              return Promise.reject(reason(
                `Service fetch to '${url}' was aborted!`,
                "abort",
                { cause: ex, url }
              ));
            }
            throw ex;
          }
          if (!fetchResponse.ok) {
            yield handleFetchError(fetchResponse, options);
            return Promise.reject(reason(
              `Service fetch to '${url}' resulted in HTTP ${fetchResponse.status} error: ${fetchResponse.statusText}!`,
              "http-error",
              { fetchResponse, url }
            ));
          }
          let response = yield fetchResponse.json();
          if (!response)
            return Promise.reject(reason(
              `Received empty response from service fetch to '${url}'!`,
              "empty-response",
              { fetchResponse, url }
            ));
          if (response.Error) {
            handleError(response != null ? response : {}, { status: fetchResponse.status, statusText: fetchResponse.statusText }, options);
            return Promise.reject(reason(
              `Service fetch to '${url}' resulted in error: ${(_b = response.Error.Message) != null ? _b : response.Error.Code}!`,
              "service-error",
              { response, fetchResponse, url }
            ));
          }
          (_c = options.onSuccess) == null ? void 0 : _c.call(options, response);
          return response;
        } finally {
          options.blockUI && blockUndo();
          options.onCleanup && options.onCleanup();
        }
      } finally {
        requestFinished();
      }
    });
  }();
}
function reason(message, kind, extra) {
  var error;
  if ((extra == null ? void 0 : extra.cause) != null) {
    error = Error(message, { cause: extra.cause });
  } else {
    error = Error(message);
  }
  if (kind != null) {
    error.kind = kind;
  }
  error.origin = "serviceCall";
  if (extra != null) {
    if (error.cause)
      delete extra.cause;
    Object.assign(error, extra);
  }
  return error;
}
function serviceCall(options) {
  var _a68;
  if ((_a68 = options == null ? void 0 : options.async) != null ? _a68 : true)
    return serviceFetch(options);
  let url;
  return new Promise((resolve, reject) => {
    var _a69, _b, _c, _d, _e, _f;
    try {
      url = options.service ? resolveServiceUrl(options.service) : resolveUrl(options.url);
      options = serviceOptions(url, options);
      var xhr = new XMLHttpRequest();
      xhr.open(options.method, url, false);
      if (options.cache == "no-store")
        (_b = (_a69 = options.headers)["Cache-Control"]) != null ? _b : _a69["Cache-Control"] = "no-cache, no-store, max-age=0";
      else if (options.cache === "no-cache")
        (_d = (_c = options.headers)["Cache-Control"]) != null ? _d : _c["Cache-Control"] = "no-cache";
      for (var x in options.headers) {
        xhr.setRequestHeader(x, options.headers[x]);
      }
      requestStarting();
      try {
        if (options.signal) {
          options.signal.addEventListener("abort", () => {
            xhr.abort();
          }, { once: true });
        }
        xhr.send(JSON.stringify(options.request));
        try {
          if (xhr.status !== 200) {
            handleXHRError(xhr, options);
            return reject(reason(
              `HTTP ${xhr.status} error on service call to '${url}': ${xhr.statusText}!`,
              "http-error",
              { status: xhr.status, statusText: xhr.statusText, url }
            ));
          }
          let response = JSON.parse(xhr.responseText);
          if (!response)
            return reject(reason(
              `Empty response received on service call to '${url}'!`,
              "empty-response",
              { url }
            ));
          if (response.Error) {
            handleError(response, { status: xhr.status, statusText: xhr.statusText }, options);
            return reject(reason(
              `Service call to '${url}' resulted in error: ${(_e = response.Error.Message) != null ? _e : response.Error.Code}!`,
              "service-error",
              { response, url }
            ));
          }
          (_f = options.onSuccess) == null ? void 0 : _f.call(options, response);
          return resolve(response);
        } finally {
          options.blockUI && blockUndo();
          options.onCleanup && options.onCleanup();
        }
      } finally {
        requestFinished();
      }
    } catch (exception) {
      reject(reason(
        `Service call to '${url}' thrown exception: ${exception.toString()}`,
        "exception",
        { cause: exception, url }
      ));
    }
  });
}
function serviceRequest(service, request, onSuccess, options) {
  return serviceCall(Object.assign({
    service,
    request,
    onSuccess
  }, options));
}
function handleError(response, errorInfo, options) {
  var _a68;
  if (Config.notLoggedInHandler != null && response && response.Error && response.Error.Code == "NotLoggedIn" && Config.notLoggedInHandler(options, response)) {
    return;
  }
  if (((_a68 = options == null ? void 0 : options.onError) == null ? void 0 : _a68.call(options, response, errorInfo)) || (options == null ? void 0 : options.errorMode) === "none")
    return;
  ErrorHandling.showServiceError(response == null ? void 0 : response.Error, errorInfo, options == null ? void 0 : options.errorMode);
}
function handleRedirect(getHeader) {
  var l = null;
  try {
    l = getHeader("Location");
  } catch ($t1) {
    l = null;
  }
  if (l) {
    window.top.location.href = l;
    return true;
  }
}
function handleFetchError(response, options) {
  return __async(this, null, function* () {
    if (response.status === 403 && options.allowRedirect && handleRedirect(response.headers.get))
      return;
    if ((response.headers.get("content-type") || "").toLowerCase().indexOf("json") >= 0) {
      var json = yield response.json();
      if (json && json.Error) {
        handleError(json, {
          status: response.status,
          statusText: response.statusText
        }, options);
        return;
      }
    }
    handleError(null, {
      status: response.status,
      statusText: response.statusText,
      responseText: yield response.text()
    }, options);
  });
}
function handleXHRError(xhr, options) {
  if (xhr.status === 403 && options.allowRedirect && handleRedirect(xhr.getResponseHeader))
    return;
  if ((xhr.getResponseHeader("content-type") || "").toLowerCase().indexOf("application/json") >= 0) {
    var json = JSON.parse(xhr.responseText);
    if (json && json.Error) {
      handleError(json, { status: xhr.status, statusText: xhr.statusText }, options);
      return;
    }
  }
  handleError(null, { status: xhr.status, statusText: xhr.statusText, responseText: xhr.responseText }, options);
}

// src/base/scriptdata.ts
function getScriptDataHash(name, reload) {
  var _a68, _b;
  let json;
  let scriptDataHash = getGlobalObject()[scriptDataHashSymbol];
  if (!scriptDataHash && typeof document !== "undefined" && (json = ((_b = (_a68 = document.querySelector("script#RegisteredScripts")) == null ? void 0 : _a68.innerHTML) != null ? _b : "").trim()) && json.charAt(0) == "{") {
    var regs = JSON.parse(json);
    getGlobalObject()[scriptDataHashSymbol] = scriptDataHash = {};
    for (var i in regs) {
      scriptDataHash[i] = regs[i];
    }
  }
  if (!scriptDataHash) {
    if (reload)
      getGlobalObject()[scriptDataHashSymbol] = scriptDataHash = {};
    else
      return null;
  }
  if (reload)
    return scriptDataHash[name] = (/* @__PURE__ */ new Date()).getTime().toString();
  return scriptDataHash[name];
}
var fetchPromises = {};
function fetchScriptData(name) {
  var _a68;
  let key = name + "?" + ((_a68 = getScriptDataHash(name)) != null ? _a68 : "");
  var promise = fetchPromises[key];
  if (promise != null)
    return promise;
  if (typeof fetch === "undefined")
    return Promise.reject("The fetch method is not available!");
  return fetchPromises[key] = function() {
    return __async(this, null, function* () {
      var _a69, _b;
      try {
        blockUI();
        try {
          let url = resolveUrl("~/DynamicData/") + name + "?v=" + ((_a69 = getScriptDataHash(name)) != null ? _a69 : (/* @__PURE__ */ new Date()).getTime());
          requestStarting();
          try {
            var response = yield fetch(url, {
              method: "GET",
              cache: "force-cache",
              headers: {
                "Accept": "application/json"
              }
            });
            if (!response.ok)
              handleScriptDataError(name, response.status, (_b = response.statusText) != null ? _b : "");
            const data = yield response.json();
            if (name.startsWith("Lookup."))
              return new Lookup(data.Params, data.Items);
            return data;
          } finally {
            requestFinished();
          }
        } finally {
          blockUndo();
        }
      } finally {
        delete fetchPromises[key];
      }
    });
  }();
}
function getScriptData(name, reload) {
  return __async(this, null, function* () {
    let data;
    if (reload) {
      getScriptDataHash(name, true);
      setScriptData(name, void 0);
    } else if ((data = peekScriptData(name)) != null)
      return data;
    data = yield fetchScriptData(name);
    setScriptData(name, data);
    return data;
  });
}
function getColumnsScript(key) {
  return __async(this, null, function* () {
    return getScriptData("Columns." + key);
  });
}
function getFormScript(key) {
  return __async(this, null, function* () {
    return yield getScriptData("Form." + key);
  });
}
function getLookupAsync(key) {
  return __async(this, null, function* () {
    return yield getScriptData("Lookup." + key);
  });
}
function getRemoteDataAsync(key) {
  return __async(this, null, function* () {
    return yield getScriptData("RemoteData." + key);
  });
}
function handleScriptDataError(name, status, statusText, shouldThrow = true) {
  var isLookup = name == null ? void 0 : name.startsWith("Lookup.");
  var message;
  if (status == null && statusText == null || status === 404) {
    if (isLookup)
      message = 'No lookup with key "' + name.substring(7) + '" is registered. Please make sure you have a [LookupScript("' + name.substring(7) + '")] attribute in server side code on top of a row / custom lookup and  its key is exactly the same.';
    else
      message = `Can't load dynamic data: ${name}!`;
    notifyError(message);
  } else if (status == 403 && isLookup) {
    message = '<p>Access denied while trying to load the lookup: "<b>' + htmlEncode(name.substring(7)) + '</b>". Please check if current user has required permissions for this lookup.</p> <p><em>Lookups use the ReadPermission of their row by default. You may override that for the lookup like [LookupScript("Some.Lookup", Permission = "?")] to grant all authenticated users to read it (or use "*" for public).</em></p><p><em>Note that this might be a security risk if the lookup contains sensitive data, so it could be better to set a separate permission for lookups, like "MyModule:Lookups".</em></p>';
    notifyError(message, null, {
      timeOut: 1e4,
      escapeHtml: false
    });
  } else {
    message = "An error occurred while trying to load" + (isLookup ? ' the lookup: "' + name.substring(7) : ' dynamic data: "' + name) + '"!. Please check the error message displayed in the console for more info.';
    notifyError(message);
    if (!status)
      console.log("An unknown connection error occurred!");
    else if (status == 500)
      console.log("HTTP 500: Connection refused!");
    else
      console.log("HTTP " + status + ": " + statusText);
  }
  if (shouldThrow)
    throw message;
  return message;
}
function peekScriptData(name) {
  var _a68;
  return (_a68 = getGlobalObject()[scriptDataSymbol]) == null ? void 0 : _a68[name];
}
function reloadLookupAsync(key) {
  return __async(this, null, function* () {
    return yield getScriptData("Lookup." + key, true);
  });
}
function setRegisteredScripts(scripts) {
  var t = (/* @__PURE__ */ new Date()).getTime().toString();
  var scriptDataHash = getGlobalObject()[scriptDataHashSymbol];
  if (!scriptDataHash)
    getGlobalObject()[scriptDataHashSymbol] = scriptDataHash = {};
  for (var k in scripts) {
    scriptDataHash[k] = scripts[k] || t;
  }
}
function setScriptData(name, value) {
  var _a68;
  let scriptDataStore = getGlobalObject()[scriptDataSymbol];
  if (!scriptDataStore)
    getGlobalObject()[scriptDataSymbol] = scriptDataStore = {};
  scriptDataStore[name] = value;
  typeof document !== "undefined" && ((_a68 = document.dispatchEvent) == null ? void 0 : _a68.call(document, new Event("scriptdatachange." + name)));
}

// src/base/servicetypes.ts
var ColumnSelection = /* @__PURE__ */ ((ColumnSelection2) => {
  ColumnSelection2[ColumnSelection2["List"] = 0] = "List";
  ColumnSelection2[ColumnSelection2["KeyOnly"] = 1] = "KeyOnly";
  ColumnSelection2[ColumnSelection2["Details"] = 2] = "Details";
  ColumnSelection2[ColumnSelection2["None"] = 3] = "None";
  ColumnSelection2[ColumnSelection2["IdOnly"] = 4] = "IdOnly";
  ColumnSelection2[ColumnSelection2["Lookup"] = 5] = "Lookup";
  return ColumnSelection2;
})(ColumnSelection || {});
var RetrieveColumnSelection = /* @__PURE__ */ ((RetrieveColumnSelection2) => {
  RetrieveColumnSelection2[RetrieveColumnSelection2["details"] = 0] = "details";
  RetrieveColumnSelection2[RetrieveColumnSelection2["keyOnly"] = 1] = "keyOnly";
  RetrieveColumnSelection2[RetrieveColumnSelection2["list"] = 2] = "list";
  RetrieveColumnSelection2[RetrieveColumnSelection2["none"] = 3] = "none";
  RetrieveColumnSelection2[RetrieveColumnSelection2["idOnly"] = 4] = "idOnly";
  RetrieveColumnSelection2[RetrieveColumnSelection2["lookup"] = 5] = "lookup";
  return RetrieveColumnSelection2;
})(RetrieveColumnSelection || {});

// src/base/tooltip.ts
var _Tooltip = class _Tooltip {
  constructor(el, opt, create = true) {
    var _a68, _b;
    this.el = isArrayLike(el) ? el[0] : el;
    if (create === true && this.el) {
      let instance = _Tooltip.getInstance(this.el);
      if (instance) {
        (opt == null ? void 0 : opt.title) !== void 0 && this.setTitle(opt.title);
      } else {
        opt != null ? opt : opt = {};
        (_a68 = opt.trigger) != null ? _a68 : opt.trigger = "hover focus";
        let $2 = getjQuery();
        if ((_b = $2 == null ? void 0 : $2.fn) == null ? void 0 : _b.tooltip)
          $2(this.el).tooltip(opt);
        else if (typeof bootstrap !== "undefined" && bootstrap.Tooltip)
          new bootstrap.Tooltip(this.el, opt);
        else if ((opt == null ? void 0 : opt.title) !== void 0)
          this.el.setAttribute("title", opt.title);
      }
    }
  }
  dispose() {
    var _a68;
    let instance = _Tooltip.existingInstance(this.el);
    if (!instance)
      return;
    (_a68 = instance[isBS3() ? "destroy" : "dispose"]) == null ? void 0 : _a68.call(instance);
  }
  delayedDispose(delay = 5e3) {
    setTimeout(this.dispose.bind(this), delay);
  }
  delayedHide(delay = 5e3) {
    setTimeout(this.hide.bind(this), delay);
  }
  static existingInstance(el) {
    var _a68, _b, _c;
    let $2 = getjQuery();
    let instance;
    if (typeof bootstrap !== "undefined")
      instance = (_b = (_a68 = bootstrap == null ? void 0 : bootstrap.Tooltip) == null ? void 0 : _a68.getInstance) == null ? void 0 : _b.call(_a68, el);
    if (instance)
      return instance;
    if ((_c = $2 == null ? void 0 : $2.fn) == null ? void 0 : _c.tooltip)
      return $2(el).data()["bs.tooltip"];
    return null;
  }
  static getInstance(el) {
    let instance = _Tooltip.existingInstance(isArrayLike(el) ? el[0] : el);
    if (!instance)
      return null;
    return new _Tooltip(el, null, false);
  }
  static get isAvailable() {
    var _a68, _b;
    return !!(typeof bootstrap !== "undefined" && bootstrap.Tooltip || ((_b = (_a68 = getjQuery()) == null ? void 0 : _a68.fn) == null ? void 0 : _b.tooltip));
  }
  setTitle(value) {
    var _a68, _b, _c, _d;
    if (!this.el)
      return this;
    this.el.setAttribute("title", value);
    let instance = _Tooltip.existingInstance(this.el);
    if (!instance)
      return this;
    this.el.setAttribute(`data-${isBS5Plus() ? "bs-" : ""}original-title`, value != null ? value : "");
    (_a68 = instance == null ? void 0 : instance[isBS3() ? "fixTitle" : "_fixTitle"]) == null ? void 0 : _a68.call(instance);
    var inner = (_c = (_b = instance == null ? void 0 : instance.tip) == null ? void 0 : _b.querySelector) == null ? void 0 : _c.call(_b, ".tooltip-inner");
    inner && (inner.textContent = value != null ? value : "");
    (_d = instance == null ? void 0 : instance.update) == null ? void 0 : _d.call(instance);
    return this;
  }
  toggle(show) {
    var _a68;
    if (!this.el)
      return this;
    let instance = _Tooltip.existingInstance(this.el);
    if (!instance)
      return this;
    (_a68 = instance == null ? void 0 : instance[show ? "show" : "hide"]) == null ? void 0 : _a68.call(instance);
    return this;
  }
  hide() {
    return this.toggle(false);
  }
  show() {
    return this.toggle(true);
  }
};
_Tooltip.defaults = {
  trigger: "click hover"
};
var Tooltip = _Tooltip;

// src/base/uploader.ts
function alwaysTrue() {
  return true;
}
var _Uploader = class _Uploader {
  constructor(opt) {
    this.opt = opt = Object.assign({}, _Uploader.defaults, opt);
    if (this.opt.batchHandler === void 0)
      this.opt.batchHandler = (batch, uploader) => uploader.uploadBatch(batch);
    if (this.opt.errorHandler === void 0)
      this.opt.errorHandler = _Uploader.errorHandler;
    if (opt.input) {
      if (opt.accept)
        opt.input.setAttribute("accept", opt.accept);
      if (opt.multiple)
        opt.input.setAttribute("multiple", "multiple");
      this.watchInput(opt.input);
    }
    if (isArrayLike(opt.dropZone)) {
      for (var i = 0; i < opt.dropZone.length; i++)
        opt.dropZone[i] && this.watchDropZone(opt.dropZone[i]);
    } else if (opt.dropZone) {
      this.watchDropZone(opt.dropZone);
    }
  }
  newBatch(event, isFirst) {
    this.batch = {
      event,
      filePaths: [],
      formData: new FormData(),
      isFirst
    };
  }
  addToBatch(file, filePath) {
    return __async(this, null, function* () {
      this.batch.filePaths.push(filePath);
      this.batch.formData.set(this.opt.name, file, filePath);
      if (!this.isMultiple() || this.opt.batchSize && this.batch.filePaths.length >= this.opt.batchSize) {
        yield this.endBatch(false);
      }
    });
  }
  endBatch(final) {
    return __async(this, null, function* () {
      var _a68, _b, _c, _d, _e, _f;
      if ((_b = (_a68 = this.batch) == null ? void 0 : _a68.filePaths) == null ? void 0 : _b.length) {
        const batch = this.batch;
        yield (_d = (_c = this.opt).batchHandler) == null ? void 0 : _d.call(_c, batch, this);
        this.newBatch(batch.event, false);
      }
      if (final) {
        (_f = (_e = this.opt).allStop) == null ? void 0 : _f.call(_e);
        Fluent.trigger(this.opt.input, "allStop");
      }
    });
  }
  isMultiple() {
    var _a68, _b, _c;
    return !!((_c = this.opt.multiple) != null ? _c : (_b = (_a68 = this.opt) == null ? void 0 : _a68.input) == null ? void 0 : _b.getAttribute("multiple"));
  }
  getTypePredicate() {
    var _a68, _b, _c;
    if (this.opt.ignoreType)
      return alwaysTrue;
    let acceptVal = (_c = this.opt.accept) != null ? _c : (_b = (_a68 = this.opt) == null ? void 0 : _a68.input) == null ? void 0 : _b.getAttribute("accept");
    if (!acceptVal)
      return alwaysTrue;
    const accepts = acceptVal.toLowerCase().split(",").map((accept) => {
      return accept.split("/").map((part) => part.trim());
    }).filter((acceptParts) => acceptParts.length === 2);
    return (type) => {
      const [typeMain, typeSub] = (type != null ? type : "").toLowerCase().split("/").map((s) => s.trim());
      for (const [acceptMain, acceptSub] of accepts) {
        if (typeMain === acceptMain && (acceptSub === "*" || typeSub === acceptSub)) {
          return true;
        }
      }
      return false;
    };
  }
  getMatchingItems(list) {
    let predicate = this.getTypePredicate();
    let results = Array.from(list != null ? list : []).filter((x) => x.kind === "file" && predicate(x.type));
    return this.isMultiple() ? results : [results[0]];
  }
  watchInput(input) {
    input.addEventListener("change", (e) => __async(this, null, function* () {
      var _a68, _b, _c, _d;
      if ((_b = (_a68 = e.target) == null ? void 0 : _a68.files) == null ? void 0 : _b.length) {
        try {
          yield this.arrayApi(e, e.target.files);
        } finally {
          if (this.opt.autoClear)
            e.target.value = null;
        }
      } else {
        (_d = (_c = this.opt).changeCallback) == null ? void 0 : _d.call(_c, e);
      }
    }));
  }
  watchDropZone(node) {
    const stop = (e) => e.preventDefault();
    node.addEventListener("dragover", stop);
    node.addEventListener("dragenter", (e) => {
      node.dragEnterCount = (node.dragEnterCount || 0) + 1;
      if (node.dragEnterCount > 1) {
        return;
      }
      if (e.dataTransfer === null) {
        node.classList.add("drop-invalid");
        return;
      }
      const matchingFiles = this.getMatchingItems(e.dataTransfer.items);
      const validDrop = e.dataTransfer && e.dataTransfer.items.length ? matchingFiles[0] !== void 0 : true;
      node.classList.toggle("drop-valid", !!validDrop);
      node.classList.toggle("drop-invalid", !validDrop);
    });
    node.addEventListener("dragleave", (e) => {
      node.dragEnterCount = Math.max((node.dragEnterCount || 0) - 1, 0);
      if (node.dragEnterCount === 0) {
        node.dragEnterCount = 0;
        node.classList.remove("drop-valid");
        node.classList.remove("drop-invalid");
        return;
      }
      if (e.dataTransfer === null) {
        node.classList.add("drop-invalid");
        return;
      }
    });
    node.addEventListener("drop", (e) => {
      var _a68, _b, _c, _d;
      e.preventDefault();
      if ((_b = (_a68 = e.dataTransfer.items) == null ? void 0 : _a68[0]) == null ? void 0 : _b.webkitGetAsEntry()) {
        this.entriesApi(e, e.dataTransfer.items);
      } else if (e.dataTransfer.files) {
        this.arrayApi(e, e.dataTransfer.files);
      } else {
        (_d = (_c = this.opt).changeCallback) == null ? void 0 : _d.call(_c, e);
      }
    });
    node.addEventListener("paste", (e) => {
      var _a68, _b, _c, _d;
      if ((_b = (_a68 = e.clipboardData.items) == null ? void 0 : _a68[0]) == null ? void 0 : _b.webkitGetAsEntry()) {
        this.entriesApi(e, e.clipboardData.items);
      } else if (e.clipboardData.files) {
        this.arrayApi(e, e.clipboardData.files);
      } else {
        (_d = (_c = this.opt).changeCallback) == null ? void 0 : _d.call(_c, e);
      }
    });
  }
  arrayApi(e, fileList) {
    return __async(this, null, function* () {
      this.newBatch(e, true);
      let predicate = this.getTypePredicate();
      let filteredFiles = Array.from(fileList).filter((x) => predicate(x.type));
      if (!this.isMultiple() && filteredFiles.length > 0)
        filteredFiles = [filteredFiles[0]];
      for (var file of filteredFiles) {
        yield this.addToBatch(file, file.webkitRelativePath || file.name);
      }
      yield this.endBatch(true);
    });
  }
  entriesApi(e, items) {
    return __async(this, null, function* () {
      this.newBatch(e, true);
      let predicate = this.getTypePredicate();
      let multiple = this.isMultiple();
      const skipRest = () => {
        var _a68, _b;
        return !multiple && ((_b = (_a68 = this.batch) == null ? void 0 : _a68.filePaths) == null ? void 0 : _b.length) > 0;
      };
      let readDirectory = (entry, path) => __async(this, null, function* () {
        if (!path)
          path = entry.name;
        yield readEntries(entry, null, null, (entries) => __async(this, null, function* () {
          for (const entry2 of entries) {
            if (skipRest())
              break;
            if (entry2.isFile) {
              yield new Promise((resolve) => {
                entry2.file((file) => __async(this, null, function* () {
                  if (predicate(file.type))
                    yield this.addToBatch(file, `${path}/${file.name}`);
                  resolve(void 0);
                }), resolve.bind(void 0));
              });
            } else {
              yield readDirectory(entry2, `${path}/${entry2.name}`);
            }
          }
        }));
      });
      let readEntries = (entry, reader, oldEntries, cb) => __async(this, null, function* () {
        const dirReader = reader || entry.createReader();
        yield new Promise((resolve) => {
          dirReader.readEntries((entries) => {
            if (skipRest())
              return;
            const newEntries = oldEntries ? oldEntries.concat(entries) : entries;
            if (entries.length) {
              setTimeout(readEntries.bind(null, entry, dirReader, newEntries, cb), 0);
            } else {
              cb(newEntries);
            }
            resolve(void 0);
          }, () => resolve(void 0));
        });
      });
      for (var i = 0; i < items.length; i++) {
        if (skipRest())
          return;
        let entry = items[i].webkitGetAsEntry();
        if (entry) {
          yield new Promise((resolve) => __async(this, null, function* () {
            if (entry.isFile) {
              entry.file((file) => __async(this, null, function* () {
                if (!skipRest() && predicate(file.type))
                  yield this.addToBatch(file, file.name);
                resolve(void 0);
              }), resolve.bind(void 0));
            } else if (entry.isDirectory) {
              yield readDirectory(entry, null);
            }
          }));
        }
      }
      this.endBatch(true);
    });
  }
  uploadBatch(batch, request) {
    return __async(this, null, function* () {
      var _a68, _b, _c, _d, _e, _f;
      if (!batch || !batch.formData)
        return;
      request = Object.assign({}, _Uploader.requestDefaults);
      if (request.url === void 0)
        request.url = resolveUrl("~/File/TemporaryUpload");
      if (batch.isFirst) {
        (_b = (_a68 = this.opt).allStart) == null ? void 0 : _b.call(_a68);
        Fluent.trigger(this.opt.input, "allStart");
      }
      (_d = (_c = this.opt).batchStart) == null ? void 0 : _d.call(_c, { batch });
      Fluent.trigger(this.opt.input, "batchStart", { detail: batch });
      try {
        yield new Promise((resolve, reject) => {
          var _a69, _b2;
          try {
            const xhr = new XMLHttpRequest();
            xhr.open("POST", request.url);
            let json = request.responseType !== "text";
            if (isSameOrigin(request.url)) {
              var token = getCookie("CSRF-TOKEN");
              if (token)
                xhr.setRequestHeader("X-CSRF-TOKEN", token);
            }
            if (request.headers) {
              for (var name of Object.keys(request.headers)) {
                xhr.setRequestHeader(name, request.headers[name]);
              }
            }
            const onerror = (data) => {
              var _a70, _b3;
              data = Object.assign({
                batch,
                request,
                response: json ? tryGetJson(xhr) : xhr.responseText,
                xhr
              }, data);
              try {
                try {
                  (_b3 = (_a70 = this.opt).errorHandler) == null ? void 0 : _b3.call(_a70, data);
                } finally {
                  reject(data);
                }
              } catch (exception) {
                console.log(exception);
              }
            };
            xhr.onload = (event) => {
              var _a70, _b3;
              try {
                if (xhr.status === 200) {
                  var data = {
                    batch,
                    event,
                    request,
                    response: json ? tryGetJson(xhr) : xhr.responseText,
                    xhr
                  };
                  (_b3 = (_a70 = this.opt).batchSuccess) == null ? void 0 : _b3.call(_a70, data);
                  Fluent.trigger(this.opt.input, "batchSuccess", { detail: data });
                  resolve(data);
                } else {
                  onerror({ event });
                }
              } catch (exception) {
                onerror({ event, exception });
              }
            };
            xhr.onerror = (event) => onerror({ event });
            xhr.onprogress = (event) => {
              var _a70, _b3;
              try {
                if (event.lengthComputable) {
                  const data = {
                    batch,
                    loaded: event.loaded,
                    total: event.total
                  };
                  (_b3 = (_a70 = this.opt).batchProgress) == null ? void 0 : _b3.call(_a70, data);
                  Fluent.trigger(this.opt.input, "batchProgress", { detail: data });
                }
              } catch (e) {
              }
            };
            xhr.send(batch.formData);
          } catch (exception) {
            const data = {
              exception,
              batch,
              request
            };
            try {
              (_b2 = (_a69 = this.opt).errorHandler) == null ? void 0 : _b2.call(_a69, data);
            } finally {
              reject(data);
            }
          }
        });
      } finally {
        (_f = (_e = this.opt).batchStop) == null ? void 0 : _f.call(_e, { batch });
        Fluent.trigger(this.opt.input, "batchStop", { detail: batch });
      }
    });
  }
};
_Uploader.defaults = {
  autoClear: true,
  batchSize: 1,
  name: "files[]"
};
_Uploader.requestDefaults = {
  responseType: "json"
};
_Uploader.errorHandler = (data) => {
  var _a68, _b, _c, _d, _e;
  if (data == null ? void 0 : data.exception) {
    console.log(data.exception);
    notifyError((_c = (_b = (_a68 = data.exception).toString) == null ? void 0 : _b.call(_a68)) != null ? _c : "Exception occured!");
    return;
  }
  if ((_e = (_d = data == null ? void 0 : data.response) == null ? void 0 : _d.Error) == null ? void 0 : _e.Message) {
    notifyError(data.response.Error.Message);
    return;
  }
  let xhr = data == null ? void 0 : data.xhr;
  if (!xhr) {
    notifyError("An error occurred during file upload.");
    return;
  }
  var html = xhr.responseText;
  if (html) {
    iframeDialog({ html });
    return;
  }
  if (!xhr.status) {
    if (xhr.statusText != "abort")
      notifyError("An unknown connection error occurred! Check browser console for details.");
    return;
  }
  if (xhr.status == 500) {
    notifyError("HTTP 500: Connection refused! Check browser console for details.");
    return;
  }
  notifyError("HTTP " + xhr.status + " error! Check browser console for details.");
};
var Uploader = _Uploader;
function tryGetJson(xhr) {
  try {
    return JSON.parse(xhr.responseText);
  } catch (e) {
    return null;
  }
}

// src/base/validator.ts
function messageKey(method) {
  return "msg" + method.charAt(0).toUpperCase() + method.substring(1).toLowerCase();
}
var validatorMap = /* @__PURE__ */ new WeakMap();
function validatorEventDelegate(event) {
  let isContentEditable = Validator.isContentEditable(this);
  if (!this.form && isContentEditable) {
    this.form = this.closest("form");
    this.name = this.getAttribute("name");
  }
  const validator = validatorMap.get(this.form);
  if (!validator)
    return;
  const eventType = "on" + event.type.replace(/^validate/, "");
  const settings = validator.settings;
  if (event.type == "focusin" && Validator.isValidatableElement(this))
    validator.lastActive = this;
  if (typeof settings[eventType] === "function" && (!settings.ignore || !this.matches(settings.ignore))) {
    settings[eventType](this, event, validator);
  }
}
var customValidateRules = /* @__PURE__ */ new WeakMap();
var _Validator = class _Validator {
  constructor(form, options) {
    this.dependTypes = {
      "boolean": function(param) {
        return param;
      },
      "string": function(param, element) {
        return !!element.form.querySelector(param);
      },
      "function": function(param, element) {
        return param(element);
      }
    };
    if (validatorMap.get(form))
      throw "Form already has a Validator instance!";
    validatorMap.set(form, this);
    form.setAttribute("novalidate", "novalidate");
    this.settings = Object.assign(true, {}, _Validator.defaults, options);
    this.currentForm = form;
    if (this.settings.onsubmit) {
      var selector = "[type=submit],button:not([type])";
      Fluent.on(this.currentForm, "click.validator", selector, (event) => {
        var _a68, _b, _c, _d, _e, _f;
        var button = ((_b = (_a68 = event.currentTarget) == null ? void 0 : _a68.matches) == null ? void 0 : _b.call(_a68, selector)) ? event.currentTarget : (_e = (_d = (_c = event.target).closest) == null ? void 0 : _d.call(_c, selector)) != null ? _e : event.target;
        ;
        this.submitButton = button;
        if ((_f = button.classList) == null ? void 0 : _f.contains("cancel")) {
          this.cancelSubmit = true;
        }
        if (button.getAttribute("formnovalidate") != null) {
          this.cancelSubmit = true;
        }
      });
      Fluent.on(this.currentForm, "submit.validator", (event) => {
        if (this.settings.debug) {
          event.preventDefault();
        }
        const stopSubmit = () => {
          event.preventDefault();
          event.stopPropagation();
          return false;
        };
        const handle = () => {
          var hidden, result;
          if (this.submitButton && (this.settings.submitHandler || this.formSubmitted)) {
            hidden = Fluent("input").attr("type", "hidden").attr("name", this.submitButton.name).val(Fluent(this.submitButton).val()).appendTo(this.currentForm);
          }
          if (this.settings.submitHandler && !this.settings.debug) {
            result = this.settings.submitHandler(this.currentForm, event, this);
            if (hidden) {
              hidden.remove();
            }
            if (result !== void 0) {
              if (result === false)
                return stopSubmit();
              return result;
            }
            return stopSubmit();
          }
          return true;
        };
        if (this.cancelSubmit) {
          this.cancelSubmit = false;
          return handle();
        }
        if (this.form()) {
          if (this.pendingRequest) {
            this.formSubmitted = true;
            return stopSubmit();
          }
          return handle();
        } else {
          this.focusInvalid();
          return stopSubmit();
        }
      });
    }
    this.init();
  }
  static optional(element) {
    var val = _Validator.elementValue(element);
    return !_Validator.methods.required(val, element) && "dependency-mismatch";
  }
  static getInstance(element) {
    var _a68;
    element = isArrayLike(element) ? element[0] : element;
    if (!element)
      return null;
    if (element instanceof HTMLFormElement)
      return validatorMap.get(element);
    else if (element.form instanceof HTMLFormElement)
      return validatorMap.get(element.form);
    let form = (_a68 = element.closest) == null ? void 0 : _a68.call(element, "form");
    if (form instanceof HTMLFormElement)
      return validatorMap.get(form);
    return null;
  }
  init() {
    this.submitted = {};
    this.pendingRequest = 0;
    this.pending = {};
    this.invalid = {};
    this.reset();
    ["focusin.validator", "focusout.validator", "keyup.validator"].forEach((type) => {
      Fluent.on(this.currentForm, type, "[type='text'], [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox'], [contenteditable], [type='button']", validatorEventDelegate);
    });
    Fluent.on(this.currentForm, "click.validator", "select, option, [type='radio'], [type='checkbox']", validatorEventDelegate);
    if (this.settings.invalidHandler) {
      Fluent.on(this.currentForm, "invalid-form.validator", (e) => this.settings.invalidHandler(e, this));
    }
  }
  /**
   * Checks if `element` is validatable (`input`, `select`, `textarea`).
   * @param element The element to check.
   * @returns `true` if validatable, otherwise `false`.
   */
  static isValidatableElement(element) {
    return element instanceof HTMLInputElement || element instanceof HTMLSelectElement || element instanceof HTMLTextAreaElement;
  }
  static isCheckOrRadio(element) {
    return element instanceof HTMLInputElement && /radio|checkbox/i.test(element.type);
  }
  static getLength(value, element) {
    var _a68;
    if (element instanceof HTMLSelectElement)
      return element.querySelectorAll("option:checked").length;
    if (element instanceof HTMLInputElement && _Validator.isCheckOrRadio(element)) {
      if (!element.name)
        return element.checked ? 1 : 0;
      return Array.from((_a68 = element.form) == null ? void 0 : _a68.querySelectorAll(`[name=${element.name}]`)).filter((x) => x.checked).length || 0;
    }
    return typeof value === "number" ? ("" + value).length : value.length;
  }
  static isContentEditable(element) {
    let val = element.getAttribute("contenteditable");
    return val != null && val !== "false";
  }
  static elementValue(element) {
    var _a68;
    if (element instanceof Element && _Validator.isContentEditable(element)) {
      return element.textContent;
    }
    if (element instanceof HTMLInputElement) {
      if (element.type === "radio" || element.type === "checkbox") {
        if (element.name && element.form) {
          var values = Array.from(element.form.querySelectorAll(`input[name=${CSS.escape(element.name)}]`)).map((el) => el.checked ? null : el.value);
          if (values.length > 1)
            return values.filter((x) => x != null);
          return values[0];
        }
        return element.checked ? element.value : null;
      }
      if (element.type === "number") {
        if (typeof element.validity !== "undefined")
          return element.validity.badInput ? NaN : element.valueAsNumber;
        else
          return element.valueAsNumber;
      }
      var val;
      if (element.type === "file") {
        val = (_a68 = element.value) != null ? _a68 : "";
        if (val.substring(0, 12) === "C:\\fakepath\\") {
          return val.substring(12);
        }
        var idx = val.lastIndexOf("/");
        if (idx >= 0) {
          return val.substr(idx + 1);
        }
        idx = val.lastIndexOf("\\");
        if (idx >= 0) {
          return val.substring(idx + 1);
        }
        return val;
      }
      val = element.value;
    } else if (element instanceof HTMLTextAreaElement) {
      val = element.value;
    } else if (element instanceof HTMLSelectElement) {
      val = element.value;
    }
    if (typeof val === "string")
      return val.replace(/\r/g, "");
    return val;
  }
  static valid(element) {
    element = element instanceof HTMLFormElement ? element : isArrayLike(element) ? element[0] : element;
    if (!element)
      return false;
    let validator = _Validator.getInstance(element);
    if (!validator)
      return false;
    if (element instanceof HTMLFormElement)
      return validator.form();
    return validator.element(element);
  }
  static rules(element, command, argument) {
    let isContentEditable = _Validator.isContentEditable(element);
    if (element == null) {
      return;
    }
    if (!element.form && isContentEditable) {
      element.form = element.closest("form");
      element.name = element.getAttribute("name");
    }
    if (element.form == null) {
      return;
    }
    if (command) {
      var validator = _Validator.getInstance(element.form);
      if (validator) {
        let settings = validator.settings;
        let staticRules = settings.rules;
        let existingRules = _Validator.staticRules(element);
        switch (command) {
          case "add":
            Object.assign(existingRules, argument);
            delete existingRules.messages;
            staticRules[element.name] = existingRules;
            if (argument.messages) {
              settings.messages[element.name] = Object.assign(settings.messages[element.name], argument.messages);
            }
            break;
          case "remove":
            if (!argument) {
              delete staticRules[element.name];
              return existingRules;
            }
            var filtered = {};
            argument.split(/\s/).forEach((method) => {
              filtered[method] = existingRules[method];
              delete existingRules[method];
            });
            return filtered;
        }
      }
    }
    var data = _Validator.normalizeRules(
      Object.assign(
        {},
        _Validator.classRules(element),
        _Validator.attributeRules(element),
        _Validator.dataRules(element),
        _Validator.staticRules(element)
      ),
      element
    );
    if (data.required) {
      var param = data.required;
      delete data.required;
      data = Object.assign({ required: param }, data);
    }
    if (data.remote) {
      param = data.remote;
      delete data.remote;
      data = Object.assign(data, { remote: param });
    }
    return data;
  }
  form() {
    this.checkForm();
    Object.assign(this.submitted, this.errorMap);
    this.invalid = Object.assign({}, this.errorMap);
    if (!this.valid()) {
      Fluent.trigger(this.currentForm, "invalid-form", { validator: this });
    }
    this.showErrors();
    return this.valid();
  }
  checkForm() {
    this.prepareForm();
    for (var i = 0, elements = this.currentElements = this.elements(); elements[i]; i++) {
      this.check(elements[i]);
    }
    return this.valid();
  }
  element(element) {
    var checkElement = this.validationTargetFor(element), result = true, rs;
    if (checkElement === void 0) {
      delete this.invalid[element.name];
    } else {
      this.prepareElement(checkElement);
      this.currentElements = [checkElement];
      rs = this.check(checkElement) !== false;
      result = result && rs;
      if (rs) {
        this.invalid[checkElement.name] = false;
      } else {
        this.invalid[checkElement.name] = true;
      }
      this.showErrors();
      if (rs)
        element.setAttribute("aria-invalid", "true");
      else
        element.removeAttribute("aria-invalid");
    }
    return result;
  }
  showErrors(errors) {
    if (errors) {
      Object.assign(this.errorMap, errors);
      this.errorList = Object.keys(this.errorMap).map((name) => ({
        message: this.errorMap[name],
        element: this.findByName(name)[0]
      }));
      this.successList = this.successList.filter(function(element) {
        return !(element.name in errors);
      });
    }
    if (this.settings.showErrors) {
      this.settings.showErrors(this.errorMap, this.errorList, this);
    } else {
      this.defaultShowErrors();
    }
  }
  resetForm() {
    this.invalid = {};
    this.submitted = {};
    this.prepareForm();
    this.hideErrors();
    var elements = this.elements();
    elements.forEach((x) => {
      delete x.previousValue;
      x.removeAttribute("aria-invalid");
    });
    this.resetElements(elements);
  }
  resetElements(elements) {
    var i;
    if (this.settings.unhighlight) {
      for (i = 0; elements[i]; i++) {
        this.settings.unhighlight(elements[i], this.settings.errorClass, "", this);
        this.findByName(elements[i].name).forEach((x) => x.classList.remove(this.settings.validClass));
      }
    } else {
      elements.forEach((x) => {
        x.classList.remove(this.settings.errorClass);
        x.classList.remove(this.settings.validClass);
      });
    }
  }
  numberOfInvalids() {
    return _Validator.objectLength(this.invalid);
  }
  static objectLength(obj) {
    var count2 = 0, i;
    for (i in obj) {
      if (obj[i] !== void 0 && obj[i] !== null && obj[i] !== false) {
        count2++;
      }
    }
    return count2;
  }
  hideErrors() {
    this.hideThese(this.toHide);
  }
  hideThese(errors) {
    errors.forEach((x) => {
      x.textContent = "";
      x.style.display = "none";
    });
  }
  valid() {
    return this.size() === 0;
  }
  size() {
    return this.errorList.length;
  }
  focusInvalid() {
    var _a68;
    if (this.settings.abortHandler)
      this.settings.abortHandler(this);
    if (this.settings.focusInvalid) {
      try {
        var lastActive = this.findLastActive() || this.errorList.length && this.errorList[0].element;
        if (lastActive && Fluent.isVisibleLike(lastActive)) {
          (_a68 = lastActive.focus) == null ? void 0 : _a68.call(lastActive);
          Fluent.trigger(lastActive, "focusin");
        }
      } catch (e) {
      }
    }
  }
  findLastActive() {
    var lastActive = this.lastActive;
    return lastActive && this.errorList.filter((n) => n.element.name === lastActive.name).length === 1 && lastActive;
  }
  elements() {
    var rulesCache = {};
    return Array.from(this.currentForm.querySelectorAll("input, select, textarea, [contenteditable]")).filter((x) => {
      var _a68;
      if ((x instanceof HTMLButtonElement || x instanceof HTMLInputElement) && (x.type === "submit" || x.type === "reset" || x.type === "image"))
        return false;
      if (x.disabled || ((_a68 = x.closest("fieldset")) == null ? void 0 : _a68.disabled))
        return false;
      if (x.matches(this.settings.ignore))
        return false;
      var name = x.name || x.getAttribute("name");
      var isContentEditable = _Validator.isContentEditable(x);
      if (!name && this.settings.debug && window.console) {
        console.error("%o has no name assigned", this);
      }
      if (isContentEditable) {
        x.form = x.closest("form");
        x.name = name;
      }
      if (x.form !== this.currentForm) {
        return false;
      }
      if (name in rulesCache || !_Validator.objectLength(_Validator.rules(x))) {
        return false;
      }
      rulesCache[name] = true;
      return true;
    });
  }
  errors() {
    var errorClass = this.settings.errorClass.split(" ").join(".");
    return Array.from(this.currentForm.querySelectorAll(this.settings.errorElement + "." + errorClass));
  }
  resetInternals() {
    this.successList = [];
    this.errorList = [];
    this.errorMap = {};
    this.toShow = [];
    this.toHide = [];
  }
  reset() {
    this.resetInternals();
    this.currentElements = [];
  }
  resetAll() {
    this.resetForm();
  }
  prepareForm() {
    this.reset();
    this.toHide = this.errors();
  }
  prepareElement(element) {
    this.reset();
    this.toHide = this.errorsFor(element);
  }
  check(element) {
    element = this.validationTargetFor(element);
    var rules = _Validator.rules(element), rulesCount = Object.keys(rules).length, dependencyMismatch = false, val = _Validator.elementValue(element), result, method, rule, normalizer;
    this.abortRequest(element);
    if (typeof rules.normalizer === "function") {
      normalizer = rules.normalizer;
    } else if (typeof this.settings.normalizer === "function") {
      normalizer = this.settings.normalizer;
    }
    if (normalizer) {
      val = normalizer(val, element);
      delete rules.normalizer;
    }
    for (method in rules) {
      rule = { method, parameters: rules[method] };
      try {
        result = _Validator.methods[method].call(this, val, element, rule.parameters);
        if (result === "dependency-mismatch" && rulesCount === 1) {
          dependencyMismatch = true;
          continue;
        }
        dependencyMismatch = false;
        if (result === "pending") {
          var errorsFor = this.errorsFor(element);
          this.toHide = this.toHide.filter((x) => !errorsFor.includes(x));
          return;
        }
        if (typeof result === "string" && result !== "dependency-mismatch" && result !== "pending") {
          element.dataset[messageKey(method)] = result;
          result = false;
        }
        if (!result) {
          this.formatAndAdd(element, rule);
          return false;
        }
      } catch (e) {
        if (this.settings.debug && window.console) {
          console.log("Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.", e);
        }
        if (e instanceof TypeError) {
          e.message += ".  Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.";
        }
        throw e;
      }
    }
    if (dependencyMismatch) {
      return;
    }
    if (_Validator.objectLength(rules)) {
      this.successList.push(element);
    }
    return true;
  }
  // Return the custom message for the given element and validation method
  // specified in the element's HTML5 data attribute
  // return the generic message if present and no method specific message is present
  customDataMessage(element, method) {
    return element.dataset[messageKey(method)] || element.dataset.msg;
  }
  // Return the custom message for the given element name and validation method
  customMessage(name, method) {
    var m = this.settings.messages[name];
    return m && (typeof m == "string" ? m : m[method]);
  }
  // Return the first defined argument, allowing empty strings
  findDefined(...args) {
    for (var i = 0; i < arguments.length; i++) {
      if (arguments[i] !== void 0) {
        return arguments[i];
      }
    }
    return void 0;
  }
  defaultMessage(element, rule) {
    var message = this.findDefined(
      this.customMessage(element.name, rule.method),
      this.customDataMessage(element, rule.method),
      void 0,
      _Validator.messages[rule.method],
      "Warning: No message defined for " + element.name
    ), theregex = /\$?\{(\d+)\}/g;
    if (typeof message === "function")
      return message.call(this, rule.parameters, element);
    message = localText(message, message);
    if (theregex.test(message))
      return stringFormat(message, rule.parameters);
    return message;
  }
  formatAndAdd(element, rule) {
    var message = this.defaultMessage(element, rule);
    this.errorList.push({
      message,
      element,
      method: rule.method
    });
    this.errorMap[element.name] = message;
    this.submitted[element.name] = message;
  }
  defaultShowErrors() {
    var i, elements, error;
    for (i = 0; this.errorList[i]; i++) {
      error = this.errorList[i];
      if (this.settings.highlight) {
        this.settings.highlight.call(this, error.element, this.settings.errorClass, this.settings.validClass);
      }
      this.showLabel(error.element, error.message);
    }
    if (this.errorList.length) {
      this.toShow = this.toShow;
    }
    if (this.settings.success) {
      for (i = 0; this.successList[i]; i++) {
        this.showLabel(this.successList[i]);
      }
    }
    if (this.settings.unhighlight) {
      for (i = 0, elements = this.validElements(); elements[i]; i++) {
        this.settings.unhighlight.call(this, elements[i], this.settings.errorClass, this.settings.validClass);
      }
    }
    this.toHide = this.toHide.filter((x) => !this.toShow.includes(x));
    this.hideErrors();
    this.toShow.forEach((x) => Fluent.toggle(x, true));
  }
  validElements() {
    let invalids = this.invalidElements();
    return this.currentElements.filter((x) => !invalids.includes(x));
  }
  invalidElements() {
    return this.errorList.map((x) => x.element);
  }
  showLabel(element, message) {
    var errors = this.errorsFor(element), elementID = this.idOrName(element), describedBy = element.getAttribute("aria-describedby");
    if (errors.length) {
      errors.forEach((x) => {
        x.classList.remove(this.settings.validClass);
        x.classList.add(this.settings.errorClass);
      });
      errors.forEach((x) => {
        x.textContent = message || "";
      });
    } else {
      var error = Fluent(this.settings.errorElement).class(this.settings.errorClass).attr("id", elementID + "-error").getNode();
      error.textContent = message || "";
      var place = error;
      if (this.settings.errorPlacement) {
        this.settings.errorPlacement(place, element, this);
      } else {
        Fluent(place).insertAfter(element);
      }
      if (error.nodeName == "LABEL") {
        error.setAttribute("for", elementID);
      } else if (!error.closest("label[for='" + CSS.escape(elementID) + "']")) {
        var errorID = error.getAttribute("id");
        if (!describedBy) {
          describedBy = errorID;
        } else if (!describedBy.match(new RegExp("\\b" + CSS.escape(errorID) + "\\b"))) {
          describedBy += " " + errorID;
        }
        element.setAttribute("aria-describedby", describedBy);
      }
      errors = [error];
    }
    if (!message && this.settings.success) {
      errors.forEach((x) => {
        x.textContent = "";
      });
      if (typeof this.settings.success === "string") {
        errors.forEach((x) => {
          x.classList.add(this.settings.success);
        });
      } else {
        this.settings.success(error, element);
      }
    }
    errors.forEach((x) => {
      this.toShow.push(x);
    });
    this.errorsFor(element).forEach((element2) => {
      var _a68, _b;
      if ((_b = (_a68 = element2 == null ? void 0 : element2.parentNode) == null ? void 0 : _a68.classList) == null ? void 0 : _b.contains("vx")) {
        element2.setAttribute("title", element2.textContent);
        if (message && element2.classList.contains("error"))
          element2.classList.remove("checked");
      }
    });
  }
  errorsFor(element) {
    var name = CSS.escape(this.idOrName(element)), describer = element.getAttribute("aria-describedby"), selector = "label[for='" + name + "'], label[for='" + name + "'] *";
    if (describer) {
      selector = selector + ", #" + CSS.escape(describer).replace(/\s+/g, ", #");
    }
    return this.errors().filter((x) => x.matches(selector));
  }
  idOrName(element) {
    return _Validator.isCheckOrRadio(element) ? element.name : element.id || element.name;
  }
  validationTargetFor(element) {
    var elements = [element];
    if (_Validator.isCheckOrRadio(element)) {
      elements = this.findByName(element.name);
    }
    return elements.filter((x) => !x.matches(this.settings.ignore))[0];
  }
  findByName(name) {
    return Array.from(this.currentForm.querySelectorAll("[name='" + CSS.escape(name) + "']"));
  }
  depend(param, element) {
    return this.dependTypes[typeof param] ? this.dependTypes[typeof param](param, element) : true;
  }
  startRequest(element) {
    if (!this.pending[element.name]) {
      this.pendingRequest++;
      element.classList.add(this.settings.pendingClass);
      this.pending[element.name] = new AbortController();
    }
  }
  stopRequest(element, valid) {
    let formSubmitted = this.formSubmitted;
    this.pendingRequest--;
    if (this.pendingRequest < 0) {
      this.pendingRequest = 0;
    }
    delete this.pending[element.name];
    element.classList.remove(this.settings.pendingClass);
    if (valid && this.pendingRequest === 0 && this.formSubmitted && this.form() && this.pendingRequest === 0) {
      Fluent.trigger(this.currentForm, "submit");
      this.formSubmitted = false;
    } else if (!valid && this.pendingRequest === 0 && this.formSubmitted) {
      Fluent.trigger(this.currentForm, "invalid-form", { validator: this });
      this.formSubmitted = false;
    }
    if (!valid && this.pendingRequest == 0 && formSubmitted && this.settings.abortHandler) {
      this.settings.abortHandler(this);
    }
  }
  abortRequest(element) {
    if (this.pending[element.name]) {
      this.pending[element.name].abort();
      this.pendingRequest--;
      if (this.pendingRequest < 0) {
        this.pendingRequest = 0;
      }
      delete this.pending[element.name];
      element.classList.remove(this.settings.pendingClass);
    }
  }
  previousValue(element, method) {
    method = typeof method === "string" && method || "remote";
    return element.previousValue || (element.previousValue = {
      old: null,
      valid: true,
      message: this.defaultMessage(element, { method })
    });
  }
  // Cleans up all forms and elements, removes validator-specific events
  destroy() {
    this.resetForm();
    Fluent.off(this.currentForm, ".validator");
    validatorMap.delete(this.currentForm);
    delete this.currentForm;
  }
  static addClassRules(className, rules) {
    if (typeof className === "string") {
      this.classRuleSettings[className] = rules;
    } else {
      Object.assign(this.classRuleSettings, className);
    }
  }
  static classRules(element) {
    let rules = {};
    let classes = element.getAttribute("class");
    if (classes) {
      classes.split(" ").forEach((klass) => {
        if (klass in _Validator.classRuleSettings) {
          Object.assign(rules, _Validator.classRuleSettings[klass]);
        }
      });
    }
    return rules;
  }
  static normalizeAttributeRule(rules, type, method, value) {
    if (/min|max|step/.test(method) && (type === null || /number|range|text/.test(type))) {
      value = Number(value);
      if (isNaN(value)) {
        value = void 0;
      }
    }
    if (value || value === 0) {
      rules[method] = value;
    } else if (type === method && type !== "range") {
      rules[type === "date" ? "dateISO" : method] = true;
    }
  }
  static attributeRules(element) {
    var rules = {};
    var type = element.getAttribute("type");
    for (var method in _Validator.methods) {
      if (method === "required") {
        var value = element.getAttribute(method);
        if (value === "") {
          value = true;
        }
        value = !!value;
      } else {
        value = element.getAttribute(method);
      }
      if (value == null)
        continue;
      _Validator.normalizeAttributeRule(rules, type, method, value);
    }
    if (rules.maxlength && /-1|2147483647|524288/.test(rules.maxlength)) {
      delete rules.maxlength;
    }
    return rules;
  }
  static dataRules(element) {
    var rules = {}, type = element.getAttribute("type"), method, value;
    for (method in _Validator.methods) {
      value = element.dataset["rule" + method.charAt(0).toUpperCase() + method.substring(1).toLowerCase()];
      if (value === "") {
        value = true;
      }
      this.normalizeAttributeRule(rules, type, method, value);
    }
    return rules;
  }
  static staticRules(element) {
    var rules = {};
    var validator = _Validator.getInstance(element.form);
    if (validator.settings.rules) {
      rules = validator.settings.rules[element.name] || {};
    }
    return rules;
  }
  static normalizeRules(rules, element) {
    Object.keys(rules).forEach((prop) => {
      let val = rules[prop];
      if (val === false) {
        delete rules[prop];
        return;
      }
      if (val.param || val.depends) {
        var keepRule = true;
        switch (typeof val.depends) {
          case "string":
            keepRule = !!element.form.querySelector(val.depends);
            break;
          case "function":
            keepRule = val.depends.call(element, element);
            break;
        }
        if (keepRule) {
          rules[prop] = val.param !== void 0 ? val.param : true;
        } else {
          var validator = _Validator.getInstance(element.form);
          if (validator)
            validator.resetElements([element]);
          delete rules[prop];
        }
      }
    });
    Object.keys(rules).forEach((rule) => {
      let parameter = rules[rule];
      rules[rule] = typeof parameter === "function" && rule !== "normalizer" ? parameter(element) : parameter;
    });
    ["minlength", "maxlength"].forEach((x) => {
      if (rules[x]) {
        rules[x] = Number(rules[x]);
      }
    });
    ["rangelength", "range"].forEach((x) => {
      var parts;
      if (rules[x]) {
        if (Array.isArray(rules[x])) {
          rules[x] = [Number(rules[x][0]), Number(rules[x][1])];
        } else if (typeof rules[x] === "string") {
          parts = rules[x].replace(/[\[\]]/g, "").split(/[\s,]+/);
          rules[x] = [Number(parts[0]), Number(parts[1])];
        }
      }
    });
    if (_Validator.autoCreateRanges) {
      if (rules.min != null && rules.max != null) {
        rules.range = [rules.min, rules.max];
        delete rules.min;
        delete rules.max;
      }
      if (rules.minlength != null && rules.maxlength != null) {
        rules.rangelength = [rules.minlength, rules.maxlength];
        delete rules.minlength;
        delete rules.maxlength;
      }
    }
    return rules;
  }
  static addMethod(name, method, message) {
    _Validator.methods[name] = method;
    _Validator.messages[name] = message !== void 0 ? message : _Validator.messages[name];
    if (method.length < 3) {
      _Validator.addClassRules(name, { [name]: true });
    }
  }
  static getHighlightTarget(el) {
    var hl = el.dataset.vxHighlight;
    if (hl)
      return document.getElementById(hl);
    else if (el.classList.contains("select2-offscreen") && el.id)
      return document.getElementById("s2id_" + el.id);
  }
};
_Validator.autoCreateRanges = false;
_Validator.defaults = {
  messages: {},
  rules: {},
  errorClass: "error",
  pendingClass: "pending",
  validClass: "valid",
  errorElement: "label",
  focusInvalid: true,
  onsubmit: true,
  ignore: '[style*="display:none"], [style*="display: none"] *, .hidden *, input[type=hidden], .no-validate',
  normalizer: function(value) {
    return typeof value === "string" ? value.trim() : value;
  },
  onfocusin: function(element, event, validator) {
    validator.lastActive = element;
  },
  onfocusout: function(element, event, validator) {
    if (!_Validator.isCheckOrRadio(element) && (element.name in validator.submitted || !_Validator.optional(element))) {
      validator.element(element);
    }
  },
  onkeyup: function(element, event, validator) {
    var excludedKeys = [
      "Shift",
      "Control",
      "Alt",
      "CapsLock",
      "End",
      "Home",
      "ArrowLeft",
      "ArrowUp",
      "ArrowRight",
      "ArrowDown",
      "Insert",
      "NumLock",
      "AltGr"
    ];
    if (event.key === "Tab" && _Validator.elementValue(element) === "" || excludedKeys.includes(event.key)) {
      return;
    } else if (element.name in validator.submitted || element.name in validator.invalid) {
      validator.element(element);
    }
  },
  onclick: function(element, event, validator) {
    if (element.name in validator.submitted) {
      validator.element(element);
    } else if (element.parentNode.name in validator.submitted) {
      validator.element(element.parentNode);
    }
  },
  highlight: function(element, errorClass, validClass) {
    if (element.type === "radio") {
      this.findByName(element.name).forEach((x) => {
        x.classList.add(errorClass);
        x.classList.remove(validClass);
      });
    } else {
      if (errorClass != null && errorClass.length)
        element.classList.add(errorClass);
      if (validClass != null && validClass.length)
        element.classList.remove(validClass);
      var hl = _Validator.getHighlightTarget(element);
      if (hl && hl.classList) {
        if (errorClass != null && errorClass.length)
          hl.classList.add(errorClass);
        if (validClass != null && validClass.length)
          hl.classList.remove(validClass);
      }
    }
  },
  unhighlight: function(element, errorClass, validClass) {
    if (element.type === "radio") {
      this.findByName(element.name).forEach((x) => {
        x.classList.remove(errorClass);
        x.classList.add(validClass);
      });
    } else {
      if (errorClass != null && errorClass.length)
        element.classList.remove(errorClass);
      if (validClass != null && validClass.length)
        element.classList.add(validClass);
      var hl = _Validator.getHighlightTarget(element);
      if (hl && hl.classList) {
        if (errorClass != null && errorClass.length)
          hl.classList.remove(errorClass);
        if (validClass != null && validClass.length)
          hl.classList.add(validClass);
      }
    }
  }
};
_Validator.messages = {
  required: "Validation.Required",
  remote: "Please fix this field.",
  email: "Validation.Email",
  dateQ: "Validation.DateInvalid",
  decimalQ: "Validation.Decimal",
  dateISO: "Please enter a valid date (ISO).",
  integerQ: "Validation.Integer",
  number: "Please enter a valid number.",
  digits: "Validation.Digits",
  equalTo: "Please enter the same value again.",
  maxlength: "Validation.MaxLength",
  minlength: "Validation.MinLength",
  rangelength: "Please enter a value between {0} and {1} characters long.",
  range: "Validation.Range",
  max: "Please enter a value less than or equal to {0}.",
  min: "Please enter a value greater than or equal to {0}.",
  step: "Please enter a multiple of {0}.",
  url: "Validation.Url",
  xss: "Validation.Xss"
};
_Validator.methods = {
  required: function(value, element) {
    if (element instanceof HTMLSelectElement) {
      var val = _Validator.elementValue(element);
      return val && val.length > 0;
    }
    if (_Validator.isCheckOrRadio(element)) {
      return _Validator.getLength(value, element) > 0;
    }
    return value != null && (typeof value === "number" || value.length > 0);
  },
  customValidate: function(value, element) {
    let result = _Validator.optional(element);
    if (!element || !!result)
      return result;
    let rules = customValidateRules.get(element);
    if (!rules)
      return true;
    for (let k in rules) {
      let handlers = rules[k];
      for (let handler of handlers) {
        if (typeof handler === "function") {
          let message = handler(element);
          if (message != null) {
            return message;
          }
        }
      }
    }
    return true;
  },
  dateQ: function(value, element) {
    var o = _Validator.optional(element);
    if (o)
      return o;
    var d = parseDate(value);
    if (!d || isNaN(d.valueOf()))
      return false;
    var z = new Date(d);
    z.setHours(0, 0, 0, 0);
    return z.getTime() === d.getTime();
  },
  dateTimeQ: function(value, element) {
    var o = _Validator.optional(element);
    if (o)
      return o;
    var d = parseDate(value);
    if (!d || isNaN(d.valueOf()))
      return false;
    return true;
  },
  /*
      hourAndMin: function (value: string, element: any) {
          return Validator.optional(element) || !isNaN(parseHourAndMin(value));
      }
  
      dayHourAndMin: function (value: string, element: any) {
          return Validator.optional(element) || !isNaN(parseDayHourAndMin(value));
      });
      */
  decimalQ: function(value, element) {
    return _Validator.optional(element) || !isNaN(parseDecimal(value));
  },
  integerQ: function(value, element) {
    return _Validator.optional(element) || !isNaN(parseInteger(value));
  },
  /**
   * Validates whether the input value is an email in accordance to RFC822 specification, with a top level domain.
   */
  email: (value) => {
    if (!value || typeof value !== "string") {
      return true;
    }
    if (!Config.emailAllowOnlyAscii) {
      return new RegExp("^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$", "i").test(value);
    }
    let r = /^([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x22([^\x0d\x22\x5c\x80-\xff]|\x5c[\x00-\x7f])*\x22)(\x2e([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x22([^\x0d\x22\x5c\x80-\xff]|\x5c[\x00-\x7f])*\x22))*\x40([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x5b([^\x0d\x5b-\x5d\x80-\xff]|\x5c[\x00-\x7f])*\x5d)(\x2e([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x5b([^\x0d\x5b-\x5d\x80-\xff]|\x5c[\x00-\x7f])*\x5d))*(\.\w{2,})+$/;
    return r.test(value);
  },
  minlength: function(value, element, param) {
    var length = Array.isArray(value) ? value.length : _Validator.getLength(value, element);
    return _Validator.optional(element) || length >= param;
  },
  maxlength: function(value, element, param) {
    var length = Array.isArray(value) ? value.length : _Validator.getLength(value, element);
    return _Validator.optional(element) || length <= param;
  },
  rangelength: function(value, element, param) {
    var length = Array.isArray(value) ? value.length : _Validator.getLength(value, element);
    return _Validator.optional(element) || length >= param[0] && length <= param[1];
  },
  min: function(value, element, param) {
    return _Validator.optional(element) || value >= param;
  },
  max: function(value, element, param) {
    return _Validator.optional(element) || value <= param;
  },
  range: function(value, element, param) {
    return _Validator.optional(element) || value >= param[0] && value <= param[1];
  },
  url: function(value, element) {
    return _Validator.optional(element) || /^(?:(?:(?:https?|ftp):)?\/\/)(?:(?:[^\]\[?\/<~#`!@$^&*()+=}|:";',>{ ]|%[0-9A-Fa-f]{2})+(?::(?:[^\]\[?\/<~#`!@$^&*()+=}|:";',>{ ]|%[0-9A-Fa-f]{2})*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff]\.)+(?:[a-z\u00a1-\uffff]{2,}\.?))(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(value == null ? void 0 : value.toString());
  }
};
_Validator.classRuleSettings = {
  required: { required: true },
  email: { email: true },
  url: { url: true },
  date: { date: true },
  dateISO: { dateISO: true },
  number: { number: true },
  digits: { digits: true },
  creditcard: { creditcard: true },
  customValidate: { customValidate: true }
};
var Validator = _Validator;
function addValidationRule(element, rule, uniqueName) {
  var _a68;
  element = isArrayLike(element) ? element[0] : element;
  if (!element)
    return;
  element.classList.add("customValidate");
  var rules = customValidateRules.get(element);
  if (!rules)
    customValidateRules.set(element, rules = {});
  uniqueName != null ? uniqueName : uniqueName = "";
  (_a68 = rules[uniqueName]) != null ? _a68 : rules[uniqueName] = [];
  rules[uniqueName].push(rule);
}
function removeValidationRule(element, uniqueName) {
  element = isArrayLike(element) ? element[0] : element;
  if (!element)
    return;
  var rules = customValidateRules.get(element);
  if (rules) {
    delete rules[uniqueName];
    if (!Object.keys(rules).length)
      customValidateRules.delete(element);
  }
}

// src/q/arrays-compat.ts
function any(array, predicate) {
  return array.some(predicate);
}
function count(array, predicate) {
  let count2 = 0;
  for (let x of array)
    if (predicate(x))
      count2++;
  return count2;
}
function first(array, predicate) {
  for (let x of array)
    if (predicate(x))
      return x;
  throw new Error("first:No element satisfies the condition.!");
}
function groupBy(items, getKey) {
  var _a68;
  let result = {
    byKey: /* @__PURE__ */ Object.create(null),
    inOrder: []
  };
  for (var index = 0; index < items.length; index++) {
    var item = items[index];
    let key = (_a68 = getKey(item)) != null ? _a68 : "";
    var group = result.byKey[key];
    if (group === void 0) {
      group = {
        order: result.inOrder.length,
        key,
        items: [item],
        start: index
      };
      result.byKey[key] = group;
      result.inOrder.push(group);
    } else {
      group.items.push(item);
    }
  }
  return result;
}
function indexOf(array, predicate) {
  for (var i = 0; i < array.length; i++)
    if (predicate(array[i]))
      return i;
  return -1;
}
function insert(obj, index, item) {
  if (obj.insert)
    obj.insert(index, item);
  else if (Array.isArray(obj))
    obj.splice(index, 0, item);
  else
    throw new Error("Object does not support insert!");
}
var isArray = Array.isArray;
function single(array, predicate) {
  let match;
  let found = false;
  for (let x of array)
    if (predicate(x)) {
      if (found)
        throw new Error("single:sequence contains more than one element.");
      found = true;
      match = x;
    }
  if (!found)
    throw new Error("single:No element satisfies the condition.");
  return match;
}
function toGrouping(items, getKey) {
  var _a68;
  let lookup = {};
  for (let x of items) {
    let key = (_a68 = getKey(x)) != null ? _a68 : "";
    let d = lookup[key];
    if (!d) {
      d = lookup[key] = [];
    }
    d.push(x);
  }
  return lookup;
}
function tryFirst(array, predicate) {
  for (let x of array)
    if (predicate(x))
      return x;
}

// src/q/scriptdata-compat.ts
var ScriptData;
((ScriptData2) => {
  function bindToChange(name, onChange) {
    if (typeof document !== "undefined" && document.addEventListener) {
      var unbind = function() {
        var _a68;
        onChange && typeof document !== "undefined" && ((_a68 = document.removeEventListener) == null ? void 0 : _a68.call(document, "scriptdatachange." + name, onChange));
        onChange = null;
      };
      document.addEventListener("scriptdatachange." + name, onChange);
      return unbind;
    }
  }
  ScriptData2.bindToChange = bindToChange;
  ScriptData2.canLoad = canLoadScriptData;
  function ensure(name, dynJS) {
    var _a68;
    var data = peekScriptData(name);
    if (data != null)
      return data;
    var url = resolveUrl(dynJS ? "~/DynJS.axd/" : "~/DynamicData/") + name + (dynJS ? ".js" : "") + "?v=" + ((_a68 = getScriptDataHash(name)) != null ? _a68 : (/* @__PURE__ */ new Date()).getTime());
    var xhr = new XMLHttpRequest();
    xhr.open("GET", url, false);
    requestStarting();
    try {
      xhr.send(null);
      if (xhr.status !== 200)
        handleScriptDataError(name, xhr.status, xhr.statusText);
      if (dynJS) {
        var script = document.createElement("script");
        script.text = xhr.responseText;
        document.head.appendChild(script).parentNode.removeChild(script);
        data = peekScriptData(name);
        if (data == null)
          handleScriptDataError(name);
      }
      data = JSON.parse(xhr.responseText);
      if (data == null)
        handleScriptDataError(name);
      if (name.startsWith("Lookup."))
        data = new Lookup(data.Params, data.Items);
      (0, ScriptData2.set)(name, data);
      return data;
    } finally {
      requestFinished();
    }
  }
  ScriptData2.ensure = ensure;
  function reload(name, dynJS) {
    getScriptDataHash(name, true);
    setScriptData(name, null);
    return ensure(name, dynJS);
  }
  ScriptData2.reload = reload;
  function reloadAsync(name) {
    return __async(this, null, function* () {
      return yield getScriptData(name, true);
    });
  }
  ScriptData2.reloadAsync = reloadAsync;
  ScriptData2.set = setScriptData;
})(ScriptData || (ScriptData = {}));
function canLoadScriptData(name) {
  return peekScriptData(name) != null || getScriptDataHash(name) != null;
}
function getRemoteData(key) {
  return ScriptData.ensure("RemoteData." + key);
}
function getLookup(key) {
  return ScriptData.ensure("Lookup." + key);
}
function reloadLookup(key) {
  return ScriptData.reload("Lookup." + key);
}
function getColumns(key) {
  return getColumnsData(key).items;
}
function getColumnsAsync(key) {
  return __async(this, null, function* () {
    return (yield getColumnsScript(key)).items;
  });
}
function getColumnsData(key) {
  return ScriptData.ensure("Columns." + key);
}
var getColumnsDataAsync = getColumnsScript;
function getForm(key) {
  return getFormData(key).items;
}
function getFormAsync(key) {
  return __async(this, null, function* () {
    return (yield getFormScript(key)).items;
  });
}
function getFormData(key) {
  return ScriptData.ensure("Form." + key);
}
var getFormDataAsync = getFormScript;
var compatExports = {
  canLoadScriptData,
  getColumns,
  getColumnsAsync,
  getForm,
  getFormAsync,
  getLookup,
  getLookupAsync,
  getRemoteData,
  getRemoteDataAsync,
  reloadLookup,
  reloadLookupAsync,
  ScriptData
};
var global3 = getGlobalObject();
var serenity = global3.Serenity || (global3.Serenity = /* @__PURE__ */ Object.create(null));
for (i in compatExports)
  if (serenity[i] == null)
    serenity[i] = compatExports[i];
var i;

// src/q/authorization.ts
var andOrRegex = /[|&]/;
var Authorization;
((Authorization2) => {
  function hasPermission(permission) {
    if (permission == null)
      return false;
    if (permission == "*")
      return true;
    if (permission == "" || permission == "?")
      return !!Authorization2.isLoggedIn;
    var ud = Authorization2.userDefinition;
    if (!ud)
      return false;
    if (ud.IsAdmin)
      return true;
    return isPermissionInSet(ud.Permissions, permission);
  }
  Authorization2.hasPermission = hasPermission;
  function hasPermissionAsync(permission) {
    return __async(this, null, function* () {
      if (permission == null)
        return false;
      if (permission == "*")
        return true;
      if (permission == "" || permission == "?")
        return yield Authorization2.isLoggedInAsync;
      var ud = yield Authorization2.userDefinitionAsync;
      if (!ud)
        return false;
      if (ud.IsAdmin)
        return true;
      return isPermissionInSet(ud.Permissions, permission);
    });
  }
  Authorization2.hasPermissionAsync = hasPermissionAsync;
  function isPermissionInSet(permissionSet, permission) {
    if (!permissionSet || permission == null)
      return false;
    if (permissionSet[permission])
      return true;
    if (!andOrRegex.test(permission))
      return false;
    var orParts = permission.split("|");
    for (var r of orParts) {
      if (!r.length)
        continue;
      var andParts = r.split("&");
      let anyFalse = false;
      for (var n of andParts) {
        if (!n || !permissionSet[n]) {
          anyFalse = true;
          break;
        }
      }
      if (!anyFalse)
        return true;
    }
    return false;
  }
  Authorization2.isPermissionInSet = isPermissionInSet;
  function validatePermission(permission) {
    if (!hasPermission(permission)) {
      notifyError(localText("Authorization.AccessDenied"));
      throw new Error(localText("Authorization.AccessDenied"));
    }
  }
  Authorization2.validatePermission = validatePermission;
  function validatePermissionAsync(permission) {
    return __async(this, null, function* () {
      if (!(yield hasPermissionAsync(permission))) {
        notifyError(localText("Authorization.AccessDenied"));
        throw new Error(localText("Authorization.AccessDenied"));
      }
    });
  }
  Authorization2.validatePermissionAsync = validatePermissionAsync;
})(Authorization || (Authorization = {}));
Object.defineProperty(Authorization, "isLoggedIn", {
  get: function() {
    var _a68;
    return !!((_a68 = Authorization.userDefinition) == null ? void 0 : _a68.Username);
  },
  configurable: true
});
Object.defineProperty(Authorization, "isLoggedInAsync", {
  get: function() {
    return __async(this, null, function* () {
      var _a68;
      return !!((_a68 = yield Authorization.userDefinitionAsync) == null ? void 0 : _a68.Username);
    });
  },
  configurable: true
});
Object.defineProperty(Authorization, "userDefinition", {
  get: function() {
    return getRemoteData("UserData");
  },
  configurable: true
});
Object.defineProperty(Authorization, "userDefinitionAsync", {
  get: function() {
    return __async(this, null, function* () {
      return yield getRemoteDataAsync("UserData");
    });
  },
  configurable: true
});
Object.defineProperty(Authorization, "username", {
  get: function() {
    var _a68;
    return (_a68 = Authorization.userDefinition) == null ? void 0 : _a68.Username;
  },
  configurable: true
});
Object.defineProperty(Authorization, "usernameAsync", {
  get: function() {
    return __async(this, null, function* () {
      var _a68;
      return (_a68 = yield Authorization.userDefinitionAsync) == null ? void 0 : _a68.Username;
    });
  },
  configurable: true
});

// src/q/dialogs-compat.ts
var alert2 = alertDialog;
var confirm = confirmDialog;
var information = informationDialog;
var success = successDialog;
var warning = warningDialog;

// src/q/formatting-compat.ts
function turkishLocaleToLower(a) {
  if (!a)
    return a;
  return a.replace(/i/g, "\u0130").replace(/ı/g, "I").toLowerCase();
}
function turkishLocaleToUpper(a) {
  if (!a)
    return a;
  return a.replace(/i/g, "\u0130").replace(/ı/g, "I").toUpperCase();
}
var turkishLocaleCompare = Culture.stringCompare;
var format = stringFormat;
var localeFormat = stringFormatLocale;
function formatDayHourAndMin(n) {
  if (n == null)
    return "";
  if (n === 0)
    return "0";
  let days = Math.floor(n / 24 / 60);
  let txt2 = "";
  if (days > 0) {
    txt2 += days.toString();
  }
  let mins = Math.floor(n % (24 * 60) / 60).toString().padStart(2, "0") + ":" + (n % 60).toString().padStart(2, "0");
  if (mins != "00:00") {
    if (days > 0)
      txt2 += ".";
    txt2 += mins;
  }
  return txt2;
}
function parseHourAndMin(value) {
  var _a68;
  let v = (_a68 = value == null ? void 0 : value.trim()) != null ? _a68 : "";
  if (!v.length)
    return null;
  if (v.length < 4 || v.length > 5)
    return NaN;
  let h, m;
  if (v.charAt(1) == ":") {
    h = parseInteger(v.substr(0, 1));
    m = parseInteger(v.substr(2, 2));
  } else {
    if (v.charAt(2) != ":")
      return NaN;
    h = parseInteger(v.substr(0, 2));
    m = parseInteger(v.substr(3, 2));
  }
  if (isNaN(h) || isNaN(m) || h < 0 || h > 23 || m < 0 || m > 59)
    return NaN;
  return h * 60 + m;
}
function parseDayHourAndMin(s) {
  var _a68;
  let days;
  let v = (_a68 = s == null ? void 0 : s.trim()) != null ? _a68 : "";
  if (!v.length)
    return null;
  let p = v.split(".");
  if (p.length == 1) {
    days = parseInteger(p[0]);
    if (!isNaN(days))
      return days * 24 * 60;
    return parseHourAndMin(p[0]);
  } else if (p.length == 2) {
    days = parseInteger(p[0]);
    let hm = parseHourAndMin(p[1]);
    if (isNaN(days) || !hm || isNaN(hm))
      return NaN;
    return days * 24 * 60 + hm;
  } else
    return NaN;
}

// src/q/html-compat.ts
function addEmptyOption(select) {
  addOption(select, "", localText("Controls.SelectEditor.EmptyItemText"));
}
function addOption(select, key, text2) {
  var _a68;
  var option = document.createElement("option");
  option.value = key != null ? key : "";
  option.textContent = text2 != null ? text2 : "";
  (_a68 = isArrayLike(select) ? select[0] : select) == null ? void 0 : _a68.append(option);
}
var attrEncode = htmlEncode;
function clearOptions(select) {
  select = isArrayLike(select) ? select[0] : select;
  if (select)
    select.innerHTML = "";
}
function findElementWithRelativeId(element, relativeId, context) {
  var _a68;
  const from = isArrayLike(element) ? element[0] : element;
  const doc = typeof document === "undefined" ? null : document;
  if (from == null)
    return null;
  var noContext = false;
  if (context === void 0) {
    context = from.getRootNode();
    noContext = true;
  }
  let fromId = (_a68 = from.id) != null ? _a68 : "";
  while (true) {
    var res = context == null ? void 0 : context.querySelector("#" + fromId + relativeId);
    if (!res && noContext)
      res = doc == null ? void 0 : doc.getElementById(fromId + relativeId);
    if (!res && fromId.length) {
      res = context == null ? void 0 : context.querySelector("#" + fromId + "_" + relativeId);
      if (!res && noContext)
        res = doc == null ? void 0 : doc.getElementById(fromId + "_" + relativeId);
    }
    if (res || !fromId.length)
      return res != null ? res : null;
    let idx = fromId.lastIndexOf("_");
    if (idx <= 0)
      fromId = "";
    else
      fromId = fromId.substring(0, idx);
  }
}
function newBodyDiv() {
  var element = document.createElement("div");
  document.body.append(element);
  return element;
}
function outerHtml(element) {
  var el = document.createElement("i");
  el.append((isArrayLike(element) ? element[0] : element).cloneNode(true));
  return el.innerHTML;
}

// src/q/layouttimer.ts
var LayoutTimer;
((LayoutTimer2) => {
  var timeout;
  var nextKey = 0;
  var regCount = 0;
  var regs = {};
  function startTimer() {
    if (timeout == null && regCount > 0) {
      timeout = window.setTimeout(onTimeout, 100);
    }
  }
  function clearTimer() {
    if (timeout != null) {
      window.clearTimeout(timeout);
      timeout = null;
    }
  }
  function onTimeout() {
    for (var key in regs) {
      var reg = regs[key];
      try {
        var el = reg.element();
        if (!el)
          continue;
        var w = el.offsetWidth;
        var h = el.offsetHeight;
        try {
          if (reg.width && reg.storedWidth !== w || reg.height && reg.storedHeight !== h || !reg.width && !reg.height && (!w !== !reg.storedWidth || !h !== !reg.storedHeight)) {
            if (w > 0 && h > 0) {
              try {
                reg.handler();
              } finally {
                w = el.offsetWidth;
                h = el.offsetHeight;
              }
            }
          }
        } finally {
          reg.storedWidth = w;
          reg.storedHeight = h;
        }
      } catch (e) {
        console.log(e);
      }
    }
    clearTimer();
    startTimer();
  }
  function store(key) {
    var reg = regs[key];
    if (!reg)
      return;
    var el = reg.element();
    if (!el)
      return;
    reg.storedWidth = el.offsetWidth;
    reg.storedHeight = el.offsetHeight;
  }
  LayoutTimer2.store = store;
  function trigger(key) {
    var reg = regs[key];
    if (!reg)
      return;
    store(key);
    if (reg.storedWidth >= 0 && reg.storedHeight >= 0) {
      reg.handler();
    }
    store(key);
  }
  LayoutTimer2.trigger = trigger;
  function onSizeChange(element, handler, width, height) {
    if (handler == null)
      throw "Layout handler can't be null!";
    regs[++nextKey] = {
      element,
      handler,
      width: width !== false,
      height: height !== false
    };
    regCount++;
    store(nextKey);
    startTimer();
    return nextKey;
  }
  LayoutTimer2.onSizeChange = onSizeChange;
  function onWidthChange(element, handler) {
    return onSizeChange(element, handler, true, false);
  }
  LayoutTimer2.onWidthChange = onWidthChange;
  function onHeightChange(element, handler) {
    return onSizeChange(element, handler, false, true);
  }
  LayoutTimer2.onHeightChange = onHeightChange;
  function onShown(element, handler) {
    return onSizeChange(element, handler, false, false);
  }
  LayoutTimer2.onShown = onShown;
  function off(key) {
    var reg = regs[key];
    if (!reg)
      return 0;
    delete regs[key];
    regCount--;
    if (regCount <= 0)
      clearTimer();
    return 0;
  }
  LayoutTimer2.off = off;
})(LayoutTimer || (LayoutTimer = {}));
function executeOnceWhenVisible(el, callback) {
  el = isArrayLike(el) ? el[0] : el;
  if (!el)
    return;
  if (el.offsetWidth > 0 && el.offsetHeight > 0) {
    callback();
    return;
  }
  var timer = LayoutTimer.onShown(() => el, () => {
    LayoutTimer.off(timer);
    callback();
  });
}
function executeEverytimeWhenVisible(el, callback, callNowIfVisible) {
  el = isArrayLike(el) ? el[0] : el;
  if (!el)
    return;
  if (callNowIfVisible && el.offsetWidth > 0 && el.offsetHeight > 0) {
    callback();
  }
  LayoutTimer.onShown(() => el, () => {
    callback();
  });
}

// src/q/router.ts
var Router;
((Router2) => {
  let oldURL;
  let resolving = 0;
  let autoinc = 0;
  let ignoreHashLock = 0;
  let ignoreHashUntil = 0;
  let hashAnchorClickValue;
  let hashAnchorClickTime;
  Router2.enabled = true;
  function isEqual(url1, url2) {
    return url1 == url2 || url1 == url2 + "#" || url2 == url1 + "#";
  }
  function navigate(newHash, tryBack, silent) {
    if (!Router2.enabled || resolving > 0)
      return;
    newHash = newHash || "";
    newHash = newHash.replace(/^#/, "");
    newHash = !newHash ? "" : "#" + newHash;
    var newURL = window.location.href.replace(/#$/, "").replace(/#.*$/, "") + newHash;
    if (newURL != window.location.href) {
      if (tryBack && oldURL != null && isEqual(oldURL, newURL)) {
        if (silent)
          ignoreHashChange();
        oldURL = null;
        window.history.back();
        return;
      }
      if (silent)
        ignoreHashChange();
      oldURL = window.location.href;
      window.location.hash = newHash;
    }
  }
  Router2.navigate = navigate;
  function replace(newHash, tryBack) {
    navigate(newHash, tryBack, true);
  }
  Router2.replace = replace;
  function replaceLast(newHash, tryBack) {
    if (!Router2.enabled)
      return;
    var current = window.location.hash || "";
    if (current.charAt(0) == "#")
      current = current.substring(1);
    var parts = current.split("/+/");
    if (parts.length > 1) {
      if (newHash && newHash.length) {
        parts[parts.length - 1] = newHash;
        newHash = parts.join("/+/");
      } else {
        parts.splice(parts.length - 1, 1);
        newHash = parts.join("/+/");
      }
    }
    replace(newHash, tryBack);
  }
  Router2.replaceLast = replaceLast;
  const ignoredSelector = ".s-MessageDialog, .s-MessageModal, .s-PromptDialog, .route-ignore";
  function isIgnoredDialog(el) {
    var _a68, _b;
    return !!((el == null ? void 0 : el.closest(ignoredSelector)) || ((_b = (_a68 = Dialog.getInstance(el)) == null ? void 0 : _a68.getContentNode()) == null ? void 0 : _b.closest(ignoredSelector)));
  }
  function isVisibleOrHiddenBy(el) {
    return el.offsetWidth > 0 && el.offsetHeight > 0 || // if visible
    !!(!el.closest(".hidden") && el.closest("[data-hiddenby]"));
  }
  function getVisibleOrHiddenByDialogs() {
    var visibleDialogs = Array.from(document.querySelectorAll(".modal, .panel-body, .ui-dialog-content")).filter(isVisibleOrHiddenBy).filter((x) => !isIgnoredDialog(x));
    visibleDialogs.sort((a, b) => {
      return parseInt(a.dataset.qrouterorder || "0", 10) - parseInt(b.dataset.qrouterorder || "0", 10);
    });
    return visibleDialogs;
  }
  let pendingDialogHash;
  let pendingDialogElement;
  let pendingDialogOwner;
  let pendingDialogPreHash;
  function onDialogOpen(ownerEl, element, dialogHash) {
    var _a68, _b;
    var route = [];
    element = isArrayLike(element) ? element[0] : element;
    if (element && pendingDialogElement && element === pendingDialogElement || element.contains(pendingDialogElement)) {
      dialogHash = pendingDialogHash != null ? pendingDialogHash : dialogHash;
      ownerEl = pendingDialogOwner;
    }
    pendingDialogHash = null;
    pendingDialogElement = null;
    pendingDialogOwner = null;
    pendingDialogPreHash = null;
    ownerEl = isArrayLike(ownerEl) ? ownerEl[0] : ownerEl;
    var ownerIsDialog = ownerEl == null ? void 0 : ownerEl.matches(".ui-dialog-content, .panel-body, .modal-content");
    var ownerDlgInst = Dialog.getInstance(ownerEl);
    var value = dialogHash();
    var idPrefix;
    if (ownerDlgInst) {
      var dialogs = getVisibleOrHiddenByDialogs();
      var index = dialogs.indexOf(ownerDlgInst.getEventsNode());
      for (var i = 0; i <= index; i++) {
        var q = dialogs[i].dataset.qroute;
        if (q && q.length)
          route.push(q);
      }
      if (!ownerIsDialog) {
        idPrefix = (_a68 = ownerDlgInst == null ? void 0 : ownerDlgInst.getContentNode()) == null ? void 0 : _a68.getAttribute("id");
        if (idPrefix) {
          idPrefix += "_";
          var id = ownerEl == null ? void 0 : ownerEl.getAttribute("id");
          if (id && id.startsWith(idPrefix))
            value = id.substring(idPrefix.length) + "@" + value;
        }
      }
    } else {
      var id = ownerEl == null ? void 0 : ownerEl.getAttribute("id");
      if (id && (!ownerEl.classList.contains("route-handler") || ((_b = document.querySelector(".route-handler")) == null ? void 0 : _b.getAttribute("id")) != id))
        value = id + "@" + value;
    }
    route.push(value);
    element.dataset.qroute = value;
    replace(route.join("/+/"));
  }
  function dialog(owner, element, dialogHash) {
    if (!Router2.enabled)
      return;
    var el = isArrayLike(element) ? element[0] : element;
    pendingDialogElement = el;
    pendingDialogHash = dialogHash;
    pendingDialogOwner = isArrayLike(owner) ? owner[0] : owner;
    pendingDialogPreHash = resolvingPreRoute;
  }
  Router2.dialog = dialog;
  let resolvingPreRoute;
  let resolveIndex = 0;
  Router2.mightBeRouteRegex = /^(new$|edit\/|![0-9]+$)/;
  function resolve(newHash) {
    var _a68, _b, _c, _d;
    resolveIndex++;
    if (!Router2.enabled) {
      return;
    }
    const resolvingCurrent = newHash == null;
    newHash = (_a68 = newHash != null ? newHash : window.location.hash) != null ? _a68 : "";
    if (newHash.charAt(0) == "#")
      newHash = newHash.substring(1);
    var newParts = newHash.split("/+/");
    if (resolvingCurrent && (hashAnchorClickTime && (/* @__PURE__ */ new Date()).getTime() - hashAnchorClickTime < 100) && hashAnchorClickValue === newHash && (newHash != "" || window.location.href.indexOf("#") >= 0) && newParts.length == 1 && !newParts.some((x) => Router2.mightBeRouteRegex.test(x))) {
      return;
    }
    resolving++;
    try {
      let closeMessages = function() {
        if (closedMessages) {
          return;
        }
        closedMessages = true;
        Array.from(document.querySelectorAll(".s-MessageDialog")).reverse().forEach((x) => {
          var _a69;
          if (Fluent.isVisibleLike(x)) {
            (_a69 = Dialog.getInstance(x)) == null ? void 0 : _a69.close();
          }
        });
      };
      var dialogs = getVisibleOrHiddenByDialogs();
      var oldParts = dialogs.map((el) => el.dataset.qroute);
      var same = 0;
      while (same < dialogs.length && same < newParts.length && oldParts[same] == newParts[same]) {
        same++;
      }
      let closedMessages = false;
      for (var i = same; i < dialogs.length; i++) {
        var d = dialogs[i];
        (_b = Dialog.getInstance(d)) == null ? void 0 : _b.close("router");
        closeMessages();
      }
      for (var i = same; i < Math.min(newParts.length, 5); i++) {
        var route = newParts[i];
        var routeParts = route.split("@");
        var handler;
        if (routeParts.length == 2) {
          var dialog2 = i > 0 ? dialogs[i - 1] : null;
          if (dialog2) {
            var idPrefix = (_d = (_c = Dialog.getInstance(dialog2)) == null ? void 0 : _c.getContentNode().getAttribute("id")) != null ? _d : dialog2.getAttribute("id");
            if (idPrefix) {
              handler = document.querySelector("#" + idPrefix + "_" + routeParts[0]);
              if (handler) {
                route = routeParts[1];
              }
            }
          }
          if (!handler) {
            handler = document.querySelector("#" + routeParts[0]);
            if (handler) {
              route = routeParts[1];
            }
          }
          if (!handler)
            return;
        }
        if (!handler) {
          handler = i > 0 ? dialogs[i - 1] : document.querySelector(".route-handler");
        }
        if (route.startsWith("!"))
          return;
        resolvingPreRoute = newParts.slice(0, i).join("/+/");
        try {
          closeMessages();
          Fluent.trigger(handler, "handleroute", {
            route,
            parts: newParts,
            index: i,
            isInitial: resolveIndex <= 3
          });
        } finally {
          resolvingPreRoute = null;
        }
      }
    } finally {
      resolving--;
    }
  }
  Router2.resolve = resolve;
  function hashChange(_) {
    if (ignoreHashLock > 0) {
      if ((/* @__PURE__ */ new Date()).getTime() > ignoreHashUntil) {
        ignoreHashLock = 0;
      } else {
        ignoreHashLock--;
        return;
      }
    }
    resolve();
  }
  function ignoreHashChange(expiration) {
    ignoreHashLock++;
    ignoreHashUntil = Math.max(ignoreHashUntil, (/* @__PURE__ */ new Date()).getTime() + (expiration != null ? expiration : 1e3));
  }
  Router2.ignoreHashChange = ignoreHashChange;
  window.addEventListener("hashchange", hashChange, false);
  let routerOrder = 1;
  if (typeof document !== "undefined") {
    let onDocumentDialogOpen = function(event) {
      var _a68;
      if (!Router2.enabled)
        return;
      var dlg = event.target;
      if (!dlg || isIgnoredDialog(dlg))
        return;
      dlg.dataset.qrouterorder = (routerOrder++).toString();
      if (dlg.dataset.qroute)
        return;
      dlg.dataset.qprhash = (_a68 = resolvingPreRoute != null ? resolvingPreRoute : pendingDialogPreHash) != null ? _a68 : window.location.hash;
      var owner = getVisibleOrHiddenByDialogs().filter((x) => x !== dlg).pop();
      if (!owner)
        owner = document.documentElement;
      onDialogOpen(owner, dlg, () => {
        return "!" + (++autoinc).toString(36);
      });
    }, shouldTryBack = function(e) {
      var _a68, _b, _c, _d, _e;
      if (isIgnoredDialog(e.target))
        return false;
      if (((_b = (_a68 = e.target) == null ? void 0 : _a68.closest) == null ? void 0 : _b.call(_a68, ".s-MessageDialog, .s-MessageModal")) || e.key === "Escape")
        return true;
      let orgEvent = (_c = e.originalEvent) != null ? _c : e;
      if (!orgEvent)
        return false;
      if (orgEvent.key === "Escape" || ((_e = (_d = orgEvent.target) == null ? void 0 : _d.matches) == null ? void 0 : _e.call(_d, ".close, .panel-titlebar-close, .ui-dialog-titlebar-close")))
        return true;
      return false;
    }, closeHandler = function(e) {
      var dlg = e.target;
      if (!dlg || isIgnoredDialog(e.target))
        return;
      delete dlg.dataset.qroute;
      var prhash = dlg.dataset.qprhash;
      let tryBack = shouldTryBack(e);
      if (prhash != null)
        replace(prhash, tryBack);
      else
        replaceLast("", tryBack);
    };
    Fluent.on(document, "dialogopen", ".ui-dialog-content", onDocumentDialogOpen);
    Fluent.on(document, "shown.bs.modal", ".modal", onDocumentDialogOpen);
    Fluent.on(document, "panelopen", ".panel-body", onDocumentDialogOpen);
    Fluent.on(document, "click", (e) => {
      var _a68, _b;
      if (!Fluent.isDefaultPrevented(e)) {
        const a = (_b = (_a68 = e.target).closest) == null ? void 0 : _b.call(_a68, 'a[href^="#"]');
        if (a) {
          hashAnchorClickTime = (/* @__PURE__ */ new Date()).getTime();
          hashAnchorClickValue = a.hash.substring(1);
        }
      }
    });
    Fluent.on(document, "dialogclose.qrouter", closeHandler);
    Fluent.on(document, "hidden.bs.modal", closeHandler);
    Fluent.on(document, "panelclose.qrouter", closeHandler);
  }
})(Router || (Router = {}));

// src/q/system-compat.ts
function coalesce(a, b) {
  return a != null ? a : b;
}
function isValue(a) {
  return a != null;
}
var today = () => {
  var d = /* @__PURE__ */ new Date();
  return new Date(d.getFullYear(), d.getMonth(), d.getDate());
};
function extend(a, b) {
  for (var key in b)
    if (Object.prototype.hasOwnProperty.call(b, key))
      a[key] = b[key];
  return a;
}
function deepClone(a, a2, a3) {
  if (a2 != null || a3 != null) {
    return extend(extend(deepClone(a || {}), deepClone(a2 || {})), deepClone(a3 || {}));
  }
  var result = a;
  var type = {}.toString.call(a).slice(8, -1);
  if (type == "Set") {
    return new Set([...a].map((value) => deepClone(value)));
  }
  if (type == "Map") {
    return new Map([...a].map((kv) => [deepClone(kv[0]), deepClone(kv[1])]));
  }
  if (type == "Date") {
    return new Date(a.getTime());
  }
  if (type == "RegExp") {
    return RegExp(a.source, getRegExpFlags(a));
  }
  if (type == "Array" || type == "Object") {
    result = Array.isArray(a) ? [] : {};
    for (var key in a) {
      result[key] = deepClone(a[key]);
    }
  }
  return result;
}
function getRegExpFlags(regExp) {
  if (typeof regExp.source.flags == "string") {
    return regExp.source.flags;
  } else {
    var flags = [];
    regExp.global && flags.push("g");
    regExp.ignoreCase && flags.push("i");
    regExp.multiline && flags.push("m");
    regExp.sticky && flags.push("y");
    regExp.unicode && flags.push("u");
    return flags.join("");
  }
}
var MemberType = /* @__PURE__ */ ((MemberType2) => {
  MemberType2[MemberType2["field"] = 4] = "field";
  MemberType2[MemberType2["property"] = 16] = "property";
  return MemberType2;
})(MemberType || {});
function getMembers(type, memberTypes) {
  var result = [];
  if (!type)
    return [];
  var result = [];
  do {
    let members = Object.prototype.hasOwnProperty.call(type, typeMemberListSymbol) ? type[typeMemberListSymbol] : null;
    if (members) {
      for (var member of members) {
        if (member && member.type & memberTypes && !result.some((x) => x.name === member.name))
          result.push(member);
      }
    }
  } while (type = getBaseType(type));
  return result;
}
function merge2(arr1, arr2) {
  if (!arr1 || !arr2)
    return (arr1 || arr2 || []).slice();
  function distinct(arr) {
    return arr.filter((item, pos) => arr.indexOf(item) === pos);
  }
  return distinct(arr1.concat(arr2));
}
var typeMemberListSymbol = "Serenity.typeMemberList";
function addTypeMember(type, member) {
  if (!Object.prototype.hasOwnProperty.call(type, typeMemberListSymbol)) {
    type[typeMemberListSymbol] = [];
  }
  var members = type[typeMemberListSymbol];
  if (!members)
    type[typeMemberListSymbol] = members = [];
  var name = member.name;
  let existing;
  for (var m of members) {
    if (m.name == name) {
      existing = m;
      break;
    }
  }
  if (existing) {
    if (member.type != null)
      existing.type = member.type;
    if (member.attr != null)
      existing.attr = merge2(existing.attr, member.attr);
    if (member.getter != null)
      existing.getter = member.getter;
    if (member.setter != null)
      existing.setter = member.setter;
    return existing;
  } else {
    members.push(member);
    return member;
  }
}
function getTypes(from) {
  const types = getTypeRegistry();
  var result = [];
  if (!from) {
    for (var t in types) {
      if (Object.prototype.hasOwnProperty.call(types, t))
        result.push(types[t]);
    }
  } else {
    var traverse = function(s, n) {
      for (var c in s) {
        if (Object.prototype.hasOwnProperty.call(s, c))
          traverse(s[c], c);
      }
      if (typeof s === "function" && n.charAt(0).toUpperCase() === n.charAt(0) && n.charAt(0).toLowerCase() !== n.charAt(0))
        result.push(s);
    };
    traverse(from, "");
  }
  return result;
}
function clearKeys(d) {
  for (var n in d) {
    if (Object.prototype.hasOwnProperty.call(d, n))
      delete d[n];
  }
}
function keyOf(prop) {
  return prop;
}
function cast(instance, type) {
  if (instance == null)
    return instance;
  else if (isInstanceOfType(instance, type))
    return instance;
  throw "Cannot cast object to type " + getTypeFullName(type);
}
function safeCast(instance, type) {
  return isInstanceOfType(instance, type) ? instance : null;
}
var isInterfaceTypeSymbol2 = Symbol.for("Serenity.isInterfaceType");
function initializeTypes(root, pre, limit) {
  if (!root)
    return;
  for (var k of Object.keys(root)) {
    if (k.charAt(0) < "A" || k.charAt(0) > "Z" || k.indexOf("$") >= 0 || !Object.prototype.hasOwnProperty.call(root, k))
      continue;
    var obj = root[k];
    if (obj == void 0 || Array.isArray(obj) || obj instanceof Date || typeof obj != "function" && typeof obj != "object")
      continue;
    if (!getTypeNameProp(obj) && obj[isInterfaceTypeSymbol2] !== void 0 && (typeof obj === "function" && typeof obj.nodeType !== "number" || Object.prototype.hasOwnProperty.call(obj, isInterfaceTypeSymbol2) && obj[isInterfaceTypeSymbol2] !== void 0)) {
      setTypeNameProp(obj, pre + k);
    }
    if (limit > 0)
      initializeTypes(obj, pre + k + ".", limit - 1);
  }
}
var Exception = class extends Error {
  constructor(message) {
    super(message);
    this.name = "Exception";
  }
};
var ArgumentNullException = class extends Exception {
  constructor(paramName, message) {
    super((message || "Value cannot be null.") + "\nParameter name: " + paramName);
    this.name = "ArgumentNullException";
  }
};
var InvalidCastException = class extends Exception {
  constructor(message) {
    super(message);
    this.name = "InvalidCastException";
  }
};

// src/q/layout.ts
function initWidgetPage(widgetOrType, props, defaultElement, noRoute) {
  var _a68;
  let widget;
  if (widgetOrType == null ? void 0 : widgetOrType.domNode) {
    if (props && typeof props.element === "function") {
      props.element(widgetOrType.domNode);
    }
    widget = widgetOrType;
  } else {
    props != null ? props : props = {};
    let oldFunction;
    if (defaultElement) {
      if (typeof props.element === "function") {
        oldFunction = props.element;
        props.element = defaultElement;
      } else {
        (_a68 = props.element) != null ? _a68 : props.element = defaultElement;
      }
    }
    widget = new widgetOrType(props);
    oldFunction == null ? void 0 : oldFunction(widget.domNode);
    widget.init();
  }
  initFullHeightGridPage(widget.domNode, { setHeight: false, noRoute });
  return widget;
}
function GridPageInit({ type, props }) {
  return initWidgetPage(type, props, "#GridDiv").domNode;
}
function PanelPageInit({ type, props }) {
  return initWidgetPage(type, props, "#Panel", false).domNode;
}
function gridPageInit(gridOrType, props) {
  return initWidgetPage(gridOrType, props, "#GridDiv");
}
function panelPageInit(panelOrType, props) {
  return initWidgetPage(panelOrType, props, "#PanelDiv", true);
}
function initFullHeightGridPage(gridDiv, opt) {
  var _a68, _b, _c, _d, _e, _f, _g, _h;
  var el = isArrayLike(gridDiv) ? gridDiv[0] : gridDiv instanceof HTMLElement ? gridDiv : gridDiv.domNode;
  document.documentElement.classList.add("full-height-page");
  el.classList.add("responsive-height");
  let setHeight = (_a68 = opt == null ? void 0 : opt.setHeight) != null ? _a68 : getjQuery() && (!el.classList.contains("s-DataGrid") && !el.classList.contains("s-Panel"));
  let layout = function() {
    setHeight && layoutFillHeight(el);
    Fluent.trigger(el, "layout");
  };
  if (document.body.classList.contains("has-layout-event")) {
    Fluent.on(document.body, "layout", layout);
  } else if ((_b = window.Metronic) == null ? void 0 : _b.addResizeHandler) {
    window.Metronic.addResizeHandler(layout);
  } else {
    Fluent.on(window, "resize", layout);
  }
  layout();
  Fluent.one(el, "disposing", () => {
    Fluent.off(window, "resize", layout);
    Fluent.off(document.body, "layout", layout);
  });
  if (!(opt == null ? void 0 : opt.noRoute) && typeof document !== "undefined" && !((_d = (_c = document.body) == null ? void 0 : _c.getAttribute) == null ? void 0 : _d.call(_c, "data-fhrouteinit"))) {
    (_f = (_e = document.body) == null ? void 0 : _e.setAttribute) == null ? void 0 : _f.call(_e, "data-fhrouteinit", "true");
    typeof Router !== "undefined" && ((_h = (_g = Router).resolve) == null ? void 0 : _h.call(_g));
  }
}
function layoutFillHeightValue(element) {
  let h = 0;
  let $2 = getjQuery();
  element = isArrayLike(element) ? element[0] : element;
  if (!$2 && element)
    return parseInt(getComputedStyle(element).height, 10);
  $2(element).parent().children().not(element).each(function(i, e) {
    let q = $2(e);
    if (q.is(":visible")) {
      h += q.outerHeight(true);
    }
  });
  h = $2(element).parent().height() - h;
  if ($2(element).css("box-sizing") !== "border-box") {
    h = h - ($2(element).outerHeight(true) - $2(element).height());
  }
  return h;
}
function layoutFillHeight(element) {
  let h = layoutFillHeightValue(element);
  let n = Math.round(h) + "px";
  element = isArrayLike(element) ? element[0] : element;
  if (element.style.height != n)
    element.style.height = n;
}
function isMobileView() {
  var _a68, _b, _c;
  return typeof window !== "undefined" && ((_c = (_b = (_a68 = window.matchMedia) == null ? void 0 : _a68.call(window, "(max-width: 767px)")) == null ? void 0 : _b.matches) != null ? _c : window.innerWidth < 768);
}
function initOnLoad() {
  if (!Config.rootNamespaces)
    return;
  for (var ns of Config.rootNamespaces) {
    var obj = getNested(getGlobalObject(), ns);
    if (obj != null)
      initializeTypes(obj, ns + ".", 3);
  }
}
var _a;
(_a = getjQuery()) == null ? void 0 : _a(initOnLoad);
function triggerLayoutOnShow(element) {
  element = isArrayLike(element) ? element[0] : element;
  if (!element)
    return;
  executeEverytimeWhenVisible(element, function() {
    Fluent.trigger(element, "layout");
  }, true);
}
function centerDialog(el) {
  var _a68, _b;
  el = isArrayLike(el) ? el[0] : el;
  var dlg = el.closest(".ui-dialog");
  if (!dlg)
    return;
  dlg = getjQuery()(dlg);
  (_a68 = dlg.position) == null ? void 0 : _a68.call(dlg, { at: "center center", of: window });
  let pos = (_b = dlg.position) == null ? void 0 : _b.call(dlg);
  if (pos.left < 0)
    dlg.css("left", "0px");
  if (pos.top < 0)
    dlg.css("top", "0px");
}

// src/q/localtext-compat.ts
var text = localText;
function dbText(prefix) {
  return function(key) {
    return localText("Db." + prefix + "." + key);
  };
}
function prefixedText(prefix) {
  return function(text2, key) {
    if (text2 != null && !text2.startsWith("`")) {
      var local2 = tryGetText(text2);
      if (local2 != null) {
        return local2;
      }
    }
    if (text2 != null && !text2.startsWith("`")) {
      text2 = text2.substring(1);
    }
    if (prefix) {
      var textKey = typeof key == "function" ? key(prefix) : prefix + key;
      var localText2 = tryGetText(textKey);
      if (localText2 != null) {
        return localText2;
      }
    }
    return text2;
  };
}
function dbTryText(prefix) {
  return function(key) {
    return localText("Db." + prefix + "." + key);
  };
}
var LT;
((LT2) => {
  LT2.add = addLocalText;
  LT2.getDefault = localText;
})(LT || (LT = {}));
var global4 = getGlobalObject();
var serenity2 = global4.Serenity || (global4.Serenity = {});
serenity2.LT = serenity2.LT || {};
serenity2.LT.add = addLocalText;

// src/q/services-compat.ts
function setEquality(request, field, value) {
  if (request.EqualityFilter == null) {
    request.EqualityFilter = {};
  }
  request.EqualityFilter[field] = value;
}
function parseQueryString(s) {
  let qs;
  if (s === void 0)
    qs = location.search.substring(1, location.search.length);
  else
    qs = s || "";
  let result = {};
  let parts = qs.split("&");
  for (let i = 0; i < parts.length; i++) {
    let pair = parts[i].split("=");
    let name = decodeURIComponent(pair[0]);
    result[name] = pair.length >= 2 ? decodeURIComponent(pair[1]) : name;
  }
  return result;
}
function postToCommon(url, div) {
  if (isSameOrigin(resolveUrl(url))) {
    var csrfToken = getCookie("CSRF-TOKEN");
    if (csrfToken) {
      Fluent("input").attr("type", "hidden").attr("name", "__RequestVerificationToken").appendTo(div).val(csrfToken);
    }
  }
  Fluent("input").attr("type", "submit").appendTo(div);
  div.closest("form").submit();
  window.setTimeout(function() {
    div.closest("form").remove();
  }, 0);
}
function postToService(options) {
  let url = options.url ? resolveUrl(options.url) : resolveServiceUrl(options.service);
  let form = Fluent("form").attr("method", "POST").attr("action", url).appendTo(document.body);
  if (options.target)
    form.attr("target", options.target);
  postToCommon(url, Fluent("div").appendTo(form).append(
    Fluent("input").attr("type", "hidden").attr("name", "request").val(JSON.stringify(options.request))
  ).getNode());
}
function postToUrl(options) {
  let url = resolveUrl(options.url);
  let form = Fluent("form").attr("method", "POST").attr("action", url).appendTo(document.body);
  if (options.target)
    form.attr("target", options.target);
  let div = Fluent("div").appendTo(form);
  if (options.params != null) {
    for (let k in options.params) {
      Fluent("input").attr("type", "hidden").attr("name", k).val(options.params[k]).appendTo(div);
    }
  }
  postToCommon(url, div.getNode());
}

// src/q/strings-compat.ts
function endsWith(s, suffix) {
  return s.endsWith(suffix);
}
function isEmptyOrNull(s) {
  return s == null || s.length === 0;
}
function isTrimmedEmpty(s) {
  return !(s == null ? void 0 : s.trim());
}
function padLeft(s, len, ch = " ") {
  s = s == null ? "" : s.toString();
  if (s.padStart)
    return s.padStart(len, ch);
  while (s.length < len)
    s = ch + s;
  return s;
}
function startsWith(s, prefix) {
  return s.startsWith(prefix);
}
function toSingleLine(str) {
  return replaceAll(replaceAll(trimToEmpty(str), "\r\n", " "), "\n", " ").trim();
}
var trimEnd = function(s) {
  var _a68, _b, _c;
  return (_c = (_b = (_a68 = s != null ? s : "").trimEnd) == null ? void 0 : _b.call(_a68)) != null ? _c : s.replace(/\s*$/, "");
};
var trimStart = function(s) {
  var _a68, _b, _c;
  return (_c = (_b = (_a68 = s != null ? s : "").trimStart) == null ? void 0 : _b.call(_a68)) != null ? _c : s.replace(/^\s*/, "");
};
function trim(s) {
  var _a68;
  return (_a68 = s == null ? void 0 : s.trim()) != null ? _a68 : "";
}
function trimToEmpty(s) {
  return (s != null ? s : "").trim();
}
function trimToNull(s) {
  if (s == null)
    return null;
  s = trim(s);
  return s.length === 0 ? null : s;
}
function replaceAll(str, find, replace) {
  var _a68, _b;
  str = str || "";
  return (_b = (_a68 = str.replaceAll) == null ? void 0 : _a68.call(str, find, replace)) != null ? _b : str.split(find).join(replace);
}
function zeroPad(n, len) {
  if (n == null)
    return "";
  let s = n.toString();
  while (s.length < len)
    s = "0" + s;
  return s;
}

// src/q/validation.ts
function validatorAbortHandler(validator) {
  delete validator.settings.abortHandler;
  validator.settings.submitHandler = function() {
    return false;
  };
}
function validateOptions(options) {
  let opt = {};
  return extend(extend(opt, {
    errorPlacement: function(place, elem) {
      var _a68;
      var element = isArrayLike(elem) ? elem[0] : elem;
      let field = null;
      let vx = element.getAttribute("data-vx-id");
      if (vx) {
        field = document.querySelector("#" + vx);
      }
      if (!field) {
        field = element.closest("div.field");
        if (field) {
          let inner = field.querySelector("div.vx");
          if (inner)
            field = inner;
        } else
          field = element.parentElement;
      }
      (_a68 = field == null ? void 0 : field.append) == null ? void 0 : _a68.call(field, isArrayLike(place) ? place[0] : place);
    },
    submitHandler: function() {
      return false;
    },
    invalidHandler: function(event, validator) {
      var _a68, _b, _c, _d, _e;
      notifyError(localText("Validation.InvalidFormMessage"));
      validator.errorList.forEach((x) => {
        var _a69, _b2;
        let element = isArrayLike(x.element) ? x.element[0] : x.element;
        (_b2 = (_a69 = element.closest(".category.collapsed")) == null ? void 0 : _a69.querySelectorAll(
          ":scope > .category-title"
        )) == null ? void 0 : _b2.forEach((el2) => el2.click());
      });
      if (validator.errorList.length) {
        var el = validator.errorList[0].element;
        if (!el)
          return;
        let $2 = getjQuery();
        var bsPaneId = (_a68 = el.closest(".tab-content>.tab-pane[id]:not(.active)")) == null ? void 0 : _a68.getAttribute("id");
        if (bsPaneId) {
          let selector = 'a[href="#' + bsPaneId + '"]';
          $2 && $2(selector).click();
          (_b = document.querySelector(selector)) == null ? void 0 : _b.click();
        }
        var uiPaneId = (_c = el.closest(".ui-tabs-panel[id]:not(.ui-tabs-panel-active)")) == null ? void 0 : _c.getAttribute("id");
        if (uiPaneId) {
          let selector = 'a[href="#' + uiPaneId + '"]';
          $2 ? $2(selector).click() : (_d = document.querySelector(selector)) == null ? void 0 : _d.click();
        }
        new Tooltip((_e = Validator.getHighlightTarget(el)) != null ? _e : el, { title: validator.errorList[0].message }).show().delayedDispose();
      }
    },
    success: function(label) {
      label = isArrayLike(label) ? label[0] : label;
      label && label.classList.add("checked");
    }
  }), options);
}
var ValidationHelper;
((ValidationHelper2) => {
  function asyncSubmit(form, validateBeforeSave, submitHandler) {
    var validator = Validator.getInstance(form);
    var valSettings = validator.settings;
    if (valSettings.abortHandler) {
      return false;
    }
    if (validateBeforeSave != null && validateBeforeSave() === false) {
      return false;
    }
    valSettings.abortHandler = validatorAbortHandler;
    valSettings.submitHandler = function() {
      submitHandler == null ? void 0 : submitHandler();
      return false;
    };
    Fluent.trigger(isArrayLike(form) ? form[0] : form, "submit");
    return true;
  }
  ValidationHelper2.asyncSubmit = asyncSubmit;
  function submit(form, validateBeforeSave, submitHandler) {
    var validator = Validator.getInstance(form);
    var valSettings = validator.settings;
    if (valSettings.abortHandler) {
      return false;
    }
    if (validateBeforeSave != null && validateBeforeSave() === false) {
      return false;
    }
    if (!validator.form()) {
      return false;
    }
    submitHandler == null ? void 0 : submitHandler();
    return true;
  }
  ValidationHelper2.submit = submit;
  function getValidator(elem) {
    return Validator.getInstance(elem);
  }
  ValidationHelper2.getValidator = getValidator;
  function validateElement(elem) {
    var validator = getValidator(elem);
    if (validator)
      validator.element(isArrayLike(elem) ? elem[0] : elem);
  }
  ValidationHelper2.validateElement = validateElement;
})(ValidationHelper || (ValidationHelper = {}));

// src/slick/aggregators.ts
import { NonDataRow, convertCompatFormatter, escapeHtml } from "@serenity-is/sleekgrid";
var Aggregators;
((Aggregators2) => {
  function Avg(field) {
    this.field_ = field;
    this.type_ = "Avg";
    this.init = function() {
      this.count_ = 0;
      this.nonNullCount_ = 0;
      this.sum_ = 0;
    };
    this.accumulate = function(item) {
      var val = item[this.field_];
      this.count_++;
      if (val != null && val !== "" && !isNaN(val)) {
        this.nonNullCount_++;
        this.sum_ += parseFloat(val);
      }
    };
    this.storeResult = function(groupTotals) {
      if (!groupTotals.avg) {
        groupTotals.avg = {};
      }
      if (this.nonNullCount_ != 0) {
        groupTotals.avg[this.field_] = this.sum_ / this.nonNullCount_;
      }
    };
  }
  Aggregators2.Avg = Avg;
  function WeightedAvg(field, weightedField) {
    this.field_ = field;
    this.type_ = "WeightedAvg";
    this.weightedField_ = weightedField;
    this.init = function() {
      this.sum_ = 0;
      this.weightedSum_ = 0;
    };
    this.accumulate = function(item) {
      var val = item[this.field_];
      var valWeighted = item[this.weightedField_];
      if (this.isValid(val) && this.isValid(valWeighted)) {
        this.weightedSum_ += parseFloat(valWeighted);
        this.sum_ += parseFloat(val) * parseFloat(valWeighted);
      }
    };
    this.storeResult = function(groupTotals) {
      if (!groupTotals.avg) {
        groupTotals.avg = {};
      }
      if (this.sum_ && this.weightedSum_) {
        groupTotals.avg[this.field_] = this.sum_ / this.weightedSum_;
      }
    };
    this.isValid = function(val) {
      return val !== null && val !== "" && !isNaN(val);
    };
  }
  Aggregators2.WeightedAvg = WeightedAvg;
  function Min(field) {
    this.field_ = field;
    this.type_ = "Min";
    this.init = function() {
      this.min_ = null;
    };
    this.accumulate = function(item) {
      var val = item[this.field_];
      if (val != null && val !== "" && !isNaN(val)) {
        if (this.min_ == null || val < this.min_) {
          this.min_ = val;
        }
      }
    };
    this.storeResult = function(groupTotals) {
      if (!groupTotals.min) {
        groupTotals.min = {};
      }
      groupTotals.min[this.field_] = this.min_;
    };
  }
  Aggregators2.Min = Min;
  function Max(field) {
    this.field_ = field;
    this.type_ = "Max";
    this.init = function() {
      this.max_ = null;
    };
    this.accumulate = function(item) {
      var val = item[this.field_];
      if (val != null && val !== "" && !isNaN(val)) {
        if (this.max_ == null || val > this.max_) {
          this.max_ = val;
        }
      }
    };
    this.storeResult = function(groupTotals) {
      if (!groupTotals.max) {
        groupTotals.max = {};
      }
      groupTotals.max[this.field_] = this.max_;
    };
  }
  Aggregators2.Max = Max;
  function Sum(field) {
    this.field_ = field;
    this.type_ = "Sum";
    this.init = function() {
      this.sum_ = null;
    };
    this.accumulate = function(item) {
      var val = item[this.field_];
      if (val != null && val !== "" && !isNaN(val)) {
        this.sum_ += parseFloat(val);
      }
    };
    this.storeResult = function(groupTotals) {
      if (!groupTotals.sum) {
        groupTotals.sum = {};
      }
      groupTotals.sum[this.field_] = this.sum_;
    };
  }
  Aggregators2.Sum = Sum;
})(Aggregators || (Aggregators = {}));
var AggregateFormatting;
((AggregateFormatting2) => {
  function formatMarkup(totals, column, aggType) {
    var _a68;
    var textKey = aggType.substring(0, 1).toUpperCase() + aggType.substring(1);
    var text2 = (_a68 = tryGetText("Enums.Serenity.SummaryType." + textKey)) != null ? _a68 : textKey;
    var value = totals[aggType][column.field];
    var formattedValue = formatValue(column, value);
    return "<span class='aggregate agg-" + aggType + "'  title='" + htmlEncode(text2) + "'>" + formattedValue + "</span>";
  }
  AggregateFormatting2.formatMarkup = formatMarkup;
  function formatValue(column, value) {
    var _a68, _b, _c;
    var formatter = (_a68 = column.format) != null ? _a68 : column.formatter ? convertCompatFormatter(column.formatter) : null;
    if (formatter != null) {
      var item = new NonDataRow();
      item[column.field] = value;
      try {
        var result = formatter({ column, escape: escapeHtml, item, value });
        if (result instanceof Element)
          return result.outerHTML;
        else if (result instanceof DocumentFragment)
          return Array.from(result.children).map((x) => x.outerHTML).join("");
        return result;
      } catch (e) {
      }
    }
    if (typeof value === "number") {
      var displayFormat = (_c = (_b = column.sourceItem) == null ? void 0 : _b.displayFormat) != null ? _c : "#,##0.##";
      return htmlEncode(formatNumber(value, displayFormat));
    } else
      return htmlEncode(value);
  }
  AggregateFormatting2.formatValue = formatValue;
  function groupTotalsFormatter(totals, column) {
    if (!totals || !column)
      return "";
    var text2 = null;
    ["sum", "avg", "min", "max", "cnt"].forEach(function(aggType) {
      if (text2 == null && totals[aggType] && totals[aggType][column.field] != null) {
        text2 = formatMarkup(totals, column, aggType);
        return false;
      }
    });
    return text2 || "";
  }
  AggregateFormatting2.groupTotalsFormatter = groupTotalsFormatter;
})(AggregateFormatting || (AggregateFormatting = {}));

// src/slick/remoteview.ts
import { EventData, EventEmitter, Group, GroupItemMetadataProvider, GroupTotals as GroupTotals2, gridDefaults } from "@serenity-is/sleekgrid";
var RemoteView = class {
  constructor(options) {
    var _a68;
    var self2 = this;
    if (gridDefaults != null && gridDefaults.groupTotalsFormatter === void 0)
      gridDefaults.groupTotalsFormatter = AggregateFormatting.groupTotalsFormatter;
    var idProperty;
    var items = [];
    var rows = [];
    var idxById = {};
    var rowsById = null;
    var filter = null;
    var updated = null;
    var suspend = 0;
    var sortAsc = true;
    var fastSortField;
    var sortComparer;
    var refreshHints = {};
    var prevRefreshHints = {};
    var filterArgs;
    var filteredItems = [];
    var compiledFilter;
    var compiledFilterWithCaching;
    var filterCache = [];
    var groupingInfoDefaults = {
      getter: null,
      formatter: null,
      comparer: function(a, b) {
        return a.value === b.value ? 0 : a.value > b.value ? 1 : -1;
      },
      predefinedValues: [],
      aggregateEmpty: false,
      aggregateCollapsed: false,
      aggregateChildGroups: false,
      collapsed: false,
      displayTotalsRow: true,
      lazyTotalsCalculation: false
    };
    var summaryOptions = {};
    var groupingInfos = [];
    var groups = [];
    var toggledGroupsByLevel = [];
    var groupingDelimiter = ":|:";
    var page = 1;
    var totalRows = 0;
    var onDataChanged = new EventEmitter();
    var onDataLoading = new EventEmitter();
    var onDataLoaded = new EventEmitter();
    var onGroupExpanded = new EventEmitter();
    var onGroupCollapsed = new EventEmitter();
    var onPagingInfoChanged = new EventEmitter();
    var onRowCountChanged = new EventEmitter();
    var onRowsChanged = new EventEmitter();
    var onRowsOrCountChanged = new EventEmitter();
    var loading = false;
    var errorMessage = null;
    var populateLocks = 0;
    var populateCalls = 0;
    var contentType;
    var dataType;
    var totalCount = null;
    var groupItemMetadataProvider = options.groupItemMetadataProvider;
    var localSort = (_a68 = options.localSort) != null ? _a68 : false;
    var intf;
    function beginUpdate() {
      suspend++;
    }
    function endUpdate() {
      suspend--;
      if (suspend <= 0)
        refresh();
    }
    function setRefreshHints(hints) {
      refreshHints = hints;
    }
    function setFilterArgs(args) {
      filterArgs = args;
    }
    function updateIdxById(startingIndex) {
      startingIndex = startingIndex || 0;
      var id;
      for (var i = startingIndex, l = items.length; i < l; i++) {
        id = items[i][idProperty];
        if (id === void 0) {
          var msg = "Each data element must implement a unique '" + idProperty + "' property. Object at index '" + i + "' has no identity value: ";
          msg += JSON.stringify(items[i]);
          throw msg;
        }
        idxById[id] = i;
      }
    }
    function ensureIdUniqueness() {
      var id;
      for (var i = 0, l = items.length; i < l; i++) {
        id = items[i][idProperty];
        if (id === void 0 || idxById[id] !== i) {
          var msg = "Each data element must implement a unique '" + idProperty + "' property. Object at index '" + i + "' ";
          if (id == void 0)
            msg += "has no identity value: ";
          else
            msg += "has repeated identity value '" + id + "': ";
          msg += JSON.stringify(items[i]);
          throw msg;
        }
      }
    }
    function getItems() {
      return items;
    }
    function getIdPropertyName() {
      return idProperty;
    }
    function setItems(data, newIdProperty) {
      if (newIdProperty != null && typeof newIdProperty == "string")
        idProperty = newIdProperty;
      items = filteredItems = data;
      if (localSort) {
        items.sort(getSortComparer());
      }
      idxById = {};
      rowsById = null;
      summaryOptions.totals = {};
      updateIdxById();
      ensureIdUniqueness();
      if (suspend) {
        recalc(items);
      } else {
        refresh();
      }
      onDataChanged.notify({ dataView: self2 }, null, self2);
    }
    function setPagingOptions(args) {
      var anyChange = false;
      if (args.rowsPerPage != void 0 && intf.rowsPerPage != args.rowsPerPage) {
        intf.rowsPerPage = args.rowsPerPage;
        anyChange = true;
      }
      if (args.page != void 0) {
        var newPage;
        if (!intf.rowsPerPage)
          newPage = 1;
        else if (totalCount == null)
          newPage = args.page;
        else
          newPage = Math.min(args.page, Math.ceil(totalCount / intf.rowsPerPage) + 1);
        if (newPage < 1)
          newPage = 1;
        if (newPage != page) {
          intf.seekToPage = newPage;
          anyChange = true;
        }
      }
      if (anyChange)
        populate();
    }
    function getPagingInfo() {
      return {
        rowsPerPage: intf.rowsPerPage,
        page,
        totalCount,
        loading: loading != null && loading != false,
        error: errorMessage,
        dataView: intf
      };
    }
    function getSortComparer() {
      if (sortComparer != null)
        return sortComparer;
      var cols = [];
      var asc = [];
      var sorts = intf.sortBy || [];
      for (var s of sorts) {
        if (s == null)
          continue;
        if (s.length > 5 && s.toLowerCase().substr(s.length - 5).toLowerCase() == " desc") {
          asc.push(false);
          cols.push(s.substr(0, s.length - 5));
        } else {
          asc.push(true);
          cols.push(s);
        }
      }
      return function(a, b) {
        for (var i = 0, l = cols.length; i < l; i++) {
          var field = cols[i];
          var sign = asc[i] ? 1 : -1;
          var value1 = a[field], value2 = b[field];
          var result = (value1 == value2 ? 0 : value1 > value2 ? 1 : -1) * sign;
          if (result != 0) {
            return result;
          }
        }
        return 0;
      };
    }
    function sort(comparer, ascending) {
      sortAsc = ascending;
      fastSortField = null;
      if (ascending === false) {
        items.reverse();
      }
      sortComparer = comparer;
      items.sort(getSortComparer());
      if (ascending === false) {
        items.reverse();
      }
      idxById = {};
      updateIdxById();
      refresh();
    }
    function getLocalSort() {
      return localSort;
    }
    function setLocalSort(value) {
      if (localSort != value) {
        localSort = value;
        sort();
      }
    }
    function fastSort(field, ascending) {
      sortAsc = ascending;
      fastSortField = field;
      sortComparer = null;
      var oldToString = Object.prototype.toString;
      Object.prototype.toString = typeof field === "function" ? field : function() {
        return this[field];
      };
      if (ascending === false) {
        items.reverse();
      }
      items.sort();
      Object.prototype.toString = oldToString;
      if (ascending === false) {
        items.reverse();
      }
      idxById = {};
      updateIdxById();
      refresh();
    }
    function reSort() {
      if (fastSortField)
        fastSort(fastSortField, sortAsc);
      else
        sort(sortComparer, sortAsc);
    }
    function getFilteredItems() {
      return filteredItems;
    }
    function getFilter() {
      return filter;
    }
    function setFilter(filterFn) {
      filter = filterFn;
      if (options.inlineFilters) {
        compiledFilter = compileFilter();
        compiledFilterWithCaching = compileFilterWithCaching();
      }
      refresh();
    }
    function getGrouping() {
      return groupingInfos;
    }
    function setSummaryOptions(summary) {
      summary = summary || {};
      summaryOptions.aggregators = summary.aggregators || [];
      summaryOptions.compiledAccumulators = [];
      summaryOptions.totals = {};
      var idx = summaryOptions.aggregators.length;
      while (idx--) {
        summaryOptions.compiledAccumulators[idx] = compileAccumulatorLoop(summaryOptions.aggregators[idx]);
      }
      setGrouping(groupingInfos || []);
    }
    function getGrandTotals() {
      summaryOptions.totals = summaryOptions.totals || {};
      if (!summaryOptions.totals.initialized) {
        summaryOptions.aggregators = summaryOptions.aggregators || [];
        summaryOptions.compiledAccumulators = summaryOptions.compiledAccumulators || [];
        var agg, idx = summaryOptions.aggregators.length;
        while (idx--) {
          agg = summaryOptions.aggregators[idx];
          agg.init();
          summaryOptions.compiledAccumulators[idx].call(agg, items);
          agg.storeResult(summaryOptions.totals);
        }
        summaryOptions.totals.initialized = true;
      }
      return summaryOptions.totals;
    }
    function setGrouping(groupingInfo) {
      if (!groupItemMetadataProvider) {
        groupItemMetadataProvider = new GroupItemMetadataProvider();
      }
      groups = [];
      toggledGroupsByLevel = [];
      groupingInfo = groupingInfo || [];
      groupingInfos = groupingInfo instanceof Array ? groupingInfo : [groupingInfo];
      for (var i = 0; i < groupingInfos.length; i++) {
        var gi = groupingInfos[i] = extend(extend({}, groupingInfoDefaults), deepClone(groupingInfos[i]));
        gi.aggregators = gi.aggregators || summaryOptions.aggregators || [];
        gi.getterIsAFn = typeof gi.getter === "function";
        gi.compiledAccumulators = [];
        var idx = gi.aggregators.length;
        while (idx--) {
          gi.compiledAccumulators[idx] = compileAccumulatorLoop(gi.aggregators[idx]);
        }
        toggledGroupsByLevel[i] = {};
      }
      refresh();
    }
    function getItemByIdx(i) {
      return items[i];
    }
    function getIdxById(id) {
      return idxById[id];
    }
    function ensureRowsByIdCache() {
      if (!rowsById) {
        rowsById = {};
        for (var i = 0, l = rows.length; i < l; i++) {
          rowsById[rows[i][idProperty]] = i;
        }
      }
    }
    function getRowByItem(item) {
      ensureRowsByIdCache();
      return rowsById[item[idProperty]];
    }
    function getRowById(id) {
      ensureRowsByIdCache();
      return rowsById[id];
    }
    function getItemById(id) {
      return items[idxById[id]];
    }
    function mapItemsToRows(itemArray) {
      var rows2 = [];
      ensureRowsByIdCache();
      for (var i = 0, l = itemArray.length; i < l; i++) {
        var row = rowsById[itemArray[i][idProperty]];
        if (row != null) {
          rows2[rows2.length] = row;
        }
      }
      return rows2;
    }
    function mapIdsToRows(idArray) {
      var rows2 = [];
      ensureRowsByIdCache();
      for (var i = 0, l = idArray.length; i < l; i++) {
        var row = rowsById[idArray[i]];
        if (row != null) {
          rows2[rows2.length] = row;
        }
      }
      return rows2;
    }
    function mapRowsToIds(rowArray) {
      var ids = [];
      for (var i = 0, l = rowArray.length; i < l; i++) {
        if (rowArray[i] < rows.length) {
          ids[ids.length] = rows[rowArray[i]][idProperty];
        }
      }
      return ids;
    }
    function updateItem(id, item) {
      if (idxById[id] === void 0) {
        throw new Error("Invalid id");
      }
      if (id !== item[idProperty]) {
        var newId = item[idProperty];
        if (newId == null) {
          throw new Error("Cannot update item to associate with a null id");
        }
        if (idxById[newId] !== void 0) {
          throw new Error("Cannot update item to associate with a non-unique id");
        }
        idxById[newId] = idxById[id];
        delete idxById[id];
        if (updated && updated[id]) {
          delete updated[id];
        }
        id = newId;
      }
      items[idxById[id]] = item;
      if (!updated) {
        updated = {};
      }
      updated[id] = true;
      refresh();
    }
    function insertItem(insertBefore, item) {
      items.splice(insertBefore, 0, item);
      updateIdxById(insertBefore);
      refresh();
    }
    function addItem(item) {
      items.push(item);
      updateIdxById(items.length - 1);
      refresh();
    }
    function deleteItem(id) {
      var idx = idxById[id];
      if (idx === void 0) {
        throw "Invalid id";
      }
      delete idxById[id];
      items.splice(idx, 1);
      updateIdxById(idx);
      refresh();
    }
    function sortedAddItem(item) {
      insertItem(sortedIndex(item), item);
    }
    function sortedUpdateItem(id, item) {
      if (idxById[id] === void 0 || id !== item[idProperty]) {
        throw new Error("Invalid or non-matching id " + idxById[id]);
      }
      var comparer = getSortComparer();
      var oldItem = getItemById(id);
      if (comparer(oldItem, item) !== 0) {
        deleteItem(id);
        sortedAddItem(item);
      } else {
        updateItem(id, item);
      }
    }
    function sortedIndex(searchItem) {
      var low = 0, high = items.length;
      var comparer = getSortComparer();
      while (low < high) {
        var mid = low + high >>> 1;
        if (comparer(items[mid], searchItem) === -1) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return low;
    }
    function getRows() {
      return rows;
    }
    function getLength() {
      return rows.length;
    }
    function getItem(i) {
      var item = rows[i];
      if (item && item.__group && item.totals && !item.totals.initialized) {
        var gi = groupingInfos[item.level];
        if (!gi.displayTotalsRow) {
          calculateTotals(item.totals);
          item.title = gi.formatter ? gi.formatter(item) : htmlEncode(item.value);
        }
      } else if (item && item.__groupTotals && !item.initialized) {
        calculateTotals(item);
      }
      return item;
    }
    function getItemMetadata(i) {
      var item = rows[i];
      if (item === void 0) {
        return null;
      }
      if (item.__group) {
        return groupItemMetadataProvider.getGroupRowMetadata(item);
      }
      if (item.__groupTotals) {
        return groupItemMetadataProvider.getTotalsRowMetadata(item);
      }
      return options.getItemMetadata && options.getItemMetadata(item, i) || null;
    }
    function expandCollapseAllGroups(level, collapse) {
      if (level == null) {
        for (var i = 0; i < groupingInfos.length; i++) {
          toggledGroupsByLevel[i] = {};
          groupingInfos[i].collapsed = collapse;
          if (collapse === true) {
            onGroupCollapsed.notify({ level: i, groupingKey: null });
          } else {
            onGroupExpanded.notify({ level: i, groupingKey: null });
          }
        }
      } else {
        toggledGroupsByLevel[level] = {};
        groupingInfos[level].collapsed = collapse;
        if (collapse === true) {
          onGroupCollapsed.notify({ level, groupingKey: null });
        } else {
          onGroupExpanded.notify({ level, groupingKey: null });
        }
      }
      refresh();
    }
    function collapseAllGroups(level) {
      expandCollapseAllGroups(level, true);
    }
    function expandAllGroups(level) {
      expandCollapseAllGroups(level, false);
    }
    function resolveLevelAndGroupingKey(args) {
      var arg0 = args[0];
      if (args.length === 1 && arg0.indexOf(groupingDelimiter) !== -1) {
        return { level: arg0.split(groupingDelimiter).length - 1, groupingKey: arg0 };
      } else {
        return { level: args.length - 1, groupingKey: args.join(groupingDelimiter) };
      }
    }
    function expandCollapseGroup(args, collapse) {
      var opts = resolveLevelAndGroupingKey(args);
      toggledGroupsByLevel[opts.level][opts.groupingKey] = groupingInfos[opts.level].collapsed ^ collapse;
      if (collapse)
        onGroupCollapsed.notify({ level: opts.level, groupingKey: opts.groupingKey });
      else
        onGroupExpanded.notify({ level: opts.level, groupingKey: opts.groupingKey });
      refresh();
    }
    function collapseGroup(varArgs) {
      var args = Array.prototype.slice.call(arguments);
      expandCollapseGroup(args, true);
    }
    function expandGroup(varArgs) {
      var args = Array.prototype.slice.call(arguments);
      expandCollapseGroup(args, false);
    }
    function getGroups() {
      return groups;
    }
    function getOrCreateGroup(groupsByVal, val, level, parentGroup, groups2) {
      var group = groupsByVal[val];
      if (!group) {
        group = new Group();
        group.value = val;
        group.level = level;
        group.groupingKey = (parentGroup ? parentGroup.groupingKey + groupingDelimiter : "") + val;
        groups2[groups2.length] = group;
        groupsByVal[val] = group;
      }
      return group;
    }
    function extractGroups(rows2, parentGroup) {
      var group;
      var val;
      var groups2 = [];
      var groupsByVal = {};
      var r;
      var level = parentGroup ? parentGroup.level + 1 : 0;
      var gi = groupingInfos[level];
      for (var i = 0, l = gi.predefinedValues.length; i < l; i++) {
        val = gi.predefinedValues[i];
        group = getOrCreateGroup(groupsByVal, val, level, parentGroup, groups2);
      }
      for (var i = 0, l = rows2.length; i < l; i++) {
        r = rows2[i];
        val = gi.getterIsAFn ? gi.getter(r) : r[gi.getter];
        group = getOrCreateGroup(groupsByVal, val, level, parentGroup, groups2);
        group.rows[group.count++] = r;
      }
      if (level < groupingInfos.length - 1) {
        for (var i = 0; i < groups2.length; i++) {
          group = groups2[i];
          group.groups = extractGroups(group.rows, group);
        }
      }
      if (groups2.length) {
        addTotals(groups2, level);
      }
      groups2.sort(groupingInfos[level].comparer);
      return groups2;
    }
    function calculateTotals(totals) {
      var group = totals.group;
      var gi = groupingInfos[group.level];
      var isLeafLevel = group.level == groupingInfos.length;
      var agg, idx = gi.aggregators.length;
      if (!isLeafLevel && gi.aggregateChildGroups) {
        var i = group.groups.length;
        while (i--) {
          if (!group.groups[i].totals.initialized) {
            calculateTotals(group.groups[i].totals);
          }
        }
      }
      while (idx--) {
        agg = gi.aggregators[idx];
        agg.init();
        if (!isLeafLevel && gi.aggregateChildGroups) {
          gi.compiledAccumulators[idx].call(agg, group.groups);
        } else {
          gi.compiledAccumulators[idx].call(agg, group.rows);
        }
        agg.storeResult(totals);
      }
      totals.initialized = true;
    }
    function addGroupTotals(group) {
      var gi = groupingInfos[group.level];
      var totals = new GroupTotals2();
      totals.group = group;
      group.totals = totals;
      if (!gi.lazyTotalsCalculation) {
        calculateTotals(totals);
      }
    }
    function addTotals(groups2, level) {
      level = level || 0;
      var gi = groupingInfos[level];
      var groupCollapsed = gi.collapsed;
      var toggledGroups = toggledGroupsByLevel[level];
      var idx = groups2.length, g;
      while (idx--) {
        g = groups2[idx];
        if (g.collapsed && !gi.aggregateCollapsed) {
          continue;
        }
        if (g.groups) {
          addTotals(g.groups, level + 1);
        }
        if (gi.aggregators.length && (gi.aggregateEmpty || g.rows.length || g.groups && g.groups.length)) {
          addGroupTotals(g);
        }
        g.collapsed = groupCollapsed ^ toggledGroups[g.groupingKey];
        g.title = gi.formatter ? gi.formatter(g) : htmlEncode(g.value);
      }
    }
    function flattenGroupedRows(groups2, level) {
      level = level || 0;
      var gi = groupingInfos[level];
      var groupedRows = [], rows2, gl = 0, g;
      for (var i = 0, l = groups2.length; i < l; i++) {
        g = groups2[i];
        groupedRows[gl++] = g;
        if (!g.collapsed) {
          rows2 = g.groups ? flattenGroupedRows(g.groups, level + 1) : g.rows;
          for (var j = 0, jj = rows2.length; j < jj; j++) {
            groupedRows[gl++] = rows2[j];
          }
        }
        if (g.totals && gi.displayTotalsRow && (!g.collapsed || gi.aggregateCollapsed)) {
          groupedRows[gl++] = g.totals;
        }
      }
      return groupedRows;
    }
    function getFunctionInfo(fn) {
      var fnRegex = /^function[^(]*\(([^)]*)\)\s*{([\s\S]*)}$/;
      var matches = fn.toString().match(fnRegex);
      return {
        params: matches[1].split(","),
        body: matches[2]
      };
    }
    function compileAccumulatorLoop(aggregator) {
      var accumulatorInfo = getFunctionInfo(aggregator.accumulate);
      var fn = new Function(
        "_items",
        "for (var " + accumulatorInfo.params[0] + ", _i=0, _il=_items.length; _i<_il; _i++) {" + accumulatorInfo.params[0] + " = _items[_i]; " + accumulatorInfo.body + "}"
      );
      return fn;
    }
    function compileFilter() {
      var filterInfo = getFunctionInfo(filter);
      var filterBody = filterInfo.body.replace(/return false\s*([;}]|$)/gi, "{ continue _coreloop; }$1").replace(/return true\s*([;}]|$)/gi, "{ _retval[_idx++] = $item$; continue _coreloop; }$1").replace(
        /return ([^;}]+?)\s*([;}]|$)/gi,
        "{ if ($1) { _retval[_idx++] = $item$; }; continue _coreloop; }$2"
      );
      var tpl = [
        //"function(_items, _args) { ",
        "var _retval = [], _idx = 0; ",
        "var $item$, $args$ = _args; ",
        "_coreloop: ",
        "for (var _i = 0, _il = _items.length; _i < _il; _i++) { ",
        "$item$ = _items[_i]; ",
        "$filter$; ",
        "} ",
        "return _retval; "
        //"}"
      ].join("");
      tpl = tpl.replace(/\$filter\$/gi, filterBody);
      tpl = tpl.replace(/\$item\$/gi, filterInfo.params[0]);
      tpl = tpl.replace(/\$args\$/gi, filterInfo.params[1]);
      var fn = new Function("_items,_args", tpl);
      fn.displayName = fn.name = "compiledFilter";
      return fn;
    }
    function compileFilterWithCaching() {
      var filterInfo = getFunctionInfo(filter);
      var filterBody = filterInfo.body.replace(/return false\s*([;}]|$)/gi, "{ continue _coreloop; }$1").replace(/return true\s*([;}]|$)/gi, "{ _cache[_i] = true;_retval[_idx++] = $item$; continue _coreloop; }$1").replace(
        /return ([^;}]+?)\s*([;}]|$)/gi,
        "{ if ((_cache[_i] = $1)) { _retval[_idx++] = $item$; }; continue _coreloop; }$2"
      );
      var tpl = [
        //"function(_items, _args, _cache) { ",
        "var _retval = [], _idx = 0; ",
        "var $item$, $args$ = _args; ",
        "_coreloop: ",
        "for (var _i = 0, _il = _items.length; _i < _il; _i++) { ",
        "$item$ = _items[_i]; ",
        "if (_cache[_i]) { ",
        "_retval[_idx++] = $item$; ",
        "continue _coreloop; ",
        "} ",
        "$filter$; ",
        "} ",
        "return _retval; "
        //"}"
      ].join("");
      tpl = tpl.replace(/\$filter\$/gi, filterBody);
      tpl = tpl.replace(/\$item\$/gi, filterInfo.params[0]);
      tpl = tpl.replace(/\$args\$/gi, filterInfo.params[1]);
      var fn = new Function("_items,_args,_cache", tpl);
      var fnName = "compiledFilterWithCaching";
      fn.displayName = fnName;
      fn.name = setFunctionName(fn, fnName);
      return fn;
    }
    function setFunctionName(fn, fnName) {
      try {
        Object.defineProperty(fn, "name", {
          writable: true,
          value: fnName
        });
      } catch (err) {
        fn.name = fnName;
      }
    }
    function uncompiledFilter(items2, args) {
      var retval = [], idx = 0;
      for (var i = 0, ii = items2.length; i < ii; i++) {
        if (filter(items2[i], args)) {
          retval[idx++] = items2[i];
        }
      }
      return retval;
    }
    function uncompiledFilterWithCaching(items2, args, cache) {
      var retval = [], idx = 0, item;
      for (var i = 0, ii = items2.length; i < ii; i++) {
        item = items2[i];
        if (cache[i]) {
          retval[idx++] = item;
        } else if (filter(item, args)) {
          retval[idx++] = item;
          cache[i] = true;
        }
      }
      return retval;
    }
    function getFilteredAndPagedItems(items2) {
      if (filter) {
        var batchFilter = options.inlineFilters ? compiledFilter : uncompiledFilter;
        var batchFilterWithCaching = options.inlineFilters ? compiledFilterWithCaching : uncompiledFilterWithCaching;
        if (refreshHints.isFilterNarrowing) {
          filteredItems = batchFilter(filteredItems, filterArgs);
        } else if (refreshHints.isFilterExpanding) {
          filteredItems = batchFilterWithCaching(items2, filterArgs, filterCache);
        } else if (!refreshHints.isFilterUnchanged) {
          filteredItems = batchFilter(items2, filterArgs);
        }
      } else {
        filteredItems = items2.concat();
      }
      return { totalRows: filteredItems.length, rows: filteredItems };
    }
    function getRowDiffs(rows2, newRows) {
      var item, r, eitherIsNonData, diff = [];
      var from = 0, to = newRows.length;
      if (refreshHints && refreshHints.ignoreDiffsBefore) {
        from = Math.max(
          0,
          Math.min(newRows.length, refreshHints.ignoreDiffsBefore)
        );
      }
      if (refreshHints && refreshHints.ignoreDiffsAfter) {
        to = Math.min(
          newRows.length,
          Math.max(0, refreshHints.ignoreDiffsAfter)
        );
      }
      for (var i = from, rl = rows2.length; i < to; i++) {
        if (i >= rl) {
          diff[diff.length] = i;
        } else {
          item = newRows[i];
          r = rows2[i];
          if (groupingInfos.length && (eitherIsNonData = item.__nonDataRow || r.__nonDataRow) && item.__group !== r.__group || item.__group && !item.equals(r) || eitherIsNonData && // no good way to compare totals since they are arbitrary DTOs
          // deep object comparison is pretty expensive
          // always considering them 'dirty' seems easier for the time being
          (item.__groupTotals || r.__groupTotals) || item[idProperty] != r[idProperty] || updated && updated[item[idProperty]]) {
            diff[diff.length] = i;
          }
        }
      }
      return diff;
    }
    function recalc(_items) {
      rowsById = null;
      if (refreshHints.isFilterNarrowing != prevRefreshHints.isFilterNarrowing || refreshHints.isFilterExpanding != prevRefreshHints.isFilterExpanding) {
        filterCache = [];
      }
      var filteredItems2 = getFilteredAndPagedItems(_items);
      totalRows = filteredItems2.totalRows;
      var newRows = filteredItems2.rows;
      summaryOptions.totals = {};
      groups = [];
      if (groupingInfos.length) {
        groups = extractGroups(newRows);
        if (groups.length) {
          newRows = flattenGroupedRows(groups);
        }
      }
      var diff = getRowDiffs(rows, newRows);
      rows = newRows;
      return diff;
    }
    function refresh() {
      if (suspend) {
        return;
      }
      var countBefore = rows.length;
      var totalRowsBefore = totalRows;
      var diff = recalc(items);
      updated = null;
      prevRefreshHints = refreshHints;
      refreshHints = {};
      if (totalRowsBefore !== totalRows) {
        onPagingInfoChanged.notify(getPagingInfo(), null, self2);
      }
      if (countBefore !== rows.length) {
        onRowCountChanged.notify({ previous: countBefore, current: rows.length, dataView: self2 }, null, self2);
      }
      if (diff.length > 0) {
        onRowsChanged.notify({ rows: diff, dataView: self2 }, null, self2);
      }
      if (countBefore !== rows.length || diff.length > 0) {
        onRowsOrCountChanged.notify({
          rowsDiff: diff,
          previousRowCount: countBefore,
          currentRowCount: rows.length,
          rowCountChanged: countBefore !== rows.length,
          rowsChanged: diff.length > 0,
          dataView: self2
        }, null, self2);
      }
    }
    function syncGridSelection(grid, preserveHidden, preserveHiddenOnSelectionChange) {
      var self3 = this;
      var inHandler;
      var selectedRowIds = self3.mapRowsToIds(grid.getSelectedRows());
      var onSelectedRowIdsChanged = new EventEmitter();
      function setSelectedRowIds(rowIds) {
        if (selectedRowIds.join(",") == rowIds.join(",")) {
          return;
        }
        selectedRowIds = rowIds;
        onSelectedRowIdsChanged.notify({
          "grid": grid,
          "ids": selectedRowIds,
          "dataView": self3
        }, new EventData(), self3);
      }
      function update() {
        if (selectedRowIds.length > 0) {
          inHandler = true;
          var selectedRows = self3.mapIdsToRows(selectedRowIds);
          if (!preserveHidden) {
            setSelectedRowIds(self3.mapRowsToIds(selectedRows));
          }
          grid.setSelectedRows(selectedRows);
          inHandler = false;
        }
      }
      grid.onSelectedRowsChanged.subscribe(function(e, args) {
        if (inHandler) {
          return;
        }
        var newSelectedRowIds = self3.mapRowsToIds(grid.getSelectedRows());
        if (!preserveHiddenOnSelectionChange || !grid.getOptions().multiSelect) {
          setSelectedRowIds(newSelectedRowIds);
        } else {
          var existing = selectedRowIds.filter((id) => self3.getRowById(id) === void 0);
          setSelectedRowIds(existing.concat(newSelectedRowIds));
        }
      });
      this.onRowsChanged.subscribe(update);
      this.onRowCountChanged.subscribe(update);
      return onSelectedRowIdsChanged;
    }
    function syncGridCellCssStyles(grid, key) {
      var hashById;
      var inHandler;
      storeCellCssStyles(grid.getCellCssStyles(key));
      function storeCellCssStyles(hash) {
        hashById = {};
        for (var row in hash) {
          var id = rows[row][idProperty];
          hashById[id] = hash[row];
        }
      }
      function update() {
        if (hashById) {
          inHandler = true;
          ensureRowsByIdCache();
          var newHash = {};
          for (var id in hashById) {
            var row = rowsById[id];
            if (row != void 0) {
              newHash[row] = hashById[id];
            }
          }
          grid.setCellCssStyles(key, newHash);
          inHandler = false;
        }
      }
      var subFunc = function(e, args) {
        if (inHandler) {
          return;
        }
        if (key != args.key) {
          return;
        }
        if (args.hash) {
          storeCellCssStyles(args.hash);
        } else {
          grid.onCellCssStylesChanged.unsubscribe(subFunc);
          onRowsOrCountChanged.unsubscribe(update);
        }
      };
      grid.onCellCssStylesChanged.subscribe(subFunc);
      onRowsOrCountChanged.subscribe(update);
    }
    function addData(data) {
      if (intf.onProcessData && data)
        data = intf.onProcessData(data, intf) || data;
      errorMessage = null;
      loading && typeof loading !== "boolean" && loading.abort();
      loading = false;
      if (!data) {
        errorMessage = intf.errormsg;
        onPagingInfoChanged.notify(getPagingInfo());
        return false;
      }
      data.TotalCount = data.TotalCount || 0;
      data.Entities = data.Entities || [];
      if (!data.Skip || !intf.rowsPerPage && !data.Take)
        data.Page = 1;
      else
        data.Page = Math.ceil(data.Skip / (data.Take || intf.rowsPerPage)) + 1;
      page = data.Page;
      totalCount = data.TotalCount;
      setItems(data.Entities);
      onPagingInfoChanged.notify(getPagingInfo());
    }
    function populate() {
      if (populateLocks > 0) {
        populateCalls++;
        return;
      }
      populateCalls = 0;
      loading && typeof loading !== "boolean" && loading.abort();
      if (intf.onSubmit) {
        var gh = intf.onSubmit(intf);
        if (gh === false)
          return false;
      }
      onDataLoading.notify(this);
      if (!intf.url)
        return false;
      if (!intf.seekToPage)
        intf.seekToPage = 1;
      var request = {};
      var skip = (intf.seekToPage - 1) * intf.rowsPerPage;
      if (skip)
        request.Skip = skip;
      if (intf.rowsPerPage)
        request.Take = intf.rowsPerPage;
      if (intf.sortBy && intf.sortBy.length) {
        if (typeof intf.sortBy !== "string")
          request.Sort = intf.sortBy;
        else {
          request.Sort = [intf.sortBy];
        }
      }
      if (intf.params) {
        request = extend(request, intf.params);
      }
      const controller = new AbortController();
      var serviceOptions2 = {
        allowRedirect: false,
        cache: "no-store",
        method: intf.method,
        headers: {
          "Content-Type": contentType,
          "Accept": dataType == "json" || dataType == "application/json" ? "application/json" : dataType
        },
        request,
        url: intf.url,
        signal: controller.signal,
        errorMode: "notification",
        onSuccess: function(response) {
          addData(response);
        },
        onCleanup: function() {
          loading = false;
          onPagingInfoChanged.notify(getPagingInfo());
          onDataLoaded.notify(this);
        }
      };
      if (intf.onAjaxCall) {
        var ah = intf.onAjaxCall(this, serviceOptions2);
        if (ah === false) {
          loading = false;
          onPagingInfoChanged.notify(getPagingInfo());
          return false;
        }
      }
      serviceCall(serviceOptions2);
      onPagingInfoChanged.notify(getPagingInfo());
      loading = controller;
    }
    function populateLock() {
      if (populateLocks == 0)
        populateCalls = 0;
      populateLocks++;
    }
    function populateUnlock() {
      if (populateLocks > 0) {
        populateLocks--;
        if (populateLocks == 0 && populateCalls > 0)
          populate();
      }
    }
    function getGroupItemMetadataProvider() {
      return groupItemMetadataProvider;
    }
    function setGroupItemMetadataProvider(value) {
      groupItemMetadataProvider = value;
    }
    idProperty = options.idField || "id";
    contentType = options.contentType || "application/json";
    dataType = options.dataType || "json";
    filter = options.filter || null;
    intf = {
      // methods
      beginUpdate,
      endUpdate,
      setPagingOptions,
      getPagingInfo,
      getIdPropertyName,
      getRows,
      getItems,
      setItems,
      getFilter,
      getFilteredItems,
      setFilter,
      sort,
      fastSort,
      reSort,
      getLocalSort,
      setLocalSort,
      setSummaryOptions,
      getGrandTotals,
      setGrouping,
      getGrouping,
      collapseAllGroups,
      expandAllGroups,
      collapseGroup,
      expandGroup,
      getGroups,
      getIdxById,
      getRowByItem,
      getRowById,
      getItemById,
      getItemByIdx,
      mapItemsToRows,
      mapRowsToIds,
      mapIdsToRows,
      setRefreshHints,
      setFilterArgs,
      refresh,
      updateItem,
      insertItem,
      addItem,
      deleteItem,
      sortedAddItem,
      sortedUpdateItem,
      syncGridSelection,
      syncGridCellCssStyles,
      getLength,
      getItem,
      getItemMetadata,
      getGroupItemMetadataProvider,
      setGroupItemMetadataProvider,
      onRowCountChanged,
      onRowsChanged,
      onRowsOrCountChanged,
      onPagingInfoChanged,
      onGroupExpanded,
      onGroupCollapsed,
      addData,
      populate,
      populateLock,
      populateUnlock,
      onDataChanged,
      onDataLoaded,
      onDataLoading,
      params: options.params || {},
      onSubmit: options.onSubmit || null,
      url: options.url || null,
      rowsPerPage: options.rowsPerPage || 0,
      seekToPage: options.seekToPage || 1,
      onAjaxCall: options.onAjaxCall || null,
      onProcessData: options.onProcessData || null,
      method: options.method || "POST",
      errormsg: localText("Controls.Pager.DefaultLoadError"),
      sortBy: typeof options.sortBy == "string" ? [options.sortBy] : options.sortBy || [],
      idField: idProperty
    };
    if (options.url && options.autoLoad) {
      populate();
    }
    return intf;
  }
};

// src/types/attributes.ts
function attr(name) {
  return function(target, _context) {
    return registerClass(target, "Serenity." + name + "Attribute");
  };
}
var _EnumKeyAttribute_decorators, _init;
_EnumKeyAttribute_decorators = [attr("EnumKey")];
var EnumKeyAttribute = class {
  constructor(value) {
    this.value = value;
  }
};
_init = __decoratorStart(null);
EnumKeyAttribute = __decorateElement(_init, 0, "EnumKeyAttribute", _EnumKeyAttribute_decorators, EnumKeyAttribute);
__runInitializers(_init, 1, EnumKeyAttribute);
var _DisplayNameAttribute_decorators, _init2;
_DisplayNameAttribute_decorators = [attr("DisplayName")];
var DisplayNameAttribute = class {
  constructor(displayName) {
    this.displayName = displayName;
  }
};
_init2 = __decoratorStart(null);
DisplayNameAttribute = __decorateElement(_init2, 0, "DisplayNameAttribute", _DisplayNameAttribute_decorators, DisplayNameAttribute);
__runInitializers(_init2, 1, DisplayNameAttribute);
var _CategoryAttribute_decorators, _init3;
_CategoryAttribute_decorators = [attr("Category")];
var CategoryAttribute = class {
  constructor(category) {
    this.category = category;
  }
};
_init3 = __decoratorStart(null);
CategoryAttribute = __decorateElement(_init3, 0, "CategoryAttribute", _CategoryAttribute_decorators, CategoryAttribute);
__runInitializers(_init3, 1, CategoryAttribute);
var _ColumnsKeyAttribute_decorators, _init4;
_ColumnsKeyAttribute_decorators = [attr("ColumnsKey")];
var ColumnsKeyAttribute = class {
  constructor(value) {
    this.value = value;
  }
};
_init4 = __decoratorStart(null);
ColumnsKeyAttribute = __decorateElement(_init4, 0, "ColumnsKeyAttribute", _ColumnsKeyAttribute_decorators, ColumnsKeyAttribute);
__runInitializers(_init4, 1, ColumnsKeyAttribute);
var _CloseButtonAttribute_decorators, _init5;
_CloseButtonAttribute_decorators = [attr("CloseButton")];
var CloseButtonAttribute = class {
  constructor(value = true) {
    this.value = value;
  }
};
_init5 = __decoratorStart(null);
CloseButtonAttribute = __decorateElement(_init5, 0, "CloseButtonAttribute", _CloseButtonAttribute_decorators, CloseButtonAttribute);
__runInitializers(_init5, 1, CloseButtonAttribute);
var _CssClassAttribute_decorators, _init6;
_CssClassAttribute_decorators = [attr("CssClass")];
var CssClassAttribute = class {
  constructor(cssClass) {
    this.cssClass = cssClass;
  }
};
_init6 = __decoratorStart(null);
CssClassAttribute = __decorateElement(_init6, 0, "CssClassAttribute", _CssClassAttribute_decorators, CssClassAttribute);
__runInitializers(_init6, 1, CssClassAttribute);
var _DefaultValueAttribute_decorators, _init7;
_DefaultValueAttribute_decorators = [attr("DefaultValue")];
var DefaultValueAttribute = class {
  constructor(value) {
    this.value = value;
  }
};
_init7 = __decoratorStart(null);
DefaultValueAttribute = __decorateElement(_init7, 0, "DefaultValueAttribute", _DefaultValueAttribute_decorators, DefaultValueAttribute);
__runInitializers(_init7, 1, DefaultValueAttribute);
var _DialogTypeAttribute_decorators, _init8;
_DialogTypeAttribute_decorators = [attr("DialogType")];
var DialogTypeAttribute = class {
  constructor(value) {
    this.value = value;
  }
};
_init8 = __decoratorStart(null);
DialogTypeAttribute = __decorateElement(_init8, 0, "DialogTypeAttribute", _DialogTypeAttribute_decorators, DialogTypeAttribute);
__runInitializers(_init8, 1, DialogTypeAttribute);
var _EditorOptionAttribute_decorators, _init9;
_EditorOptionAttribute_decorators = [attr("EditorOption")];
var EditorOptionAttribute = class {
  constructor(key, value) {
    this.key = key;
    this.value = value;
  }
};
_init9 = __decoratorStart(null);
EditorOptionAttribute = __decorateElement(_init9, 0, "EditorOptionAttribute", _EditorOptionAttribute_decorators, EditorOptionAttribute);
__runInitializers(_init9, 1, EditorOptionAttribute);
var EditorTypeAttributeBase = class {
  constructor(editorType) {
    this.editorType = editorType;
  }
  setParams(editorParams) {
  }
};
registerClass(EditorTypeAttributeBase, "Serenity.EditorTypeAttributeBase");
var _EditorTypeAttribute_decorators, _init10, _a2;
_EditorTypeAttribute_decorators = [attr("EditorType")];
var EditorTypeAttribute = class extends (_a2 = EditorTypeAttributeBase) {
  constructor(editorType) {
    super(editorType);
  }
};
_init10 = __decoratorStart(_a2);
EditorTypeAttribute = __decorateElement(_init10, 0, "EditorTypeAttribute", _EditorTypeAttribute_decorators, EditorTypeAttribute);
__runInitializers(_init10, 1, EditorTypeAttribute);
var _ElementAttribute_decorators, _init11;
_ElementAttribute_decorators = [attr("Element")];
var ElementAttribute = class {
  constructor(value) {
    this.value = value;
  }
};
_init11 = __decoratorStart(null);
ElementAttribute = __decorateElement(_init11, 0, "ElementAttribute", _ElementAttribute_decorators, ElementAttribute);
__runInitializers(_init11, 1, ElementAttribute);
var _EntityTypeAttribute_decorators, _init12;
_EntityTypeAttribute_decorators = [attr("EntityType")];
var EntityTypeAttribute = class {
  constructor(value) {
    this.value = value;
  }
};
_init12 = __decoratorStart(null);
EntityTypeAttribute = __decorateElement(_init12, 0, "EntityTypeAttribute", _EntityTypeAttribute_decorators, EntityTypeAttribute);
__runInitializers(_init12, 1, EntityTypeAttribute);
var _FilterableAttribute_decorators, _init13;
_FilterableAttribute_decorators = [attr("Filterable")];
var FilterableAttribute = class {
  constructor(value = true) {
    this.value = value;
  }
};
_init13 = __decoratorStart(null);
FilterableAttribute = __decorateElement(_init13, 0, "FilterableAttribute", _FilterableAttribute_decorators, FilterableAttribute);
__runInitializers(_init13, 1, FilterableAttribute);
var _FlexifyAttribute_decorators, _init14;
_FlexifyAttribute_decorators = [attr("Flexify")];
var FlexifyAttribute = class {
  constructor(value = true) {
    this.value = value;
  }
};
_init14 = __decoratorStart(null);
FlexifyAttribute = __decorateElement(_init14, 0, "FlexifyAttribute", _FlexifyAttribute_decorators, FlexifyAttribute);
__runInitializers(_init14, 1, FlexifyAttribute);
var _FormKeyAttribute_decorators, _init15;
_FormKeyAttribute_decorators = [attr("FormKey")];
var FormKeyAttribute = class {
  constructor(value) {
    this.value = value;
  }
};
_init15 = __decoratorStart(null);
FormKeyAttribute = __decorateElement(_init15, 0, "FormKeyAttribute", _FormKeyAttribute_decorators, FormKeyAttribute);
__runInitializers(_init15, 1, FormKeyAttribute);
var _GeneratedCodeAttribute_decorators, _init16;
_GeneratedCodeAttribute_decorators = [attr("GeneratedCode")];
var GeneratedCodeAttribute = class {
  constructor(origin) {
    this.origin = origin;
  }
};
_init16 = __decoratorStart(null);
GeneratedCodeAttribute = __decorateElement(_init16, 0, "GeneratedCodeAttribute", _GeneratedCodeAttribute_decorators, GeneratedCodeAttribute);
__runInitializers(_init16, 1, GeneratedCodeAttribute);
var _HiddenAttribute_decorators, _init17;
_HiddenAttribute_decorators = [attr("Hidden")];
var HiddenAttribute = class {
  constructor() {
  }
};
_init17 = __decoratorStart(null);
HiddenAttribute = __decorateElement(_init17, 0, "HiddenAttribute", _HiddenAttribute_decorators, HiddenAttribute);
__runInitializers(_init17, 1, HiddenAttribute);
var _HintAttribute_decorators, _init18;
_HintAttribute_decorators = [attr("Hint")];
var HintAttribute = class {
  constructor(hint) {
    this.hint = hint;
  }
};
_init18 = __decoratorStart(null);
HintAttribute = __decorateElement(_init18, 0, "HintAttribute", _HintAttribute_decorators, HintAttribute);
__runInitializers(_init18, 1, HintAttribute);
var _IdPropertyAttribute_decorators, _init19;
_IdPropertyAttribute_decorators = [attr("IdProperty")];
var IdPropertyAttribute = class {
  constructor(value) {
    this.value = value;
  }
};
_init19 = __decoratorStart(null);
IdPropertyAttribute = __decorateElement(_init19, 0, "IdPropertyAttribute", _IdPropertyAttribute_decorators, IdPropertyAttribute);
__runInitializers(_init19, 1, IdPropertyAttribute);
var _InsertableAttribute_decorators, _init20;
_InsertableAttribute_decorators = [attr("Insertable")];
var InsertableAttribute = class {
  constructor(value = true) {
    this.value = value;
  }
};
_init20 = __decoratorStart(null);
InsertableAttribute = __decorateElement(_init20, 0, "InsertableAttribute", _InsertableAttribute_decorators, InsertableAttribute);
__runInitializers(_init20, 1, InsertableAttribute);
var _IsActivePropertyAttribute_decorators, _init21;
_IsActivePropertyAttribute_decorators = [attr("IsActiveProperty")];
var IsActivePropertyAttribute = class {
  constructor(value) {
    this.value = value;
  }
};
_init21 = __decoratorStart(null);
IsActivePropertyAttribute = __decorateElement(_init21, 0, "IsActivePropertyAttribute", _IsActivePropertyAttribute_decorators, IsActivePropertyAttribute);
__runInitializers(_init21, 1, IsActivePropertyAttribute);
var _ItemNameAttribute_decorators, _init22;
_ItemNameAttribute_decorators = [attr("ItemName")];
var ItemNameAttribute = class {
  constructor(value) {
    this.value = value;
  }
};
_init22 = __decoratorStart(null);
ItemNameAttribute = __decorateElement(_init22, 0, "ItemNameAttribute", _ItemNameAttribute_decorators, ItemNameAttribute);
__runInitializers(_init22, 1, ItemNameAttribute);
var _LocalTextPrefixAttribute_decorators, _init23;
_LocalTextPrefixAttribute_decorators = [attr("LocalTextPrefix")];
var LocalTextPrefixAttribute = class {
  constructor(value) {
    this.value = value;
  }
};
_init23 = __decoratorStart(null);
LocalTextPrefixAttribute = __decorateElement(_init23, 0, "LocalTextPrefixAttribute", _LocalTextPrefixAttribute_decorators, LocalTextPrefixAttribute);
__runInitializers(_init23, 1, LocalTextPrefixAttribute);
var _MaximizableAttribute_decorators, _init24;
_MaximizableAttribute_decorators = [attr("Maximizable")];
var MaximizableAttribute = class {
  constructor(value = true) {
    this.value = value;
  }
};
_init24 = __decoratorStart(null);
MaximizableAttribute = __decorateElement(_init24, 0, "MaximizableAttribute", _MaximizableAttribute_decorators, MaximizableAttribute);
__runInitializers(_init24, 1, MaximizableAttribute);
var _MaxLengthAttribute_decorators, _init25;
_MaxLengthAttribute_decorators = [attr("MaxLength")];
var MaxLengthAttribute = class {
  constructor(maxLength) {
    this.maxLength = maxLength;
  }
};
_init25 = __decoratorStart(null);
MaxLengthAttribute = __decorateElement(_init25, 0, "MaxLengthAttribute", _MaxLengthAttribute_decorators, MaxLengthAttribute);
__runInitializers(_init25, 1, MaxLengthAttribute);
var _NamePropertyAttribute_decorators, _init26;
_NamePropertyAttribute_decorators = [attr("NameProperty")];
var NamePropertyAttribute = class {
  constructor(value) {
    this.value = value;
  }
};
_init26 = __decoratorStart(null);
NamePropertyAttribute = __decorateElement(_init26, 0, "NamePropertyAttribute", _NamePropertyAttribute_decorators, NamePropertyAttribute);
__runInitializers(_init26, 1, NamePropertyAttribute);
var _OneWayAttribute_decorators, _init27;
_OneWayAttribute_decorators = [attr("OneWay")];
var OneWayAttribute = class {
};
_init27 = __decoratorStart(null);
OneWayAttribute = __decorateElement(_init27, 0, "OneWayAttribute", _OneWayAttribute_decorators, OneWayAttribute);
__runInitializers(_init27, 1, OneWayAttribute);
var _OptionAttribute_decorators, _init28;
_OptionAttribute_decorators = [attr("Option")];
var OptionAttribute = class {
};
_init28 = __decoratorStart(null);
OptionAttribute = __decorateElement(_init28, 0, "OptionAttribute", _OptionAttribute_decorators, OptionAttribute);
__runInitializers(_init28, 1, OptionAttribute);
var _OptionsTypeAttribute_decorators, _init29;
_OptionsTypeAttribute_decorators = [attr("OptionsType")];
var OptionsTypeAttribute = class {
  constructor(value) {
    this.value = value;
  }
};
_init29 = __decoratorStart(null);
OptionsTypeAttribute = __decorateElement(_init29, 0, "OptionsTypeAttribute", _OptionsTypeAttribute_decorators, OptionsTypeAttribute);
__runInitializers(_init29, 1, OptionsTypeAttribute);
var _PanelAttribute_decorators, _init30;
_PanelAttribute_decorators = [attr("Panel")];
var PanelAttribute = class {
  constructor(value = true) {
    this.value = value;
  }
};
_init30 = __decoratorStart(null);
PanelAttribute = __decorateElement(_init30, 0, "PanelAttribute", _PanelAttribute_decorators, PanelAttribute);
__runInitializers(_init30, 1, PanelAttribute);
var _PlaceholderAttribute_decorators, _init31;
_PlaceholderAttribute_decorators = [attr("Placeholder")];
var PlaceholderAttribute = class {
  constructor(value) {
    this.value = value;
  }
};
_init31 = __decoratorStart(null);
PlaceholderAttribute = __decorateElement(_init31, 0, "PlaceholderAttribute", _PlaceholderAttribute_decorators, PlaceholderAttribute);
__runInitializers(_init31, 1, PlaceholderAttribute);
var _ReadOnlyAttribute_decorators, _init32;
_ReadOnlyAttribute_decorators = [attr("ReadOnly")];
var ReadOnlyAttribute = class {
  constructor(value = true) {
    this.value = value;
  }
};
_init32 = __decoratorStart(null);
ReadOnlyAttribute = __decorateElement(_init32, 0, "ReadOnlyAttribute", _ReadOnlyAttribute_decorators, ReadOnlyAttribute);
__runInitializers(_init32, 1, ReadOnlyAttribute);
var _RequiredAttribute_decorators, _init33;
_RequiredAttribute_decorators = [attr("Required")];
var RequiredAttribute = class {
  constructor(isRequired = true) {
    this.isRequired = isRequired;
  }
};
_init33 = __decoratorStart(null);
RequiredAttribute = __decorateElement(_init33, 0, "RequiredAttribute", _RequiredAttribute_decorators, RequiredAttribute);
__runInitializers(_init33, 1, RequiredAttribute);
var _ResizableAttribute_decorators, _init34;
_ResizableAttribute_decorators = [attr("Resizable")];
var ResizableAttribute = class {
  constructor(value = true) {
    this.value = value;
  }
};
_init34 = __decoratorStart(null);
ResizableAttribute = __decorateElement(_init34, 0, "ResizableAttribute", _ResizableAttribute_decorators, ResizableAttribute);
__runInitializers(_init34, 1, ResizableAttribute);
var _ResponsiveAttribute_decorators, _init35;
_ResponsiveAttribute_decorators = [attr("Responsive")];
var ResponsiveAttribute = class {
  constructor(value = true) {
    this.value = value;
  }
};
_init35 = __decoratorStart(null);
ResponsiveAttribute = __decorateElement(_init35, 0, "ResponsiveAttribute", _ResponsiveAttribute_decorators, ResponsiveAttribute);
__runInitializers(_init35, 1, ResponsiveAttribute);
var _ServiceAttribute_decorators, _init36;
_ServiceAttribute_decorators = [attr("Service")];
var ServiceAttribute = class {
  constructor(value) {
    this.value = value;
  }
};
_init36 = __decoratorStart(null);
ServiceAttribute = __decorateElement(_init36, 0, "ServiceAttribute", _ServiceAttribute_decorators, ServiceAttribute);
__runInitializers(_init36, 1, ServiceAttribute);
var _StaticPanelAttribute_decorators, _init37;
_StaticPanelAttribute_decorators = [attr("StaticPanel")];
var StaticPanelAttribute = class {
  constructor(value = true) {
    this.value = value;
  }
};
_init37 = __decoratorStart(null);
StaticPanelAttribute = __decorateElement(_init37, 0, "StaticPanelAttribute", _StaticPanelAttribute_decorators, StaticPanelAttribute);
__runInitializers(_init37, 1, StaticPanelAttribute);
var _UpdatableAttribute_decorators, _init38;
_UpdatableAttribute_decorators = [attr("Updatable")];
var UpdatableAttribute = class {
  constructor(value = true) {
    this.value = value;
  }
};
_init38 = __decoratorStart(null);
UpdatableAttribute = __decorateElement(_init38, 0, "UpdatableAttribute", _UpdatableAttribute_decorators, UpdatableAttribute);
__runInitializers(_init38, 1, UpdatableAttribute);

// src/types/decorators.ts
var Decorators;
((Decorators2) => {
  Decorators2.classType = classTypeInfo;
  Decorators2.editorType = editorTypeInfo;
  Decorators2.interfaceType = interfaceTypeInfo;
  Decorators2.formatterType = formatterTypeInfo;
  function registerType2() {
    return function(target, _context) {
      if (_context && typeof _context.addInitializer === "function") {
        _context.addInitializer(() => {
          registerType(target);
        });
      } else
        registerType(target);
    };
  }
  Decorators2.registerType = registerType2;
  function registerClass2(nameOrIntf, intf2) {
    return function(target, _context) {
      if (typeof nameOrIntf == "string")
        registerClass(target, nameOrIntf, intf2);
      else
        registerClass(target, null, nameOrIntf);
    };
  }
  Decorators2.registerClass = registerClass2;
  function registerInterface2(nameOrIntf, intf2) {
    return function(target, _context) {
      if (typeof nameOrIntf == "string")
        registerInterface(target, nameOrIntf, intf2);
      else
        registerInterface(target, null, nameOrIntf);
    };
  }
  Decorators2.registerInterface = registerInterface2;
  function registerEditor2(nameOrIntf, intf2) {
    return function(target, _context) {
      if (typeof nameOrIntf == "string")
        registerEditor(target, nameOrIntf, intf2);
      else
        registerEditor(target, null, nameOrIntf);
    };
  }
  Decorators2.registerEditor = registerEditor2;
  function registerEnum2(target, enumKey2, name) {
    registerEnum(target, name, enumKey2);
    if (enumKey2)
      addCustomAttribute(target, new EnumKeyAttribute(enumKey2));
  }
  Decorators2.registerEnum = registerEnum2;
  function registerEnumType(target, name, enumKey2) {
    registerEnum2(target, enumKey2 != null ? enumKey2 : name, name);
  }
  Decorators2.registerEnumType = registerEnumType;
  function registerFormatter2(nameOrIntf = [ISlickFormatter], intf2 = [ISlickFormatter]) {
    return function(target, _context) {
      if (typeof nameOrIntf == "string")
        registerFormatter(target, nameOrIntf, intf2);
      else
        registerFormatter(target, null, nameOrIntf);
    };
  }
  Decorators2.registerFormatter = registerFormatter2;
  function enumKey(value) {
    return function(target, _context) {
      addCustomAttribute(target, new EnumKeyAttribute(value));
    };
  }
  Decorators2.enumKey = enumKey;
  function option() {
    return function(target, propertyKey) {
      var isGetSet = (propertyKey == null ? void 0 : propertyKey.startsWith("get_")) || (propertyKey == null ? void 0 : propertyKey.startsWith("set_"));
      var memberName = isGetSet ? propertyKey.substr(4) : propertyKey;
      addTypeMember(target.constructor, {
        name: memberName,
        attr: [new OptionAttribute()],
        type: isGetSet ? 16 /* property */ : 4 /* field */,
        getter: isGetSet ? "get_" + memberName : null,
        setter: isGetSet ? "set_" + memberName : null
      });
    };
  }
  Decorators2.option = option;
  function closeButton(value = true) {
    return function(target, _context) {
      addCustomAttribute(target, new CloseButtonAttribute(value));
    };
  }
  Decorators2.closeButton = closeButton;
  function dialogType(value) {
    return function(target, _context) {
      addCustomAttribute(target, new DialogTypeAttribute(value));
    };
  }
  Decorators2.dialogType = dialogType;
  function editor() {
    return function(target, _context) {
      var attr2 = new EditorAttribute();
      addCustomAttribute(target, attr2);
    };
  }
  Decorators2.editor = editor;
  function element(value) {
    return function(target, _context) {
      addCustomAttribute(target, new ElementAttribute(value));
    };
  }
  Decorators2.element = element;
  function filterable(value = true) {
    return function(target, _context) {
      addCustomAttribute(target, new FilterableAttribute(value));
    };
  }
  Decorators2.filterable = filterable;
  function itemName(value) {
    return function(target, _context) {
      addCustomAttribute(target, new ItemNameAttribute(value));
    };
  }
  Decorators2.itemName = itemName;
  function maximizable(value = true) {
    return function(target, _context) {
      addCustomAttribute(target, new MaximizableAttribute(value));
    };
  }
  Decorators2.maximizable = maximizable;
  function optionsType(value, _context) {
    return function(target, _context2) {
      addCustomAttribute(target, new OptionsTypeAttribute(value));
    };
  }
  Decorators2.optionsType = optionsType;
  function panel(value = true) {
    return function(target, _context) {
      addCustomAttribute(target, new PanelAttribute(value));
    };
  }
  Decorators2.panel = panel;
  function resizable(value = true) {
    return function(target, _context) {
      addCustomAttribute(target, new ResizableAttribute(value));
    };
  }
  Decorators2.resizable = resizable;
  function responsive(value = true) {
    return function(target, _context) {
      addCustomAttribute(target, new ResponsiveAttribute(value));
    };
  }
  Decorators2.responsive = responsive;
  function service(value) {
    return function(target, _context) {
      addCustomAttribute(target, new ServiceAttribute(value));
    };
  }
  Decorators2.service = service;
  function staticPanel(value = true) {
    return function(target, _context) {
      addCustomAttribute(target, new StaticPanelAttribute(value));
    };
  }
  Decorators2.staticPanel = staticPanel;
})(Decorators || (Decorators = {}));

// src/interfaces/ibooleanvalue.ts
var _IBooleanValue_decorators, _init39;
_IBooleanValue_decorators = [Decorators.registerInterface("Serenity.IBooleanValue")];
var IBooleanValue = class {
};
_init39 = __decoratorStart(null);
IBooleanValue = __decorateElement(_init39, 0, "IBooleanValue", _IBooleanValue_decorators, IBooleanValue);
__runInitializers(_init39, 1, IBooleanValue);

// src/interfaces/idoublevalue.ts
var _IDoubleValue_decorators, _init40;
_IDoubleValue_decorators = [Decorators.registerInterface("Serenity.IDoubleValue")];
var IDoubleValue = class {
};
_init40 = __decoratorStart(null);
IDoubleValue = __decorateElement(_init40, 0, "IDoubleValue", _IDoubleValue_decorators, IDoubleValue);
__runInitializers(_init40, 1, IDoubleValue);

// src/interfaces/idialog.ts
var _IDialog_decorators, _init41;
_IDialog_decorators = [Decorators.registerInterface("Serenity.IDialog")];
var IDialog = class {
};
_init41 = __decoratorStart(null);
IDialog = __decorateElement(_init41, 0, "IDialog", _IDialog_decorators, IDialog);
__runInitializers(_init41, 1, IDialog);

// src/interfaces/ieditdialog.ts
var _IEditDialog_decorators, _init42;
_IEditDialog_decorators = [Decorators.registerInterface("Serenity.IEditDialog")];
var IEditDialog = class {
};
_init42 = __decoratorStart(null);
IEditDialog = __decorateElement(_init42, 0, "IEditDialog", _IEditDialog_decorators, IEditDialog);
__runInitializers(_init42, 1, IEditDialog);

// src/interfaces/igeteditvalue.ts
var _IGetEditValue_decorators, _init43;
_IGetEditValue_decorators = [Decorators.registerInterface("Serenity.IGetEditValue")];
var IGetEditValue = class {
};
_init43 = __decoratorStart(null);
IGetEditValue = __decorateElement(_init43, 0, "IGetEditValue", _IGetEditValue_decorators, IGetEditValue);
__runInitializers(_init43, 1, IGetEditValue);

// src/interfaces/ireadonly.ts
var _IReadOnly_decorators, _init44;
_IReadOnly_decorators = [Decorators.registerInterface("Serenity.IReadOnly")];
var IReadOnly = class {
};
_init44 = __decoratorStart(null);
IReadOnly = __decorateElement(_init44, 0, "IReadOnly", _IReadOnly_decorators, IReadOnly);
__runInitializers(_init44, 1, IReadOnly);

// src/interfaces/iseteditvalue.ts
var _ISetEditValue_decorators, _init45;
_ISetEditValue_decorators = [Decorators.registerInterface("Serenity.ISetEditValue")];
var ISetEditValue = class {
};
_init45 = __decoratorStart(null);
ISetEditValue = __decorateElement(_init45, 0, "ISetEditValue", _ISetEditValue_decorators, ISetEditValue);
__runInitializers(_init45, 1, ISetEditValue);

// src/interfaces/istringvalue.ts
var _IStringValue_decorators, _init46;
_IStringValue_decorators = [Decorators.registerInterface("Serenity.IStringValue")];
var IStringValue = class {
};
_init46 = __decoratorStart(null);
IStringValue = __decorateElement(_init46, 0, "IStringValue", _IStringValue_decorators, IStringValue);
__runInitializers(_init46, 1, IStringValue);

// src/interfaces/ivalidaterequired.ts
var _IValidateRequired_decorators, _init47;
_IValidateRequired_decorators = [Decorators.registerInterface("Serenity.IValidateRequired")];
var IValidateRequired = class {
};
_init47 = __decoratorStart(null);
IValidateRequired = __decorateElement(_init47, 0, "IValidateRequired", _IValidateRequired_decorators, IValidateRequired);
__runInitializers(_init47, 1, IValidateRequired);

// src/types/captureoperationtype.ts
var CaptureOperationType = /* @__PURE__ */ ((CaptureOperationType2) => {
  CaptureOperationType2[CaptureOperationType2["Before"] = 0] = "Before";
  CaptureOperationType2[CaptureOperationType2["Delete"] = 1] = "Delete";
  CaptureOperationType2[CaptureOperationType2["Insert"] = 2] = "Insert";
  CaptureOperationType2[CaptureOperationType2["Update"] = 3] = "Update";
  return CaptureOperationType2;
})(CaptureOperationType || {});
registerEnum(CaptureOperationType, "Serenity.CaptureOperationType");

// src/types/commontyperegistry.ts
function commonTypeRegistry(props) {
  const { kind, attrKey, isMatch, suffix, loadError } = props;
  let knownTypes;
  function reset() {
    knownTypes = null;
  }
  function searchSystemTypes(key) {
    var type = getType(key);
    if (type != null && isMatch(type))
      return type;
    for (var ns of Config.rootNamespaces) {
      var k = ns + "." + key;
      type = knownTypes[k];
      if (type)
        return type;
      type = getType(ns + "." + key);
      if (type != null && isMatch(type))
        return type;
    }
  }
  function init() {
    knownTypes = {};
    for (var type of getTypes()) {
      if (!isMatch(type))
        continue;
      var fullName = getTypeNameProp(type);
      knownTypes[fullName] = type;
      var akey = attrKey && attrKey(type);
      if (akey && akey !== fullName)
        knownTypes[akey] = type;
    }
    if (suffix) {
      for (var key of Object.keys(knownTypes)) {
        if (key.endsWith(suffix)) {
          var p = key.substring(0, key.length - suffix.length);
          if (p && !knownTypes[p])
            knownTypes[p] = knownTypes[key];
        }
      }
    }
  }
  function tryGet(key) {
    var _a68;
    if (!key)
      return null;
    var type;
    if (knownTypes == null)
      init();
    var type = knownTypes[key];
    if (type)
      return type;
    type = searchSystemTypes(key);
    if (type == null && suffix && !key.endsWith(suffix))
      type = (_a68 = knownTypes[key + suffix]) != null ? _a68 : searchSystemTypes(key + suffix);
    if (type) {
      knownTypes[key] = type;
      var akey = attrKey && attrKey(type);
      if (akey && key != akey)
        knownTypes[akey] = type;
      if (suffix && key.endsWith(suffix)) {
        var p = key.substring(0, key.length - suffix.length);
        if (p && !knownTypes[p])
          knownTypes[p] = knownTypes[key];
      }
      return type;
    }
    return type;
  }
  function tryGetOrLoad(key) {
    let type = tryGet(key);
    if (type)
      return type;
    if (key && Config.lazyTypeLoader) {
      let promise = Config.lazyTypeLoader(key, kind);
      if (isPromiseLike(promise)) {
        return promise.then((t) => {
          if (t && isMatch(t)) {
            knownTypes[key] = t;
            return t;
          }
          return null;
        });
      }
      if (promise && isMatch(promise)) {
        knownTypes[key] = promise;
        return promise;
      }
      return null;
    }
    return type;
  }
  function get(key) {
    var type = tryGet(key);
    if (type)
      return type;
    loadError(key);
  }
  function getOrLoad(key) {
    var type = tryGetOrLoad(key);
    if (type) {
      if (isPromiseLike(type)) {
        return type.then((t) => {
          if (!t)
            loadError(key);
          return t;
        });
      }
      return type;
    }
    loadError(key);
  }
  return {
    get,
    getOrLoad,
    reset,
    tryGet,
    tryGetOrLoad
  };
}

// src/types/dialogtyperegistry.ts
var DialogTypeRegistry;
((DialogTypeRegistry2) => {
  const registry = commonTypeRegistry({
    attrKey: null,
    isMatch: (type) => isAssignableFrom(IDialog, type),
    kind: "dialog",
    suffix: "Dialog",
    loadError: function(key) {
      var message = `"${htmlEncode(key)}" dialog class not found! 
Make sure there is such a dialog type under the project root namespace, 
and its namespace parts start with capital letters like MyProject.MyModule.MyDialog.

If using ES modules, make sure the dialog type has a decorator like 
@Decorators.registerClass('MyProject.MyModule.MyDialog') with the full name
and "side-effect-import" this dialog class from the current 
"page.ts/grid.ts/dialog.ts file (import "./path/to/MyDialog.ts").

If you had this error from an editor with the InplaceAdd option, verify that the lookup key
and dialog type name match case-sensitively, excluding the Dialog suffix.
Specify the DialogType property in the LookupEditor attribute if it is not.

After applying fixes, build and run "node ./tsbuild.js" (or "tsc" if using namespaces) 
from the project folder.`;
      notifyError(message.replace(/\r?\n\r?\n/g, "<br/><br/>"), "", { escapeHtml: false, timeOut: 5e3 });
      throw new Exception(message);
    }
  });
  DialogTypeRegistry2.get = registry.get;
  DialogTypeRegistry2.getOrLoad = registry.getOrLoad;
  DialogTypeRegistry2.reset = registry.reset;
  DialogTypeRegistry2.tryGet = registry.tryGet;
  DialogTypeRegistry2.tryGetOrLoad = registry.tryGetOrLoad;
})(DialogTypeRegistry || (DialogTypeRegistry = {}));

// src/ui/widgets/widgetutils.ts
var elementMap = /* @__PURE__ */ new WeakMap();
function getWidgetName(type) {
  var _a68;
  return (_a68 = getTypeFullName(type)) == null ? void 0 : _a68.replace(/\./g, "_");
}
function associateWidget(widget) {
  if (!widget || !widget.domNode)
    return;
  let type = getInstanceType(widget);
  let name = getWidgetName(type);
  var widgets = elementMap.get(widget.domNode);
  if (widgets) {
    if (widgets[name])
      throw new Error(`The element already has widget '${name}!`);
    widgets[name] = widget;
  } else {
    elementMap.set(widget.domNode, {
      [name]: widget
    });
  }
}
function deassociateWidget(widget) {
  if (!widget || !widget.domNode)
    return;
  let type = getInstanceType(widget);
  let name = getWidgetName(type);
  var widgets = elementMap.get(widget.domNode);
  if (widgets) {
    delete widgets[name];
    if (!Object.keys(widgets).length)
      elementMap.delete(widget.domNode);
  }
}
function tryGetWidget(element, type) {
  var _a68;
  if (typeof element === "string") {
    element = document.querySelector(element);
  } else if (isArrayLike(element))
    element = element[0];
  if (!element)
    return null;
  let widgets = elementMap.get(element);
  if (!widgets)
    return null;
  var keys = Object.keys(widgets);
  if (!keys.length)
    return null;
  if (!type)
    return (_a68 = widgets[keys[0]]) != null ? _a68 : null;
  var name = getWidgetName(type);
  var widget = widgets[name];
  if (widget)
    return widgets[name];
  for (var key of Object.keys(widgets)) {
    widget = widgets[key];
    if (widget && isAssignableFrom(type, getInstanceType(widget)))
      return widget;
  }
  return null;
}
function getWidgetFrom(element, type) {
  var _a68;
  let selector;
  if (typeof element === "string") {
    selector = element;
    element = document.querySelector(selector);
  }
  if (!element)
    throw new Error(`Searching for widget of type '${(_a68 = getTypeFullName(type)) != null ? _a68 : "Widget"}' on a non-existent element! (${selector != null ? selector : "unknown"})`);
  var widget = tryGetWidget(element, type);
  if (!widget) {
    var message = `Element (${selector != null ? selector : "unknown"}) has no widget of type '${getTypeFullName(type)}'! If you have recently changed editor type of a property in a form class, or changed data type in row (which also changes editor type) your script side Form definition might be out of date. Make sure your project builds successfully and transformations are executed.`;
    notifyError(message, "", null);
    throw new Error(message);
  }
  return widget;
}
Fluent.prototype.getWidget = function(type) {
  return getWidgetFrom(this, type);
};
Fluent.prototype.tryGetWidget = function(type) {
  return tryGetWidget(this, type);
};
function useIdPrefix(prefix) {
  return new Proxy({ _: prefix != null ? prefix : "" }, idPrefixHandler);
}
var idPrefixHandler = {
  get(target, p) {
    if (p.startsWith("#"))
      return "#" + target._ + p.substring(1);
    return target._ + p;
  }
};

// src/ui/editors/select2.ts
var lastMousePosition = { x: 0, y: 0 };
var KEY = {
  TAB: 9,
  ENTER: 13,
  ESC: 27,
  SPACE: 32,
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40,
  SHIFT: 16,
  CTRL: 17,
  ALT: 18,
  PAGE_UP: 33,
  PAGE_DOWN: 34,
  HOME: 36,
  END: 35,
  BACKSPACE: 8,
  DELETE: 46,
  isArrow: function(k) {
    k = k.which ? k.which : k;
    switch (k) {
      case KEY.LEFT:
      case KEY.RIGHT:
      case KEY.UP:
      case KEY.DOWN:
        return true;
    }
    return false;
  },
  isControl: function(e) {
    var k = e.which;
    switch (k) {
      case KEY.SHIFT:
      case KEY.CTRL:
      case KEY.ALT:
        return true;
    }
    if (e.metaKey) return true;
    return false;
  },
  isFunctionKey: function(k) {
    k = k.which ? k.which : k;
    return k >= 112 && k <= 123;
  }
};
var DIACRITICS = { "\u24B6": "A", "\uFF21": "A", "\xC0": "A", "\xC1": "A", "\xC2": "A", "\u1EA6": "A", "\u1EA4": "A", "\u1EAA": "A", "\u1EA8": "A", "\xC3": "A", "\u0100": "A", "\u0102": "A", "\u1EB0": "A", "\u1EAE": "A", "\u1EB4": "A", "\u1EB2": "A", "\u0226": "A", "\u01E0": "A", "\xC4": "A", "\u01DE": "A", "\u1EA2": "A", "\xC5": "A", "\u01FA": "A", "\u01CD": "A", "\u0200": "A", "\u0202": "A", "\u1EA0": "A", "\u1EAC": "A", "\u1EB6": "A", "\u1E00": "A", "\u0104": "A", "\u023A": "A", "\u2C6F": "A", "\uA732": "AA", "\xC6": "AE", "\u01FC": "AE", "\u01E2": "AE", "\uA734": "AO", "\uA736": "AU", "\uA738": "AV", "\uA73A": "AV", "\uA73C": "AY", "\u24B7": "B", "\uFF22": "B", "\u1E02": "B", "\u1E04": "B", "\u1E06": "B", "\u0243": "B", "\u0182": "B", "\u0181": "B", "\u24B8": "C", "\uFF23": "C", "\u0106": "C", "\u0108": "C", "\u010A": "C", "\u010C": "C", "\xC7": "C", "\u1E08": "C", "\u0187": "C", "\u023B": "C", "\uA73E": "C", "\u24B9": "D", "\uFF24": "D", "\u1E0A": "D", "\u010E": "D", "\u1E0C": "D", "\u1E10": "D", "\u1E12": "D", "\u1E0E": "D", "\u0110": "D", "\u018B": "D", "\u018A": "D", "\u0189": "D", "\uA779": "D", "\u01F1": "DZ", "\u01C4": "DZ", "\u01F2": "Dz", "\u01C5": "Dz", "\u24BA": "E", "\uFF25": "E", "\xC8": "E", "\xC9": "E", "\xCA": "E", "\u1EC0": "E", "\u1EBE": "E", "\u1EC4": "E", "\u1EC2": "E", "\u1EBC": "E", "\u0112": "E", "\u1E14": "E", "\u1E16": "E", "\u0114": "E", "\u0116": "E", "\xCB": "E", "\u1EBA": "E", "\u011A": "E", "\u0204": "E", "\u0206": "E", "\u1EB8": "E", "\u1EC6": "E", "\u0228": "E", "\u1E1C": "E", "\u0118": "E", "\u1E18": "E", "\u1E1A": "E", "\u0190": "E", "\u018E": "E", "\u24BB": "F", "\uFF26": "F", "\u1E1E": "F", "\u0191": "F", "\uA77B": "F", "\u24BC": "G", "\uFF27": "G", "\u01F4": "G", "\u011C": "G", "\u1E20": "G", "\u011E": "G", "\u0120": "G", "\u01E6": "G", "\u0122": "G", "\u01E4": "G", "\u0193": "G", "\uA7A0": "G", "\uA77D": "G", "\uA77E": "G", "\u24BD": "H", "\uFF28": "H", "\u0124": "H", "\u1E22": "H", "\u1E26": "H", "\u021E": "H", "\u1E24": "H", "\u1E28": "H", "\u1E2A": "H", "\u0126": "H", "\u2C67": "H", "\u2C75": "H", "\uA78D": "H", "\u24BE": "I", "\uFF29": "I", "\xCC": "I", "\xCD": "I", "\xCE": "I", "\u0128": "I", "\u012A": "I", "\u012C": "I", "\u0130": "I", "\xCF": "I", "\u1E2E": "I", "\u1EC8": "I", "\u01CF": "I", "\u0208": "I", "\u020A": "I", "\u1ECA": "I", "\u012E": "I", "\u1E2C": "I", "\u0197": "I", "\u24BF": "J", "\uFF2A": "J", "\u0134": "J", "\u0248": "J", "\u24C0": "K", "\uFF2B": "K", "\u1E30": "K", "\u01E8": "K", "\u1E32": "K", "\u0136": "K", "\u1E34": "K", "\u0198": "K", "\u2C69": "K", "\uA740": "K", "\uA742": "K", "\uA744": "K", "\uA7A2": "K", "\u24C1": "L", "\uFF2C": "L", "\u013F": "L", "\u0139": "L", "\u013D": "L", "\u1E36": "L", "\u1E38": "L", "\u013B": "L", "\u1E3C": "L", "\u1E3A": "L", "\u0141": "L", "\u023D": "L", "\u2C62": "L", "\u2C60": "L", "\uA748": "L", "\uA746": "L", "\uA780": "L", "\u01C7": "LJ", "\u01C8": "Lj", "\u24C2": "M", "\uFF2D": "M", "\u1E3E": "M", "\u1E40": "M", "\u1E42": "M", "\u2C6E": "M", "\u019C": "M", "\u24C3": "N", "\uFF2E": "N", "\u01F8": "N", "\u0143": "N", "\xD1": "N", "\u1E44": "N", "\u0147": "N", "\u1E46": "N", "\u0145": "N", "\u1E4A": "N", "\u1E48": "N", "\u0220": "N", "\u019D": "N", "\uA790": "N", "\uA7A4": "N", "\u01CA": "NJ", "\u01CB": "Nj", "\u24C4": "O", "\uFF2F": "O", "\xD2": "O", "\xD3": "O", "\xD4": "O", "\u1ED2": "O", "\u1ED0": "O", "\u1ED6": "O", "\u1ED4": "O", "\xD5": "O", "\u1E4C": "O", "\u022C": "O", "\u1E4E": "O", "\u014C": "O", "\u1E50": "O", "\u1E52": "O", "\u014E": "O", "\u022E": "O", "\u0230": "O", "\xD6": "O", "\u022A": "O", "\u1ECE": "O", "\u0150": "O", "\u01D1": "O", "\u020C": "O", "\u020E": "O", "\u01A0": "O", "\u1EDC": "O", "\u1EDA": "O", "\u1EE0": "O", "\u1EDE": "O", "\u1EE2": "O", "\u1ECC": "O", "\u1ED8": "O", "\u01EA": "O", "\u01EC": "O", "\xD8": "O", "\u01FE": "O", "\u0186": "O", "\u019F": "O", "\uA74A": "O", "\uA74C": "O", "\u01A2": "OI", "\uA74E": "OO", "\u0222": "OU", "\u24C5": "P", "\uFF30": "P", "\u1E54": "P", "\u1E56": "P", "\u01A4": "P", "\u2C63": "P", "\uA750": "P", "\uA752": "P", "\uA754": "P", "\u24C6": "Q", "\uFF31": "Q", "\uA756": "Q", "\uA758": "Q", "\u024A": "Q", "\u24C7": "R", "\uFF32": "R", "\u0154": "R", "\u1E58": "R", "\u0158": "R", "\u0210": "R", "\u0212": "R", "\u1E5A": "R", "\u1E5C": "R", "\u0156": "R", "\u1E5E": "R", "\u024C": "R", "\u2C64": "R", "\uA75A": "R", "\uA7A6": "R", "\uA782": "R", "\u24C8": "S", "\uFF33": "S", "\u1E9E": "S", "\u015A": "S", "\u1E64": "S", "\u015C": "S", "\u1E60": "S", "\u0160": "S", "\u1E66": "S", "\u1E62": "S", "\u1E68": "S", "\u0218": "S", "\u015E": "S", "\u2C7E": "S", "\uA7A8": "S", "\uA784": "S", "\u24C9": "T", "\uFF34": "T", "\u1E6A": "T", "\u0164": "T", "\u1E6C": "T", "\u021A": "T", "\u0162": "T", "\u1E70": "T", "\u1E6E": "T", "\u0166": "T", "\u01AC": "T", "\u01AE": "T", "\u023E": "T", "\uA786": "T", "\uA728": "TZ", "\u24CA": "U", "\uFF35": "U", "\xD9": "U", "\xDA": "U", "\xDB": "U", "\u0168": "U", "\u1E78": "U", "\u016A": "U", "\u1E7A": "U", "\u016C": "U", "\xDC": "U", "\u01DB": "U", "\u01D7": "U", "\u01D5": "U", "\u01D9": "U", "\u1EE6": "U", "\u016E": "U", "\u0170": "U", "\u01D3": "U", "\u0214": "U", "\u0216": "U", "\u01AF": "U", "\u1EEA": "U", "\u1EE8": "U", "\u1EEE": "U", "\u1EEC": "U", "\u1EF0": "U", "\u1EE4": "U", "\u1E72": "U", "\u0172": "U", "\u1E76": "U", "\u1E74": "U", "\u0244": "U", "\u24CB": "V", "\uFF36": "V", "\u1E7C": "V", "\u1E7E": "V", "\u01B2": "V", "\uA75E": "V", "\u0245": "V", "\uA760": "VY", "\u24CC": "W", "\uFF37": "W", "\u1E80": "W", "\u1E82": "W", "\u0174": "W", "\u1E86": "W", "\u1E84": "W", "\u1E88": "W", "\u2C72": "W", "\u24CD": "X", "\uFF38": "X", "\u1E8A": "X", "\u1E8C": "X", "\u24CE": "Y", "\uFF39": "Y", "\u1EF2": "Y", "\xDD": "Y", "\u0176": "Y", "\u1EF8": "Y", "\u0232": "Y", "\u1E8E": "Y", "\u0178": "Y", "\u1EF6": "Y", "\u1EF4": "Y", "\u01B3": "Y", "\u024E": "Y", "\u1EFE": "Y", "\u24CF": "Z", "\uFF3A": "Z", "\u0179": "Z", "\u1E90": "Z", "\u017B": "Z", "\u017D": "Z", "\u1E92": "Z", "\u1E94": "Z", "\u01B5": "Z", "\u0224": "Z", "\u2C7F": "Z", "\u2C6B": "Z", "\uA762": "Z", "\u24D0": "a", "\uFF41": "a", "\u1E9A": "a", "\xE0": "a", "\xE1": "a", "\xE2": "a", "\u1EA7": "a", "\u1EA5": "a", "\u1EAB": "a", "\u1EA9": "a", "\xE3": "a", "\u0101": "a", "\u0103": "a", "\u1EB1": "a", "\u1EAF": "a", "\u1EB5": "a", "\u1EB3": "a", "\u0227": "a", "\u01E1": "a", "\xE4": "a", "\u01DF": "a", "\u1EA3": "a", "\xE5": "a", "\u01FB": "a", "\u01CE": "a", "\u0201": "a", "\u0203": "a", "\u1EA1": "a", "\u1EAD": "a", "\u1EB7": "a", "\u1E01": "a", "\u0105": "a", "\u2C65": "a", "\u0250": "a", "\uA733": "aa", "\xE6": "ae", "\u01FD": "ae", "\u01E3": "ae", "\uA735": "ao", "\uA737": "au", "\uA739": "av", "\uA73B": "av", "\uA73D": "ay", "\u24D1": "b", "\uFF42": "b", "\u1E03": "b", "\u1E05": "b", "\u1E07": "b", "\u0180": "b", "\u0183": "b", "\u0253": "b", "\u24D2": "c", "\uFF43": "c", "\u0107": "c", "\u0109": "c", "\u010B": "c", "\u010D": "c", "\xE7": "c", "\u1E09": "c", "\u0188": "c", "\u023C": "c", "\uA73F": "c", "\u2184": "c", "\u24D3": "d", "\uFF44": "d", "\u1E0B": "d", "\u010F": "d", "\u1E0D": "d", "\u1E11": "d", "\u1E13": "d", "\u1E0F": "d", "\u0111": "d", "\u018C": "d", "\u0256": "d", "\u0257": "d", "\uA77A": "d", "\u01F3": "dz", "\u01C6": "dz", "\u24D4": "e", "\uFF45": "e", "\xE8": "e", "\xE9": "e", "\xEA": "e", "\u1EC1": "e", "\u1EBF": "e", "\u1EC5": "e", "\u1EC3": "e", "\u1EBD": "e", "\u0113": "e", "\u1E15": "e", "\u1E17": "e", "\u0115": "e", "\u0117": "e", "\xEB": "e", "\u1EBB": "e", "\u011B": "e", "\u0205": "e", "\u0207": "e", "\u1EB9": "e", "\u1EC7": "e", "\u0229": "e", "\u1E1D": "e", "\u0119": "e", "\u1E19": "e", "\u1E1B": "e", "\u0247": "e", "\u025B": "e", "\u01DD": "e", "\u24D5": "f", "\uFF46": "f", "\u1E1F": "f", "\u0192": "f", "\uA77C": "f", "\u24D6": "g", "\uFF47": "g", "\u01F5": "g", "\u011D": "g", "\u1E21": "g", "\u011F": "g", "\u0121": "g", "\u01E7": "g", "\u0123": "g", "\u01E5": "g", "\u0260": "g", "\uA7A1": "g", "\u1D79": "g", "\uA77F": "g", "\u24D7": "h", "\uFF48": "h", "\u0125": "h", "\u1E23": "h", "\u1E27": "h", "\u021F": "h", "\u1E25": "h", "\u1E29": "h", "\u1E2B": "h", "\u1E96": "h", "\u0127": "h", "\u2C68": "h", "\u2C76": "h", "\u0265": "h", "\u0195": "hv", "\u24D8": "i", "\uFF49": "i", "\xEC": "i", "\xED": "i", "\xEE": "i", "\u0129": "i", "\u012B": "i", "\u012D": "i", "\xEF": "i", "\u1E2F": "i", "\u1EC9": "i", "\u01D0": "i", "\u0209": "i", "\u020B": "i", "\u1ECB": "i", "\u012F": "i", "\u1E2D": "i", "\u0268": "i", "\u0131": "i", "\u24D9": "j", "\uFF4A": "j", "\u0135": "j", "\u01F0": "j", "\u0249": "j", "\u24DA": "k", "\uFF4B": "k", "\u1E31": "k", "\u01E9": "k", "\u1E33": "k", "\u0137": "k", "\u1E35": "k", "\u0199": "k", "\u2C6A": "k", "\uA741": "k", "\uA743": "k", "\uA745": "k", "\uA7A3": "k", "\u24DB": "l", "\uFF4C": "l", "\u0140": "l", "\u013A": "l", "\u013E": "l", "\u1E37": "l", "\u1E39": "l", "\u013C": "l", "\u1E3D": "l", "\u1E3B": "l", "\u017F": "l", "\u0142": "l", "\u019A": "l", "\u026B": "l", "\u2C61": "l", "\uA749": "l", "\uA781": "l", "\uA747": "l", "\u01C9": "lj", "\u24DC": "m", "\uFF4D": "m", "\u1E3F": "m", "\u1E41": "m", "\u1E43": "m", "\u0271": "m", "\u026F": "m", "\u24DD": "n", "\uFF4E": "n", "\u01F9": "n", "\u0144": "n", "\xF1": "n", "\u1E45": "n", "\u0148": "n", "\u1E47": "n", "\u0146": "n", "\u1E4B": "n", "\u1E49": "n", "\u019E": "n", "\u0272": "n", "\u0149": "n", "\uA791": "n", "\uA7A5": "n", "\u01CC": "nj", "\u24DE": "o", "\uFF4F": "o", "\xF2": "o", "\xF3": "o", "\xF4": "o", "\u1ED3": "o", "\u1ED1": "o", "\u1ED7": "o", "\u1ED5": "o", "\xF5": "o", "\u1E4D": "o", "\u022D": "o", "\u1E4F": "o", "\u014D": "o", "\u1E51": "o", "\u1E53": "o", "\u014F": "o", "\u022F": "o", "\u0231": "o", "\xF6": "o", "\u022B": "o", "\u1ECF": "o", "\u0151": "o", "\u01D2": "o", "\u020D": "o", "\u020F": "o", "\u01A1": "o", "\u1EDD": "o", "\u1EDB": "o", "\u1EE1": "o", "\u1EDF": "o", "\u1EE3": "o", "\u1ECD": "o", "\u1ED9": "o", "\u01EB": "o", "\u01ED": "o", "\xF8": "o", "\u01FF": "o", "\u0254": "o", "\uA74B": "o", "\uA74D": "o", "\u0275": "o", "\u01A3": "oi", "\u0223": "ou", "\uA74F": "oo", "\u24DF": "p", "\uFF50": "p", "\u1E55": "p", "\u1E57": "p", "\u01A5": "p", "\u1D7D": "p", "\uA751": "p", "\uA753": "p", "\uA755": "p", "\u24E0": "q", "\uFF51": "q", "\u024B": "q", "\uA757": "q", "\uA759": "q", "\u24E1": "r", "\uFF52": "r", "\u0155": "r", "\u1E59": "r", "\u0159": "r", "\u0211": "r", "\u0213": "r", "\u1E5B": "r", "\u1E5D": "r", "\u0157": "r", "\u1E5F": "r", "\u024D": "r", "\u027D": "r", "\uA75B": "r", "\uA7A7": "r", "\uA783": "r", "\u24E2": "s", "\uFF53": "s", "\xDF": "s", "\u015B": "s", "\u1E65": "s", "\u015D": "s", "\u1E61": "s", "\u0161": "s", "\u1E67": "s", "\u1E63": "s", "\u1E69": "s", "\u0219": "s", "\u015F": "s", "\u023F": "s", "\uA7A9": "s", "\uA785": "s", "\u1E9B": "s", "\u24E3": "t", "\uFF54": "t", "\u1E6B": "t", "\u1E97": "t", "\u0165": "t", "\u1E6D": "t", "\u021B": "t", "\u0163": "t", "\u1E71": "t", "\u1E6F": "t", "\u0167": "t", "\u01AD": "t", "\u0288": "t", "\u2C66": "t", "\uA787": "t", "\uA729": "tz", "\u24E4": "u", "\uFF55": "u", "\xF9": "u", "\xFA": "u", "\xFB": "u", "\u0169": "u", "\u1E79": "u", "\u016B": "u", "\u1E7B": "u", "\u016D": "u", "\xFC": "u", "\u01DC": "u", "\u01D8": "u", "\u01D6": "u", "\u01DA": "u", "\u1EE7": "u", "\u016F": "u", "\u0171": "u", "\u01D4": "u", "\u0215": "u", "\u0217": "u", "\u01B0": "u", "\u1EEB": "u", "\u1EE9": "u", "\u1EEF": "u", "\u1EED": "u", "\u1EF1": "u", "\u1EE5": "u", "\u1E73": "u", "\u0173": "u", "\u1E77": "u", "\u1E75": "u", "\u0289": "u", "\u24E5": "v", "\uFF56": "v", "\u1E7D": "v", "\u1E7F": "v", "\u028B": "v", "\uA75F": "v", "\u028C": "v", "\uA761": "vy", "\u24E6": "w", "\uFF57": "w", "\u1E81": "w", "\u1E83": "w", "\u0175": "w", "\u1E87": "w", "\u1E85": "w", "\u1E98": "w", "\u1E89": "w", "\u2C73": "w", "\u24E7": "x", "\uFF58": "x", "\u1E8B": "x", "\u1E8D": "x", "\u24E8": "y", "\uFF59": "y", "\u1EF3": "y", "\xFD": "y", "\u0177": "y", "\u1EF9": "y", "\u0233": "y", "\u1E8F": "y", "\xFF": "y", "\u1EF7": "y", "\u1E99": "y", "\u1EF5": "y", "\u01B4": "y", "\u024F": "y", "\u1EFF": "y", "\u24E9": "z", "\uFF5A": "z", "\u017A": "z", "\u1E91": "z", "\u017C": "z", "\u017E": "z", "\u1E93": "z", "\u1E95": "z", "\u01B6": "z", "\u0225": "z", "\u0240": "z", "\u2C6C": "z", "\uA763": "z", "\u0386": "\u0391", "\u0388": "\u0395", "\u0389": "\u0397", "\u038A": "\u0399", "\u03AA": "\u0399", "\u038C": "\u039F", "\u038E": "\u03A5", "\u03AB": "\u03A5", "\u038F": "\u03A9", "\u03AC": "\u03B1", "\u03AD": "\u03B5", "\u03AE": "\u03B7", "\u03AF": "\u03B9", "\u03CA": "\u03B9", "\u0390": "\u03B9", "\u03CC": "\u03BF", "\u03CD": "\u03C5", "\u03CB": "\u03C5", "\u03B0": "\u03C5", "\u03C9": "\u03C9", "\u03C2": "\u03C3" };
var nextUid = /* @__PURE__ */ function() {
  var counter = 1;
  return function() {
    return counter++;
  };
}();
function reinsertElement(element) {
  var placeholder = document.createTextNode("");
  Fluent(placeholder).insertBefore(element);
  Fluent(element).insertBefore(placeholder);
  placeholder.remove();
}
function indexOf2(value, array) {
  var i = 0, l = array.length;
  for (; i < l; i = i + 1) {
    if (equal(value, array[i])) return i;
  }
  return -1;
}
var scrollBarDimensions = null;
function getOffset(el) {
  var box = el.getBoundingClientRect();
  var docElem = document.documentElement;
  return {
    top: box.top + window.scrollY - docElem.clientTop,
    left: box.left + window.scrollX - docElem.clientLeft
  };
}
function txt(s) {
  return localText("Controls.SelectEditor." + s);
}
function fmt(s, ...prm) {
  return stringFormat(localText("Controls.SelectEditor." + s), prm);
}
function measureScrollbar() {
  var $template = document.createElement("div");
  $template.classList.add("select2-measure-scrollbar");
  document.body.appendChild($template);
  var dim = {
    width: $template.offsetWidth - $template.clientWidth,
    height: $template.offsetHeight - $template.clientHeight
  };
  $template.remove();
  return dim;
}
function equal(a, b) {
  if (a === b) return true;
  if (a === void 0 || b === void 0) return false;
  if (a === null || b === null) return false;
  if (a.constructor === String) return a + "" === b + "";
  if (b.constructor === String) return b + "" === a + "";
  return false;
}
function splitVal(string, separator) {
  var val, i, l;
  if (string === null || string.length < 1) return [];
  val = string.split(separator);
  for (i = 0, l = val.length; i < l; i = i + 1) val[i] = val[i].trim();
  return val;
}
function parsePx(str) {
  var value = parseFloat(str);
  if (isNaN(value))
    return 0;
  return value;
}
function getSideBorderPadding(el) {
  if (!el)
    return 0;
  var style = getComputedStyle(el);
  var p = ["border-left-width", "border-right-width", "padding-left", "padding-right"];
  var delta = 0;
  for (var val of p)
    delta += parsePx(style.getPropertyValue(val)) || 0;
  return delta;
}
function getOuterHeightWithMargins(el) {
  const style = getComputedStyle(el);
  return el.getBoundingClientRect().height + parseFloat(style.marginTop) + parseFloat(style.marginBottom);
}
function installKeyUpChangeEvent(element) {
  var key = "keyupChangeValue";
  Fluent.on(element, "keydown", function() {
    if (element.dataset[key] === void 0) {
      element.dataset[key] = element.value;
    }
  });
  Fluent.on(element, "keyup", function() {
    var val = element.dataset[key];
    if (val !== void 0 && element.value !== val) {
      delete element.dataset[key];
      Fluent.trigger(element, "keyup-change");
    }
  });
}
function installFilteredMouseMove(element) {
  Fluent.on(element, "mousemove", function(e) {
    var lastpos = lastMousePosition;
    if (lastpos === void 0 || lastpos.x !== e.pageX || lastpos.y !== e.pageY) {
      Fluent.trigger(e.target, "mousemove-filtered", { pageX: e.pageX, pageY: e.pageY });
    }
  });
}
function debounce2(quietMillis, fn, ctx) {
  ctx = ctx || void 0;
  var timeout;
  return function() {
    var args = arguments;
    window.clearTimeout(timeout);
    timeout = window.setTimeout(function() {
      fn.apply(ctx, args);
    }, quietMillis);
  };
}
function installDebouncedScroll(threshold, element) {
  var notify = debounce2(threshold, function(args) {
    Fluent.trigger(element, "scroll-debounced", args);
  });
  Fluent.on(element, "scroll", function(e) {
    if (e.target === element) notify();
  });
}
function focus($el) {
  if ($el === document.activeElement) return;
  window.setTimeout(function() {
    var _a68;
    var el = $el, pos = ((_a68 = $el.value) == null ? void 0 : _a68.length) || 0, range;
    $el.focus();
    var isVisible = el.offsetWidth > 0 || el.offsetHeight > 0;
    if (isVisible && el === document.activeElement) {
      if (el.setSelectionRange) {
        el.setSelectionRange(pos, pos);
      } else if (el.createTextRange) {
        range = el.createTextRange();
        range.collapse(false);
        range.select();
      }
    }
  }, 0);
}
function getCursorInfo(el) {
  var offset = 0;
  var length = 0;
  if ("selectionStart" in el) {
    offset = el.selectionStart;
    length = el.selectionEnd - offset;
  } else if ("selection" in document) {
    el.focus();
    var sel = document.selection.createRange();
    length = document.selection.createRange().text.length;
    sel.moveStart("character", -el.value.length);
    offset = sel.text.length - length;
  }
  return { offset, length };
}
function killEvent(event) {
  event.preventDefault();
  event.stopPropagation();
}
function killEventImmediately(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}
var sizer;
function measureTextWidth(e) {
  if (!sizer) {
    var style = getComputedStyle(e, null);
    sizer = document.createElement("div");
    Object.assign(sizer.style, {
      position: "absolute",
      left: "-10000px",
      top: "-10000px",
      display: "none",
      fontSize: style.fontSize,
      fontFamily: style.fontFamily,
      fontStyle: style.fontStyle,
      fontWeight: style.fontWeight,
      letterSpacing: style.letterSpacing,
      textTransform: style.textTransform,
      whiteSpace: "nowrap"
    });
    sizer.setAttribute("class", "select2-sizer");
    document.body.appendChild(sizer);
  }
  sizer.textContent = e.value;
  return sizer.offsetWidth;
}
function syncCssClasses(dest, src, adapter) {
  var _a68, _b;
  var classes, replacements = [], adapted;
  classes = (_a68 = dest.getAttribute("class")) == null ? void 0 : _a68.trim();
  if (classes) {
    classes = "" + classes;
    classes.split(/\s+/).forEach(function(kls) {
      if (kls.indexOf("select2-") === 0) {
        replacements.push(kls);
      }
    });
  }
  classes = (_b = src.getAttribute("class")) == null ? void 0 : _b.trim();
  if (classes) {
    classes = "" + classes;
    classes.split(/\s+/).forEach(function(kls) {
      if (kls.indexOf("select2-") !== 0) {
        adapted = adapter(kls);
        if (adapted) {
          replacements.push(adapted);
        }
      }
    });
  }
  dest.setAttribute("class", replacements.join(" "));
}
function markMatch(text2, term, markup, escapeMarkup) {
  var match = Select2.stripDiacritics(text2.toUpperCase()).indexOf(Select2.stripDiacritics(term.toUpperCase())), tl = term.length;
  if (match < 0) {
    markup.push(escapeMarkup(text2));
    return;
  }
  markup.push(escapeMarkup(text2.substring(0, match)));
  markup.push("<span class='select2-match'>");
  markup.push(escapeMarkup(text2.substring(match, match + tl)));
  markup.push("</span>");
  markup.push(escapeMarkup(text2.substring(match + tl, text2.length)));
}
function defaultEscapeMarkup(markup) {
  var replace_map = {
    "\\": "&#92;",
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#39;",
    "/": "&#47;"
  };
  return String(markup).replace(/[&<>"'\/\\]/g, function(match) {
    return replace_map[match];
  });
}
var _Select2 = class _Select2 {
  constructor(opts, create = true) {
    this.el = opts.element;
    if (!create) {
      return;
    }
    opts = Object.assign({}, opts);
    var multiple;
    if (opts.element.tagName.toLowerCase() === "select") {
      multiple = opts.element.multiple;
    } else {
      multiple = opts.multiple || false;
      if ("tags" in opts) {
        opts.multiple = multiple = true;
      }
    }
    var select2 = multiple ? new MultiSelect2() : new SingleSelect2();
    select2.init(opts);
  }
  get instance() {
    if (!this.el)
      return null;
    return this.el.select2;
  }
  close() {
    var _a68;
    (_a68 = this.instance) == null ? void 0 : _a68.close();
  }
  get container() {
    var _a68;
    return (_a68 = this.instance) == null ? void 0 : _a68.container;
  }
  get dropdown() {
    var _a68;
    return (_a68 = this.instance) == null ? void 0 : _a68.dropdown;
  }
  destroy() {
    var _a68;
    (_a68 = this.instance) == null ? void 0 : _a68.destroy();
  }
  get data() {
    var _a68;
    return (_a68 = this.instance) == null ? void 0 : _a68.data();
  }
  set data(value) {
    var _a68;
    (_a68 = this.instance) == null ? void 0 : _a68.data(value);
  }
  disable() {
    var _a68;
    (_a68 = this.instance) == null ? void 0 : _a68.disable();
  }
  enable(enabled) {
    var _a68;
    (_a68 = this.instance) == null ? void 0 : _a68.enable(enabled);
  }
  focus() {
    var _a68;
    (_a68 = this.instance) == null ? void 0 : _a68.focus();
  }
  get isFocused() {
    var _a68;
    return (_a68 = this.instance) == null ? void 0 : _a68.isFocused();
  }
  get isMultiple() {
    return this.instance instanceof MultiSelect2;
  }
  get opened() {
    var _a68;
    return (_a68 = this.instance) == null ? void 0 : _a68.opened();
  }
  open() {
    var _a68;
    return (_a68 = this.instance) == null ? void 0 : _a68.open();
  }
  positionDropdown() {
    var _a68;
    (_a68 = this.instance) == null ? void 0 : _a68.positionDropdown();
  }
  readonly(value) {
    var _a68;
    (_a68 = this.instance) == null ? void 0 : _a68.readonly(value);
  }
  get search() {
    var _a68;
    return (_a68 = this.instance) == null ? void 0 : _a68.search;
  }
  get val() {
    var _a68;
    return (_a68 = this.instance) == null ? void 0 : _a68.val();
  }
  set val(value) {
    var _a68;
    (_a68 = this.instance) == null ? void 0 : _a68.val(value);
  }
  static getInstance(el) {
    if (!el || !el.select2)
      return null;
    return new _Select2({ element: el }, false);
  }
  static stripDiacritics(str) {
    function match(a) {
      return DIACRITICS[a] || a;
    }
    return str.replace(/[^\u0000-\u007E]/g, match);
  }
};
_Select2.ajaxDefaults = {
  params: {
    method: "GET",
    cache: false,
    dataType: "json"
  }
};
// plugin defaults, accessible to users
_Select2.defaults = {
  width: "copy",
  loadMorePadding: 0,
  closeOnSelect: true,
  openOnEnter: true,
  containerCss: {},
  dropdownCss: {},
  containerCssClass: "",
  dropdownCssClass: "",
  formatAjaxError: () => txt("AjaxError"),
  formatInputTooLong: (input, max) => fmt("InputTooLong", input.length - max, max, input.length),
  formatInputTooShort: (input, min) => fmt("InputTooShort", min - input.length, min, input.length),
  formatLoadMore: (pageNumber) => fmt("LoadMore", pageNumber),
  formatMatches: (matches) => matches === 1 ? txt("SingleMatch") : fmt("MultipleMatches", matches),
  formatNoMatches: () => txt("NoMatches"),
  formatResult: function(result, _, query, escapeMarkup) {
    var markup = [];
    markMatch(result.text, query.term, markup, escapeMarkup);
    return markup.join("");
  },
  formatResultCssClass: function(data) {
    return data.css;
  },
  formatSearching: () => txt("Searching"),
  formatSelection: (data, _, escapeMarkup) => data ? escapeMarkup(data.text) : void 0,
  formatSelectionCssClass: function() {
    return void 0;
  },
  formatSelectionTooBig: (limit) => fmt("SelectionTooBig", limit),
  sortResults: (results) => results,
  minimumResultsForSearch: 0,
  minimumInputLength: 0,
  maximumInputLength: null,
  maximumSelectionSize: 0,
  id: function(e) {
    return e == void 0 ? null : e.id;
  },
  matcher: (term, text2) => _Select2.stripDiacritics("" + text2).toUpperCase().indexOf(_Select2.stripDiacritics("" + term).toUpperCase()) >= 0,
  separator: ",",
  tokenSeparators: [],
  tokenizer: defaultTokenizer,
  escapeMarkup: defaultEscapeMarkup,
  blurOnChange: false,
  selectOnBlur: false,
  adaptContainerCssClass: function(c) {
    return c;
  },
  adaptDropdownCssClass: function(c) {
    return null;
  },
  nextSearchTerm: function(selectedObject, currentSearchTerm) {
    return void 0;
  },
  searchInputPlaceholder: "",
  createSearchChoicePosition: "top",
  shouldFocusInput: function(instance) {
    var supportsTouchEvents = "ontouchstart" in window || "msMaxTouchPoints" in navigator;
    if (!supportsTouchEvents) {
      return true;
    }
    if (instance.opts.minimumResultsForSearch < 0) {
      return false;
    }
    return true;
  }
};
var Select2 = _Select2;
function ajax(options) {
  var timeout, quietMillis = options.quietMillis || 100, ajaxUrl = options.url, self2 = this;
  return function(query) {
    window.clearTimeout(timeout);
    timeout = window.setTimeout(function() {
      var data = options.data, url = ajaxUrl, deprecated = {
        cache: options.cache || false
      }, params = Object.assign({}, Select2.ajaxDefaults.params, deprecated);
      data = data ? data.call(self2, query.term, query.page, query.context) : null;
      url = typeof url === "function" ? url.call(self2, query.term, query.page, query.context) : url;
      if (options.params) {
        if (typeof options.params === "function") {
          Object.assign(params, options.params.call(self2));
        } else {
          Object.assign(params, options.params);
        }
      }
      Object.assign(params, {
        url,
        data,
        onSuccess: function(response) {
          var results = options.results(response, query.page, query);
          query.callback(results);
        },
        onError: function(response, info) {
          var results = {
            errorInfo: info,
            hasError: true,
            results: response
          };
          query.callback(results);
        }
      });
      serviceCall(params);
    }, quietMillis);
  };
}
function local(options) {
  var data = options, dataText, tmp, text2 = function(item) {
    return "" + item.text;
  };
  if (Array.isArray(data)) {
    tmp = data;
    data = { results: tmp };
  }
  if (typeof data !== "function") {
    tmp = data;
    data = function() {
      return tmp;
    };
  }
  var dataItem = data();
  if (dataItem.text) {
    text2 = dataItem.text;
    if (typeof text2 !== "function") {
      dataText = dataItem.text;
      text2 = function(item) {
        return item[dataText];
      };
    }
  }
  return function(query) {
    var t = query.term, filtered = { results: [] }, process;
    if (t === "") {
      query.callback(data());
      return;
    }
    process = function(datum, collection) {
      var group, attr2;
      datum = datum[0];
      if (datum.children) {
        group = {};
        for (attr2 in datum) {
          if (datum.hasOwnProperty(attr2)) group[attr2] = datum[attr2];
        }
        group.children = [];
        datum.children.forEach(function(childDatum) {
          process(childDatum, group.children);
        });
        if (group.children.length || query.matcher(t, text2(group), datum)) {
          collection.push(group);
        }
      } else {
        if (query.matcher(t, text2(datum), datum)) {
          collection.push(datum);
        }
      }
    };
    data().results.forEach(function(datum) {
      process(datum, filtered.results);
    });
    query.callback(filtered);
  };
}
function tags(data) {
  var isFunc = typeof data === "function";
  return function(query) {
    var t = query.term, filtered = { results: [] };
    var result = isFunc ? data(query) : data;
    if (Array.isArray(result)) {
      result.forEach(function(item) {
        var isObject = item.text !== void 0, text2 = isObject ? item.text : item;
        if (t === "" || query.matcher(t, text2)) {
          filtered.results.push(isObject ? item : { id: item, text: item });
        }
      });
      query.callback(filtered);
    }
  };
}
function checkFormatter(formatter, formatterName) {
  if (typeof formatter === "function") return true;
  if (!formatter) return false;
  if (typeof formatter === "string") return true;
  throw new Error(formatterName + " must be a string, function, or falsy value");
}
function evaluate(val, context, ..._) {
  if (typeof val === "function") {
    var args = Array.prototype.slice.call(arguments, 2);
    return val.apply(context, args);
  }
  return val;
}
function countResults(results) {
  var count2 = 0;
  results.forEach(function(item) {
    if (item.children) {
      count2 += countResults(item.children);
    } else {
      count2++;
    }
  });
  return count2;
}
function defaultTokenizer(input, selection, selectCallback, opts) {
  var original = input, dupe = false, token, index, i, l, separator;
  if (!opts.createSearchChoice || !opts.tokenSeparators || opts.tokenSeparators.length < 1) return void 0;
  while (true) {
    index = -1;
    for (i = 0, l = opts.tokenSeparators.length; i < l; i++) {
      separator = opts.tokenSeparators[i];
      index = input.indexOf(separator);
      if (index >= 0) break;
    }
    if (index < 0) break;
    token = input.substring(0, index);
    input = input.substring(index + separator.length);
    if (token.length > 0) {
      token = opts.createSearchChoice.call(this, token, selection);
      if (token !== void 0 && token !== null && opts.id(token) !== void 0 && opts.id(token) !== null) {
        dupe = false;
        for (i = 0, l = selection.length; i < l; i++) {
          if (equal(opts.id(token), opts.id(selection[i]))) {
            dupe = true;
            break;
          }
        }
        if (!dupe) selectCallback(token);
      }
    }
  }
  if (original !== input) return input;
}
function cleanupJQueryElements() {
  var self2 = this;
  Array.from(arguments).forEach(function(element) {
    Fluent.remove(self2[element]);
    self2[element] = null;
  });
}
var AbstractSelect2 = class {
  init(opts) {
    var _a68, _b, _c;
    var results, search, resultsSelector = ".select2-results";
    this.opts = opts = this.prepareOpts(opts);
    this.id = opts.id;
    if (opts.element.select2 != null) {
      (_b = (_a68 = opts.element.select2).destroy) == null ? void 0 : _b.call(_a68);
    }
    this.container = this.createContainer();
    this.containerId = "s2id_" + (opts.element.getAttribute("id") || "autogen" + nextUid());
    this.containerEventName = this.containerId.replace(/([.])/g, "_").replace(/([;&,\-\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g, "\\$1");
    this.container.setAttribute("id", this.containerId);
    this.container.setAttribute("title", (_c = opts.element.getAttribute("title")) != null ? _c : "");
    syncCssClasses(this.container, this.opts.element, this.opts.adaptContainerCssClass);
    this.container.setAttribute("style", opts.element.getAttribute("style"));
    Object.assign(this.container.style, evaluate(opts.containerCss, this.opts.element));
    Fluent.addClass(this.container, evaluate(opts.containerCssClass, this.opts.element));
    this.elementTabIndex = this.opts.element.getAttribute("tabindex");
    this.opts.element.select2 = this;
    this.opts.element.setAttribute("tabindex", "-1");
    Fluent(this.container).insertBefore(this.opts.element);
    Fluent.on(this.opts.element, "click.select2", killEvent);
    this.container.select2 = this;
    this.dropdown = this.container.querySelector(".select2-drop");
    syncCssClasses(this.dropdown, this.opts.element, this.opts.adaptDropdownCssClass);
    Fluent.addClass(this.dropdown, evaluate(opts.dropdownCssClass, this.opts.element));
    this.dropdown.select2 = this;
    Fluent.on(this.dropdown, "click", killEvent);
    this.results = results = this.container.querySelector(resultsSelector);
    this.search = search = this.container.querySelector("input.select2-input");
    this.queryCount = 0;
    this.resultsPage = 0;
    this.context = null;
    this.initContainer();
    Fluent.on(this.container, "click", killEvent);
    installFilteredMouseMove(this.results);
    Fluent.on(this.dropdown, "mousemove-filtered", resultsSelector, this.highlightUnderEvent.bind(this));
    ["touchstart", "touchmove", "touchend"].forEach(
      (ev) => this.dropdown.addEventListener(ev, (e) => {
        var _a69, _b2;
        if ((_b2 = (_a69 = e.target).closest) == null ? void 0 : _b2.call(_a69, resultsSelector)) {
          this._touchEvent = true;
        }
      }, { passive: true })
    );
    this.dropdown.addEventListener("touchmove", (e) => {
      var _a69, _b2;
      return ((_b2 = (_a69 = e.target).closest) == null ? void 0 : _b2.call(_a69, resultsSelector)) && this.touchMoved();
    }, { passive: true });
    ["touchstart", "touchend"].forEach((ev) => this.dropdown.addEventListener(ev, (e) => {
      var _a69, _b2;
      return ((_b2 = (_a69 = e.target).closest) == null ? void 0 : _b2.call(_a69, resultsSelector)) && this.clearTouchMoved();
    }, { passive: true }));
    Fluent.on(this.dropdown, "click", (event) => {
      if (this._touchEvent) {
        this._touchEvent = false;
        this.selectHighlighted();
      }
    });
    installDebouncedScroll(80, this.results);
    Fluent.on(this.dropdown, "scroll-debounced", resultsSelector, this.loadMoreIfNeeded.bind(this));
    Fluent.on(this.container, "change", ".select2-input", function(e) {
      e.stopPropagation();
    });
    Fluent.on(this.dropdown, "change", ".select2-input", function(e) {
      e.stopPropagation();
    });
    installKeyUpChangeEvent(search);
    ["keyup-change", "input", "paste"].forEach((ev) => Fluent.on(search, ev, this.updateResults.bind(this)));
    Fluent.on(search, "focus", function() {
      search.classList.add("select2-focused");
    });
    Fluent.on(search, "blur", function() {
      search.classList.remove("select2-focused");
    });
    Fluent.on(this.dropdown, "mouseup", resultsSelector, (e) => {
      if (e.target.closest(".select2-result-selectable")) {
        this.highlightUnderEvent(e);
        this.selectHighlighted(e);
      }
    });
    ["click mouseup mousedown touchstart touchend focusin"].forEach((ev) => Fluent.on(this.dropdown, ev, function(e) {
      e.stopPropagation();
    }));
    this.nextSearchTerm = void 0;
    if (typeof this.opts.initSelection === "function") {
      this.initSelection();
      this.monitorSource();
    }
    if (opts.maximumInputLength !== null) {
      this.search.setAttribute("maxlength", "" + opts.maximumInputLength);
    }
    var disabled = opts.element.disabled;
    if (disabled === void 0) disabled = false;
    this.enable(!disabled);
    var readonly = opts.element.readOnly;
    if (readonly === void 0) readonly = false;
    this.readonly(readonly);
    scrollBarDimensions = scrollBarDimensions || measureScrollbar();
    this.autofocus = opts.element.autofocus;
    opts.element.autofocus = false;
    if (this.autofocus) this.focus();
    this.search.setAttribute("placeholder", opts.searchInputPlaceholder);
  }
  destroy() {
    var _a68, _b;
    var element = this.opts.element, select2 = element == null ? void 0 : element.select2, self2 = this;
    this.close();
    if (element && element.detachEvent) {
      element.detachEvent("onpropertychange", self2._sync);
    }
    if (this.propertyObserver) {
      this.propertyObserver.disconnect();
      this.propertyObserver = null;
    }
    this._sync = null;
    if (select2 !== void 0) {
      (_a68 = select2.container) == null ? void 0 : _a68.remove();
      (_b = select2.dropdown) == null ? void 0 : _b.remove();
      if (element) {
        element.classList.remove("select2-offscreen");
        delete element.select2;
        Fluent.off(element, ".select2");
        element.autofocus = this.autofocus || false;
      }
      if (this.elementTabIndex) {
        element.setAttribute("tabindex", this.elementTabIndex);
      } else {
        element.removeAttribute("tabindex");
      }
      delete element.style.display;
    }
    cleanupJQueryElements.call(
      this,
      "container",
      "dropdown",
      "results",
      "search"
    );
  }
  optionToData(element) {
    if (element instanceof HTMLOptionElement) {
      return {
        id: element.value,
        text: element.textContent,
        element,
        css: element.getAttribute("class"),
        disabled: element.disabled,
        locked: equal(element.getAttribute("locked"), "locked") || equal(element.getAttribute("locked"), true)
      };
    } else if (element instanceof HTMLOptGroupElement) {
      return {
        text: element.getAttribute("label"),
        children: [],
        element,
        css: element.getAttribute("class")
      };
    }
  }
  prepareOpts(opts) {
    var element, select, idKey, ajaxUrl, self2 = this;
    element = opts.element;
    if (element.tagName.toLowerCase() === "select") {
      this.select = select = opts.element;
    }
    if (select) {
      ["id", "multiple", "ajax", "query", "createSearchChoice", "initSelection", "data", "tags"].forEach(function(opt) {
        if (opt in opts && opts[opt] != null) {
          throw new Error("Option '" + this + "' is not allowed for Select2 when attached to a <select> element.");
        }
      });
    }
    opts = Object.assign({}, {
      populateResults: function(container, results, query) {
        var id = this.opts.id;
        let populate = function(results2, container2, depth) {
          var i, l, result, selectable, disabled, compound, node, label, innerContainer, formatted;
          results2 = opts.sortResults(results2, container2, query);
          var nodes = [];
          for (i = 0, l = results2.length; i < l; i = i + 1) {
            result = results2[i];
            disabled = result.disabled === true;
            selectable = !disabled && id(result) !== void 0;
            compound = result.children && result.children.length > 0;
            node = document.createElement("li");
            node.classList.add("select2-results-dept-" + depth);
            node.classList.add("select2-result");
            node.classList.add(selectable ? "select2-result-selectable" : "select2-result-unselectable");
            if (disabled) {
              node.classList.add("select2-disabled");
            }
            if (compound) {
              node.classList.add("select2-result-with-children");
            }
            Fluent.addClass(node, self2.opts.formatResultCssClass(result));
            node.setAttribute("role", "presentation");
            label = document.createElement("div");
            label.classList.add("select2-result-label");
            label.setAttribute("id", "select2-result-label-" + nextUid());
            label.setAttribute("role", "option");
            formatted = opts.formatResult(result, label, query, self2.opts.escapeMarkup);
            if (formatted !== void 0) {
              if (formatted instanceof Node) {
                Fluent.empty(label);
                label.appendChild(formatted);
              } else
                label.innerHTML = formatted != null ? formatted : "";
              node.append(label);
            }
            if (compound) {
              innerContainer = document.createElement("ul");
              innerContainer.classList.add("select2-result-sub");
              populate(result.children, innerContainer, depth + 1);
              node.append(innerContainer);
            }
            node.select2data = result;
            nodes.push(node);
          }
          container2.append(...nodes);
        };
        populate(results, container, 0);
      }
    }, Select2.defaults, opts);
    if (typeof opts.id !== "function") {
      idKey = opts.id;
      opts.id = function(e) {
        return e[idKey];
      };
    }
    if (opts.element.dataset.select2Tags) {
      if ("tags" in opts) {
        throw "tags specified as both an attribute 'data-select2-tags' and in options of Select2 " + opts.element.getAttribute("id");
      }
      opts.tags = JSON.parse(opts.element.dataset.select2Tags);
    }
    if (select) {
      opts.query = (query) => {
        var data = { results: [], more: false }, term = query.term, children;
        let process = function(element2, collection) {
          var group;
          if (element2 instanceof HTMLOptionElement) {
            if (query.matcher(term, element2.textContent, element2)) {
              collection.push(self2.optionToData(element2));
            }
          } else if (element2 instanceof HTMLOptGroupElement) {
            group = self2.optionToData(element2);
            Array.from(element2.children).forEach(function(elm) {
              process(elm, group.children);
            });
            if (group.children.length > 0) {
              collection.push(group);
            }
          }
        };
        children = Array.from(element.children);
        if (this.getPlaceholder() !== void 0 && children.length > 0) {
          var placeholderOption = this.getPlaceholderOption();
          if (placeholderOption) {
            children = children.filter((x) => x !== placeholderOption);
          }
        }
        children.forEach((elm) => process(elm, data.results));
        query.callback(data);
      };
      opts.id = function(e) {
        return e.id;
      };
    } else {
      if (!("query" in opts)) {
        if ("ajax" in opts) {
          ajaxUrl = opts.element.dataset.ajaxUrl;
          if (ajaxUrl && ajaxUrl.length > 0) {
            opts.ajax.url = ajaxUrl;
          }
          opts.query = ajax.call(opts.element, opts.ajax);
        } else if ("data" in opts) {
          opts.query = local(opts.data);
        } else if ("tags" in opts) {
          opts.query = tags(opts.tags);
          if (opts.createSearchChoice === void 0) {
            opts.createSearchChoice = function(term) {
              return { id: term == null ? void 0 : term.trim(), text: term == null ? void 0 : term.trim() };
            };
          }
          if (opts.initSelection === void 0) {
            opts.initSelection = function(element2, callback) {
              var data = [];
              splitVal(element2.value, opts.separator).forEach(function(id) {
                var obj = { id, text: id }, tags2 = opts.tags;
                if (typeof tags2 === "function") tags2 = tags2();
                tags2.forEach(function(tag) {
                  if (equal(tag.id, obj.id)) {
                    obj = tag;
                    return false;
                  }
                });
                data.push(obj);
              });
              callback(data);
            };
          }
        }
      }
    }
    if (typeof opts.query !== "function") {
      throw "query function not defined for Select2 " + opts.element.getAttribute("id");
    }
    if (opts.createSearchChoicePosition === "top") {
      opts.createSearchChoicePosition = function(list, item) {
        list.unshift(item);
      };
    } else if (opts.createSearchChoicePosition === "bottom") {
      opts.createSearchChoicePosition = function(list, item) {
        list.push(item);
      };
    } else if (typeof opts.createSearchChoicePosition !== "function") {
      throw "invalid createSearchChoicePosition option must be 'top', 'bottom' or a custom function";
    }
    return opts;
  }
  /**
   * Monitor the original element for changes and update select2 accordingly
   */
  monitorSource() {
    var el = this.opts.element, observer, self2 = this;
    Fluent.on(el, "change.select2", function(e) {
      if (this.opts.element.dataset.select2ChangeTriggered !== "true") {
        this.initSelection();
      }
    }.bind(this));
    Fluent.on(el, "focus.select2", function(e) {
      this.focus();
    }.bind(this));
    this._sync = () => {
      var disabled = el.disabled;
      if (disabled === void 0) disabled = false;
      this.enable(!disabled);
      var readonly = el.readOnly;
      if (readonly === void 0) readonly = false;
      this.readonly(readonly);
      syncCssClasses(this.container, this.opts.element, this.opts.adaptContainerCssClass);
      Fluent.addClass(this.container, evaluate(this.opts.containerCssClass, this.opts.element));
      syncCssClasses(this.dropdown, this.opts.element, this.opts.adaptDropdownCssClass);
      Fluent.addClass(this.dropdown, evaluate(this.opts.dropdownCssClass, this.opts.element));
    };
    if (el && el.attachEvent) {
      el.attachEvent("onpropertychange", self2._sync);
    }
    observer = window.MutationObserver;
    if (observer !== void 0) {
      if (this.propertyObserver) {
        delete this.propertyObserver;
        this.propertyObserver = null;
      }
      this.propertyObserver = new observer(function(mutations) {
        mutations.forEach(self2._sync);
      });
      this.propertyObserver.observe(el, { attributes: true, subtree: false });
    }
  }
  triggerSelect(data) {
    var evt = { val: this.id(data), object: data, choice: data };
    var event = Fluent.trigger(this.opts.element, "select2-selecting", evt);
    return !Fluent.isDefaultPrevented(event);
  }
  /**
   * Triggers the change event on the source element
   */
  triggerChange(details) {
    details = details || {};
    details = Object.assign({}, details, { val: this.val() });
    this.opts.element.dataset.select2ChangeTriggered = "true";
    Fluent.trigger(this.opts.element, "change", details);
    delete this.opts.element.dataset.select2ChangeTriggered;
    this.opts.element.click();
    if (this.opts.blurOnChange)
      this.opts.element.blur();
  }
  isInterfaceEnabled() {
    return this.enabledInterface === true;
  }
  enableInterface() {
    var enabled = this._enabled && !this._readonly, disabled = !enabled;
    if (enabled === this.enabledInterface) return false;
    this.container.classList.toggle("select2-container-disabled", disabled);
    this.close();
    this.enabledInterface = enabled;
    return true;
  }
  enable(enabled) {
    if (enabled === void 0) enabled = true;
    if (this._enabled === enabled) return;
    this._enabled = enabled;
    this.opts.element.disabled = !enabled;
    this.enableInterface();
  }
  disable() {
    this.enable(false);
  }
  readonly(enabled) {
    if (enabled === void 0) enabled = false;
    if (this._readonly === enabled) return;
    this._readonly = enabled;
    this.opts.element.readOnly = enabled;
    this.enableInterface();
  }
  opened() {
    return this.container ? this.container.classList.contains("select2-dropdown-open") : false;
  }
  positionDropdown() {
    var dropdown = this.dropdown, offset = getOffset(this.container), height = this.container.offsetHeight, width = this.container.offsetWidth, dropHeight = dropdown.offsetHeight, windowWidth = window.innerWidth, windowHeight = window.innerHeight, viewPortRight = window.scrollX + windowWidth, viewportBottom = window.scrollY + windowHeight, dropTop = offset.top + height, dropLeft = offset.left, enoughRoomBelow = dropTop + dropHeight <= viewportBottom, enoughRoomAbove = offset.top - dropHeight >= window.scrollY, dropWidth = dropdown.offsetWidth, enoughRoomOnRight = dropLeft + dropWidth <= viewPortRight, aboveNow = dropdown.classList.contains("select2-drop-above"), bodyOffset, above, changeDirection, resultsListNode;
    if (aboveNow) {
      above = true;
      if (!enoughRoomAbove && enoughRoomBelow) {
        changeDirection = true;
        above = false;
      }
    } else {
      above = false;
      if (!enoughRoomBelow && enoughRoomAbove) {
        changeDirection = true;
        above = true;
      }
    }
    if (changeDirection) {
      Fluent.toggleClass(dropdown, "select2-display-none", true);
      offset = getOffset(this.container);
      height = this.container.offsetHeight;
      width = this.container.offsetWidth;
      dropHeight = dropdown.offsetHeight;
      viewPortRight = window.scrollX + windowWidth;
      viewportBottom = window.scrollY + windowHeight;
      dropTop = offset.top + height;
      dropLeft = offset.left;
      dropWidth = dropdown.offsetWidth;
      enoughRoomOnRight = dropLeft + dropWidth <= viewPortRight;
      Fluent.toggleClass(dropdown, "select2-display-none", false);
      this.focusSearch();
    }
    if (this.opts.dropdownAutoWidth) {
      resultsListNode = dropdown.querySelector(".select2-results");
      dropdown.classList.add("select2-drop-auto-width");
      dropdown.style.width = "";
      dropWidth = dropdown.offsetWidth + (resultsListNode.scrollHeight === resultsListNode.clientHeight ? 0 : scrollBarDimensions.width);
      dropWidth > width ? width = dropWidth : dropWidth = width;
      dropHeight = dropdown.offsetHeight;
      enoughRoomOnRight = dropLeft + dropWidth <= viewPortRight;
    } else {
      this.container.classList.remove("select2-drop-auto-width");
    }
    if (getComputedStyle(document.body).position !== "static") {
      bodyOffset = getOffset(document.body);
      dropTop -= bodyOffset.top;
      dropLeft -= bodyOffset.left;
    }
    if (!enoughRoomOnRight) {
      dropLeft = offset.left + this.container.offsetWidth - dropWidth;
    }
    let css = {
      left: dropLeft + "px",
      width: width + "px"
    };
    if (above) {
      css.top = offset.top - dropHeight + "px";
      css.bottom = "auto";
      this.container.classList.add("select2-drop-above");
      dropdown.classList.add("select2-drop-above");
    } else {
      css.top = dropTop + "px";
      css.bottom = "auto";
      this.container.classList.remove("select2-drop-above");
      dropdown.classList.remove("select2-drop-above");
    }
    css = Object.assign(css, evaluate(this.opts.dropdownCss, this.opts.element));
    Object.assign(dropdown.style, css);
  }
  shouldOpen() {
    if (this.opened()) return false;
    if (this._enabled === false || this._readonly === true) return false;
    var event = Fluent.trigger(this.opts.element, "select2-opening");
    return !Fluent.isDefaultPrevented(event);
  }
  clearDropdownAlignmentPreference() {
    this.container.classList.remove("select2-drop-above");
    this.dropdown.classList.remove("select2-drop-above");
  }
  /**
   * Opens the dropdown
   *
   * @return {Boolean} whether or not dropdown was opened. This method will return false if, for example,
   * the dropdown is already open, or if the 'open' event listener on the element called preventDefault().
   */
  open() {
    if (!this.shouldOpen()) return false;
    this.opening();
    Fluent.on(document, "mousemove.select2Event", function(e) {
      lastMousePosition.x = e.pageX;
      lastMousePosition.y = e.pageY;
    });
    return true;
  }
  /**
   * Performs the opening of the dropdown
   */
  opening() {
    var _a68, _b;
    var cid = this.containerEventName, scroll = "scroll." + cid, resize = "resize." + cid, orient = "orientationchange." + cid, mask;
    this.container.classList.add("select2-dropdown-open", "select2-container-active");
    this.clearDropdownAlignmentPreference();
    var dropdownParent = (_a68 = typeof this.opts.dropdownParent === "function" ? this.opts.dropdownParent(this.opts.element) : null) != null ? _a68 : document == null ? void 0 : document.body;
    if (dropdownParent && this.dropdown !== dropdownParent.lastElementChild) {
      dropdownParent.appendChild(this.dropdown);
    }
    mask = document.getElementById("select2-drop-mask");
    if (!mask) {
      mask = document.createElement("div");
      mask.setAttribute("id", "select2-drop-mask");
      mask.setAttribute("class", "select2-drop-mask");
      mask.style.display = "none";
      document.body.appendChild(mask);
      ["mousedown", "touchstart", "click"].forEach((ev) => mask.addEventListener(ev, function(e) {
        reinsertElement(mask);
        var dropdown = document.getElementById("select2-drop"), self2;
        if (dropdown) {
          self2 = dropdown.select2;
          if (self2.opts.selectOnBlur) {
            self2.selectHighlighted({ noFocus: true });
          }
          self2.close();
          e.type !== "touchstart" && e.preventDefault();
          e.stopPropagation();
        }
      }, { passive: ev === "touchstart" }));
    }
    if (this.dropdown.previousElementSibling != mask) {
      Fluent(mask).insertBefore(this.dropdown);
    }
    (_b = document.getElementById("select2-drop")) == null ? void 0 : _b.removeAttribute("id");
    this.dropdown.setAttribute("id", "select2-drop");
    Fluent.toggle(mask, true);
    this.positionDropdown();
    Fluent.toggleClass(this.dropdown, "select2-display-none", false);
    this.positionDropdown();
    this.dropdown.classList.add("select2-drop-active");
    var that = this;
    var parent2 = this.container.parentElement;
    var parents = [];
    while (parent2) {
      parents.push(parent2);
      parent2 = parent2.parentElement;
    }
    parents.push(window);
    parents.forEach((parent3) => {
      [resize, scroll, orient].forEach((ev) => {
        Fluent.on(parent3, ev, function() {
          if (that.opened()) that.positionDropdown();
        });
      });
    });
  }
  close() {
    var _a68;
    if (!this.opened()) return;
    var cid = this.containerEventName, scroll = "scroll." + cid, resize = "resize." + cid, orient = "orientationchange." + cid;
    var parent2 = this.container.parentElement;
    var parents = [];
    while (parent2) {
      parents.push(parent2);
      parent2 = parent2.parentElement;
    }
    parents.push(window);
    parents.forEach((parent3) => {
      Fluent.off(parent3, scroll);
      Fluent.off(parent3, resize);
      Fluent.off(parent3, orient);
    });
    this.clearDropdownAlignmentPreference();
    Fluent(document.getElementById("select2-drop-mask")).hide();
    this.dropdown.removeAttribute("id");
    Fluent.toggleClass(this.dropdown, "select2-display-none", true);
    this.container.classList.remove("select2-dropdown-open", "select2-container-active");
    Fluent.empty(this.results);
    Fluent.off(document, "mousemove.select2Event");
    this.clearSearch();
    this.search.classList.remove("select2-active");
    (_a68 = this.search.parentElement) == null ? void 0 : _a68.classList.remove("select2-active");
    Fluent.trigger(this.opts.element, "select2-close");
  }
  /**
   * Opens control, sets input value, and updates results.
   */
  externalSearch(term) {
    this.open();
    this.search.value = term;
    this.updateResults(false);
  }
  clearSearch() {
  }
  getMaximumSelectionSize() {
    return evaluate(this.opts.maximumSelectionSize, this.opts.element);
  }
  ensureHighlightVisible() {
    var results = this.results, index, child, hb, rb, y, more, topOffset;
    index = this.highlight();
    if (index < 0) return;
    if (index == 0) {
      results.scrollTop = 0;
      return;
    }
    var children = this.findHighlightableChoices().map((x) => x.querySelector(".select2-result-label"));
    child = children[index];
    if (!child)
      return;
    topOffset = (getOffset(child) || {}).top || 0;
    hb = topOffset + getOuterHeightWithMargins(child);
    if (index === children.length - 1) {
      more = results.querySelector("li.select2-more-results");
      if (more) {
        hb = getOffset(more).top + getOuterHeightWithMargins(more);
      }
    }
    rb = getOffset(results).top + getOuterHeightWithMargins(results);
    if (hb > rb) {
      results.scrollTop = results.scrollTop + (hb - rb);
    }
    y = topOffset - getOffset(results).top;
    if (y < 0 && getComputedStyle(child).display != "none") {
      results.scrollTop = results.scrollTop + y;
    }
  }
  findHighlightableChoices() {
    return Array.from(this.results.querySelectorAll(".select2-result-selectable:not(.select2-disabled):not(.select2-selected)"));
  }
  moveHighlight(delta) {
    var choices = this.findHighlightableChoices(), index = this.highlight();
    while (index > -1 && index < choices.length) {
      index += delta;
      var choice = choices[index];
      if (choice && choice.classList.contains("select2-result-selectable") && !choice.classList.contains("select2-disabled") && !choice.classList.contains("select2-selected")) {
        this.highlight(index);
        break;
      }
    }
  }
  highlight(index) {
    var _a68;
    var choices = this.findHighlightableChoices(), choice, data;
    if (arguments.length === 0) {
      return choices.findIndex((x) => x.classList.contains("select2-highlighted"));
    }
    if (index >= choices.length) index = choices.length - 1;
    if (index < 0) index = 0;
    this.removeHighlight();
    choice = choices[index];
    choice == null ? void 0 : choice.classList.add("select2-highlighted");
    this.search.setAttribute("aria-activedescendant", (_a68 = choice == null ? void 0 : choice.querySelector(".select2-result-label")) == null ? void 0 : _a68.getAttribute("id"));
    this.ensureHighlightVisible();
    data = choice == null ? void 0 : choice.select2data;
    if (data) {
      Fluent.trigger(this.opts.element, "select2-highlight", { val: this.id(data), choice: data });
    }
  }
  removeHighlight() {
    this.results.querySelectorAll(".select2-highlighted").forEach((x) => x.classList.remove("select2-highlighted"));
  }
  touchMoved() {
    this._touchMoved = true;
  }
  clearTouchMoved() {
    this._touchMoved = false;
  }
  countSelectableResults() {
    return this.findHighlightableChoices().length;
  }
  highlightUnderEvent(event) {
    var _a68, _b;
    var el = (_b = (_a68 = event.target) == null ? void 0 : _a68.closest) == null ? void 0 : _b.call(_a68, ".select2-result-selectable");
    if (el && !el.classList.contains("select2-highlighted")) {
      var choices = this.findHighlightableChoices();
      this.highlight(choices.indexOf(el));
    } else if (!el) {
      this.removeHighlight();
    }
  }
  loadMoreIfNeeded() {
    var results = this.results, more = results.querySelector("li.select2-more-results"), below, page = this.resultsPage + 1, self2 = this, term = this.search.value, context = this.context;
    if (!more) return;
    below = getOffset(more).top - getOffset(results).top - results.getBoundingClientRect().height;
    if (below <= this.opts.loadMorePadding) {
      more.classList.add("select2-active");
      this.opts.query({
        element: this.opts.element,
        term,
        page,
        context,
        matcher: this.opts.matcher,
        callback: (data) => {
          if (!self2.opened()) return;
          self2.opts.populateResults.call(this, results, data.results, { term, page, context });
          self2.postprocessResults(data, false, false);
          if (data.more === true) {
            results.appendChild(more);
            var loadMore = evaluate(self2.opts.formatLoadMore, self2.opts.element, page + 1);
            Fluent.empty(more);
            if (loadMore instanceof Node)
              more.appendChild(loadMore);
            else
              more.textContent = loadMore != null ? loadMore : "";
            window.setTimeout(function() {
              self2.loadMoreIfNeeded();
            }, 10);
          } else {
            more.remove();
          }
          self2.positionDropdown();
          self2.resultsPage = page;
          self2.context = data.context;
          Fluent.trigger(this.opts.element, "select2-loaded", { items: data });
        }
      });
    }
  }
  /**
   * Default tokenizer function which does nothing
   */
  tokenize() {
    return void 0;
  }
  /**
   * @param initial whether or not this is the call to this method right after the dropdown has been opened
   */
  updateResults(initial) {
    var _a68, _b, _c;
    var search = this.search, results = this.results, opts = this.opts, data, self2 = this, input, term = search.value, lastTerm = this.container.dataset.select2LastTerm, queryNumber;
    if (initial !== true && lastTerm && equal(term, lastTerm)) return;
    this.container.dataset.select2LastTerm = term;
    if (initial !== true && (this.showSearchInput === false || !this.opened())) {
      return;
    }
    function postRender() {
      var _a69;
      search.classList.remove("select2-active");
      (_a69 = search.parentElement) == null ? void 0 : _a69.classList.remove("select2-active");
      self2.positionDropdown();
    }
    function createLi(klass, html) {
      if (klass == null && html === void 0)
        return;
      var li = document.createElement("li");
      li.classList.add(klass);
      if (html instanceof Node)
        li.appendChild(html);
      else
        li.innerHTML = html != null ? html : "";
      return li;
    }
    function render(klass, html) {
      Fluent.empty(results);
      var li = createLi(klass, html);
      if (li != null)
        results.appendChild(li);
      postRender();
    }
    queryNumber = ++this.queryCount;
    var maxSelSize = this.getMaximumSelectionSize();
    if (maxSelSize >= 1) {
      data = this.data();
      if (Array.isArray(data) && data.length >= maxSelSize && checkFormatter(opts.formatSelectionTooBig, "formatSelectionTooBig")) {
        render("select2-selection-limit", evaluate(opts.formatSelectionTooBig, opts.element, maxSelSize));
        return;
      }
    }
    if (((_a68 = search.value) == null ? void 0 : _a68.length) < opts.minimumInputLength) {
      if (checkFormatter(opts.formatInputTooShort, "formatInputTooShort")) {
        render("select2-no-results", evaluate(opts.formatInputTooShort, opts.element, search.value, opts.minimumInputLength));
      } else {
        render("");
      }
      if (initial && this.showSearch) this.showSearch(true);
      return;
    }
    if (opts.maximumInputLength && ((_b = search.value) == null ? void 0 : _b.length) > opts.maximumInputLength) {
      if (checkFormatter(opts.formatInputTooLong, "formatInputTooLong")) {
        render("select2-no-results", evaluate(opts.formatInputTooLong, opts.element, search.value, opts.maximumInputLength));
      } else {
        render("");
      }
      return;
    }
    if (opts.formatSearching && this.findHighlightableChoices().length === 0) {
      render("select2-searching", evaluate(opts.formatSearching, opts.element) + "</li>");
    }
    search.classList.add("select2-active");
    (_c = search.parentElement) == null ? void 0 : _c.classList.add("select2-active");
    this.removeHighlight();
    input = this.tokenize();
    if (input != void 0 && input != null) {
      search.value = input != null ? input : "";
    }
    this.resultsPage = 1;
    opts.query({
      element: opts.element,
      term: search.value,
      page: this.resultsPage,
      context: null,
      matcher: opts.matcher,
      callback: (data2) => {
        var def;
        if (queryNumber != this.queryCount) {
          return;
        }
        if (!this.opened()) {
          this.search.classList.remove("select2-active");
          return;
        }
        if (data2.hasError !== void 0 && checkFormatter(opts.formatAjaxError, "formatAjaxError")) {
          render("select2-ajax-error", evaluate(opts.formatAjaxError, opts.element, data2));
          return;
        }
        this.context = data2.context === void 0 ? null : data2.context;
        if (this.opts.createSearchChoice && search.value !== "") {
          def = this.opts.createSearchChoice.call(self2, search.value, data2.results);
          if (def !== void 0 && def !== null && self2.id(def) !== void 0 && self2.id(def) !== null) {
            if (data2.results.filter(
              function() {
                return equal(self2.id(this), self2.id(def));
              }
            ).length === 0) {
              this.opts.createSearchChoicePosition(data2.results, def);
            }
          }
        }
        if (data2.results.length === 0 && checkFormatter(opts.formatNoMatches, "formatNoMatches")) {
          render("select2-no-results", evaluate(opts.formatNoMatches, opts.element, search.value));
          return;
        }
        Fluent.empty(results);
        self2.opts.populateResults.call(this, results, data2.results, { term: search.value, page: this.resultsPage, context: null });
        if (data2.more === true && checkFormatter(opts.formatLoadMore, "formatLoadMore")) {
          results.appendChild(createLi("select2-more-results", evaluate(opts.formatLoadMore, opts.element, this.resultsPage)));
          window.setTimeout(function() {
            self2.loadMoreIfNeeded();
          }, 10);
        }
        this.postprocessResults(data2, initial);
        postRender();
        Fluent.trigger(this.opts.element, "select2-loaded", { items: data2 });
      }
    });
  }
  cancel(e) {
    this.close();
  }
  blur() {
    if (this.opts.selectOnBlur)
      this.selectHighlighted({ noFocus: true });
    this.close();
    this.container.classList.remove("select2-container-active");
    if (this.search === document.activeElement) {
      this.search.blur();
    }
    this.clearSearch();
    this.selection.querySelectorAll(".select2-search-choice-focus").forEach((x) => x.classList.remove("select2-search-choice-focus"));
  }
  focusSearch() {
    focus(this.search);
  }
  selectHighlighted(options) {
    var _a68;
    if (this._touchMoved) {
      this.clearTouchMoved();
      return;
    }
    var index = this.highlight(), highlighted = this.results.querySelector(".select2-highlighted"), data = (_a68 = highlighted == null ? void 0 : highlighted.closest(".select2-result")) == null ? void 0 : _a68.select2data;
    if (data) {
      this.highlight(index);
      this.onSelect(data, options);
    } else if (options && options.noFocus) {
      this.close();
    }
  }
  getPlaceholder() {
    var placeholderOption;
    return this.opts.element.getAttribute("placeholder") || this.opts.element.dataset.placeholder || this.opts.placeholder || ((placeholderOption = this.getPlaceholderOption()) !== void 0 ? placeholderOption == null ? void 0 : placeholderOption.textContent : void 0);
  }
  getPlaceholderOption() {
    var _a68;
    if (this.select) {
      var firstOption = this.select.querySelector(":scope > option");
      if (this.opts.placeholderOption !== void 0) {
        return this.opts.placeholderOption === "first" && firstOption || typeof this.opts.placeholderOption === "function" && this.opts.placeholderOption(this.select);
      } else if (((_a68 = firstOption.textContent) == null ? void 0 : _a68.trim()) === "" && firstOption.value === "") {
        return firstOption;
      }
    }
  }
  /**
   * Get the desired width for the container element.  This is
   * derived first from option `width` passed to select2, then
   * the inline 'style' on the original element, and finally
   * falls back to the jQuery calculated element width.
   */
  initContainerWidth() {
    function resolveContainerWidth() {
      var style, attrs, matches, i, l, attr2;
      if (this.opts.width === "off") {
        return null;
      } else if (this.opts.width === "element") {
        return this.opts.element.offsetWidth === 0 ? "auto" : this.opts.element.offsetWidth + "px";
      } else if (this.opts.width === "copy" || this.opts.width === "resolve") {
        style = this.opts.element.getAttribute("style");
        if (style) {
          attrs = style.split(";");
          for (i = 0, l = attrs.length; i < l; i = i + 1) {
            attr2 = attrs[i].replace(/\s/g, "");
            matches = attr2.match(/^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i);
            if (matches !== null && matches.length >= 1)
              return matches[1];
          }
        }
        if (this.opts.width === "resolve") {
          style = getComputedStyle(this.opts.element).width;
          if (style.indexOf("%") > 0) return style;
          return this.opts.element.offsetWidth === 0 ? "auto" : this.opts.element.offsetWidth + "px";
        }
        return null;
      } else if (typeof this.opts.width === "function") {
        return this.opts.width();
      } else {
        return this.opts.width;
      }
    }
    ;
    var width = resolveContainerWidth.call(this);
    if (width !== null) {
      this.container.style.width = width;
    }
  }
};
var SingleSelect2 = class extends AbstractSelect2 {
  createContainer() {
    var container = document.createElement("div");
    container.classList.add("select2-container");
    container.innerHTML = "<a href='javascript:void(0)' class='select2-choice' tabindex='-1'><span class='select2-chosen'>&#160;</span><abbr class='select2-search-choice-close'></abbr><span class='select2-arrow' role='presentation'><b role='presentation'></b></span></a><label for='' class='select2-offscreen'></label><input class='select2-focusser select2-offscreen' type='text' aria-haspopup='true' role='button' /><div class='select2-drop select2-display-none'><div class='select2-search'><label for='' class='select2-offscreen'></label><input type='text' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' class='select2-input' role='combobox' aria-expanded='true'aria-autocomplete='list' /></div><ul class='select2-results' role='listbox'></ul></div>";
    return container;
  }
  enableInterface() {
    var result = super.enableInterface();
    if (result) {
      this.focusser.disabled = !this.isInterfaceEnabled();
    }
    return result;
  }
  opening() {
    var _a68;
    var el, range, len;
    if (this.opts.minimumResultsForSearch >= 0) {
      this.showSearch(true);
    }
    super.opening();
    if (this.showSearchInput !== false) {
      this.search.value = this.focusser.value;
    }
    if (this.opts.shouldFocusInput(this)) {
      this.search.focus();
      el = this.search;
      if (el.createTextRange) {
        range = el.createTextRange();
        range.collapse(false);
        range.select();
      } else if (el.setSelectionRange) {
        len = this.search.value.length;
        el.setSelectionRange(len, len);
      }
    }
    if (this.search.value === "") {
      if (this.nextSearchTerm != void 0) {
        this.search.value = (_a68 = this.nextSearchTerm) != null ? _a68 : "";
        this.search.select();
      }
    }
    this.focusser.disabled = true;
    this.focusser.value = "";
    this.updateResults(true);
    Fluent.trigger(this.opts.element, "select2-open");
  }
  close() {
    if (!this.opened()) return;
    super.close();
    this.focusser.disabled = false;
    if (this.opts.shouldFocusInput(this)) {
      this.focusser.focus();
    }
  }
  focus() {
    if (this.opened()) {
      this.close();
    } else {
      this.focusser.disabled = false;
      if (this.opts.shouldFocusInput(this)) {
        this.focusser.focus();
      }
    }
  }
  isFocused() {
    return this.container.classList.contains("select2-container-active");
  }
  cancel(e) {
    super.cancel(e);
    this.focusser.disabled = false;
    if (this.opts.shouldFocusInput(this)) {
      this.focusser.focus();
    }
  }
  destroy() {
    var _a68;
    (_a68 = document.querySelector("label[for='" + this.focusser.getAttribute("id") + "']")) == null ? void 0 : _a68.setAttribute(
      "for",
      this.opts.element.getAttribute("id")
    );
    super.destroy();
    cleanupJQueryElements.call(
      this,
      "selection",
      "focusser"
    );
  }
  initContainer() {
    var _a68, _b, _c, _d, _e;
    var selection, container = this.container, dropdown = this.dropdown, idSuffix = nextUid(), elementLabel;
    if (this.opts.minimumResultsForSearch < 0) {
      this.showSearch(false);
    } else {
      this.showSearch(true);
    }
    this.selection = selection = container.querySelector(".select2-choice");
    this.focusser = container.querySelector(".select2-focusser");
    (_a68 = selection.querySelector(".select2-chosen")) == null ? void 0 : _a68.setAttribute("id", "select2-chosen-" + idSuffix);
    this.focusser.setAttribute("aria-labelledby", "select2-chosen-" + idSuffix);
    this.results.setAttribute("id", "select2-results-" + idSuffix);
    this.search.setAttribute("aria-owns", "select2-results-" + idSuffix);
    this.focusser.setAttribute("id", "s2id_autogen" + idSuffix);
    elementLabel = document.querySelector("label[for='" + this.opts.element.getAttribute("id") + "']");
    this.focusser.previousElementSibling.textContent = (_b = elementLabel == null ? void 0 : elementLabel.textContent) != null ? _b : "";
    this.focusser.previousElementSibling.setAttribute("for", this.focusser.getAttribute("id"));
    var originalTitle = this.opts.element.getAttribute("title");
    this.opts.element.setAttribute("title", originalTitle || ((_c = elementLabel == null ? void 0 : elementLabel.textContent) != null ? _c : ""));
    this.focusser.setAttribute("tabindex", this.elementTabIndex);
    this.search.setAttribute("id", this.focusser.getAttribute("id") + "_search");
    this.search.previousElementSibling.textContent = (_e = (_d = document.querySelector("label[for='" + this.focusser.getAttribute("id") + "']")) == null ? void 0 : _d.textContent) != null ? _e : "";
    this.search.previousElementSibling.setAttribute("for", this.search.getAttribute("id"));
    Fluent.on(this.search, "keydown", (e) => {
      if (!this.isInterfaceEnabled()) return;
      if (229 == e.keyCode) return;
      if (e.which === KEY.PAGE_UP || e.which === KEY.PAGE_DOWN) {
        killEvent(e);
        return;
      }
      switch (e.which) {
        case KEY.UP:
        case KEY.DOWN:
          this.moveHighlight(e.which === KEY.UP ? -1 : 1);
          killEvent(e);
          return;
        case KEY.ENTER:
          this.selectHighlighted();
          killEvent(e);
          return;
        case KEY.TAB:
          this.selectHighlighted({ noFocus: true });
          return;
        case KEY.ESC:
          this.cancel(e);
          killEvent(e);
          return;
      }
    });
    Fluent.on(this.search, "blur", (e) => {
      if (document.activeElement === document.body) {
        window.setTimeout(() => {
          if (this.opened()) {
            this.search.focus();
          }
        }, 0);
      }
    });
    Fluent.on(this.focusser, "keydown", (e) => {
      if (!this.isInterfaceEnabled()) return;
      if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC) {
        return;
      }
      if (this.opts.openOnEnter === false && e.which === KEY.ENTER) {
        killEvent(e);
        return;
      }
      if (e.which == KEY.DOWN || e.which == KEY.UP || e.which == KEY.ENTER && this.opts.openOnEnter) {
        if (e.altKey || e.ctrlKey || e.shiftKey || e.metaKey) return;
        this.open();
        killEvent(e);
        return;
      }
      if (e.which == KEY.DELETE || e.which == KEY.BACKSPACE) {
        if (this.opts.allowClear) {
          this.clear();
        }
        killEvent(e);
        return;
      }
    });
    installKeyUpChangeEvent(this.focusser);
    ["keyup-change", "input"].forEach((ev) => Fluent.on(this.focusser, ev, (e) => {
      if (this.opts.minimumResultsForSearch >= 0) {
        e.stopPropagation();
        if (this.opened()) return;
        this.open();
      }
    }));
    Fluent.on(selection, "click", "abbr", (e) => {
      if (!this.isInterfaceEnabled()) return;
      this.clear();
      killEventImmediately(e);
      this.close();
      this.selection.focus();
    });
    Fluent.on(selection, "dragstart", (e) => {
      e.preventDefault();
      return false;
    });
    Fluent.on(selection, "click", (e) => {
      if (!this.container.classList.contains("select2-container-active")) {
        Fluent.trigger(this.opts.element, "select2-focus");
      }
      if (this.opened()) {
        this.close();
      } else if (this.isInterfaceEnabled()) {
        this.open();
      }
      killEvent(e);
    });
    ["mousedown", "touchstart"].forEach((ev) => dropdown.addEventListener(ev, () => {
      if (this.opts.shouldFocusInput(this)) {
        this.search.focus();
      }
    }, { passive: true }));
    Fluent.on(selection, "focus", (e) => {
      killEvent(e);
    });
    Fluent.on(this.focusser, "focus", () => {
      if (!this.container.classList.contains("select2-container-active")) {
        Fluent.trigger(this.opts.element, "select2-focus");
      }
      this.container.classList.add("select2-container-active");
    });
    Fluent.on(this.focusser, "blur", () => {
      if (!this.opened()) {
        this.container.classList.remove("select2-container-active");
        Fluent.trigger(this.opts.element, "select2-blur");
      }
    });
    Fluent.on(this.search, "focus", () => {
      if (!this.container.classList.contains("select2-container-active")) {
        Fluent.trigger(this.opts.element, "select2-focus");
      }
      this.container.classList.add("select2-container-active");
    });
    this.initContainerWidth();
    this.opts.element.classList.add("select2-offscreen");
    this.setPlaceholder();
  }
  clear(triggerChange) {
    var _a68;
    var data = (_a68 = this.selection) == null ? void 0 : _a68.select2data;
    if (data) {
      var evt = Fluent.trigger(this.opts.element, "select2-clearing");
      if (Fluent.isDefaultPrevented(evt)) {
        return;
      }
      var placeholderOption = this.getPlaceholderOption();
      this.opts.element.value = placeholderOption ? placeholderOption.value : "";
      Fluent.empty(this.selection.querySelector(".select2-chosen"));
      delete this.selection.select2data;
      this.setPlaceholder();
      if (triggerChange !== false) {
        Fluent.trigger(this.opts.element, "select2-removed", { val: this.id(data), choice: data });
        this.triggerChange({ removed: data });
      }
    }
  }
  /**
   * Sets selection based on source element's value
   */
  initSelection() {
    if (this.isPlaceholderOptionSelected()) {
      this.updateSelection(null);
      this.close();
      this.setPlaceholder();
    } else {
      var self2 = this;
      this.opts.initSelection.call(null, this.opts.element, function(selected) {
        if (!self2.container)
          return;
        if (selected !== void 0 && selected !== null) {
          self2.updateSelection(selected);
          self2.close();
          self2.setPlaceholder();
          self2.nextSearchTerm = self2.opts.nextSearchTerm(selected, self2.search.value);
        }
      });
    }
  }
  isPlaceholderOptionSelected() {
    var placeholderOption;
    if (this.getPlaceholder() === void 0) return false;
    return (placeholderOption = this.getPlaceholderOption()) !== void 0 && placeholderOption.selected || this.opts.element.value === "" || this.opts.element.value === void 0 || this.opts.element.value === null;
  }
  prepareOpts(opts) {
    opts = super.prepareOpts(opts);
    var self2 = this;
    if (opts.element.tagName.toLowerCase() === "select") {
      opts.initSelection = function(element, callback) {
        var selected = element.querySelector("option:checked:not(:disabled)");
        callback(self2.optionToData(selected));
      };
    } else if ("data" in opts) {
      opts.initSelection = opts.initSelection || function(element, callback) {
        var id = element.value;
        var match = null;
        opts.query({
          matcher: function(term, text2, el) {
            var is_match = equal(id, opts.id(el));
            if (is_match) {
              match = el;
            }
            return is_match;
          },
          callback: typeof callback !== "function" ? () => {
          } : function() {
            callback(match);
          }
        });
      };
    }
    return opts;
  }
  getPlaceholder() {
    if (this.select) {
      if (this.getPlaceholderOption() === void 0) {
        return void 0;
      }
    }
    return super.getPlaceholder();
  }
  setPlaceholder() {
    var placeholder = this.getPlaceholder();
    if (this.isPlaceholderOptionSelected() && placeholder !== void 0) {
      if (this.select && this.getPlaceholderOption() === void 0) return;
      var chosen = this.selection.querySelector(".select2-chosen");
      chosen && (chosen.textContent = placeholder);
      this.selection.classList.add("select2-default");
      this.container.classList.remove("select2-allowclear");
    }
  }
  postprocessResults(data, initial, noHighlightUpdate) {
    var selected = 0, self2 = this;
    this.findHighlightableChoices().forEach((elm, i) => {
      if (equal(self2.id(elm.select2data), self2.opts.element.value)) {
        selected = i;
        return false;
      }
    });
    if (noHighlightUpdate !== false) {
      if (initial === true && selected >= 0) {
        this.highlight(selected);
      } else {
        this.highlight(0);
      }
    }
    if (initial === true) {
      var min = this.opts.minimumResultsForSearch;
      if (min >= 0) {
        this.showSearch(countResults(data.results) >= min);
      }
    }
  }
  showSearch(showSearchInput) {
    var _a68, _b;
    if (this.showSearchInput === showSearchInput) return;
    this.showSearchInput = showSearchInput;
    (_a68 = this.dropdown.querySelector(".select2-search")) == null ? void 0 : _a68.classList.toggle("select2-search-hidden", !showSearchInput);
    (_b = this.dropdown.querySelector(".select2-search")) == null ? void 0 : _b.classList.toggle("select2-offscreen", !showSearchInput);
    this.dropdown.classList.toggle("select2-with-searchbox", showSearchInput);
    this.container.classList.toggle("select2-with-searchbox", showSearchInput);
  }
  onSelect(data, options) {
    if (!this.triggerSelect(data)) {
      return;
    }
    var old = this.opts.element.value, oldData = this.data();
    this.opts.element.value = this.id(data);
    this.updateSelection(data);
    Fluent.trigger(this.opts.element, "select2-selected", { val: this.id(data), choice: data });
    this.nextSearchTerm = this.opts.nextSearchTerm(data, this.search.value);
    this.close();
    if ((!options || !options.noFocus) && this.opts.shouldFocusInput(this)) {
      this.focusser.focus();
    }
    if (!equal(old, this.id(data))) {
      this.triggerChange({ added: data, removed: oldData });
    }
  }
  updateSelection(data) {
    var _a68;
    if (!this.selection)
      return;
    var container = this.selection.querySelector(".select2-chosen"), formatted, cssClass;
    this.selection.select2data = data;
    Fluent.empty(container);
    if (data !== null) {
      formatted = this.opts.formatSelection(data, container, this.opts.escapeMarkup);
    }
    if (formatted !== void 0) {
      if (formatted instanceof Node)
        container.appendChild(formatted);
      else
        container.innerHTML = formatted;
    }
    cssClass = this.opts.formatSelectionCssClass(data, container);
    if (cssClass !== void 0) {
      container == null ? void 0 : container.classList.add(cssClass);
    }
    this.selection.classList.remove("select2-default");
    if (this.opts.allowClear && this.getPlaceholder() !== void 0) {
      (_a68 = this.container) == null ? void 0 : _a68.classList.add("select2-allowclear");
    }
  }
  val(val, triggerChange) {
    var triggerChange = false, data = null, self2 = this, oldData = this.data();
    if (arguments.length === 0) {
      return this.opts.element.value;
    }
    if (arguments.length > 1) {
      triggerChange = arguments[1];
    }
    if (this.select) {
      this.select.value = val != null ? val : "";
      var selected = this.select.querySelector("option:checked");
      if (selected)
        data = self2.optionToData(selected);
      this.updateSelection(data);
      this.setPlaceholder();
      if (triggerChange) {
        this.triggerChange({ added: data, removed: oldData });
      }
    } else {
      if (!val && val !== 0) {
        this.clear(triggerChange);
        return;
      }
      if (this.opts.initSelection === void 0) {
        throw new Error("cannot call val() if initSelection() is not defined");
      }
      this.opts.element.value = val;
      this.opts.initSelection(this.opts.element, function(data2) {
        self2.opts.element.value = !data2 ? "" : self2.id(data2);
        self2.updateSelection(data2);
        self2.setPlaceholder();
        if (triggerChange) {
          self2.triggerChange({ added: data2, removed: oldData });
        }
      });
    }
  }
  clearSearch() {
    this.search.value = "";
    this.focusser.value = "";
  }
  data(value) {
    var _a68;
    var data, triggerChange = false;
    if (arguments.length === 0) {
      data = (_a68 = this.selection) == null ? void 0 : _a68.select2data;
      if (data == void 0) data = null;
      return data;
    } else {
      if (arguments.length > 1) {
        triggerChange = arguments[1];
      }
      if (!value) {
        this.clear(triggerChange);
      } else {
        data = this.data();
        this.opts.element.value = !value ? "" : this.id(value);
        this.updateSelection(value);
        if (triggerChange) {
          this.triggerChange({ added: value, removed: data });
        }
      }
    }
  }
};
var MultiSelect2 = class extends AbstractSelect2 {
  createContainer() {
    var container = document.createElement("div");
    container.classList.add("select2-container", "select2-container-multi");
    container.innerHTML = "<ul class='select2-choices'><li class='select2-search-field'><label for='' class='select2-offscreen'></label><input type='text' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' class='select2-input'></li></ul><div class='select2-drop select2-drop-multi select2-display-none'><ul class='select2-results'></ul></div>";
    return container;
  }
  prepareOpts(opts) {
    opts = super.prepareOpts(opts);
    var self2 = this;
    if (opts.element.tagName.toLowerCase() === "select") {
      opts.initSelection = function(element, callback) {
        var data = [];
        element.querySelectorAll("option:checked:not(:disabled)").forEach((elm) => {
          data.push(self2.optionToData(elm));
        });
        callback(data);
      };
    } else if ("data" in opts) {
      opts.initSelection = opts.initSelection || function(element, callback) {
        var ids = splitVal(element.value, opts.separator);
        var matches = [];
        opts.query({
          matcher: function(term, text2, el) {
            var is_match = ids.some((id) => equal(id, opts.id(el)));
            if (is_match) {
              matches.push(el);
            }
            return is_match;
          },
          callback: typeof callback !== "function" ? () => {
          } : function() {
            var ordered = [];
            for (var i = 0; i < ids.length; i++) {
              var id = ids[i];
              for (var j = 0; j < matches.length; j++) {
                var match = matches[j];
                if (equal(id, opts.id(match))) {
                  ordered.push(match);
                  matches.splice(j, 1);
                  break;
                }
              }
            }
            callback(ordered);
          }
        });
      };
    }
    return opts;
  }
  selectChoice(choice) {
    var selected = this.container.querySelector(".select2-search-choice-focus");
    if (selected && choice && choice === selected) {
    } else {
      if (selected) {
        Fluent.trigger(this.opts.element, "choice-deselected", { choice: selected });
        selected.classList.remove("select2-search-choice-focus");
      }
      if (choice) {
        this.close();
        choice.classList.add("select2-search-choice-focus");
        Fluent.trigger(this.opts.element, "choice-selected", { choice });
      }
    }
  }
  destroy() {
    var _a68;
    (_a68 = document.querySelector("label[for='" + this.search.getAttribute("id") + "']")) == null ? void 0 : _a68.setAttribute(
      "for",
      this.opts.element.getAttribute("id")
    );
    super.destroy();
    cleanupJQueryElements.call(
      this,
      "searchContainer",
      "selection"
    );
  }
  initContainer() {
    var _a68;
    var selector = ".select2-choices";
    this.searchContainer = this.container.querySelector(".select2-search-field");
    var selection;
    this.selection = selection = this.container.querySelector(selector);
    var _this = this;
    Fluent.on(this.selection, "click", ".select2-search-choice:not(.select2-locked)", (e) => {
      _this.search.focus();
      _this.selectChoice(e.target.closest(".select2-search-choice"));
    });
    this.search.setAttribute("id", "s2id_autogen" + nextUid());
    this.search.previousElementSibling.textContent = (_a68 = document.querySelector("label[for='" + this.opts.element.getAttribute("id") + "']")) == null ? void 0 : _a68.textContent;
    this.search.previousElementSibling.setAttribute("for", this.search.getAttribute("id"));
    ["input", "paste"].forEach((ev) => Fluent.on(this.search, ev, () => {
      if (this.search.getAttribute("placeholder") && this.search.value.length === 0) return;
      if (!this.isInterfaceEnabled()) return;
      if (!this.opened()) {
        this.open();
      }
    }));
    this.search.setAttribute("tabindex", this.elementTabIndex);
    this.keydowns = 0;
    Fluent.on(this.search, "keydown", (e) => {
      if (!this.isInterfaceEnabled()) return;
      ++this.keydowns;
      var selected = selection.querySelector(".select2-search-choice-focus");
      var prev = Fluent(selected).prevSibling(".select2-search-choice:not(.select2-locked)").getNode();
      var next = Fluent(selected).nextSibling(".select2-search-choice:not(.select2-locked)").getNode();
      var pos = getCursorInfo(this.search);
      if (selected && (e.which == KEY.LEFT || e.which == KEY.RIGHT || e.which == KEY.BACKSPACE || e.which == KEY.DELETE || e.which == KEY.ENTER)) {
        var selectedChoice = selected;
        if (e.which == KEY.LEFT && prev) {
          selectedChoice = prev;
        } else if (e.which == KEY.RIGHT) {
          selectedChoice = next ? next : null;
        } else if (e.which === KEY.BACKSPACE) {
          if (this.unselect(selected)) {
            this.search.style.width = "10px";
            selectedChoice = prev ? prev : next;
          }
        } else if (e.which == KEY.DELETE) {
          if (this.unselect(selected)) {
            this.search.style.width = "10px";
            selectedChoice = next ? next : null;
          }
        } else if (e.which == KEY.ENTER) {
          selectedChoice = null;
        }
        this.selectChoice(selectedChoice);
        killEvent(e);
        if (!selectedChoice || !selectedChoice) {
          this.open();
        }
        return;
      } else if ((e.which === KEY.BACKSPACE && this.keydowns == 1 || e.which == KEY.LEFT) && (pos.offset == 0 && !pos.length)) {
        this.selectChoice(Array.from(selection.querySelectorAll(".select2-search-choice:not(.select2-locked)")).pop());
        killEvent(e);
        return;
      } else {
        this.selectChoice(null);
      }
      if (this.opened()) {
        switch (e.which) {
          case KEY.UP:
          case KEY.DOWN:
            this.moveHighlight(e.which === KEY.UP ? -1 : 1);
            killEvent(e);
            return;
          case KEY.ENTER:
            this.selectHighlighted();
            killEvent(e);
            return;
          case KEY.TAB:
            this.selectHighlighted({ noFocus: true });
            this.close();
            return;
          case KEY.ESC:
            this.cancel(e);
            killEvent(e);
            return;
        }
      }
      if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.BACKSPACE || e.which === KEY.ESC) {
        return;
      }
      if (e.which === KEY.ENTER) {
        if (this.opts.openOnEnter === false) {
          return;
        } else if (e.altKey || e.ctrlKey || e.shiftKey || e.metaKey) {
          return;
        }
      }
      this.open();
      if (e.which === KEY.PAGE_UP || e.which === KEY.PAGE_DOWN) {
        killEvent(e);
      }
      if (e.which === KEY.ENTER) {
        killEvent(e);
      }
    });
    Fluent.on(this.search, "keyup", (e) => {
      this.keydowns = 0;
      this.resizeSearch();
    });
    Fluent.on(this.search, "blur", (e) => {
      this.container.classList.remove("select2-container-active");
      this.search.classList.remove("select2-focused");
      this.selectChoice(null);
      if (!this.opened()) this.clearSearch();
      e.stopImmediatePropagation();
      Fluent.trigger(this.opts.element, "select2-blur");
    });
    Fluent.on(this.container, "click", selector, (e) => {
      var _a69;
      if (!this.isInterfaceEnabled()) return;
      if ((_a69 = e.target) == null ? void 0 : _a69.closest(".select2-search-choice")) {
        return;
      }
      this.selectChoice(null);
      this.clearPlaceholder();
      if (!this.container.classList.contains("select2-container-active")) {
        Fluent.trigger(this.opts.element, "select2-focus");
      }
      this.open();
      this.focusSearch();
      e.preventDefault();
    });
    Fluent.on(this.container, "focus", selector, () => {
      if (!this.isInterfaceEnabled()) return;
      if (!this.container.classList.contains("select2-container-active")) {
        Fluent.trigger(this.opts.element, "select2-focus");
      }
      this.container.classList.add("select2-container-active");
      this.dropdown.classList.add("select2-drop-active");
      this.clearPlaceholder();
    });
    this.initContainerWidth();
    this.opts.element.classList.add("select2-offscreen");
    this.clearSearch();
  }
  enableInterface() {
    var result = super.enableInterface();
    if (result) {
      this.search.disabled = !this.isInterfaceEnabled();
    }
    return result;
  }
  initSelection() {
    if (this.opts.element.value === "" && this.opts.element.textContent === "") {
      this.updateSelection([]);
      this.close();
      this.clearSearch();
    }
    if (this.select || this.opts.element.value !== "") {
      var self2 = this;
      this.opts.initSelection.call(null, this.opts.element, function(data) {
        if (!self2.container)
          return;
        if (data !== void 0 && data !== null) {
          self2.updateSelection(data);
          self2.close();
          self2.clearSearch();
        }
      });
    }
  }
  clearSearch() {
    var placeholder = this.getPlaceholder(), maxWidth = this.getMaxSearchWidth();
    if (placeholder !== void 0 && this.getVal().length === 0 && !this.search.classList.contains("select2-focused")) {
      this.search.value = placeholder != null ? placeholder : "";
      this.search.classList.add("select2-default");
      this.search.style.width = maxWidth > 0 ? maxWidth + "px" : getComputedStyle(this.container).width;
    } else {
      this.search.value = "";
      this.search.style.width = "10px";
    }
  }
  clearPlaceholder() {
    if (this.search.classList.contains("select2-default")) {
      this.search.value = "";
      this.search.classList.remove("select2-default");
    }
  }
  opening() {
    var _a68;
    this.clearPlaceholder();
    this.resizeSearch();
    super.opening();
    this.focusSearch();
    if (this.search.value === "") {
      if (this.nextSearchTerm != void 0) {
        this.search.value = (_a68 = this.nextSearchTerm) != null ? _a68 : "";
        this.search.select();
      }
    }
    this.updateResults(true);
    if (this.opts.shouldFocusInput(this)) {
      this.search.focus();
    }
    Fluent.trigger(this.opts.element, "select2-open");
  }
  close() {
    if (!this.opened()) return;
    super.close();
  }
  focus() {
    this.close();
    this.search.focus();
  }
  isFocused() {
    return this.search.classList.contains("select2-focused");
  }
  updateSelection(data) {
    var ids = [], filtered = [], self2 = this;
    data.forEach(function(x) {
      if (indexOf2(self2.id(x), ids) < 0) {
        ids.push(self2.id(x));
        filtered.push(x);
      }
    });
    data = filtered;
    this.selection.querySelectorAll(".select2-search-choice").forEach((el) => Fluent.remove(el));
    data.forEach(function(x) {
      self2.addSelectedChoice(x);
    });
    self2.postprocessResults();
  }
  tokenize() {
    var input = this.search.value;
    input = this.opts.tokenizer.call(this, input, this.data(), this.onSelect.bind(this), this.opts);
    if (input != null && input != void 0) {
      this.search.value = input != null ? input : "";
      if (input.length > 0) {
        this.open();
      }
    }
    return void 0;
  }
  onSelect(data, options) {
    var _a68;
    if (!this.triggerSelect(data) || data.text === "") {
      return;
    }
    this.addSelectedChoice(data);
    Fluent.trigger(this.opts.element, "selected", { val: this.id(data), choice: data });
    this.nextSearchTerm = this.opts.nextSearchTerm(data, this.search.value);
    this.clearSearch();
    this.updateResults();
    if (this.select || !this.opts.closeOnSelect) this.postprocessResults(void 0, false, this.opts.closeOnSelect === true);
    if (this.opts.closeOnSelect) {
      this.close();
      this.search.style.width = "10px";
    } else {
      if (this.countSelectableResults() > 0) {
        this.search.style.width = "10px";
        this.resizeSearch();
        if (this.getMaximumSelectionSize() > 0 && this.val().length >= this.getMaximumSelectionSize()) {
          this.updateResults(true);
        } else {
          if (this.nextSearchTerm != void 0) {
            this.search.value = (_a68 = this.nextSearchTerm) != null ? _a68 : "";
            this.updateResults();
            this.search.select();
          }
        }
        this.positionDropdown();
      } else {
        this.close();
        this.search.style.width = "10px";
      }
    }
    this.triggerChange({ added: data });
    if (!options || !options.noFocus)
      this.focusSearch();
  }
  cancel(e) {
    this.close();
    this.focusSearch();
  }
  addSelectedChoice(data) {
    var enableChoice = !data.locked;
    var choice = document.createElement("li"), id = this.id(data), val = this.getVal(), formatted, cssClass;
    choice.classList.add("select2-search-choice");
    choice.appendChild(document.createElement("div"));
    if (enableChoice) {
      var a = choice.appendChild(document.createElement("a"));
      a.classList.add("select2-search-choice-close");
      a.setAttribute("href", "#");
      a.setAttribute("tabindex", "-1");
    } else {
      choice.classList.add("select2-locked");
    }
    var div = choice.querySelector("div");
    formatted = this.opts.formatSelection(data, div, this.opts.escapeMarkup);
    if (formatted != void 0) {
      if (formatted instanceof Node)
        div.appendChild(formatted);
      else
        div.innerHTML = formatted != null ? formatted : "";
    }
    cssClass = this.opts.formatSelectionCssClass(data, div);
    if (cssClass != void 0) {
      Fluent.addClass(choice, cssClass);
    }
    if (enableChoice) {
      var close = choice.querySelector(".select2-search-choice-close");
      Fluent.on(close, "mousedown", killEvent);
      ["click", "dblclick"].forEach((ev) => Fluent.on(close, ev, (e) => {
        var _a68;
        if (!this.isInterfaceEnabled()) return;
        this.unselect(e.target);
        (_a68 = this.selection.querySelector(".select2-search-choice-focus")) == null ? void 0 : _a68.classList.remove("select2-search-choice-focus");
        killEvent(e);
        this.close();
        this.focusSearch();
      }));
      Fluent.on(close, "focus", () => {
        if (!this.isInterfaceEnabled()) return;
        this.container.classList.add("select2-container-active");
        this.dropdown.classList.add("select2-drop-active");
      });
    }
    choice.select2data = data;
    Fluent(choice).insertBefore(this.searchContainer);
    val.push(id);
    this.setVal(val);
  }
  unselect(selected) {
    var val = this.getVal(), data, index;
    selected = selected.closest(".select2-search-choice");
    if (!selected) {
      throw "Invalid argument: " + selected + ". Must be .select2-search-choice";
    }
    data = selected.select2data;
    if (!data) {
      return;
    }
    var evt = Fluent.trigger(this.opts.element, "select2-removing", { val: this.id(data), choice: data });
    if (Fluent.isDefaultPrevented(evt)) {
      return false;
    }
    while ((index = indexOf2(this.id(data), val)) >= 0) {
      val.splice(index, 1);
      this.setVal(val);
      if (this.select) this.postprocessResults();
    }
    selected.remove();
    Fluent.trigger(this.opts.element, "select2-removed", { val: this.id(data), choice: data });
    this.triggerChange({ removed: data });
    return true;
  }
  postprocessResults(data, initial, noHighlightUpdate) {
    var val = this.getVal(), choices = this.results.querySelectorAll(".select2-result"), compound = this.results.querySelectorAll(".select2-result-with-children"), self2 = this;
    choices.forEach(function(choice) {
      var id = self2.id(choice.select2data);
      if (indexOf2(id, val) >= 0) {
        choice.classList.add("select2-selected");
        choice.querySelectorAll(".select2-result-selectable").forEach((x) => x.classList.add("select2-selected"));
      }
    });
    compound.forEach(function(choice) {
      if (!choice.matches(".select2-result-selectable") && !choice.querySelector(".select2-result-selectable:not(.select2-selected)")) {
        choice.classList.add("select2-selected");
      }
    });
    if (this.highlight() == -1 && noHighlightUpdate !== false) {
      self2.highlight(0);
    }
    if (!this.opts.createSearchChoice && !Array.from(choices).some((x) => x.matches(".select2-result:not(.select2-selected)"))) {
      if (!data || data && !data.more && !this.results.querySelector(".select2-no-results")) {
        if (checkFormatter(self2.opts.formatNoMatches, "formatNoMatches")) {
          var noResults = evaluate(self2.opts.formatNoMatches, self2.opts.element, self2.search.value);
          var li = document.createElement("li");
          li.classList.add("select2-no-results");
          if (noResults instanceof Node)
            li.appendChild(noResults);
          else
            li.innerHTML = noResults != null ? noResults : "";
        }
      }
    }
  }
  getMaxSearchWidth() {
    return this.selection.getBoundingClientRect().width - getSideBorderPadding(this.search);
  }
  resizeSearch() {
    var minimumWidth, left, maxWidth, containerLeft, searchWidth, sideBorderPadding = getSideBorderPadding(this.search);
    minimumWidth = measureTextWidth(this.search) + 10;
    left = getOffset(this.search).left;
    maxWidth = this.selection.getBoundingClientRect().width;
    containerLeft = getOffset(this.selection).left;
    searchWidth = maxWidth - (left - containerLeft) - sideBorderPadding;
    if (searchWidth < minimumWidth) {
      searchWidth = maxWidth - sideBorderPadding;
    }
    if (searchWidth < 40) {
      searchWidth = maxWidth - sideBorderPadding;
    }
    if (searchWidth <= 0) {
      searchWidth = minimumWidth;
    }
    this.search.style.width = Math.floor(searchWidth) + "px";
  }
  getVal() {
    var val;
    if (this.select) {
      val = Array.from(this.select.selectedOptions).map((x) => x.value);
      return val === null ? [] : val;
    } else {
      val = this.opts.element.value;
      return splitVal(val, this.opts.separator);
    }
  }
  setVal(val) {
    if (this.select) {
      val != null ? val : val = [];
      var opt = this.select.options;
      for (var i = 0; i < opt.length; i++) {
        var o = opt.item(i);
        o.selected = val.includes(o.value);
      }
    } else {
      var unique = val || [];
      unique = unique.filter((x, i2) => unique.indexOf(x) === i2);
      this.opts.element.value = unique.length === 0 ? "" : unique.join(this.opts.separator);
    }
  }
  buildChangeDetails(old, current) {
    var current = current.slice(0), old = old.slice(0);
    for (var i = 0; i < current.length; i++) {
      for (var j = 0; j < old.length; j++) {
        if (equal(this.opts.id(current[i]), this.opts.id(old[j]))) {
          current.splice(i, 1);
          if (i > 0) {
            i--;
          }
          old.splice(j, 1);
          j--;
        }
      }
    }
    return { added: current, removed: old };
  }
  val(val, triggerChange) {
    var self2 = this;
    if (arguments.length === 0) {
      return this.getVal();
    }
    var oldData = this.data();
    if (!oldData) oldData = [];
    if (!val && val !== 0) {
      this.opts.element.value = "";
      this.updateSelection([]);
      this.clearSearch();
      if (triggerChange) {
        this.triggerChange({ added: this.data(), removed: oldData });
      }
      return;
    }
    this.setVal(val);
    if (this.select) {
      this.opts.initSelection(this.select, this.updateSelection.bind(this));
      if (triggerChange) {
        this.triggerChange(this.buildChangeDetails(oldData, this.data()));
      }
    } else {
      if (this.opts.initSelection === void 0) {
        throw new Error("val() cannot be called if initSelection() is not defined");
      }
      this.opts.initSelection(this.opts.element, function(data) {
        var ids = data.map(self2.id);
        self2.setVal(ids);
        self2.updateSelection(data);
        self2.clearSearch();
        if (triggerChange) {
          self2.triggerChange(self2.buildChangeDetails(oldData, self2.data()));
        }
      });
    }
    this.clearSearch();
  }
  onSortStart() {
    if (this.select) {
      throw new Error("Sorting of elements is not supported when attached to <select>. Attach to <input type='hidden'/> instead.");
    }
    this.search.style.width = "0px";
    this.searchContainer.style.display = "none";
  }
  onSortEnd() {
    var val = [], self2 = this;
    this.searchContainer.style.display = "";
    Fluent(this.searchContainer.parentElement).append(this.searchContainer);
    this.resizeSearch();
    this.selection.querySelectorAll(".select2-search-choice").forEach((el) => {
      val.push(self2.opts.id(el.select2data));
    });
    this.setVal(val);
    this.triggerChange();
  }
  data(values, triggerChange) {
    var self2 = this, ids, old;
    if (arguments.length === 0) {
      var result = [];
      this.selection.querySelectorAll(":scope > .select2-search-choice").forEach((x) => result.push(x.select2data));
      return result;
    } else {
      old = this.data();
      if (!values) {
        values = [];
      }
      ids = values.map(self2.opts.id);
      this.setVal(ids);
      this.updateSelection(values);
      this.clearSearch();
      if (triggerChange) {
        this.triggerChange(this.buildChangeDetails(old, this.data()));
      }
    }
  }
};

// src/ui/editors/combobox.ts
var _Combobox = class _Combobox {
  constructor(opt, create = true) {
    if (isArrayLike(opt == null ? void 0 : opt.element))
      this.el = opt.element[0];
    else if (typeof (opt == null ? void 0 : opt.element) !== "function")
      this.el = opt == null ? void 0 : opt.element;
    if (!create)
      return;
    opt = Object.assign({}, _Combobox.defaults, opt);
    this.createSelect2(opt);
  }
  createSelect2(opt) {
    var select2Opt = {
      element: this.el,
      multiple: opt.multiple,
      placeholder: opt.placeholder || null,
      allowClear: opt.allowClear,
      createSearchChoicePosition: "bottom"
    };
    select2Opt.query = (query) => {
      var _a68;
      var pageSize = opt.pageSize;
      var searchQuery = {
        searchTerm: ((_a68 = query.term) == null ? void 0 : _a68.trim()) || null,
        skip: (query.page - 1) * pageSize,
        take: pageSize,
        checkMore: true
      };
      this.abortPendingQuery();
      var select2 = Select2.getInstance(this.el);
      function setActive(value) {
        var _a69, _b, _c;
        (_a69 = select2 == null ? void 0 : select2.search) == null ? void 0 : _a69.classList.toggle("select2-active", value);
        (_c = (_b = select2 == null ? void 0 : select2.search) == null ? void 0 : _b.parentElement) == null ? void 0 : _c.classList.toggle("select2-active", value);
      }
      this.el.typeTimeoutFn = () => {
        this.abortPendingQuery();
        setActive(true);
        searchQuery.signal = (this.el.queryLoading = new AbortController()).signal;
        const cleanup = () => {
          delete this.el.queryLoading;
          setActive(false);
        };
        try {
          const then = (result) => {
            delete this.el.queryLoading;
            setActive(false);
            query.callback({
              results: result.items,
              more: result.more
            });
          };
          var searchResult = opt.search(searchQuery);
          if (isPromiseLike(searchResult)) {
            searchResult.then(then, cleanup);
          } else {
            cleanup();
            searchResult && then(searchResult);
          }
        } catch (e) {
          cleanup();
          throw e;
        }
      };
      this.el.typeTimeout = setTimeout(this.el.typeTimeoutFn, !query.term ? 0 : opt.typeDelay);
    };
    select2Opt.initSelection = (element, callback) => {
      var _a68, _b;
      var el = isArrayLike(element) ? element[0] : element;
      var val = el.value;
      if (val == null || val == "") {
        callback(null);
        return;
      }
      var isMultiple = opt.multiple;
      var idList = isMultiple ? val.split(",") : [val];
      var searchQuery = {
        idList,
        initSelection: true
      };
      const then = (result) => {
        cleanup();
        if (isMultiple) {
          callback(result.items);
        } else if (!result.items || !result.items.length) {
          if (opt.arbitraryValues) {
            callback({
              id: val,
              text: val
            });
          } else
            callback(null);
        } else {
          var item = result.items[0];
          callback(item);
        }
      };
      const cleanup = () => {
        delete el.initSelectionLoading;
      };
      el.initSelectionLoading && ((_b = (_a68 = el.initSelectionLoading) == null ? void 0 : _a68.abort) == null ? void 0 : _b.call(_a68));
      searchQuery.signal = (el.initSelectionLoading = new AbortController()).signal;
      try {
        let searchResult = opt.search(searchQuery);
        if (isPromiseLike(searchResult)) {
          searchResult.then(then, cleanup);
        } else {
          cleanup();
          if (searchResult)
            then(searchResult);
        }
      } catch (e) {
        cleanup();
        throw e;
      }
    };
    if (opt.createSearchChoice)
      select2Opt.createSearchChoice = opt.createSearchChoice;
    if (opt.formatResult)
      select2Opt.formatResult = opt.formatResult;
    if (opt.formatSelection)
      select2Opt.formatSelection = opt.formatSelection;
    if (opt.providerOptions)
      select2Opt = Object.assign(select2Opt, opt.providerOptions("select2", opt));
    new Select2(select2Opt);
    Fluent.on(this.el, "execute-search", () => {
      if (!this.el || !this.el.typeTimeout || !this.el.typeTimeoutFn) {
        return;
      }
      this.el.typeTimeoutFn();
      delete this.el.typeTimeout;
      delete this.el.typeTimeoutFn;
    });
  }
  abortPendingQuery() {
    var _a68, _b;
    if (!this.el)
      return;
    this.el.queryLoading && ((_b = (_a68 = this.el.queryLoading) == null ? void 0 : _a68.abort) == null ? void 0 : _b.call(_a68));
    this.el.queryLoading = false;
    if (this.el.typeTimeout) {
      clearTimeout(this.el.typeTimeout);
      delete this.el.typeTimeout;
      delete this.el.typeTimeoutFn;
    }
  }
  abortInitSelection() {
    var _a68, _b;
    if (!this.el)
      return;
    this.el.initSelection && ((_b = (_a68 = this.el.initSelection) == null ? void 0 : _a68.abort) == null ? void 0 : _b.call(_a68));
    delete this.el.initSelection;
  }
  dispose() {
    var _a68;
    if (!this.el)
      return;
    this.abortInitSelection();
    this.abortPendingQuery();
    (_a68 = Select2.getInstance(this.el)) == null ? void 0 : _a68.destroy();
    Fluent.off(this.el, "execute-search");
  }
  get container() {
    var _a68;
    if (!this.el)
      return null;
    return (_a68 = Select2.getInstance(this.el)) == null ? void 0 : _a68.container;
  }
  get type() {
    if (!this.el)
      return null;
    if (Select2.getInstance(this.el))
      return "select2";
    return null;
  }
  get isMultiple() {
    if (!this.el)
      return false;
    var select2 = Select2.getInstance(this.el);
    if (select2)
      return select2.isMultiple;
    return this.el.getAttribute("multiple") != null;
  }
  getSelectedItem() {
    var select2 = Select2.getInstance(this.el);
    if (select2) {
      var item = select2.data;
      if (Array.isArray(item))
        return item[0];
      return item;
    }
  }
  getSelectedItems() {
    var select2 = Select2.getInstance(this.el);
    if (select2) {
      var item = select2.data;
      if (Array.isArray(item))
        return item;
      if (!item)
        return [];
      return [item];
    }
    return [];
  }
  getValue() {
    if (!this.el)
      return null;
    var select2 = Select2.getInstance(this.el);
    if (select2) {
      var val = select2.val;
      if (Array.isArray(val))
        return val.join(",");
      return val;
    }
    return this.el.value;
  }
  getValues() {
    if (!this.el)
      return [];
    let val;
    let select2 = Select2.getInstance(this.el);
    if (select2)
      val = select2.val;
    else
      val = this.el.value;
    if (Array.isArray(val))
      return val;
    if (val == null || val === "")
      return [];
    return [val];
  }
  setValue(value, triggerChange = false) {
    if (!this.el)
      return;
    if (value == this.getValue())
      return;
    var val = value;
    if (value && this.isMultiple) {
      val = value.split(String.fromCharCode(44)).map((x) => (x == null ? void 0 : x.trim()) || null).filter((x1) => x1 != null);
    }
    this.el.dataset.comboboxsettingvalue = "true";
    try {
      let select2 = Select2.getInstance(this.el);
      if (select2) {
        select2.val = val;
      } else {
        this.el.value = val;
      }
      if (triggerChange)
        Fluent.trigger(this.el, "change");
    } finally {
      delete this.el.dataset.comboboxsettingvalue;
    }
  }
  setValues(value, triggerChange = false) {
    if (value == null || value.length === 0) {
      this.setValue(null, triggerChange);
      return;
    }
    this.setValue(value.join(","), triggerChange);
  }
  closeDropdown() {
    var _a68;
    (_a68 = Select2.getInstance(this.el)) == null ? void 0 : _a68.close();
  }
  openDropdown() {
    var _a68;
    (_a68 = Select2.getInstance(this.el)) == null ? void 0 : _a68.open();
  }
  static getInstance(el) {
    if (!el || !Select2.getInstance(isArrayLike(el) ? el[0] : el))
      return null;
    return new _Combobox({ element: el }, false);
  }
};
_Combobox.defaults = {
  pageSize: 100,
  typeDelay: 200
};
var Combobox = _Combobox;
function stripDiacritics(str) {
  if (!str)
    return str;
  return Select2.stripDiacritics(str);
}

// src/ui/editors/editorutils.ts
var EditorUtils;
((EditorUtils2) => {
  function getDisplayText(editor) {
    var _a68, _b;
    var combobox = Combobox.getInstance(editor.domNode);
    if (combobox) {
      var data = combobox.getSelectedItems();
      if (!data)
        return "";
      return data.map((x) => x.text).join(", ");
    }
    var value = getValue(editor);
    if (value == null) {
      return "";
    }
    if (typeof value === "string")
      return value;
    if (value instanceof Boolean)
      return !!value ? (_a68 = tryGetText("Controls.FilterPanel.OperatorNames.true")) != null ? _a68 : "True" : (_b = tryGetText("Controls.FilterPanel.OperatorNames.true")) != null ? _b : "False";
    return value.toString();
  }
  EditorUtils2.getDisplayText = getDisplayText;
  var dummy = { name: "_" };
  function getValue(editor) {
    var target = {};
    saveValue(editor, dummy, target);
    return target["_"];
  }
  EditorUtils2.getValue = getValue;
  function saveValue(editor, item, target) {
    var getEditValue = safeCast(editor, IGetEditValue);
    if (getEditValue != null) {
      getEditValue.getEditValue(item, target);
      return;
    }
    var stringValue = safeCast(editor, IStringValue);
    if (stringValue != null) {
      target[item.name] = stringValue.get_value();
      return;
    }
    var booleanValue = safeCast(editor, IBooleanValue);
    if (booleanValue != null) {
      target[item.name] = booleanValue.get_value();
      return;
    }
    var doubleValue = safeCast(editor, IDoubleValue);
    if (doubleValue != null) {
      var value = doubleValue.get_value();
      target[item.name] = isNaN(value) ? null : value;
      return;
    }
    if (editor.getEditValue != null) {
      editor.getEditValue(item, target);
      return;
    }
    if (Fluent.isInputLike(editor.domNode)) {
      target[item.name] = editor.domNode.value;
      return;
    }
  }
  EditorUtils2.saveValue = saveValue;
  function setValue(editor, value) {
    var source = { _: value };
    loadValue(editor, dummy, source);
  }
  EditorUtils2.setValue = setValue;
  function loadValue(editor, item, source) {
    var setEditValue = safeCast(editor, ISetEditValue);
    if (setEditValue != null) {
      setEditValue.setEditValue(source, item);
      return;
    }
    var stringValue = safeCast(editor, IStringValue);
    if (stringValue != null) {
      var value = source[item.name];
      if (value != null) {
        value = value.toString();
      }
      stringValue.set_value(cast(value, String));
      return;
    }
    var booleanValue = safeCast(editor, IBooleanValue);
    if (booleanValue != null) {
      var value1 = source[item.name];
      if (typeof value1 === "number") {
        booleanValue.set_value(value1 > 0);
      } else {
        booleanValue.set_value(!!value1);
      }
      return;
    }
    var doubleValue = safeCast(editor, IDoubleValue);
    if (doubleValue != null) {
      var d = source[item.name];
      if (!!(d == null || isInstanceOfType(d, String) && isTrimmedEmpty(cast(d, String)))) {
        doubleValue.set_value(null);
      } else if (isInstanceOfType(d, String)) {
        doubleValue.set_value(cast(parseDecimal(cast(d, String)), Number));
      } else if (isInstanceOfType(d, Boolean)) {
        doubleValue.set_value(!!d ? 1 : 0);
      } else {
        doubleValue.set_value(cast(d, Number));
      }
      return;
    }
    if (editor.setEditValue != null) {
      editor.setEditValue(source, item);
      return;
    }
    if (Fluent.isInputLike(editor.domNode)) {
      var v = source[item.name];
      editor.domNode.value = v != null ? v : "";
      return;
    }
  }
  EditorUtils2.loadValue = loadValue;
  function setReadonly(elements, isReadOnly) {
    elements = isArrayLike(elements) ? elements : [elements];
    for (var i = 0; i < elements.length; i++) {
      let el = elements[i];
      var type = el.getAttribute("type");
      if (el.tagName == "SELECT" || type === "radio" || type === "checkbox") {
        if (isReadOnly) {
          el.classList.add("readonly");
          el.setAttribute("disabled", "disabled");
        } else {
          el.classList.remove("readonly");
          el.removeAttribute("disabled");
        }
      } else if (isReadOnly) {
        el.classList.add("readonly");
        el.setAttribute("readonly", "readonly");
      } else {
        el.classList.remove("readonly");
        el.removeAttribute("readonly");
      }
    }
  }
  EditorUtils2.setReadonly = setReadonly;
  function setReadOnly(widget, isReadOnly) {
    var readOnly = safeCast(widget, IReadOnly);
    if (readOnly != null) {
      readOnly.set_readOnly(isReadOnly);
    } else if (Fluent.isInputLike(widget.domNode)) {
      setReadonly(widget.domNode, isReadOnly);
    }
  }
  EditorUtils2.setReadOnly = setReadOnly;
  function setRequired(widget, isRequired) {
    var req = safeCast(widget, IValidateRequired);
    if (req != null) {
      req.set_required(isRequired);
    } else if (Fluent.isInputLike(widget.domNode)) {
      widget.domNode.classList.toggle("required", !!isRequired);
    }
    var gridField = widget.domNode.closest(".field");
    var hasSupItem = gridField == null ? void 0 : gridField.querySelector("sup");
    if (isRequired && !hasSupItem && gridField) {
      Fluent("sup").text("*").attr("title", localText("Controls.PropertyGrid.RequiredHint")).prependTo(gridField.querySelector(".caption"));
    } else if (!isRequired && hasSupItem) {
      Fluent(hasSupItem).remove();
    }
  }
  EditorUtils2.setRequired = setRequired;
  function setContainerReadOnly(container, readOnly) {
    container = isArrayLike(container) ? container[0] : container;
    if (!readOnly) {
      if (!container.classList.contains("readonly-container"))
        return;
      container.classList.remove("readonly-container");
      container.querySelectorAll(".editor.container-readonly").forEach((el) => {
        el.classList.remove("container-readonly");
        var w = tryGetWidget(el);
        if (w != null)
          EditorUtils2.setReadOnly(w, false);
        else
          EditorUtils2.setReadonly(el, false);
      });
      return;
    }
    container.classList.add("readonly-container");
    container.querySelectorAll(".editor:not(.container-readonly)").forEach((el) => {
      var w = tryGetWidget(el);
      if (w != null) {
        if (w["get_readOnly"]) {
          if (w["get_readOnly"]())
            return;
        } else if (el.matches("[readonly]") || el.matches("[disabled]") || el.matches(".readonly") || el.matches(".disabled"))
          return;
        el.classList.add("container-readonly");
        EditorUtils2.setReadOnly(w, true);
      } else {
        if (el.matches("[readonly]") || el.matches("[disabled]") || el.matches(".readonly") || el.matches(".disabled"))
          return;
        el.classList.add("container-readonly");
        EditorUtils2.setReadonly(el, true);
      }
    });
  }
  EditorUtils2.setContainerReadOnly = setContainerReadOnly;
})(EditorUtils || (EditorUtils = {}));

// src/ui/widgets/widgetinternal.ts
var isFragmentWorkaround = Symbol();
function ensureParentOrFragment(node) {
  if (!node || node.parentNode)
    return node;
  let fragment = document.createDocumentFragment();
  fragment.appendChild(node);
  fragment[isFragmentWorkaround] = true;
  return node;
}
function handleElementProp(type, props) {
  let elementProp = props == null ? void 0 : props.element;
  let domNode;
  if (typeof elementProp == "string") {
    domNode = document.querySelector(elementProp);
    if (domNode == null)
      throw `The element ${elementProp} specified for the ${getTypeFullName(type)} is not found in the DOM!`;
  } else {
    if (isArrayLike(elementProp)) {
      elementProp = elementProp[0];
    }
    if (elementProp instanceof HTMLElement) {
      domNode = elementProp;
    } else {
      domNode = createElementFor(type);
      if (typeof elementProp === "function")
        elementProp(domNode);
    }
  }
  return ensureParentOrFragment(domNode);
}
function createElementFor(type) {
  var _a68;
  var elementAttr = getCustomAttribute(type, ElementAttribute);
  if (elementAttr) {
    let node;
    let wrap = document.createElement("div");
    wrap.innerHTML = elementAttr.value;
    node = wrap.children[0];
    if (!node) {
      wrap.remove();
      return type.createDefaultElement();
    }
    (_a68 = node.parentNode) == null ? void 0 : _a68.removeChild(node);
    return node;
  } else {
    return type.createDefaultElement();
  }
}
function setElementProps(widget, props) {
  let el = widget.domNode;
  if (!el || !props)
    return;
  if (typeof props.id === "string")
    el.id = props.id;
  if (typeof props.name === "string")
    el.setAttribute("name", props.name);
  if (typeof props.placeholder === "string")
    el.setAttribute("placeholder", props.placeholder);
  if (typeof props.class === "string")
    addClass(el, props.class);
  if (typeof props.className === "string")
    addClass(el, props.className);
  if (typeof props.maxLength === "number")
    el.setAttribute("maxLength", (props.maxLength || 0).toString());
  else if (typeof props.maxlength === "number")
    el.setAttribute("maxLength", (props.maxlength || 0).toString());
  if (props.required != null) {
    try {
      EditorUtils.setRequired(widget, props.required);
    } catch (e) {
    }
  }
  if (props.readOnly != null) {
    try {
      EditorUtils.setReadOnly(widget, props.readOnly);
    } catch (e) {
    }
  }
  if (props.initialValue != null) {
    try {
      EditorUtils.setValue(this, props.initialValue);
    } catch (e) {
    }
  }
}

// src/ui/widgets/widget.ts
var _Widget_decorators, _init48;
_Widget_decorators = [Decorators.registerType()];
var _Widget = class _Widget {
  constructor(props) {
    var _a68, _b;
    if (isArrayLike(props)) {
      this.domNode = ensureParentOrFragment(props[0]);
      this.options = {};
    } else {
      this.options = props != null ? props : {};
      this.domNode = handleElementProp(getInstanceType(this), this.options);
    }
    delete this.options.element;
    setElementProps(this, this.props);
    this.uniqueName = getWidgetName(getInstanceType(this)) + (_Widget.nextWidgetNumber++).toString();
    associateWidget(this);
    Fluent.one(this.domNode, "disposing." + this.uniqueName, (e) => {
      this.destroy();
    });
    this.idPrefix = (_b = (_a68 = this.options) == null ? void 0 : _a68.idPrefix) != null ? _b : this.uniqueName + "_";
    this.addCssClass();
    !getInstanceType(this).deferRenderContents && this.internalRenderContents();
  }
  destroy() {
    if (this.domNode) {
      deassociateWidget(this);
      toggleClass(this.domNode, this.getCssClass(), false);
      Fluent.off(this.domNode, "." + this.uniqueName);
      delete this.domNode;
    }
  }
  static createDefaultElement() {
    return document.createElement("div");
  }
  /**
   * Returns a Fluent(this.domNode) object
   */
  get element() {
    return Fluent(this.domNode);
  }
  addCssClass() {
    addClass(this.domNode, this.getCssClass());
  }
  getCssClass() {
    var type = getInstanceType(this);
    var classList = [];
    var fullClass = getTypeFullName(type).replace(/\./g, "-");
    classList.push(fullClass);
    for (let k of Config.rootNamespaces) {
      if (fullClass.startsWith(k + "-")) {
        classList.push(fullClass.substring(k.length + 1));
        break;
      }
    }
    classList.push(getTypeShortName(type));
    return classList.filter((v, i, a) => a.indexOf(v) === i).map((s) => "s-" + s).join(" ");
  }
  static getWidgetName(type) {
    return getWidgetName(type);
  }
  addValidationRule(rule, uniqueName) {
    addValidationRule(
      this.domNode,
      typeof rule === "function" ? rule : uniqueName,
      typeof rule === "function" ? uniqueName != null ? uniqueName : this.uniqueName : rule
    );
  }
  byId(id) {
    return this.element.findFirst("#" + this.idPrefix + id);
  }
  findById(id) {
    var _a68;
    return (_a68 = this.domNode) == null ? void 0 : _a68.querySelector("#" + this.idPrefix + id);
  }
  getGridField() {
    return Fluent(this.domNode.closest(".field"));
  }
  change(handler) {
    Fluent.on(this.domNode, "change." + this.uniqueName, handler);
  }
  changeSelect2(handler) {
    Fluent.on(this.domNode, "change." + this.uniqueName, (e) => {
      var _a68, _b;
      if ((_b = (_a68 = e.target) == null ? void 0 : _a68.dataset) == null ? void 0 : _b.comboboxsettingvalue)
        return;
      handler(e);
    });
  }
  static create(params) {
    var _a68, _b, _c, _d;
    let props = (_a68 = params.options) != null ? _a68 : {};
    let node = handleElementProp(params.type, props);
    params.container && ((_b = isArrayLike(params.container) ? params.container[0] : params.container) == null ? void 0 : _b.appendChild(node));
    (_c = params.element) == null ? void 0 : _c.call(params, Fluent(node));
    props.element = node;
    let widget = new params.type(props);
    widget.init();
    (_d = params.init) == null ? void 0 : _d.call(params, widget);
    return widget;
  }
  getCustomAttribute(attrType, inherit = true) {
    return getCustomAttribute(getInstanceType(this), attrType, inherit);
  }
  internalInit() {
    getInstanceType(this).deferRenderContents && this.internalRenderContents();
  }
  init() {
    if (!this[initialized]) {
      this[initialized] = true;
      this.internalInit();
    }
    return this;
  }
  /**
   * Returns the main element for this widget or the document fragment.
   * As widgets may get their elements from props unlike regular JSX widgets, 
   * this method should not be overridden. Override renderContents() instead.
   */
  render() {
    let el = this.init().domNode;
    let parent2 = el == null ? void 0 : el.parentNode;
    if (parent2 instanceof DocumentFragment && parent2.childNodes.length > 1 && parent2[isFragmentWorkaround])
      return parent2;
    return el;
  }
  internalRenderContents() {
    if (this[renderContentsCalled])
      return;
    this[renderContentsCalled] = true;
    let contents = this.renderContents();
    if (this.domNode && contents)
      appendToNode(this.domNode, contents);
  }
  renderContents() {
    if (this.legacyTemplateRender())
      return void 0;
    return this.options.children;
  }
  legacyTemplateRender() {
    if (typeof this.getTemplate !== "function")
      return;
    var template = this.getTemplate();
    if (typeof template !== "string")
      return;
    template = template.replace(new RegExp("~_", "g"), this.idPrefix);
    this.domNode.innerHTML = template;
    return true;
  }
  get props() {
    return this.options;
  }
  syncOrAsyncThen(syncMethod, asyncMethod, then) {
    var _a68;
    if (!((_a68 = this.useAsync) == null ? void 0 : _a68.call(this)))
      then.call(this, syncMethod.call(this));
    else
      asyncMethod.call(this).then(then.bind(this));
  }
  useIdPrefix() {
    return useIdPrefix(this.idPrefix);
  }
};
_init48 = __decoratorStart(null);
_Widget = __decorateElement(_init48, 0, "Widget", _Widget_decorators, _Widget);
_Widget.typeInfo = Decorators.classType("Serenity.Widget");
_Widget.nextWidgetNumber = 0;
__runInitializers(_init48, 1, _Widget);
var Widget = _Widget;
var TemplatedWidget = Widget;
Object.defineProperties(Widget.prototype, { isReactComponent: { value: true } });
var initialized = Symbol();
var renderContentsCalled = Symbol();

// src/types/editortyperegistry.ts
var EditorTypeRegistry;
((EditorTypeRegistry2) => {
  const registry = commonTypeRegistry({
    attrKey: null,
    isMatch: (type) => hasCustomAttribute(type, EditorAttribute, false) || isAssignableFrom(Widget, type),
    kind: "editor",
    suffix: "Editor",
    loadError: function(key) {
      var message = `"${htmlEncode(key)}" editor class not found! 
Make sure there is such a editor type under the project root namespace,
and its namespace parts start with capital letters like MyProject.MyModule.MyEditor.

If using ES modules, make sure the editor type has a decorator like 
@Decorators.registerEditor('MyProject.MyModule.MyFormatter') with the full name 
and "side-effect-import" this editor class from the current 
"page.ts/grid.ts/dialog.ts file (import "./path/to/MyEditor.ts").

After applying fixes, build and run "node ./tsbuild.js" (or "tsc" if using namespaces) 
from the project folder.`;
      notifyError(message.replace(/\r?\n\r?\n/g, "<br/><br/>"), "", { escapeHtml: false, timeOut: 5e3 });
      throw new Exception(message);
    }
  });
  EditorTypeRegistry2.get = registry.get;
  EditorTypeRegistry2.getOrLoad = registry.getOrLoad;
  EditorTypeRegistry2.reset = registry.reset;
  EditorTypeRegistry2.tryGet = registry.tryGet;
  EditorTypeRegistry2.tryGetOrLoad = registry.tryGetOrLoad;
})(EditorTypeRegistry || (EditorTypeRegistry = {}));

// src/types/formattertyperegistry.ts
var FormatterTypeRegistry;
((FormatterTypeRegistry2) => {
  const registry = commonTypeRegistry({
    attrKey: null,
    isMatch: (type) => isAssignableFrom(ISlickFormatter, type),
    kind: "formatter",
    suffix: "Formatter",
    loadError: function(key) {
      var message = `"${htmlEncode(key)}" formatter class not found! 
Make sure there is such a formatter type under the project root namespace,
and its namespace parts start with capital letters like MyProject.MyModule.MyFormatter.

If using ES modules, make sure the formatter type has a decorator like 
@Decorators.registerFormatter('MyProject.MyModule.MyFormatter') with the full name 
of your formatter type and "side-effect-import" this formatter class from the current 
"page.ts/grid.ts/dialog.ts file (import "./path/to/MyFormatter.ts").

After applying fixes, build and run "node ./tsbuild.js" (or "tsc" if using namespaces) 
from the project folder.`;
      notifyError(message.replace(/\r?\n\r?\n/g, "<br/><br/>"), "", { escapeHtml: false, timeOut: 5e3 });
      throw new Exception(message);
    }
  });
  FormatterTypeRegistry2.get = registry.get;
  FormatterTypeRegistry2.getOrLoad = registry.getOrLoad;
  FormatterTypeRegistry2.reset = registry.reset;
  FormatterTypeRegistry2.tryGet = registry.tryGet;
  FormatterTypeRegistry2.tryGetOrLoad = registry.tryGetOrLoad;
})(FormatterTypeRegistry || (FormatterTypeRegistry = {}));

// src/types/enumtyperegistry.ts
var EnumTypeRegistry;
((EnumTypeRegistry2) => {
  let registry = commonTypeRegistry({
    attrKey: (type) => {
      var _a68;
      return (_a68 = getCustomAttribute(type, EnumKeyAttribute, false)) == null ? void 0 : _a68.value;
    },
    isMatch: isEnum,
    kind: "enum",
    suffix: null,
    loadError: function(key) {
      var message = `Can't find "${htmlEncode(key)}" enum type! 

If you have recently defined this enum type in server side code, 
make sure your project builds successfully and run "dotnet sergen t".

Also verify there is such an enum type under the project root namespace,
and its namespace parts start with capital letters like MyProject.MyModule.MyEnum.

If using ES modules, make sure the enum type is registered with 
Serenity.registerEnum('MyProject.MyModule.MyDialog') with the full name of 
your enum type and "side-effect-import" this enum from the current 
"page.ts/grid.ts/dialog.ts file (import "./path/to/MyEnum.ts").

After applying fixes, build and run "node ./tsbuild.js" (or "tsc" if using namespaces) 
from the project folder.`;
      notifyError(message.replace(/\r?\n\r?\n/g, "<br/><br/>"), "", { escapeHtml: false, timeOut: 5e3 });
      throw new Exception(message);
    }
  });
  EnumTypeRegistry2.get = registry.get;
  EnumTypeRegistry2.getOrLoad = registry.getOrLoad;
  EnumTypeRegistry2.reset = registry.reset;
  EnumTypeRegistry2.tryGet = registry.tryGet;
  EnumTypeRegistry2.tryGetOrLoad = registry.tryGetOrLoad;
})(EnumTypeRegistry || (EnumTypeRegistry = {}));

// src/types/reflectionutils.ts
var ReflectionUtils;
((ReflectionUtils2) => {
  function getPropertyValue(o, property) {
    var d = o;
    var getter = d["get_" + property];
    if (!!!(typeof getter === "undefined")) {
      return getter.apply(o);
    }
    var camelCase = makeCamelCase(property);
    getter = d["get_" + camelCase];
    if (!!!(typeof getter === "undefined")) {
      return getter.apply(o);
    }
    return d[camelCase];
  }
  ReflectionUtils2.getPropertyValue = getPropertyValue;
  function setPropertyValue(o, property, value) {
    var d = o;
    var setter = d["set_" + property];
    if (!!!(typeof setter === "undefined")) {
      setter.apply(o, [value]);
      return;
    }
    var camelCase = makeCamelCase(property);
    setter = d["set_" + camelCase];
    if (!!!(typeof setter === "undefined")) {
      setter.apply(o, [value]);
      return;
    }
    d[camelCase] = value;
  }
  ReflectionUtils2.setPropertyValue = setPropertyValue;
  function makeCamelCase(s) {
    if (!s) {
      return s;
    }
    if (s === "ID") {
      return "id";
    }
    var hasNonUppercase = false;
    var numUppercaseChars = 0;
    for (var index = 0; index < s.length; index++) {
      if (s.charCodeAt(index) >= 65 && s.charCodeAt(index) <= 90) {
        numUppercaseChars++;
      } else {
        hasNonUppercase = true;
        break;
      }
    }
    if (!hasNonUppercase && s.length !== 1 || numUppercaseChars === 0) {
      return s;
    } else if (numUppercaseChars > 1) {
      return s.substr(0, numUppercaseChars - 1).toLowerCase() + s.substr(numUppercaseChars - 1);
    } else if (s.length === 1) {
      return s.toLowerCase();
    } else {
      return s.substr(0, 1).toLowerCase() + s.substr(1);
    }
  }
  ReflectionUtils2.makeCamelCase = makeCamelCase;
})(ReflectionUtils || (ReflectionUtils = {}));

// src/patch/jquerypatch.ts
function applyGetWidgetExtensions($2) {
  if (!$2 || !$2.fn)
    return;
  $2.fn.tryGetWidget = function tryGetWidget$(type) {
    return tryGetWidget(this[0], type);
  };
  $2.fn.getWidget = function getWidget$(type) {
    if (!(this == null ? void 0 : this.length))
      throw new Error(`Searching for widget of type '${getTypeFullName(type)}' on a non-existent element! (${this == null ? void 0 : this.selector})`);
    return getWidgetFrom(this[0], type);
  };
}
function applyJQueryUIFixes($2) {
  if (!$2 || !$2.ui || !$2.ui.dialog || !$2.ui.dialog.prototype)
    return false;
  $2.ui.dialog.prototype._allowInteraction = function(event) {
    if ($2(event.target).closest(".ui-dialog").length) {
      return true;
    }
    return !!$2(event.target).closest(".ui-datepicker, .select2-drop, .cke, .cke_dialog, .modal, #support-modal").length;
  };
  (function(orig) {
    $2.ui.dialog.prototype._focusTabbable = function() {
      if (isMobileView) {
        this.uiDialog && this.uiDialog.focus();
        return;
      }
      orig.call(this);
    };
  })($2.ui.dialog.prototype._focusTabbable);
  (function(orig) {
    $2.ui.dialog.prototype._createTitlebar = function() {
      orig.call(this);
      this.uiDialogTitlebar.find(".ui-dialog-titlebar-close").html(`<i class="${faIcon("times")}" />`);
    };
  })($2.ui.dialog.prototype._createTitlebar);
}
function applyCleanDataPatch($2) {
  if (!$2 || !$2.fn || $2.isMock)
    return;
  if (!$2.toJSON)
    $2.toJSON = JSON.stringify;
  if (!$2.parseJSON)
    $2.parseJSON = JSON.parse;
  $2.cleanData = /* @__PURE__ */ function(orig) {
    return function(elements) {
      var events, element, i;
      var cloned = elements;
      for (i = 0; (element = cloned[i]) != null; i++) {
        try {
          events = $2._data(element, "events");
          if (events && events.disposing) {
            let handlers = events.disposing;
            delete events.disposing;
            for (var x of handlers) {
              if (x && typeof x.handler === "function") {
                try {
                  x.handler.call(element, { target: element });
                } catch (e) {
                }
              }
            }
          }
        } catch (e) {
        }
      }
      orig(elements);
    };
  }($2.cleanData);
}
function applyAjaxCSRFToken($2) {
  var _a68;
  (_a68 = $2 == null ? void 0 : $2.ajaxSetup) == null ? void 0 : _a68.call($2, {
    beforeSend: function(xhr, opt) {
      if (!opt || !opt.crossDomain) {
        var token = getCookie("CSRF-TOKEN");
        if (token)
          xhr.setRequestHeader("X-CSRF-TOKEN", token);
      }
    }
  });
}
function jQueryPatch() {
  let $2 = getjQuery();
  if (!$2)
    return false;
  applyJQueryUIFixes($2);
  applyCleanDataPatch($2);
  applyGetWidgetExtensions($2);
  applyAjaxCSRFToken($2);
  return true;
}

// src/patch/reactpatch.ts
function reactPatch() {
  var _a68;
  let global5 = getGlobalObject();
  if (!global5.React) {
    if (global5.preact) {
      global5.React = global5.ReactDOM = global5.preact;
      global5.React.Fragment = (_a68 = global5.Fragment) != null ? _a68 : "x-fragment";
    } else {
      global5.React = {
        Component: function() {
        },
        Fragment: "x-fragment",
        createElement: function() {
          return { _reactNotLoaded: true };
        }
      };
      global5.ReactDOM = {
        render: function() {
          throw Error("To use React, it should be included before Serenity.CoreLib.js");
        }
      };
    }
  }
}

// src/patch/index.ts
!jQueryPatch() && Fluent.ready(jQueryPatch);
reactPatch();

// src/ui/helpers/lazyloadhelper.ts
var LazyLoadHelper;
((LazyLoadHelper2) => {
  LazyLoadHelper2.executeOnceWhenShown = executeOnceWhenVisible;
  LazyLoadHelper2.executeEverytimeWhenShown = executeEverytimeWhenVisible;
})(LazyLoadHelper || (LazyLoadHelper = {}));

// src/ui/widgets/prefixedcontext.ts
var PrefixedContext = class {
  constructor(idPrefix) {
    this.idPrefix = idPrefix;
  }
  byId(id) {
    return Fluent(document.querySelector("#" + this.idPrefix + id));
  }
  w(id, type) {
    return getWidgetFrom("#" + this.idPrefix + id, type);
  }
};

// src/ui/widgets/toolbar.ts
function ToolbarButton(tb) {
  var _a68;
  var cssClass = (_a68 = tb.cssClass) != null ? _a68 : "";
  let span = Fluent("span").class("button-inner");
  let btn = Fluent("div").class("tool-button").append(span);
  if (tb.action != null)
    btn.attr("data-action", tb.action);
  if (cssClass.length > 0)
    btn.addClass(cssClass);
  if (tb.hint)
    btn.attr("title", tb.hint);
  btn.on("click", (e) => {
    if (btn.hasClass("disabled"))
      return;
    tb.onClick(e);
  });
  if (tb.icon) {
    btn.addClass("icon-tool-button");
    span.append(Fluent("i").class(iconClassName(tb.icon)));
    tb.title && span.append(" ").append(tb.title);
  } else if (tb.title)
    span.append(tb.title);
  if (!tb.title)
    btn.addClass("no-text");
  if (tb.visible === false)
    btn.getNode().style.display = "none";
  if (tb.disabled != null && typeof tb.disabled !== "function")
    btn.toggleClass("disabled", !!tb.disabled);
  if (typeof tb.visible === "function" || typeof tb.disabled == "function") {
    btn.on("updateInterface", () => {
      if (typeof tb.visible === "function")
        btn.toggle(tb.visible());
      if (typeof tb.disabled === "function")
        btn.toggleClass("disabled", !!tb.disabled());
    });
  }
  return btn.getNode();
}
var _Toolbar_decorators, _init49, _a3;
_Toolbar_decorators = [Decorators.registerClass("Serenity.Toolbar")];
var Toolbar = class extends (_a3 = Widget) {
  renderContents() {
    let group = Fluent("div").class("tool-group");
    this.element.addClass("s-Toolbar clearfix").append(group);
    var buttons = this.options.buttons || [];
    var currentCount = 0;
    for (var i = 0; i < buttons.length; i++) {
      var button = buttons[i];
      if (button.separator && currentCount > 0) {
        group = Fluent("div").class("tool-group").appendTo(group.parent());
        currentCount = 0;
      }
      this.createButton(group, button);
      currentCount++;
    }
    return group.getNode();
  }
  destroy() {
    this.domNode.querySelectorAll("div.tool-button").forEach((el) => Fluent.off(el, "click"));
    if (this.mouseTrap) {
      if (!!this.mouseTrap.destroy) {
        this.mouseTrap.destroy();
      } else {
        this.mouseTrap.reset();
      }
      this.mouseTrap = null;
    }
    super.destroy();
  }
  createButton(container, tb) {
    if (tb.separator === "right" || tb.separator === "both") {
      container.append(Fluent("div").class("separator"));
    }
    let button = ToolbarButton(tb);
    container.append(button);
    if (tb.hotkey && window["Mousetrap"] != null) {
      this.mouseTrap = this.mouseTrap || window["Mousetrap"](
        tb.hotkeyContext || this.options.hotkeyContext || window.document.documentElement
      );
      this.mouseTrap.bind(tb.hotkey, function() {
        if (button.style.display != "none") {
          Fluent.trigger(button, "click");
        }
        return tb.hotkeyAllowDefault;
      });
    }
  }
  findButton(className) {
    if (className != null && className.startsWith(".")) {
      className = className.substring(1);
    }
    return Fluent(this.domNode.querySelector("div.tool-button." + className));
  }
  updateInterface() {
    this.domNode.querySelectorAll(".tool-button").forEach(function(el) {
      Fluent.trigger(el, "updateInterface", { bubbles: false });
    });
  }
};
_init49 = __decoratorStart(_a3);
Toolbar = __decorateElement(_init49, 0, "Toolbar", _Toolbar_decorators, Toolbar);
__runInitializers(_init49, 1, Toolbar);

// src/ui/helpers/tabsextensions.ts
var TabsExtensions;
((TabsExtensions2) => {
  var navLinkSelector = ":scope > ul > li > a.nav-link, :scope > li > a.nav-link, :scope > a.nav-link, :scope > ul > li > a.ui-tabs-anchor, :scope > li > a.ui-tabs-anchor";
  var navLinkSelectorActive = ":scope > ul > li > a.nav-link.active, :scope > li > a.nav-link.active, :scope > a.nav-link.active, :scope > ul > li.ui-tabs-active > a, :scope > li.ui-tabs-active > a";
  function setDisabled(tabs, tabKey, isDisabled) {
    var _a68, _b, _c, _d, _e, _f, _g, _h;
    tabs = isArrayLike(tabs) ? tabs[0] : tabs;
    if (!tabs)
      return;
    var ibk = indexByKey(tabs);
    if (!ibk)
      return;
    var index = ibk[tabKey];
    if (index == null) {
      return;
    }
    let $2 = getjQuery();
    if (!$2 || !((_b = (_a68 = $2(tabs)) == null ? void 0 : _a68.data) == null ? void 0 : _b.call(_a68).uiTabs)) {
      var anchors = Array.from(tabs.querySelectorAll(navLinkSelector));
      if (index < anchors.length) {
        if (isDisabled && anchors[index].classList.contains("active")) {
          var newIndex = anchors.findIndex((x, i) => i !== index && !x.classList.contains("disabled"));
          if (newIndex >= 0)
            anchors[newIndex].click();
        }
        anchors[index].classList.toggle("disabled", !!isDisabled);
      }
      return;
    }
    if (isDisabled && index === ((_d = (_c = $2(tabs)) == null ? void 0 : _c.tabs) == null ? void 0 : _d.call(_c, "option", "active"))) {
      (_f = (_e = $2(tabs)).tabs) == null ? void 0 : _f.call(_e, "option", "active", 0);
    }
    (_h = (_g = $2(tabs)).tabs) == null ? void 0 : _h.call(_g, isDisabled ? "disable" : "enable", index);
  }
  TabsExtensions2.setDisabled = setDisabled;
  function toggle(tabs, tabKey, visible) {
    var _a68, _b, _c, _d, _e, _f;
    tabs = isArrayLike(tabs) ? tabs[0] : tabs;
    if (!tabs)
      return;
    var ibk = indexByKey(tabs);
    if (!ibk)
      return;
    var index = ibk[tabKey];
    if (index == null) {
      return;
    }
    let $2 = getjQuery();
    if (!$2 || !((_b = (_a68 = $2(tabs)).data) == null ? void 0 : _b.call(_a68).uiTabs)) {
      var anchors = Array.from(tabs.querySelectorAll(navLinkSelector));
      if (index < anchors.length) {
        if (!visible && anchors[index].classList.contains("active")) {
          var newIndex = anchors.findIndex((x, i) => i !== index && !x.classList.contains("disabled") && x.style.display !== "none");
          if (newIndex >= 0)
            anchors[newIndex].click();
        }
        anchors[index].style.display = visible ? "" : "none";
      }
      return;
    }
    if (!visible && index === ((_d = (_c = $2(tabs)).tabs) == null ? void 0 : _d.call(_c, "option", "active"))) {
      (_f = (_e = $2(tabs)).tabs) == null ? void 0 : _f.call(_e, "option", "active", 0);
    }
    $2(tabs).children("ul").children("li").eq(index).toggle(visible);
  }
  TabsExtensions2.toggle = toggle;
  function activeTabKey(tabs) {
    var _a68, _b, _c, _d;
    tabs = isArrayLike(tabs) ? tabs[0] : tabs;
    if (!tabs)
      return;
    let $2 = getjQuery();
    if (!$2 || !((_b = (_a68 = $2(tabs)).data) == null ? void 0 : _b.call(_a68).uiTabs)) {
      return extractTabKey2(tabs.querySelector(navLinkSelectorActive));
    }
    return extractTabKey2($2(tabs).children("ul").children("li").eq((_d = (_c = $2(tabs)).tabs) == null ? void 0 : _d.call(_c, "option", "active")).children("a")[0]);
  }
  TabsExtensions2.activeTabKey = activeTabKey;
  function extractTabKey2(el) {
    if (!el)
      return "";
    var tabKey = el.dataset.tabkey;
    if (tabKey)
      return tabKey;
    var href = el.getAttribute("href").toString();
    var prefix = "_Tab";
    var lastIndex = href.lastIndexOf(prefix);
    if (lastIndex >= 0) {
      return href.substring(lastIndex + prefix.length);
    }
    return href;
  }
  function indexByKey(tabs) {
    var indexByKey2 = {};
    tabs = isArrayLike(tabs) ? tabs[0] : tabs;
    if (!tabs)
      return indexByKey2;
    tabs.querySelectorAll(navLinkSelector).forEach(function(el, index) {
      indexByKey2[extractTabKey2(el)] = index;
    });
    return indexByKey2;
  }
  TabsExtensions2.indexByKey = indexByKey;
  function selectTab(tabs, tabKey) {
    var _a68, _b, _c, _d, _e, _f;
    tabs = isArrayLike(tabs) ? tabs[0] : tabs;
    if (!tabs)
      return;
    var index;
    if (typeof tabKey === "number")
      index = tabKey;
    else {
      var ibk = indexByKey(tabs);
      if (!ibk)
        return;
      var index = ibk[tabKey];
      if (index == null) {
        return;
      }
    }
    var $2 = getjQuery();
    if (!$2 || !((_b = (_a68 = $2(tabs)) == null ? void 0 : _a68.data) == null ? void 0 : _b.call(_a68).uiTabs)) {
      var anchors = Array.from(tabs.querySelectorAll(navLinkSelector));
      if (index < anchors.length) {
        anchors[index].click();
      }
      return;
    }
    if (index !== ((_d = (_c = $2(tabs)).tabs) == null ? void 0 : _d.call(_c, "option", "active"))) {
      (_f = (_e = $2(tabs)).tabs) == null ? void 0 : _f.call(_e, "option", "active", index);
    }
  }
  TabsExtensions2.selectTab = selectTab;
  function initialize(tabs, activeChange) {
    var _a68, _b, _c;
    tabs = isArrayLike(tabs) ? tabs[0] : tabs;
    if (!tabs)
      return null;
    let $2 = getjQuery();
    if ((_a68 = $2 == null ? void 0 : $2.fn) == null ? void 0 : _a68.tabs) {
      var t = (_c = (_b = $2(tabs)).tabs) == null ? void 0 : _c.call(_b, {});
      if (activeChange)
        t == null ? void 0 : t.on("tabsactivate", activeChange);
      return Fluent(tabs);
    } else {
      let ul = tabs.matches("ul") ? tabs : tabs.querySelector(":scope > ul");
      if (ul && !ul.classList.contains("nav-tabs") && !ul.classList.contains("nav-underline")) {
        ul.classList.add("nav", "nav-tabs");
        let activeLink;
        ul.querySelectorAll(":scope > li").forEach((li) => {
          li.classList.add("nav-item");
          let a = li.querySelector(":scope > a");
          if (a) {
            a.classList.add("nav-link");
            a.dataset.bsToggle = "tab";
            a.setAttribute("role", "tab");
            if (a.classList.contains("ui-tabs-active")) {
              a.classList.add("active");
              a.classList.remove("ui-tabs-active");
              activeLink = a;
            }
          }
        });
        if (!activeLink) {
          activeLink = ul.querySelector(":scope > li > a");
          if (activeLink) {
            activeLink.classList.add("active");
          }
        }
        let container = Fluent("div").class("tab-content").appendTo(tabs);
        tabs.querySelectorAll(":scope>.tab-pane").forEach((pane) => {
          pane.classList.add("pt-3");
          container.append(pane);
          if (activeLink && activeLink.getAttribute("href") === "#" + pane.id) {
            pane.classList.add("show", "active");
          }
        });
      }
      if (activeChange) {
        Fluent.on(tabs, "shown.bs.tab", activeChange);
      }
      return Fluent(tabs);
    }
  }
  TabsExtensions2.initialize = initialize;
  function destroy(tabs) {
    var _a68, _b, _c, _d;
    if (!tabs)
      return;
    let $2 = getjQuery();
    if (!$2 || !((_b = (_a68 = $2(tabs)).data) == null ? void 0 : _b.call(_a68).uiTabs))
      return;
    (_d = (_c = $2(tabs)) == null ? void 0 : _c.tabs) == null ? void 0 : _d.call(_c, "destroy");
  }
  TabsExtensions2.destroy = destroy;
})(TabsExtensions || (TabsExtensions = {}));

// src/ui/dialogs/basedialog-internal.ts
function getCssSize(element, name) {
  var cssSize = getComputedStyle(element).getPropertyValue(name);
  if (cssSize == null || !cssSize.endsWith("px"))
    return null;
  cssSize = cssSize.substring(0, cssSize.length - 2);
  let i = parseInt(cssSize, 10);
  if (i == null || isNaN(i) || i == 0)
    return null;
  return i;
}
function applyCssSizes(opt, dialogClass) {
  let size;
  let dialog = document.createElement("div");
  try {
    dialog.style.display = "none";
    addClass(dialog, dialogClass);
    document.body.append(dialog);
    var sizeHelper = document.createElement("div");
    sizeHelper.classList.add("size");
    dialog.append(sizeHelper);
    size = getCssSize(sizeHelper, "minWidth");
    if (size != null)
      opt.minWidth = size;
    size = getCssSize(sizeHelper, "width");
    if (size != null)
      opt.width = size;
    size = getCssSize(sizeHelper, "height");
    if (size != null)
      opt.height = size;
    size = getCssSize(sizeHelper, "minHeight");
    if (size != null)
      opt.minHeight = size;
  } finally {
    dialog.remove();
  }
}
function handleUIDialogResponsive(domNode) {
  var _a68;
  let $2 = getjQuery();
  if (!$2)
    return;
  var dlg = (_a68 = $2(domNode)) == null ? void 0 : _a68.dialog();
  var uiDialog = $2(domNode).closest(".ui-dialog");
  if (!uiDialog.length)
    return;
  if (isMobileView()) {
    var data = $2(domNode).data("responsiveData");
    if (!data) {
      data = {};
      data.draggable = dlg.dialog("option", "draggable");
      data.resizable = dlg.dialog("option", "resizable");
      data.position = dlg.css("position");
      var pos = uiDialog.position();
      data.left = pos.left;
      data.top = pos.top;
      data.width = uiDialog.width();
      data.height = uiDialog.height();
      data.contentHeight = $2(domNode).height();
      $2(domNode).data("responsiveData", data);
      dlg.dialog("option", "draggable", false);
      dlg.dialog("option", "resizable", false);
    }
    uiDialog.addClass("mobile-layout");
    uiDialog.css({ left: "0px", top: "0px", width: $2(window).width() + "px", height: $2(window).height() + "px", position: "fixed" });
    $2(document.body).scrollTop(0);
    layoutFillHeight(domNode);
  } else {
    var d = $2(domNode).data("responsiveData");
    if (d) {
      dlg.dialog("option", "draggable", d.draggable);
      dlg.dialog("option", "resizable", d.resizable);
      $2(domNode).closest(".ui-dialog").css({ left: "0px", top: "0px", width: d.width + "px", height: d.height + "px", position: d.position });
      $2(domNode).height(d.contentHeight);
      uiDialog.removeClass("mobile-layout");
      $2(domNode).removeData("responsiveData");
    }
  }
}

// src/ui/dialogs/dialogextensions.ts
var DialogExtensions;
((DialogExtensions2) => {
  function dialogResizable(dialog, w, h, mw, mh) {
    var _a68, _b;
    let $2 = getjQuery();
    if (!$2)
      return;
    var dlg = (_b = (_a68 = $2(dialog)) == null ? void 0 : _a68.dialog) == null ? void 0 : _b.call(_a68);
    if (!dlg)
      return;
    dlg.dialog("option", "resizable", true);
    if (mw != null) {
      dlg.dialog("option", "minWidth", mw);
    }
    if (w != null) {
      dlg.dialog("option", "width", w);
    }
    if (mh != null) {
      dlg.dialog("option", "minHeight", mh);
    }
    if (h != null) {
      dlg.dialog("option", "height", h);
    }
  }
  DialogExtensions2.dialogResizable = dialogResizable;
  function dialogMaximizable(dialog) {
    var _a68, _b;
    let $2 = getjQuery();
    if (!$2)
      return;
    (_b = (_a68 = $2(dialog)).dialogExtend) == null ? void 0 : _b.call(_a68, {
      closable: true,
      maximizable: true,
      dblclick: "maximize",
      icons: { maximize: "ui-icon-maximize-window" }
    });
  }
  DialogExtensions2.dialogMaximizable = dialogMaximizable;
})(DialogExtensions || (DialogExtensions = {}));
function registerDialogExtendPlugin() {
  var _a68;
  let $2 = getjQuery();
  if (!$2 || !$2.widget)
    return false;
  if ((_a68 = $2.fn) == null ? void 0 : _a68.dialogExtend)
    return true;
  $2.widget("ui.dialogExtend", {
    options: {
      dblclick: true,
      load: null,
      beforeRestore: null,
      restore: null,
      maximizable: false,
      beforeMaximize: null,
      maximize: null
    },
    _create: function() {
      this._state = "normal";
      this._initButtons();
      this._setState("normal");
      return this._trigger("load");
    },
    _setState: function(state) {
      $2(this.domNode).removeClass("ui-dialog-" + this._state).addClass("ui-dialog-" + state);
      return this._state = state;
    },
    _initButtons: function() {
      var _this = this;
      this._addButton("maximize", this.options.maximizable, DialogTexts.MaximizeHint, faIcon("window-maximize"));
      this._addButton("restore", false, DialogTexts.RestoreHint, faIcon("window-restore"));
      var titlebar = $2(this.domNode).closest(".ui-dialog").children(".ui-dialog-titlebar");
      titlebar.dblclick(function() {
        if (_this.options.dblclick) {
          if (_this._state !== "normal") {
            return _this.restore();
          } else {
            return _this[_this.options.dblclick]();
          }
        }
      }).select(function() {
        return false;
      });
    },
    _addButton: function(name, show, hint, icon) {
      var _this = this;
      var titlebar = $2(this.domNode).closest(".ui-dialog").children(".ui-dialog-titlebar");
      var closeButton = titlebar.find(".ui-dialog-titlebar-close").first();
      var button = $2('<button class="ui-button ui-corner-all ui-button-icon-only ui-dialog-titlebar-' + name + '" href="javascript:;" tabindex="-1"><i class="' + icon + '"></i></a>').attr("title", hint).toggle(show).click(function(e) {
        e.preventDefault();
        return _this[name]();
      });
      if (closeButton)
        button.insertBefore(closeButton);
      else
        button.appendTo(titlebar);
      return button;
    },
    maximize: function() {
      var newHeight, newWidth;
      newHeight = $2(window).height() - 1;
      newWidth = $2(window).width() - 1;
      this._trigger("beforeMaximize");
      if (this._state !== "normal") {
        this._restore();
      }
      this._saveSnapshot();
      var el = $2(this.domNode);
      if (el.dialog("option", "draggable")) {
        el.dialog("widget").draggable("option", "handle", null).find(".ui-dialog-draggable-handle").css("cursor", "text").end();
      }
      el.dialog("widget").css("position", "fixed").find(".ui-dialog-content").show().dialog("widget").find(".ui-dialog-buttonpane").show().end().find(".ui-dialog-content").dialog("option", {
        resizable: false,
        draggable: false,
        height: newHeight,
        width: newWidth,
        position: {
          of: window,
          my: "left top",
          at: "left top"
        }
      });
      this._setState("maximized");
      this._toggleButtons();
      if (this.original_config_resizable)
        $2(this.domNode).closest(".ui-dialog").triggerHandler("resize");
      return this._trigger("maximize");
    },
    _restore_maximized: function() {
      var el = $2(this.domNode);
      var original = this._snapshot || { config: {}, size: {}, position: {}, titlebar: {} };
      el.dialog("widget").css("position", original.position.mode).find(".ui-dialog-titlebar").css("white-space", original.titlebar.wrap).end().find(".ui-dialog-content").dialog("option", {
        resizable: original.config.resizable,
        draggable: original.config.draggable,
        height: original.size.height,
        width: original.size.width,
        maxHeight: original.size.maxHeight,
        position: {
          of: window,
          my: "left top",
          at: "left+" + original.position.left + " top+" + original.position.top
        }
      });
      if (el.dialog("option", "draggable")) {
        return el.dialog("widget").draggable("option", "handle", el.dialog("widget").find(".ui-dialog-draggable-handle").length ? el.dialog("widget").find(".ui-dialog-draggable-handle") : ".ui-dialog-titlebar").find(".ui-dialog-draggable-handle").css("cursor", "move");
      }
    },
    state: function() {
      return this._state;
    },
    restore: function() {
      this._trigger("beforeRestore");
      this._restore();
      this._setState("normal");
      this._toggleButtons();
      if (this.original_config_resizable)
        $2(this.domNode).closest(".ui-dialog").triggerHandler("resize");
      return this._trigger("restore");
    },
    _restore: function() {
      if (this._state !== "normal") {
        return this["_restore_" + this._state]();
      }
    },
    _saveSnapshot: function() {
      if (this._state === "normal") {
        var el = $2(this.domNode);
        this._snapshot = {
          config: {
            resizable: el.dialog("option", "resizable"),
            draggable: el.dialog("option", "draggable")
          },
          size: {
            height: el.dialog("widget").outerHeight(),
            width: el.dialog("option", "width"),
            maxHeight: el.dialog("option", "maxHeight")
          },
          position: {
            mode: el.dialog("widget").css("position"),
            left: el.dialog("widget").offset().left - $2("body").scrollLeft(),
            top: el.dialog("widget").offset().top - $2("body").scrollTop()
          },
          titlebar: {
            wrap: el.dialog("widget").find(".ui-dialog-titlebar").css("white-space")
          }
        };
      }
    },
    _toggleButtons: function() {
      var uiDialog = $2(this.domNode).closest(".ui-dialog");
      uiDialog.find(".ui-dialog-titlebar-restore").toggle(this._state !== "normal");
      uiDialog.find(".ui-dialog-titlebar-maximize").toggle(this._state !== "maximized");
    }
  });
}
!registerDialogExtendPlugin() && Fluent.ready(registerDialogExtendPlugin);

// src/ui/dialogs/basedialog.ts
var _BaseDialog_decorators, _init50, _a4;
_BaseDialog_decorators = [Decorators.registerClass("Serenity.BaseDialog", [IDialog])];
var BaseDialog = class extends (_a4 = Widget) {
  static createDefaultElement() {
    return Fluent("div").class("hidden").appendTo(document.body).getNode();
  }
  constructor(props) {
    super(props);
    this.domNode.setAttribute("id", this.domNode.getAttribute("id") || this.uniqueName);
    this.initValidator();
    this.initTabs();
    this.initToolbar();
  }
  destroy() {
    TabsExtensions.destroy(this.tabs);
    this.tabs = null;
    if (this.toolbar) {
      this.toolbar.destroy();
      this.toolbar = null;
    }
    if (this.validator) {
      this.byId("Form").remove();
      this.validator = null;
    }
    const dialog = this.dialog;
    if (dialog) {
      Fluent.off(this.domNode, "." + this.uniqueName);
      this.dialog = null;
      dialog.dispose();
    }
    Fluent.off(window, "." + this.uniqueName);
    super.destroy();
  }
  addCssClass() {
  }
  getInitialDialogTitle() {
    return "";
  }
  isStaticPanel() {
    var _a68;
    return ((_a68 = this.getCustomAttribute(StaticPanelAttribute)) == null ? void 0 : _a68.value) === true;
  }
  getDialogOptions() {
    var _a68, _b, _c, _d, _e;
    return {
      preferPanel: this.isStaticPanel() ? true : (_a68 = this.getCustomAttribute(PanelAttribute)) == null ? void 0 : _a68.value,
      autoOpen: false,
      buttons: this.getDialogButtons(),
      closeButton: this.isStaticPanel() ? false : (_b = this.getCustomAttribute(CloseButtonAttribute)) == null ? void 0 : _b.value,
      dialogClass: ((_c = this.getCssClass()) != null ? _c : "") + " flex-layout",
      element: this.domNode,
      size: "lg",
      onClose: (result) => {
        this.onDialogClose(result);
      },
      onOpen: () => {
        this.onDialogOpen();
      },
      width: Math.min(window.innerWidth, 920),
      providerOptions: (type) => {
        var _a69;
        if (type === "uidialog") {
          var opt = {};
          applyCssSizes(opt, this.getCssClass());
          opt.resizable = (_a69 = this.getCustomAttribute(ResizableAttribute)) == null ? void 0 : _a69.value;
          return opt;
        }
      },
      title: (_e = (_d = this.dialogTitle) != null ? _d : this.getInitialDialogTitle()) != null ? _e : ""
    };
  }
  initDialog() {
    var _a68;
    this.domNode.classList.remove("hidden");
    if (((_a68 = this.dialog) == null ? void 0 : _a68.type) == "uidialog") {
      this.initUIDialog();
      Fluent.on(this.domNode.closest(".ui-dialog"), "resize." + this.uniqueName, this.arrange.bind(this));
    }
  }
  initUIDialog() {
    var _a68;
    let element = getjQuery()(this.domNode);
    DialogExtensions.dialogResizable(element);
    Fluent.on(window, "resize." + this.uniqueName, () => {
      if (element.width() > 0 && element.height() > 0)
        this.handleResponsive();
    });
    Fluent.on(this.domNode, "dialogopen." + this.uniqueName, this.handleResponsive.bind(this));
    if ((_a68 = this.getCustomAttribute(MaximizableAttribute)) == null ? void 0 : _a68.value) {
      DialogExtensions.dialogMaximizable(element);
    }
  }
  dialogOpen(asPanel) {
    if (!this.dialog) {
      let opt = this.getDialogOptions();
      if (asPanel != null)
        opt.preferPanel = asPanel;
      this.dialog = new Dialog(opt);
      this.initDialog();
    }
    this.dialog.open();
  }
  onDialogOpen() {
    if (!isMobileView())
      this.element.findFirst("input:not([type=hidden]), textarea, select").focus();
    this.arrange();
    TabsExtensions.selectTab(this.tabs, 0);
  }
  /** Attaches a dialog/modal/panel close event handler. See Dialog.close for more info. */
  onClose(handler, opt) {
    Dialog.onClose(this.element, handler, opt);
  }
  /** Attaches a dialog/modal/panel open event handler. See Dialog.open for more info. */
  onOpen(handler, opt) {
    Dialog.onOpen(this.element, handler, opt);
  }
  getToolbarButtons() {
    return [];
  }
  initToolbar() {
    var _a68, _b;
    var toolbarDiv = this.findById("Toolbar");
    if (!toolbarDiv)
      return;
    var hotkeyContext = (_b = (_a68 = this.domNode.closest(".ui-dialog")) != null ? _a68 : this.domNode.closest(".modal")) != null ? _b : this.domNode;
    this.toolbar = new Toolbar({ element: toolbarDiv, buttons: this.getToolbarButtons(), hotkeyContext });
  }
  getValidatorOptions() {
    return {};
  }
  initValidator() {
    var form = this.findById("Form");
    if (form instanceof HTMLFormElement) {
      var valOptions = this.getValidatorOptions();
      this.validator = new Validator(form, validateOptions(valOptions));
    }
  }
  resetValidation() {
    this.validator && this.validator.resetAll();
  }
  validateForm() {
    return this.validator == null || !!this.validator.form();
  }
  arrange() {
    this.domNode.querySelectorAll(".require-layout").forEach((el) => {
      Fluent.isVisibleLike(el) && Fluent.trigger(el, "layout");
    });
  }
  onDialogClose(result) {
    document.dispatchEvent(new Event("click"));
    window.setTimeout(() => {
      let domNode = this.domNode;
      this.destroy();
      if (domNode) {
        Fluent.remove(domNode);
      }
      positionToastContainer(defaultNotifyOptions, false);
    }, 0);
  }
  getDialogButtons() {
    return [];
  }
  dialogClose(result) {
    var _a68;
    (_a68 = this.dialog) == null ? void 0 : _a68.close(result != null ? result : null);
  }
  get dialogTitle() {
    var _a68, _b;
    return (_b = (_a68 = this.dialog) == null ? void 0 : _a68.title()) != null ? _b : this.domNode.dataset.dialogtitle;
  }
  set dialogTitle(value) {
    var _a68;
    this.domNode.dataset.dialogtitle = value;
    (_a68 = this.dialog) == null ? void 0 : _a68.title(value != null ? value : "");
  }
  initTabs() {
    var tabsDiv = this.findById("Tabs");
    if (!tabsDiv)
      return;
    this.tabs = TabsExtensions.initialize(tabsDiv, this.arrange.bind(this));
  }
  handleResponsive() {
    handleUIDialogResponsive(this.domNode);
  }
};
_init50 = __decoratorStart(_a4);
BaseDialog = __decorateElement(_init50, 0, "BaseDialog", _BaseDialog_decorators, BaseDialog);
__runInitializers(_init50, 1, BaseDialog);
var TemplatedDialog = BaseDialog;

// src/ui/widgets/basepanel.ts
var _BasePanel_decorators, _init51, _a5;
_BasePanel_decorators = [Decorators.registerClass("Serenity.BasePanel")];
var BasePanel = class extends (_a5 = Widget) {
  constructor(props) {
    super(props);
    this.initValidator();
    this.initTabs();
    this.initToolbar();
  }
  destroy() {
    TabsExtensions.destroy(this.tabs);
    this.tabs = null;
    if (this.toolbar) {
      this.toolbar.destroy();
      this.toolbar = null;
    }
    if (this.validator) {
      this.validator.destroy();
      this.byId("Form").remove();
      this.validator = null;
    }
    super.destroy();
  }
  arrange() {
    this.element.findAll(".require-layout").forEach((el) => {
      Fluent.isVisibleLike(el) && Fluent.trigger(el, "layout");
    });
  }
  getToolbarButtons() {
    return [];
  }
  getValidatorOptions() {
    return {};
  }
  initTabs() {
    var tabsDiv = this.findById("Tabs");
    if (!tabsDiv)
      return;
    this.tabs = TabsExtensions.initialize(tabsDiv, null);
  }
  initToolbar() {
    var toolbarDiv = this.findById("Toolbar");
    if (!toolbarDiv)
      return;
    this.toolbar = new Toolbar({ buttons: this.getToolbarButtons(), element: toolbarDiv });
  }
  initValidator() {
    var form = this.findById("Form");
    if (form) {
      var valOptions = this.getValidatorOptions();
      this.validator = new Validator(form, validateOptions(valOptions));
    }
  }
  resetValidation() {
    if (this.validator) {
      this.validator.resetAll();
    }
  }
  validateForm() {
    return this.validator == null || !!this.validator.form();
  }
};
_init51 = __decoratorStart(_a5);
BasePanel = __decorateElement(_init51, 0, "BasePanel", _BasePanel_decorators, BasePanel);
__runInitializers(_init51, 1, BasePanel);
var TemplatedPanel = BasePanel;

// src/ui/editors/editorwidget.ts
var _EditorWidget_decorators, _init52, _a6;
_EditorWidget_decorators = [Decorators.registerType()];
var EditorWidget = class extends (_a6 = Widget) {
  constructor(props) {
    super(props);
  }
};
_init52 = __decoratorStart(_a6);
EditorWidget = __decorateElement(_init52, 0, "EditorWidget", _EditorWidget_decorators, EditorWidget);
EditorWidget.typeInfo = Decorators.classType("Serenity.EditorWidget");
__runInitializers(_init52, 1, EditorWidget);

// src/ui/editors/cascadedwidgetlink.ts
var _CascadedWidgetLink_decorators, _init53;
_CascadedWidgetLink_decorators = [Decorators.registerClass("Serenity.CascadedWidgetLink")];
var CascadedWidgetLink = class {
  constructor(parentType, widget, parentChange) {
    this.parentType = parentType;
    this.widget = widget;
    this.parentChange = parentChange;
    this.bind();
    Fluent.one(this.widget.domNode, "disposing." + widget.uniqueName + "cwh", () => {
      this.unbind();
      this.widget = null;
      this.parentChange = null;
    });
  }
  bind() {
    if (!this._parentID) {
      return null;
    }
    var parent2 = tryGetWidget(findElementWithRelativeId(this.widget.domNode, this._parentID), this.parentType);
    if (parent2 != null) {
      Fluent.on(parent2.domNode, "change." + this.widget.uniqueName, () => {
        this.parentChange(parent2);
      });
      return parent2;
    } else {
      notifyError("Can't find cascaded parent element with ID: " + this._parentID + "!", "", null);
      return null;
    }
  }
  unbind() {
    if (!this._parentID) {
      return null;
    }
    var parent2 = tryGetWidget(findElementWithRelativeId(this.widget.domNode, this._parentID), this.parentType);
    if (parent2 != null) {
      Fluent.off(parent2.domNode, "." + this.widget.uniqueName);
    }
    return parent2;
  }
  get_parentID() {
    return this._parentID;
  }
  set_parentID(value) {
    if (this._parentID !== value) {
      this.unbind();
      this._parentID = value;
      this.bind();
    }
  }
};
_init53 = __decoratorStart(null);
CascadedWidgetLink = __decorateElement(_init53, 0, "CascadedWidgetLink", _CascadedWidgetLink_decorators, CascadedWidgetLink);
__runInitializers(_init53, 1, CascadedWidgetLink);

// src/ui/widgets/reflectionoptionssetter.ts
var ReflectionOptionsSetter;
((ReflectionOptionsSetter2) => {
  function set(target, options) {
    if (options == null) {
      return;
    }
    var type = getInstanceType(target);
    if (type === Object) {
      return;
    }
    var props = getMembers(type, 16 /* property */);
    var propList = props.filter(function(x) {
      return !!x.setter && ((x.attr || []).filter(function(a) {
        return isInstanceOfType(a, OptionAttribute);
      }).length > 0 || (x.attr || []).filter(function(a) {
        return isInstanceOfType(a, DisplayNameAttribute);
      }).length > 0);
    });
    var propByName = {};
    for (var k of propList) {
      propByName[ReflectionUtils.makeCamelCase(k.name)] = k;
    }
    var fields = getMembers(type, 4 /* field */);
    var fieldList = fields.filter(function(x1) {
      return (x1.attr || []).filter(function(a) {
        return isInstanceOfType(a, OptionAttribute);
      }).length > 0 || (x1.attr || []).filter(function(a) {
        return isInstanceOfType(a, DisplayNameAttribute);
      }).length > 0;
    });
    var fieldByName = {};
    for (var $t2 = 0; $t2 < fieldList.length; $t2++) {
      var k1 = fieldList[$t2];
      fieldByName[ReflectionUtils.makeCamelCase(k1.name)] = k1;
    }
    var keys = Object.keys(options);
    for (var k2 of keys) {
      var v = options[k2];
      var cc = ReflectionUtils.makeCamelCase(k2);
      var p = propByName[cc] || propByName[k2];
      if (p != null) {
        var func = target[p.setter];
        func && func.call(target, v);
      } else {
        var f = fieldByName[cc] || fieldByName[k2];
        f && (target[f.name] = v);
      }
    }
  }
  ReflectionOptionsSetter2.set = set;
})(ReflectionOptionsSetter || (ReflectionOptionsSetter = {}));

// src/ui/widgets/propertygrid.ts
function PropertyFieldCaption(props) {
  var _a68;
  const { item, idPrefix, localTextPrefix } = props;
  const label = document.createElement("label");
  label.className = "caption";
  label.htmlFor = (idPrefix != null ? idPrefix : "") + item.name;
  const caption = determineText(props.localTextPrefix, item.title, (p) => p + item.name);
  label.textContent = caption != null ? caption : "";
  const hint = determineText(localTextPrefix, item.hint, (p) => p + item.name + "_Hint");
  label.title = (_a68 = hint != null ? hint : caption) != null ? _a68 : "";
  if (item.labelWidth) {
    if (item.labelWidth === "0") {
      label.style.display = "none";
    } else {
      label.style.width = item.labelWidth;
    }
  }
  if (item.required) {
    const sup = document.createElement("sup");
    sup.textContent = "*";
    sup.title = localText("Controls.PropertyGrid.RequiredHint");
    label.prepend(sup);
  }
  return label;
}
function PropertyFieldEditor(props) {
  var _a68;
  const { fieldElement, item, idPrefix, localTextPrefix } = props;
  const placeHolder = determineText(localTextPrefix, item.placeholder, (p) => p + item.name + "_Placeholder");
  let editorParams = item.editorParams;
  const editorType = isPromiseLike(item.editorType) || typeof item.editorType === "function" ? item.editorType : EditorTypeRegistry.getOrLoad((_a68 = item.editorType) != null ? _a68 : "String");
  let loadingPoint;
  const then = (editorType2) => {
    let optionsType = null;
    const optionsAttr = getCustomAttribute(editorType2, OptionsTypeAttribute);
    if (optionsAttr) {
      optionsType = optionsAttr.value;
    }
    if (optionsType != null) {
      editorParams = extend(new optionsType(), item.editorParams);
    } else {
      editorParams = extend(new Object(), item.editorParams);
    }
    const editor = new editorType2(__spreadProps(__spreadValues({}, editorParams), {
      id: idPrefix + item.name,
      element: (el) => {
        var _a69, _b, _c;
        !el.id && (el.id = idPrefix + item.name);
        el.classList.add("editor");
        if (item.editorCssClass)
          addClass(el, item.editorCssClass);
        if (Fluent.isInputLike(el))
          el.setAttribute("name", (_a69 = item.name) != null ? _a69 : "");
        if (placeHolder)
          el.setAttribute("placeholder", placeHolder);
        let wrappedNode = el;
        if ((_b = item.editorAddons) == null ? void 0 : _b.length) {
          wrappedNode = document.createDocumentFragment();
          wrappedNode.appendChild(el);
          for (var wrapper of item.editorAddons) {
            const wrapperComponent = typeof wrapper.type === "function" ? wrapper.type : getType(wrapper.type);
            if (typeof wrapperComponent !== "function")
              throw `Invalid editor addon type: ${wrapper.type} for property: "${item.name}"`;
            wrapperComponent(__spreadProps(__spreadValues({}, wrapper.params), { propertyItem: item, editorElement: el, documentFragment: wrappedNode }));
          }
        }
        if (loadingPoint) {
          (_c = loadingPoint.parentElement) == null ? void 0 : _c.replaceChild(wrappedNode, loadingPoint);
          loadingPoint = null;
          delete fieldElement.editorPromise;
        } else {
          fieldElement.append(wrappedNode);
        }
      }
    })).init();
    if (item.maxLength != null) {
      setMaxLength(editor, item.maxLength);
    }
    if (item.editorParams != null) {
      ReflectionOptionsSetter.set(editor, item.editorParams);
    }
    fieldElement.editorWidget = editor;
  };
  if (isPromiseLike(editorType)) {
    loadingPoint = document.createComment("Loading editor type...");
    fieldElement.append(loadingPoint);
    fieldElement.editorPromise = editorType.then(then);
  } else {
    then(editorType);
  }
}
function PropertyFieldLineBreak(props) {
  var _a68;
  const klass = (_a68 = props == null ? void 0 : props.item) == null ? void 0 : _a68.formCssClass;
  if (!klass || klass.indexOf("line-break") < 0)
    return null;
  var splitted = klass.split(" ");
  if (splitted.indexOf("line-break-xs") >= 0) {
    return createLineBreak("line-break");
  }
  if (splitted.indexOf("line-break-sm") >= 0) {
    return createLineBreak("line-break hidden-xs");
  } else if (splitted.indexOf("line-break-md") >= 0) {
    return createLineBreak("line-break hidden-sm");
  } else if (splitted.indexOf("line-break-lg") >= 0) {
    return createLineBreak("line-break hidden-md");
  }
}
function PropertyField(props) {
  var _a68;
  const { item, container, localTextPrefix } = props;
  const idPrefix = (_a68 = props == null ? void 0 : props.idPrefix) != null ? _a68 : "";
  var fieldElement = document.createElement("div");
  fieldElement.className = "field";
  fieldElement.dataset.itemname = item.name;
  fieldElement.propertyItem = item;
  addClass(fieldElement, item.name);
  item.cssClass && addClass(fieldElement, item.cssClass);
  if (item.formCssClass) {
    addClass(fieldElement, item.formCssClass);
    if (container) {
      const lineBreak = PropertyFieldLineBreak({ item });
      lineBreak && container.appendChild(lineBreak);
    }
  }
  fieldElement.appendChild(PropertyFieldCaption({
    item,
    idPrefix,
    localTextPrefix
  }));
  container == null ? void 0 : container.appendChild(fieldElement);
  PropertyFieldEditor({
    fieldElement,
    item,
    idPrefix,
    localTextPrefix
  });
  fieldElement.appendChild(document.createElement("div")).className = "vx";
  fieldElement.appendChild(document.createElement("div")).className = "clear";
  return fieldElement;
}
function PropertyCategoryTitle(props) {
  var title = document.createElement("div");
  title.className = "category-title";
  title.textContent = determineText(props.localTextPrefix, props.category, (prefix) => prefix + "Categories." + props.category);
  return title;
}
function PropertyCategory(props) {
  var categoryDiv = document.createElement("div");
  categoryDiv.className = "category";
  const { category, children, collapsed, localTextPrefix } = props;
  if (category) {
    let key = category;
    let idx = category.lastIndexOf(".Categories.");
    if (idx >= 0) {
      key = category.substring(idx + 12);
    }
    categoryDiv.dataset.category = key;
    const title = categoryDiv.appendChild(PropertyCategoryTitle({
      category,
      localTextPrefix
    }));
    if (collapsed != null) {
      categoryDiv.classList.add("collapsible");
      collapsed && categoryDiv.classList.add("collapsed");
      var icon = categoryDiv.appendChild(document.createElement("i"));
      title.appendChild(document.createElement("i")).className = faIcon(collapsed ? "plus" : "minus");
      title.addEventListener("click", function() {
        categoryDiv.classList.toggle("collapsed");
        icon.classList.toggle("fa-plus");
        icon.classList.toggle("fa-minus");
      });
    }
  }
  appendToNode(categoryDiv, children);
  return categoryDiv;
}
function PropertyTabItem(props) {
  const { active, paneId, localTextPrefix, title } = props;
  const bs3 = isBS3();
  const li = document.createElement("li");
  const a = li.appendChild(document.createElement("a"));
  if (bs3) {
    active && li.classList.add("active");
  } else {
    li.className = "nav-item";
    a.className = "nav-link";
    active && a.classList.add("active");
  }
  li.role = "tab";
  a.setAttribute("data-" + (isBS5Plus() ? "bs-" : "") + "toggle", "tab");
  paneId && (a.href = "#" + paneId);
  a.textContent = determineText(localTextPrefix, title, (prefix) => prefix + "Tabs." + title);
  let tabKey = extractTabKey(title);
  if (tabKey) {
    a.dataset.tabkey = tabKey;
  }
  return li;
}
function PropertyTabPane(props) {
  const { active, children, id } = props;
  const pane = document.createElement("div");
  pane.className = "tab-pane fade" + (active ? isBS3() ? " in active" : " show active" : "");
  pane.id = id;
  pane.role = "tabpanel";
  appendToNode(pane, children);
  return pane;
}
function PropertyCategories(props) {
  var _a68, _b;
  let categoriesDiv = document.createElement("div");
  categoriesDiv.className = "categories";
  props.container && props.container.appendChild(categoriesDiv);
  const { items, fieldElements, idPrefix, localTextPrefix } = props;
  var categoryEl = null;
  var priorCategory = null;
  for (var i = 0; i < items.length; i++) {
    var item = items[i];
    var category = (_a68 = item.category) != null ? _a68 : "";
    if (!categoryEl || priorCategory !== category) {
      categoryEl = categoriesDiv.appendChild(PropertyCategory({
        category,
        collapsed: item.collapsible !== true ? null : (_b = item.collapsed) != null ? _b : false,
        localTextPrefix
      }));
      priorCategory = category;
    }
    const fieldElement = PropertyField({
      item,
      container: categoryEl,
      idPrefix,
      localTextPrefix
    });
    fieldElements == null ? void 0 : fieldElements.push(fieldElement);
  }
  return categoriesDiv;
}
function PropertyTabList(props) {
  var tabs = document.createElement("ul");
  tabs.className = "nav nav-underline property-tabs";
  tabs.role = "tablist";
  appendToNode(tabs, props == null ? void 0 : props.children);
  return tabs;
}
function PropertyTabPanes(props) {
  var panes = document.createElement("div");
  panes.className = "tab-content property-panes";
  return panes;
}
function PropertyTabs(props) {
  var _a68, _b, _c, _d, _e;
  const { items, container, fieldElements, idPrefix, localTextPrefix, paneIdPrefix } = props;
  const parentNode = container != null ? container : document.createDocumentFragment();
  const createItems = (container2, items2) => PropertyCategories({
    items: items2,
    container: container2,
    fieldElements,
    idPrefix,
    localTextPrefix
  });
  const itemsWithoutTab = items.filter((f) => !f.tab);
  if (itemsWithoutTab.length > 0) {
    createItems(parentNode, itemsWithoutTab);
    parentNode.appendChild(document.createElement("div")).className = "pad";
  }
  const itemsWithTab = items.filter((f) => f.tab);
  const tabList = parentNode.appendChild(PropertyTabList());
  const tabPanes = parentNode.appendChild(PropertyTabPanes());
  var tabIndex = 0;
  var i = 0;
  while (i < itemsWithTab.length) {
    var title = (_b = (_a68 = itemsWithTab[i].tab) == null ? void 0 : _a68.trim()) != null ? _b : "";
    var withSameTab = [];
    var j = i;
    do {
      withSameTab.push(itemsWithTab[j]);
    } while (++j < itemsWithTab.length && ((_d = (_c = itemsWithTab[j].tab) == null ? void 0 : _c.trim()) != null ? _d : "") === title);
    i = j;
    var paneId = ((_e = paneIdPrefix != null ? paneIdPrefix : idPrefix) != null ? _e : "") + "Tab" + tabIndex;
    tabList.appendChild(PropertyTabItem({ title, active: tabIndex === 0, paneId, localTextPrefix }));
    const pane = tabPanes.appendChild(PropertyTabPane({ active: tabIndex === 0, id: paneId }));
    createItems(pane, withSameTab);
    tabIndex++;
  }
  return container ? null : parentNode;
}
var _PropertyGrid_decorators, _init54, _a7;
_PropertyGrid_decorators = [Decorators.registerClass("Serenity.PropertyGrid")];
var _PropertyGrid = class _PropertyGrid extends (_a7 = Widget) {
  renderContents() {
    var _a68, _b, _c;
    this.domNode.classList.add("s-PropertyGrid");
    (_b = (_a68 = this.options).mode) != null ? _b : _a68.mode = 1 /* insert */;
    this.fieldElements = [];
    const items = this.options.items || [];
    const commonProps = {
      items,
      container: this.domNode,
      fieldElements: this.fieldElements,
      idPrefix: this.idPrefix,
      localTextPrefix: this.options.localTextPrefix
    };
    if (items.some((x) => !!x.tab)) {
      PropertyTabs(__spreadProps(__spreadValues({}, commonProps), { paneIdPrefix: this.uniqueName + "_" }));
    } else {
      PropertyCategories(commonProps);
    }
    if (this.options.value !== false) {
      this.value = (_c = this.options.value) != null ? _c : {};
    }
    this.updateInterface();
  }
  destroy() {
    var _a68;
    if (this.fieldElements) {
      for (var fieldElement of this.fieldElements) {
        if (fieldElement) {
          (_a68 = fieldElement.editorWidget) == null ? void 0 : _a68.destroy();
          delete fieldElement.editorWidget;
          delete fieldElement.editorPromise;
          delete fieldElement.propertyItem;
        }
      }
      this.fieldElements = null;
    }
    super.destroy();
  }
  get_editors() {
    var _a68, _b;
    return (_b = (_a68 = this.fieldElements) == null ? void 0 : _a68.map((x) => x.editorWidget)) != null ? _b : [];
  }
  get_items() {
    var _a68, _b;
    return (_b = (_a68 = this.fieldElements) == null ? void 0 : _a68.map((x) => x.propertyItem)) != null ? _b : [];
  }
  get_idPrefix() {
    return this.idPrefix;
  }
  enumerateItems(callback) {
    for (let fieldElement of this.fieldElements) {
      var item = fieldElement.propertyItem;
      var editor = fieldElement.editorWidget;
      if (!editor && fieldElement.editorPromise)
        throw `Editor for "${item.name}" is not loaded yet.`;
      callback(item, editor);
    }
  }
  get_mode() {
    return this.options.mode;
  }
  set_mode(value) {
    if (this.options.mode !== value) {
      this.options.mode = value;
      this.updateInterface();
    }
  }
  static loadFieldValue(source, fieldElement, mode) {
    var item = fieldElement.propertyItem;
    if (!!(mode === 1 /* insert */ && item.defaultValue != null) && typeof source[item.name] === "undefined") {
      source[item.name] = item.defaultValue;
    }
    var editor = fieldElement.editorWidget;
    if (!editor && fieldElement.editorPromise) {
      fieldElement.editorPromise.then(() => {
        fieldElement.editorWidget && EditorUtils.loadValue(fieldElement.editorWidget, item, source);
      });
    } else {
      EditorUtils.loadValue(editor, item, source);
    }
  }
  load(source) {
    const mode = this.get_mode();
    for (let fieldElement of this.fieldElements) {
      _PropertyGrid.loadFieldValue(source, fieldElement, mode);
    }
  }
  static saveFieldValue(target, fieldElement, canModify) {
    var item = fieldElement.propertyItem;
    if (item.oneWay !== true && (canModify != null ? canModify : _PropertyGrid.canModifyItem(item))) {
      var editor = fieldElement.editorWidget;
      if (!editor && fieldElement.editorPromise)
        throw `Editor for "${item.name}" is not loaded yet.`;
      EditorUtils.saveValue(editor, item, target);
    }
  }
  save(target) {
    if (target == null)
      target = /* @__PURE__ */ Object.create(null);
    for (let fieldElement of this.fieldElements) {
      _PropertyGrid.saveFieldValue(target, fieldElement, !!this.canModifyItem(fieldElement.propertyItem));
    }
    return target;
  }
  get value() {
    return this.save();
  }
  set value(val) {
    if (val == null)
      val = /* @__PURE__ */ Object.create(null);
    this.load(val);
  }
  static canModifyItem(item, mode) {
    if (mode === 1 /* insert */) {
      if (item.insertable === false) {
        return false;
      }
      if (item.insertPermission == null) {
        return true;
      }
      return Authorization.hasPermission(item.insertPermission);
    } else if (mode === 2 /* update */) {
      if (item.updatable === false) {
        return false;
      }
      if (item.updatePermission == null) {
        return true;
      }
      return Authorization.hasPermission(item.updatePermission);
    }
    return true;
  }
  canModifyItem(item) {
    return _PropertyGrid.canModifyItem(item, this.get_mode());
  }
  static updateFieldElement(fieldElement, mode, canModify) {
    var item = fieldElement.propertyItem;
    canModify != null ? canModify : canModify = _PropertyGrid.canModifyItem(item, mode);
    var readOnly = item.readOnly === true || !canModify;
    var editor = fieldElement.editorWidget;
    const then = (editor2) => {
      if (!editor2)
        return;
      EditorUtils.setReadOnly(editor2, readOnly);
      EditorUtils.setRequired(editor2, !readOnly && !!item.required && item.editorType !== "Boolean");
      if (item.visible === false || item.readPermission != null || item.insertPermission != null || item.updatePermission != null || item.hideOnInsert === true || item.hideOnUpdate === true) {
        var hidden = item.readPermission != null && !Authorization.hasPermission(item.readPermission) || item.visible === false || mode === 1 /* insert */ && item.hideOnInsert === true || mode === 2 /* update */ && item.hideOnUpdate === true;
        editor2.getGridField().toggle(!hidden);
      }
    };
    if (!editor && fieldElement.editorPromise) {
      fieldElement.editorPromise.then(() => {
        fieldElement.editorWidget && then(fieldElement.editorWidget);
      });
    } else {
      then(editor);
    }
  }
  updateFieldElement(fieldElement) {
    _PropertyGrid.updateFieldElement(fieldElement, this.get_mode(), !!this.canModifyItem(fieldElement.propertyItem));
  }
  updateInterface() {
    for (let fieldElement of this.fieldElements) {
      this.updateFieldElement(fieldElement);
    }
  }
};
_init54 = __decoratorStart(_a7);
_PropertyGrid = __decorateElement(_init54, 0, "PropertyGrid", _PropertyGrid_decorators, _PropertyGrid);
__runInitializers(_init54, 1, _PropertyGrid);
var PropertyGrid = _PropertyGrid;
function determineText(localTextPrefix, text2, getKey) {
  let local2;
  if (text2 != null && !text2.startsWith("`")) {
    local2 = tryGetText(text2);
    if (local2 != null) {
      return local2;
    }
  }
  if (text2 != null && text2.startsWith("`")) {
    text2 = text2.substring(1);
  }
  if (localTextPrefix) {
    local2 = tryGetText(getKey(localTextPrefix));
    if (local2 != null) {
      return local2;
    }
  }
  return text2;
}
function extractTabKey(title) {
  if (!title)
    return null;
  let idx = title.lastIndexOf(".Tabs.");
  if (idx >= 0) {
    return title.substring(idx + 6);
  }
  return title;
}
function setMaxLength(widget, maxLength) {
  if (Fluent.isInputLike(widget.domNode)) {
    if (maxLength > 0) {
      widget.domNode.setAttribute("maxlength", (maxLength != null ? maxLength : 0).toString());
    } else {
      widget.domNode.removeAttribute("maxlength");
    }
  }
}
function createLineBreak(klass) {
  const div = document.createElement("div");
  div.className = klass;
  div.style.width = "100%";
  return div;
}
var PropertyGridMode = /* @__PURE__ */ ((PropertyGridMode2) => {
  PropertyGridMode2[PropertyGridMode2["insert"] = 1] = "insert";
  PropertyGridMode2[PropertyGridMode2["update"] = 2] = "update";
  return PropertyGridMode2;
})(PropertyGridMode || {});

// src/ui/widgets/propertypanel.ts
var _PropertyPanel_decorators, _init55, _a8;
_PropertyPanel_decorators = [Decorators.registerClass("Serenity.PropertyPanel")];
var PropertyPanel = class extends (_a8 = BasePanel) {
  constructor(props) {
    super(props);
    this.initPropertyGrid();
    this.loadInitialEntity();
  }
  destroy() {
    if (this.propertyGrid) {
      this.propertyGrid.destroy();
      this.propertyGrid = null;
    }
    if (this.validator) {
      this.byId("Form").remove();
      this.validator = null;
    }
    super.destroy();
  }
  initPropertyGrid() {
    var pgDiv = this.findById("PropertyGrid");
    if (!pgDiv)
      return;
    var pgOptions = this.getPropertyGridOptions();
    this.propertyGrid = new PropertyGrid(__spreadValues({ element: pgDiv }, pgOptions)).init();
  }
  loadInitialEntity() {
    if (this.propertyGrid) {
      this.propertyGrid.load(new Object());
    }
  }
  getFormKey() {
    var attr2 = this.getCustomAttribute(FormKeyAttribute);
    if (attr2) {
      return attr2.value;
    }
    var name = getTypeFullName(getInstanceType(this));
    var px = name.indexOf(".");
    if (px >= 0) {
      name = name.substring(px + 1);
    } else if (name.endsWith("Panel")) {
      name = name.substring(0, name.length - 5);
    }
    return name;
  }
  getPropertyGridOptions() {
    return {
      idPrefix: this.idPrefix,
      items: this.getPropertyItems(),
      mode: 1 /* insert */,
      localTextPrefix: "Forms." + this.getFormKey() + "."
    };
  }
  getPropertyItems() {
    var formKey = this.getFormKey();
    return getForm(formKey);
  }
  getSaveEntity() {
    var entity = new Object();
    if (this.propertyGrid) {
      this.propertyGrid.save(entity);
    }
    return entity;
  }
  get entity() {
    return this._entity;
  }
  get entityId() {
    return this._entityId;
  }
  set entity(value) {
    this._entity = value != null ? value : new Object();
  }
  set entityId(value) {
    this._entityId = value;
  }
  validateBeforeSave() {
    return this.validator.form();
  }
};
_init55 = __decoratorStart(_a8);
PropertyPanel = __decorateElement(_init55, 0, "PropertyPanel", _PropertyPanel_decorators, PropertyPanel);
__runInitializers(_init55, 1, PropertyPanel);

// src/ui/helpers/subdialoghelper.ts
var SubDialogHelper;
((SubDialogHelper2) => {
  function bindToDataChange(dialog, owner, dataChange, useTimeout) {
    var uniqueName = owner["uniqueName"];
    dialog.element.on("ondatachange." + uniqueName, function(e) {
      if (typeof e.operationType === "undefined" && e.originalEvent && typeof e.originalEvent.operationType !== "undefined")
        e = e.originalEvent;
      if (useTimeout) {
        window.setTimeout(function() {
          dataChange(e);
        }, 0);
      } else {
        dataChange(e);
      }
    }).one("disposing." + uniqueName, function() {
      Fluent.off(dialog.domNode, "ondatachange." + uniqueName);
    });
    return dialog;
  }
  SubDialogHelper2.bindToDataChange = bindToDataChange;
  function triggerDataChange(dialog) {
    Fluent.trigger(dialog.domNode, "ondatachange");
    return dialog;
  }
  SubDialogHelper2.triggerDataChange = triggerDataChange;
  function triggerDataChanged(element) {
    Fluent.trigger(isArrayLike(element) ? element[0] : element, "ondatachange");
  }
  SubDialogHelper2.triggerDataChanged = triggerDataChanged;
  function bubbleDataChange(dialog, owner, useTimeout) {
    return bindToDataChange(dialog, owner, function(e) {
      Fluent.trigger(owner.domNode, "ondatachange");
    }, useTimeout);
  }
  SubDialogHelper2.bubbleDataChange = bubbleDataChange;
  function cascade(cascadedDialog, ofElement) {
    Fluent.one(cascadedDialog.domNode, "dialogopen", function(e) {
      var $2 = getjQuery();
      if ($2 && $2.fn && $2.fn.dialog) {
        $2(cascadedDialog.domNode).dialog("option", "position", cascadedDialogOffset(ofElement));
      }
    });
    return cascadedDialog;
  }
  SubDialogHelper2.cascade = cascade;
  function cascadedDialogOffset(element) {
    return { my: "left top", at: "left+20 top+20", of: isArrayLike(element) ? element[0] : element };
  }
  SubDialogHelper2.cascadedDialogOffset = cascadedDialogOffset;
})(SubDialogHelper || (SubDialogHelper = {}));

// src/ui/dialogs/propertydialog.ts
var _PropertyDialog_decorators, _init56, _a9;
_PropertyDialog_decorators = [Decorators.registerClass("Serenity.PropertyDialog"), Decorators.panel(false)];
var _PropertyDialog = class _PropertyDialog extends (_a9 = BaseDialog) {
  isClosable() {
    return !this.isStatic();
  }
  isStatic() {
    return false;
  }
  constructor(props) {
    super(props);
    this.syncOrAsyncThen(this.getPropertyItemsData, this.getPropertyItemsDataAsync, (itemsData) => {
      this.propertyItemsReady(itemsData);
      this.afterInit();
    });
  }
  propertyItemsReady(itemsData) {
    this.propertyItemsData = itemsData;
    this.initPropertyGrid();
    this.loadInitialEntity();
  }
  afterInit() {
  }
  useAsync() {
    return false;
  }
  destroy() {
    if (this.propertyGrid) {
      this.propertyGrid.destroy();
      this.propertyGrid = null;
    }
    super.destroy();
  }
  getDialogOptions() {
    var opt = super.getDialogOptions();
    opt.width = 400;
    return opt;
  }
  getDialogButtons() {
    var _a68;
    if (((_a68 = this.getCustomAttribute(StaticPanelAttribute)) == null ? void 0 : _a68.value) === true)
      return [];
    return [
      okDialogButton({
        click: (e) => {
          e.preventDefault();
          this.okClick();
        }
      }),
      cancelDialogButton()
    ];
  }
  okClick() {
    if (!this.validateBeforeSave()) {
      return;
    }
    this.okClickValidated();
  }
  okClickValidated() {
    this.dialogClose("ok");
  }
  cancelClick() {
    this.dialogClose("cancel");
  }
  initPropertyGrid() {
    var pgDiv = this.findById("PropertyGrid");
    if (!pgDiv) {
      return;
    }
    var pgOptions = this.getPropertyGridOptions();
    this.propertyGrid = new PropertyGrid(__spreadValues({ element: pgDiv }, pgOptions)).init();
  }
  getFormKey() {
    var attr2 = this.getCustomAttribute(FormKeyAttribute);
    if (attr2) {
      return attr2.value;
    } else {
      var name = getTypeFullName(getInstanceType(this));
      var px = name.indexOf(".");
      if (px >= 0) {
        name = name.substring(px + 1);
      }
      if (name.endsWith("Dialog")) {
        name = name.substring(0, name.length - 6);
      } else if (name.endsWith("Panel")) {
        name = name.substring(0, name.length - 5);
      }
      return name;
    }
  }
  getPropertyGridOptions() {
    return {
      idPrefix: this.idPrefix,
      items: this.getPropertyItems(),
      mode: 1,
      localTextPrefix: "Forms." + this.getFormKey() + "."
    };
  }
  getPropertyItems() {
    var _a68;
    return ((_a68 = this.propertyItemsData) == null ? void 0 : _a68.items) || [];
  }
  getPropertyItemsData() {
    var formKey = this.getFormKey();
    if (this.getFormKey === _PropertyDialog.prototype.getFormKey && this.getPropertyItems !== _PropertyDialog.prototype.getPropertyItems && !ScriptData.canLoad("Form." + formKey)) {
      return {
        items: this.getPropertyItems(),
        additionalItems: []
      };
    }
    if (formKey) {
      return getFormData(formKey);
    }
    return { items: [], additionalItems: [] };
  }
  getPropertyItemsDataAsync() {
    return __async(this, null, function* () {
      var formKey = this.getFormKey();
      if (formKey) {
        return yield getFormDataAsync(formKey);
      }
      return { items: [], additionalItems: [] };
    });
  }
  getSaveEntity() {
    var entity = new Object();
    if (this.propertyGrid) {
      this.propertyGrid.save(entity);
    }
    return entity;
  }
  loadInitialEntity() {
    this.propertyGrid && this.propertyGrid.load(new Object());
  }
  get entity() {
    return this._entity;
  }
  set entity(value) {
    this._entity = value != null ? value : new Object();
  }
  get entityId() {
    return this._entityId;
  }
  set entityId(value) {
    this._entityId = value;
  }
  validateBeforeSave() {
    return this.validator.form();
  }
  updateTitle() {
  }
  renderContents() {
    if (this.legacyTemplateRender())
      return void 0;
    const id = this.useIdPrefix();
    return Fluent("div").class("s-Form").append(Fluent("form").attr("id", id.Form).attr("action", "").append(Fluent("div").attr("id", id.PropertyGrid))).getNode();
  }
};
_init56 = __decoratorStart(_a9);
_PropertyDialog = __decorateElement(_init56, 0, "PropertyDialog", _PropertyDialog_decorators, _PropertyDialog);
__runInitializers(_init56, 1, _PropertyDialog);
var PropertyDialog = _PropertyDialog;

// src/ui/editors/stringeditor.ts
var _StringEditor_decorators, _init57, _a10;
_StringEditor_decorators = [Decorators.registerType()];
var StringEditor = class extends (_a10 = EditorWidget) {
  static createDefaultElement() {
    return Fluent("input").attr("type", "text").getNode();
  }
  get value() {
    return this.domNode.value;
  }
  get_value() {
    return this.value;
  }
  set value(value) {
    this.domNode.value = value != null ? value : "";
  }
  set_value(value) {
    this.value = value;
  }
};
_init57 = __decoratorStart(_a10);
StringEditor = __decorateElement(_init57, 0, "StringEditor", _StringEditor_decorators, StringEditor);
StringEditor.typeInfo = Decorators.editorType("Serenity.StringEditor", [IStringValue]);
__runInitializers(_init57, 1, StringEditor);

// src/ui/editors/passwordeditor.ts
var _PasswordEditor_decorators, _init58, _a11;
_PasswordEditor_decorators = [Decorators.registerType()];
var PasswordEditor = class extends (_a11 = StringEditor) {
  static createDefaultElement() {
    return Fluent("input").attr("type", "password").getNode();
  }
};
_init58 = __decoratorStart(_a11);
PasswordEditor = __decorateElement(_init58, 0, "PasswordEditor", _PasswordEditor_decorators, PasswordEditor);
PasswordEditor.typeInfo = Decorators.editorType("Serenity.PasswordEditor");
__runInitializers(_init58, 1, PasswordEditor);

// src/ui/editors/textareaeditor.ts
var _TextAreaEditor_decorators, _init59, _a12;
_TextAreaEditor_decorators = [Decorators.registerEditor("Serenity.TextAreaEditor", [IStringValue])];
var TextAreaEditor = class extends (_a12 = EditorWidget) {
  static createDefaultElement() {
    return document.createElement("textarea");
  }
  constructor(props) {
    var _a68, _b;
    super(props);
    let input = this.element;
    if (this.options.cols !== 0) {
      input.attr("cols", (_a68 = this.options.cols) != null ? _a68 : 80);
    }
    if (this.options.rows !== 0) {
      input.attr("rows", (_b = this.options.rows) != null ? _b : 6);
    }
  }
  get value() {
    return this.element.val();
  }
  get_value() {
    return this.value;
  }
  set value(value) {
    this.element.val(value != null ? value : "");
  }
  set_value(value) {
    this.value = value;
  }
};
_init59 = __decoratorStart(_a12);
TextAreaEditor = __decorateElement(_init59, 0, "TextAreaEditor", _TextAreaEditor_decorators, TextAreaEditor);
__runInitializers(_init59, 1, TextAreaEditor);

// src/ui/editors/booleaneditor.ts
var _BooleanEditor_decorators, _init60, _a13;
_BooleanEditor_decorators = [Decorators.registerEditor("Serenity.BooleanEditor", [IBooleanValue])];
var BooleanEditor = class extends (_a13 = EditorWidget) {
  static createDefaultElement() {
    return Fluent("input").attr("type", "checkbox").getNode();
  }
  get value() {
    return !!this.domNode.checked;
  }
  get_value() {
    return this.value;
  }
  set value(value) {
    this.domNode.checked = !!value;
  }
  set_value(value) {
    this.value = value;
  }
};
_init60 = __decoratorStart(_a13);
BooleanEditor = __decorateElement(_init60, 0, "BooleanEditor", _BooleanEditor_decorators, BooleanEditor);
__runInitializers(_init60, 1, BooleanEditor);

// src/ui/editors/autonumeric.ts
function getElementSelection(that) {
  var position = {};
  if (that.selectionStart === void 0) {
    that.focus();
    var select = document.selection.createRange();
    position.length = select.text.length;
    select.moveStart("character", -that.value.length);
    position.end = select.text.length;
    position.start = position.end - position.length;
  } else {
    position.start = that.selectionStart;
    position.end = that.selectionEnd;
    position.length = position.end - position.start;
  }
  return position;
}
function setElementSelection(that, start, end) {
  if (that.selectionStart === void 0) {
    that.focus();
    var r = that.createTextRange();
    r.collapse(true);
    r.moveEnd("character", end);
    r.moveStart("character", start);
    r.select();
  } else {
    that.selectionStart = start;
    that.selectionEnd = end;
  }
}
function runCallbacks(input, settings) {
  Object.keys(settings).forEach(function(k) {
    var _a68, _b;
    var val = settings[k];
    if (typeof val === "function") {
      settings[k] = val(input, settings, k);
    } else if (typeof ((_a68 = AutoNumeric.getSettings(input)) == null ? void 0 : _a68[val]) === "function") {
      settings[k] = (_b = AutoNumeric.getSettings(input)) == null ? void 0 : _b[val](input, settings, k);
    }
  });
}
function convertKeyToNumber(settings, key) {
  if (typeof settings[key] === "string") {
    settings[key] *= 1;
  }
}
function autoCode(input, settings) {
  runCallbacks(input, settings);
  settings.oEvent = null;
  settings.tagList = ["B", "CAPTION", "CITE", "CODE", "DD", "DEL", "DIV", "DFN", "DT", "EM", "H1", "H2", "H3", "H4", "H5", "H6", "INS", "KDB", "LABEL", "LI", "OUTPUT", "P", "Q", "S", "SAMPLE", "SPAN", "STRONG", "TD", "TH", "U", "VAR"];
  var vmax = settings.vMax.toString().split("."), vmin = !settings.vMin && settings.vMin !== 0 ? [] : settings.vMin.toString().split(".");
  convertKeyToNumber(settings, "vMax");
  convertKeyToNumber(settings, "vMin");
  convertKeyToNumber(settings, "mDec");
  settings.mDec = settings.mRound === "CHF" ? 2 : settings.mDec;
  settings.allowLeading = true;
  settings.aNeg = settings.vMin < 0 ? "-" : "";
  vmax[0] = vmax[0].replace("-", "");
  vmin[0] = vmin[0].replace("-", "");
  settings.mInt = Math.max(vmax[0].length, vmin[0].length, 1);
  if (settings.mDec === null) {
    var vmaxLength = 0, vminLength = 0;
    if (vmax[1]) {
      vmaxLength = vmax[1].length;
    }
    if (vmin[1]) {
      vminLength = vmin[1].length;
    }
    settings.mDec = Math.max(vmaxLength, vminLength);
  }
  if (settings.altDec === null && settings.mDec > 0) {
    if (settings.aDec === "." && settings.aSep !== ",") {
      settings.altDec = ",";
    } else if (settings.aDec === "," && settings.aSep !== ".") {
      settings.altDec = ".";
    }
  }
  var aNegReg = settings.aNeg ? "([-\\" + settings.aNeg + "]?)" : "(-?)";
  settings.aNegRegAutoStrip = aNegReg;
  settings.skipFirstAutoStrip = new RegExp(aNegReg + "[^-" + (settings.aNeg ? "\\" + settings.aNeg : "") + "\\" + settings.aDec + "\\d].*?(\\d|\\" + settings.aDec + "\\d)");
  settings.skipLastAutoStrip = new RegExp("(\\d\\" + settings.aDec + "?)[^\\" + settings.aDec + "\\d]\\D*$");
  var allowed = "-" + settings.aNum + "\\" + settings.aDec;
  settings.allowedAutoStrip = new RegExp("[^" + allowed + "]", "gi");
  settings.numRegAutoStrip = new RegExp(aNegReg + "(?:\\" + settings.aDec + "?(\\d+\\" + settings.aDec + "\\d+)|(\\d*(?:\\" + settings.aDec + "\\d*)?))");
  return settings;
}
function autoStrip(s, settings, strip_zero) {
  if (settings.aSign) {
    while (s.indexOf(settings.aSign) > -1) {
      s = s.replace(settings.aSign, "");
    }
  }
  s = s.replace(settings.skipFirstAutoStrip, "$1$2");
  s = s.replace(settings.skipLastAutoStrip, "$1");
  s = s.replace(settings.allowedAutoStrip, "");
  if (settings.altDec) {
    s = s.replace(settings.altDec, settings.aDec);
  }
  var m = s.match(settings.numRegAutoStrip);
  s = m ? [m[1], m[2], m[3]].join("") : "";
  if ((settings.lZero === "allow" || settings.lZero === "keep") && strip_zero !== "strip") {
    var parts = [], nSign = "";
    parts = s.split(settings.aDec);
    if (parts[0].indexOf("-") !== -1) {
      nSign = "-";
      parts[0] = parts[0].replace("-", "");
    }
    if (parts[0].length > settings.mInt && parts[0].charAt(0) === "0") {
      parts[0] = parts[0].slice(1);
    }
    s = nSign + parts.join(settings.aDec);
  }
  if (strip_zero && settings.lZero === "deny" || strip_zero && settings.lZero === "allow" && settings.allowLeading === false) {
    var strip_reg = new RegExp("^" + settings.aNegRegAutoStrip + "0*(\\d" + (strip_zero === "leading" ? ")" : "|$)"));
    s = s.replace(strip_reg, "$1$2");
  }
  return s;
}
function negativeBracket(s, nBracket, oEvent) {
  var pBracket = nBracket.split(",");
  if (oEvent === "set" || oEvent === "focusout") {
    s = s.replace("-", "");
    s = pBracket[0] + s + pBracket[1];
  } else if ((oEvent === "get" || oEvent === "focusin" || oEvent === "pageLoad") && s.charAt(0) === nBracket[0]) {
    s = s.replace(pBracket[0], "-");
    s = s.replace(pBracket[1], "");
  }
  return s;
}
function truncateDecimal(s, aDec, mDec) {
  if (aDec && mDec) {
    var parts = s.split(aDec);
    if (parts[1] && parts[1].length > mDec) {
      if (mDec > 0) {
        parts[1] = parts[1].substring(0, mDec);
        s = parts.join(aDec);
      } else {
        s = parts[0];
      }
    }
  }
  return s;
}
function fixNumber(s, aDec, aNeg) {
  if (aDec && aDec !== ".") {
    s = s.replace(aDec, ".");
  }
  if (aNeg && aNeg !== "-") {
    s = s.replace(aNeg, "-");
  }
  if (!s.match(/\d/)) {
    s += "0";
  }
  return s;
}
function checkValue(value, settings) {
  if (value) {
    var checkSmall = +value;
    if (checkSmall < 1e-6 && checkSmall > -1) {
      value = +value;
      if (value < 1e-6 && value > 0) {
        value = (value + 10).toString();
        value = value.substring(1);
      }
      if (value < 0 && value > -1) {
        value = (value - 10).toString();
        value = "-" + value.substring(2);
      }
      value = value.toString();
    } else {
      var parts = value.split(".");
      if (parts[1] !== void 0) {
        if (+parts[1] === 0) {
          value = parts[0];
        } else {
          parts[1] = parts[1].replace(/0*$/, "");
          value = parts.join(".");
        }
      }
    }
  }
  return settings.lZero === "keep" ? value : value.replace(/^0*(\d)/, "$1");
}
function presentNumber(s, aDec, aNeg) {
  if (aNeg && aNeg !== "-") {
    s = s.replace("-", aNeg);
  }
  if (aDec && aDec !== ".") {
    s = s.replace(".", aDec);
  }
  return s;
}
function autoCheck(s, settings) {
  s = autoStrip(s, settings);
  s = truncateDecimal(s, settings.aDec, settings.mDec);
  s = fixNumber(s, settings.aDec, settings.aNeg);
  var value = +s;
  return value >= settings.vMin && value <= settings.vMax;
}
function checkEmpty(iv, settings, signOnEmpty) {
  if (iv === "" || iv === settings.aNeg) {
    if (settings.wEmpty === "zero") {
      return iv + "0";
    }
    if (settings.wEmpty === "sign" || signOnEmpty) {
      return iv + settings.aSign;
    }
    return iv;
  }
  return null;
}
function autoGroup(iv, settings) {
  iv = autoStrip(iv, settings);
  var testNeg = iv.replace(",", "."), empty = checkEmpty(iv, settings, true);
  if (empty !== null) {
    return empty;
  }
  var digitalGroup = "";
  if (settings.dGroup == "2") {
    digitalGroup = /(\d)((\d)(\d{2}?)+)$/;
  } else if (settings.dGroup == "4") {
    digitalGroup = /(\d)((\d{4}?)+)$/;
  } else {
    digitalGroup = /(\d)((\d{3}?)+)$/;
  }
  var ivSplit = iv.split(settings.aDec);
  if (settings.altDec && ivSplit.length === 1) {
    ivSplit = iv.split(settings.altDec);
  }
  var s = ivSplit[0];
  if (settings.aSep) {
    while (digitalGroup.test(s)) {
      s = s.replace(digitalGroup, "$1" + settings.aSep + "$2");
    }
  }
  if (settings.mDec !== 0 && ivSplit.length > 1) {
    if (ivSplit[1].length > settings.mDec) {
      ivSplit[1] = ivSplit[1].substring(0, settings.mDec);
    }
    iv = s + settings.aDec + ivSplit[1];
  } else {
    iv = s;
  }
  if (settings.aSign) {
    var has_aNeg = iv.indexOf(settings.aNeg) !== -1;
    iv = iv.replace(settings.aNeg, "");
    iv = settings.pSign === "p" ? settings.aSign + iv : iv + settings.aSign;
    if (has_aNeg) {
      iv = settings.aNeg + iv;
    }
  }
  if (settings.oEvent === "set" && testNeg < 0 && settings.nBracket !== null) {
    iv = negativeBracket(iv, settings.nBracket, settings.oEvent);
  }
  return iv;
}
function autoRound(iv, settings) {
  iv = iv === "" ? "0" : iv.toString();
  convertKeyToNumber(settings, "mDec");
  if (settings.mRound === "CHF") {
    iv = (Math.round(iv * 20) / 20).toString();
  }
  var ivRounded = "", i = 0, nSign = "", rDec = typeof settings.aPad === "boolean" || settings.aPad === null ? settings.aPad ? settings.mDec : 0 : +settings.aPad;
  var truncateZeros = function(ivRounded2) {
    var regex = rDec === 0 ? /(\.(?:\d*[1-9])?)0*$/ : rDec === 1 ? /(\.\d(?:\d*[1-9])?)0*$/ : new RegExp("(\\.\\d{" + rDec + "}(?:\\d*[1-9])?)0*$");
    ivRounded2 = ivRounded2.replace(regex, "$1");
    if (rDec === 0) {
      ivRounded2 = ivRounded2.replace(/\.$/, "");
    }
    return ivRounded2;
  };
  if (iv.charAt(0) === "-") {
    nSign = "-";
    iv = iv.replace("-", "");
  }
  if (!iv.match(/^\d/)) {
    iv = "0" + iv;
  }
  if (nSign === "-" && +iv === 0) {
    nSign = "";
  }
  if (+iv > 0 && settings.lZero !== "keep" || iv.length > 0 && settings.lZero === "allow") {
    iv = iv.replace(/^0*(\d)/, "$1");
  }
  var dPos = iv.lastIndexOf("."), vdPos = dPos === -1 ? iv.length - 1 : dPos, cDec = iv.length - 1 - vdPos;
  if (cDec <= settings.mDec) {
    ivRounded = iv;
    if (cDec < rDec) {
      if (dPos === -1) {
        ivRounded += ".";
      }
      var zeros = "000000";
      while (cDec < rDec) {
        zeros = zeros.substring(0, rDec - cDec);
        ivRounded += zeros;
        cDec += zeros.length;
      }
    } else if (cDec > rDec) {
      ivRounded = truncateZeros(ivRounded);
    } else if (cDec === 0 && rDec === 0) {
      ivRounded = ivRounded.replace(/\.$/, "");
    }
    if (settings.mRound !== "CHF") {
      return +ivRounded === 0 ? ivRounded : nSign + ivRounded;
    }
    if (settings.mRound === "CHF") {
      dPos = ivRounded.lastIndexOf(".");
      iv = ivRounded;
    }
  }
  var rLength = dPos + settings.mDec, tRound = +iv.charAt(rLength + 1), ivArray = iv.substring(0, rLength + 1).split(""), odd = iv.charAt(rLength) === "." ? iv.charAt(rLength - 1) % 2 : iv.charAt(rLength) % 2, onePass = true;
  odd = odd === 0 && iv.substring(rLength + 2, iv.length) > 0 ? 1 : 0;
  if (tRound > 4 && settings.mRound === "S" || /** Round half up symmetric */
  tRound > 4 && settings.mRound === "A" && nSign === "" || /** Round half up asymmetric positive values */
  tRound > 5 && settings.mRound === "A" && nSign === "-" || /** Round half up asymmetric negative values */
  tRound > 5 && settings.mRound === "s" || /** Round half down symmetric */
  tRound > 5 && settings.mRound === "a" && nSign === "" || /** Round half down asymmetric positive values */
  tRound > 4 && settings.mRound === "a" && nSign === "-" || /** Round half down asymmetric negative values */
  tRound > 5 && settings.mRound === "B" || /** Round half even "Banker's Rounding" */
  tRound === 5 && settings.mRound === "B" && odd === 1 || /** Round half even "Banker's Rounding" */
  tRound > 0 && settings.mRound === "C" && nSign === "" || /** Round to ceiling toward positive infinite */
  tRound > 0 && settings.mRound === "F" && nSign === "-" || /** Round to floor toward negative infinite */
  tRound > 0 && settings.mRound === "U" || settings.mRound === "CHF") {
    for (i = ivArray.length - 1; i >= 0; i -= 1) {
      if (ivArray[i] !== ".") {
        if (settings.mRound === "CHF" && ivArray[i] <= 2 && onePass) {
          ivArray[i] = 0;
          onePass = false;
          break;
        }
        if (settings.mRound === "CHF" && ivArray[i] <= 7 && onePass) {
          ivArray[i] = 5;
          onePass = false;
          break;
        }
        if (settings.mRound === "CHF" && onePass) {
          ivArray[i] = 10;
          onePass = false;
        } else {
          ivArray[i] = +ivArray[i] + 1;
        }
        if (ivArray[i] < 10) {
          break;
        }
        if (i > 0) {
          ivArray[i] = "0";
        }
      }
    }
  }
  ivArray = ivArray.slice(0, rLength + 1);
  ivRounded = truncateZeros(ivArray.join(""));
  return +ivRounded === 0 ? ivRounded : nSign + ivRounded;
}
var AutoNumericHolder = class {
  constructor(that, settings) {
    this.settings = settings;
    this.that = that;
    this.formatted = false;
    this.settingsClone = autoCode(this.that, this.settings);
    this.value = that.value;
  }
  init(e) {
    this.value = this.that.value;
    this.settingsClone = autoCode(this.that, this.settings);
    this.ctrlKey = e.ctrlKey;
    this.cmdKey = e.metaKey;
    this.shiftKey = e.shiftKey;
    this.selection = getElementSelection(this.that);
    if (e.type === "keydown" || e.type === "keyup") {
      this.kdCode = e.keyCode;
    }
    this.which = e.which;
    this.processed = false;
    this.formatted = false;
  }
  setSelection(start, end, setReal) {
    start = Math.max(start, 0);
    end = Math.min(end, this.that.value.length);
    this.selection = {
      start,
      end,
      length: end - start
    };
    if (setReal === void 0 || setReal) {
      setElementSelection(this.that, start, end);
    }
  }
  setPosition(pos, setReal) {
    this.setSelection(pos, pos, setReal);
  }
  getBeforeAfter() {
    var value = this.value, left = value.substring(0, this.selection.start), right = value.substring(this.selection.end, value.length);
    return [left, right];
  }
  getBeforeAfterStriped() {
    var parts = this.getBeforeAfter();
    parts[0] = autoStrip(parts[0], this.settingsClone);
    parts[1] = autoStrip(parts[1], this.settingsClone);
    return parts;
  }
  /**
   * strip parts from excess characters and leading zeroes
   */
  normalizeParts(left, right) {
    var settingsClone = this.settingsClone;
    right = autoStrip(right, settingsClone);
    var strip = right.match(/^\d/) ? true : "leading";
    left = autoStrip(left, settingsClone, strip);
    if ((left === "" || left === settingsClone.aNeg) && settingsClone.lZero === "deny") {
      if (right > "") {
        right = right.replace(/^0*(\d)/, "$1");
      }
    }
    var new_value = left + right;
    if (settingsClone.aDec) {
      var m = new_value.match(new RegExp("^" + settingsClone.aNegRegAutoStrip + "\\" + settingsClone.aDec));
      if (m) {
        left = left.replace(m[1], m[1] + "0");
        new_value = left + right;
      }
    }
    if (settingsClone.wEmpty === "zero" && (new_value === settingsClone.aNeg || new_value === "")) {
      left += "0";
    }
    return [left, right];
  }
  /**
   * set part of number to value keeping position of cursor
   */
  setValueParts(left, right) {
    var settingsClone = this.settingsClone, parts = this.normalizeParts(left, right), new_value = parts.join(""), position = parts[0].length;
    this.dirty = true;
    if (new_value.trim() === "") {
      new_value = "";
    } else if (autoCheck(new_value, settingsClone)) {
      new_value = truncateDecimal(new_value, settingsClone.aDec, settingsClone.mDec);
    } else {
      return false;
    }
    if (position > new_value.length) {
      position = new_value.length;
    }
    this.value = new_value;
    this.setPosition(position, false);
    return true;
  }
  /**
   * helper function for expandSelectionOnSign
   * returns sign position of a formatted value
   */
  signPosition() {
    var settingsClone = this.settingsClone, aSign = settingsClone.aSign, that = this.that;
    if (aSign) {
      var aSignLen = aSign.length;
      if (settingsClone.pSign === "p") {
        var hasNeg = settingsClone.aNeg && that.value && that.value.charAt(0) === settingsClone.aNeg;
        return hasNeg ? [1, aSignLen + 1] : [0, aSignLen];
      }
      var valueLen = that.value.length;
      return [valueLen - aSignLen, valueLen];
    }
    return [1e3, -1];
  }
  /**
   * expands selection to cover whole sign
   * prevents partial deletion/copying/overwriting of a sign
   */
  expandSelectionOnSign(setReal) {
    var sign_position = this.signPosition(), selection = this.selection;
    if (selection.start < sign_position[1] && selection.end > sign_position[0]) {
      if ((selection.start < sign_position[0] || selection.end > sign_position[1]) && this.value.substring(Math.max(selection.start, sign_position[0]), Math.min(selection.end, sign_position[1])).match(/^\s*$/)) {
        if (selection.start < sign_position[0]) {
          this.setSelection(selection.start, sign_position[0], setReal);
        } else {
          this.setSelection(sign_position[1], selection.end, setReal);
        }
      } else {
        this.setSelection(Math.min(selection.start, sign_position[0]), Math.max(selection.end, sign_position[1]), setReal);
      }
    }
  }
  /**
   * try to strip pasted value to digits
   */
  checkPaste() {
    if (this.valuePartsBeforePaste !== void 0) {
      var parts = this.getBeforeAfter(), oldParts = this.valuePartsBeforePaste;
      delete this.valuePartsBeforePaste;
      parts[0] = parts[0].substr(0, oldParts[0].length) + autoStrip(parts[0].substr(oldParts[0].length), this.settingsClone);
      if (!this.setValueParts(parts[0], parts[1])) {
        this.value = oldParts.join("");
        this.setPosition(oldParts[0].length, false);
      }
    }
  }
  /**
   * process pasting, cursor moving and skipping of not interesting keys
   * if returns true, futher processing is not performed
   */
  skipAllways(e) {
    var kdCode = this.kdCode, which = this.which, ctrlKey = this.ctrlKey, cmdKey = this.cmdKey, shiftKey = this.shiftKey;
    if ((ctrlKey || cmdKey) && e.type === "keyup" && this.valuePartsBeforePaste !== void 0 || shiftKey && kdCode === 45) {
      this.checkPaste();
      return false;
    }
    if (kdCode >= 112 && kdCode <= 123 || kdCode >= 91 && kdCode <= 93 || kdCode >= 9 && kdCode <= 31 || kdCode < 8 && (which === 0 || which === kdCode) || kdCode === 144 || kdCode === 145 || kdCode === 45) {
      return true;
    }
    if ((ctrlKey || cmdKey) && kdCode === 65) {
      return true;
    }
    if ((ctrlKey || cmdKey) && (kdCode === 67 || kdCode === 86 || kdCode === 88)) {
      if (e.type === "keydown") {
        this.expandSelectionOnSign();
      }
      if (kdCode === 86 || kdCode === 45) {
        if (e.type === "keydown" || e.type === "keypress") {
          if (this.valuePartsBeforePaste === void 0) {
            this.valuePartsBeforePaste = this.getBeforeAfter();
          }
        } else {
          this.checkPaste();
        }
      }
      return e.type === "keydown" || e.type === "keypress" || kdCode === 67;
    }
    if (ctrlKey || cmdKey) {
      return true;
    }
    if (kdCode === 37 || kdCode === 39) {
      var aSep = this.settingsClone.aSep, start = this.selection.start, value = this.that.value;
      if (e.type === "keydown" && aSep && !this.shiftKey) {
        if (kdCode === 37 && value.charAt(start - 2) === aSep) {
          this.setPosition(start - 1);
        } else if (kdCode === 39 && value.charAt(start + 1) === aSep) {
          this.setPosition(start + 1);
        }
      }
      return true;
    }
    if (kdCode >= 34 && kdCode <= 40) {
      return true;
    }
    return false;
  }
  /**
   * process deletion of characters
   * returns true if processing performed
   */
  processAllways() {
    var parts;
    if (this.kdCode === 8 || this.kdCode === 46) {
      if (!this.selection.length) {
        parts = this.getBeforeAfterStriped();
        if (this.kdCode === 8) {
          parts[0] = parts[0].substring(0, parts[0].length - 1);
        } else {
          parts[1] = parts[1].substring(1, parts[1].length);
        }
        this.setValueParts(parts[0], parts[1]);
      } else {
        this.expandSelectionOnSign(false);
        parts = this.getBeforeAfterStriped();
        this.setValueParts(parts[0], parts[1]);
      }
      return true;
    }
    return false;
  }
  /**
   * process insertion of characters
   * returns true if processing performed
   */
  processKeypress() {
    var settingsClone = this.settingsClone, cCode = String.fromCharCode(this.which), parts = this.getBeforeAfterStriped(), left = parts[0], right = parts[1];
    if (cCode === settingsClone.aDec || settingsClone.altDec && cCode === settingsClone.altDec || (cCode === "." || cCode === ",") && this.kdCode === 110) {
      if (!settingsClone.mDec || !settingsClone.aDec) {
        return true;
      }
      if (settingsClone.aNeg && right.indexOf(settingsClone.aNeg) > -1) {
        return true;
      }
      if (left.indexOf(settingsClone.aDec) > -1) {
        return true;
      }
      if (right.indexOf(settingsClone.aDec) > 0) {
        return true;
      }
      if (right.indexOf(settingsClone.aDec) === 0) {
        right = right.substr(1);
      }
      this.setValueParts(left + settingsClone.aDec, right);
      return true;
    }
    if (cCode === "-" || cCode === "+") {
      if (!settingsClone.aNeg) {
        return true;
      }
      if (left === "" && right.indexOf(settingsClone.aNeg) > -1) {
        left = settingsClone.aNeg;
        right = right.substring(1, right.length);
      }
      if (left.charAt(0) === settingsClone.aNeg) {
        left = left.substring(1, left.length);
      } else {
        left = cCode === "-" ? settingsClone.aNeg + left : left;
      }
      this.setValueParts(left, right);
      return true;
    }
    if (cCode >= "0" && cCode <= "9") {
      if (settingsClone.aNeg && left === "" && right.indexOf(settingsClone.aNeg) > -1) {
        left = settingsClone.aNeg;
        right = right.substring(1, right.length);
      }
      if (settingsClone.vMax <= 0 && settingsClone.vMin < settingsClone.vMax && this.value.indexOf(settingsClone.aNeg) === -1 && cCode !== "0") {
        left = settingsClone.aNeg + left;
      }
      this.setValueParts(left + cCode, right);
      return true;
    }
    return true;
  }
  /**
   * formatting of just processed value with keeping of cursor position
   */
  formatQuick() {
    var settingsClone = this.settingsClone, parts = this.getBeforeAfterStriped(), leftLength = this.value;
    if ((settingsClone.aSep === "" || settingsClone.aSep !== "" && leftLength.indexOf(settingsClone.aSep) === -1) && (settingsClone.aSign === "" || settingsClone.aSign !== "" && leftLength.indexOf(settingsClone.aSign) === -1)) {
      var subParts = [], nSign = "";
      subParts = leftLength.split(settingsClone.aDec);
      if (subParts[0].indexOf("-") > -1) {
        nSign = "-";
        subParts[0] = subParts[0].replace("-", "");
        parts[0] = parts[0].replace("-", "");
      }
      if (subParts[0].length > settingsClone.mInt && parts[0].charAt(0) === "0") {
        parts[0] = parts[0].slice(1);
      }
      parts[0] = nSign + parts[0];
    }
    var value = autoGroup(this.value, this.settingsClone), position = value.length;
    if (value) {
      var left_ar = parts[0].split(""), i = 0;
      for (i; i < left_ar.length; i += 1) {
        if (!left_ar[i].match("\\d")) {
          left_ar[i] = "\\" + left_ar[i];
        }
      }
      var leftReg = new RegExp("^.*?" + left_ar.join(".*?"));
      var newLeft = value.match(leftReg);
      if (newLeft) {
        position = newLeft[0].length;
        if ((position === 0 && value.charAt(0) !== settingsClone.aNeg || position === 1 && value.charAt(0) === settingsClone.aNeg) && settingsClone.aSign && settingsClone.pSign === "p") {
          position = this.settingsClone.aSign.length + (value.charAt(0) === "-" ? 1 : 0);
        }
      } else if (settingsClone.aSign && settingsClone.pSign === "s") {
        position -= settingsClone.aSign.length;
      }
    }
    this.that.value = value;
    this.setPosition(position);
    this.formatted = true;
  }
};
function getHolder(that, settings, update) {
  var data = AutoNumeric.getSettings(that);
  if (!data) {
    data = {};
    that.autoNumeric = data;
  }
  var holder = data.holder;
  if (holder === void 0 && settings || update) {
    holder = new AutoNumericHolder(that, settings);
    data.holder = holder;
  }
  return holder;
}
var AutoNumeric = class _AutoNumeric {
  static init(input, options) {
    var _a68, _b;
    if (!input) {
      throw new Error("autoNumeric called with null element!");
    }
    var settings = _AutoNumeric.getSettings(input), tagData = {};
    Object.keys(input.dataset).forEach((key) => tagData[key] = input.dataset[key]);
    if (typeof settings !== "object") {
      var defaults = {
        /** allowed numeric values
         * please do not modify
         */
        aNum: "0123456789",
        /** allowed thousand separator characters
         * comma = ','
         * period "full stop" = '.'
         * apostrophe is escaped = '\''
         * space = ' '
         * none = ''
         * NOTE: do not use numeric characters
         */
        aSep: ",",
        /** digital grouping for the thousand separator used in Format
         * dGroup: '2', results in 99,99,99,999 common in India for values less than 1 billion and greater than -1 billion
         * dGroup: '3', results in 999,999,999 default
         * dGroup: '4', results in 9999,9999,9999 used in some Asian countries
         */
        dGroup: "3",
        /** allowed decimal separator characters
         * period "full stop" = '.'
         * comma = ','
         */
        aDec: ".",
        /** allow to declare alternative decimal separator which is automatically replaced by aDec
         * developed for countries the use a comma ',' as the decimal character
         * and have keyboards\numeric pads that have a period 'full stop' as the decimal characters (Spain is an example)
         */
        altDec: null,
        /** allowed currency symbol
         * Must be in quotes aSign: '$', a space is allowed aSign: '$ '
         */
        aSign: "",
        /** placement of currency sign
         * for prefix pSign: 'p',
         * for suffix pSign: 's',
         */
        pSign: "p",
        /** maximum possible value
         * value must be enclosed in quotes and use the period for the decimal point
         * value must be larger than vMin
         */
        vMax: "9999999999999.99",
        /** minimum possible value
         * value must be enclosed in quotes and use the period for the decimal point
         * value must be smaller than vMax
         */
        vMin: "0.00",
        /** max number of decimal places = used to override decimal places set by the vMin & vMax values
         * value must be enclosed in quotes example mDec: '3',
         * This can also set the value via a call back function mDec: 'css:#
         */
        mDec: null,
        /** method used for rounding
         * mRound: 'S', Round-Half-Up Symmetric (default)
         * mRound: 'A', Round-Half-Up Asymmetric
         * mRound: 's', Round-Half-Down Symmetric (lower case s)
         * mRound: 'a', Round-Half-Down Asymmetric (lower case a)
         * mRound: 'B', Round-Half-Even "Bankers Rounding"
         * mRound: 'U', Round Up "Round-Away-From-Zero"
         * mRound: 'D', Round Down "Round-Toward-Zero" - same as truncate
         * mRound: 'C', Round to Ceiling "Toward Positive Infinity"
         * mRound: 'F', Round to Floor "Toward Negative Infinity"
         */
        mRound: "S",
        /** controls decimal padding
         * aPad: true - always Pad decimals with zeros
         * aPad: false - does not pad with zeros.
         * aPad: `some number` - pad decimals with zero to number different from mDec
         * thanks to Jonas Johansson for the suggestion
         */
        aPad: true,
        /** places brackets on negative value -$ 999.99 to (999.99)
         * visible only when the field does NOT have focus the left and right symbols should be enclosed in quotes and seperated by a comma
         * nBracket: null, nBracket: '(,)', nBracket: '[,]', nBracket: '<,>' or nBracket: '{,}'
         */
        nBracket: null,
        /** Displayed on empty string
         * wEmpty: 'empty', - input can be blank
         * wEmpty: 'zero', - displays zero
         * wEmpty: 'sign', - displays the currency sign
         */
        wEmpty: "empty",
        /** controls leading zero behavior
         * lZero: 'allow', - allows leading zeros to be entered. Zeros will be truncated when entering additional digits. On focusout zeros will be deleted.
         * lZero: 'deny', - allows only one leading zero on values less than one
         * lZero: 'keep', - allows leading zeros to be entered. on fousout zeros will be retained.
         */
        lZero: "allow",
        /** determine if the default value will be formatted on page ready.
         * true = automatically formats the default value on page ready
         * false = will not format the default value
         */
        aForm: true
      };
      settings = Object.assign({}, defaults, tagData, options);
      if (settings.aDec === settings.aSep) {
        throw new Error("autoNumeric will not function properly when the decimal character aDec: '" + settings.aDec + "' and thousand separator aSep: '" + settings.aSep + "' are the same character");
      }
      input.autoNumeric = settings;
    } else {
      return;
    }
    settings.runOnce = false;
    var holder = getHolder(input, settings);
    if (!((_a68 = settings.tagList) == null ? void 0 : _a68.includes(input.tagName)) && input.tagName !== "INPUT") {
      throw new Error("The <" + input.tagName + "> is not supported by autoNumeric()");
    }
    if (settings.runOnce === false && settings.aForm) {
      if (input.matches("input[type=text], input[type=hidden], input[type=tel], input:not([type])")) {
        var setValue = true;
        if (input.value === "" && settings.wEmpty === "empty") {
          input.value = "";
          setValue = false;
        }
        if (input.value === "" && settings.wEmpty === "sign") {
          input.value = settings.aSign;
          setValue = false;
        }
        if (setValue) {
          _AutoNumeric.setValue(input, input.value);
        }
      }
      if (!((_b = settings.tagList) == null ? void 0 : _b.includes(input.tagName)) && input.textContent !== "") {
        _AutoNumeric.setValue(input, input.textContent);
      }
    }
    settings.runOnce = true;
    if (input.matches("input[type=text], input[type=hidden], input[type=tel], input:not([type])")) {
      Fluent.on(input, "keydown.autoNumeric", function(e) {
        holder = getHolder(input);
        if (holder.settings.aDec === holder.settings.aSep) {
          throw new Error("autoNumeric will not function properly when the decimal character aDec: '" + holder.settings.aDec + "' and thousand separator aSep: '" + holder.settings.aSep + "' are the same character");
        }
        if (holder.that.readOnly) {
          holder.processed = true;
          return true;
        }
        holder.init(e);
        holder.settings.oEvent = "keydown";
        if (holder.skipAllways(e)) {
          holder.processed = true;
          return true;
        }
        if (holder.processAllways()) {
          holder.processed = true;
          holder.formatQuick();
          e.preventDefault();
          return false;
        }
        holder.formatted = false;
        return true;
      });
      Fluent.on(input, "keypress.autoNumeric", function(e) {
        var holder2 = getHolder(input), processed = holder2.processed;
        holder2.init(e);
        holder2.settings.oEvent = "keypress";
        if (holder2.skipAllways(e)) {
          return true;
        }
        if (processed) {
          e.preventDefault();
          return false;
        }
        if (holder2.processAllways() || holder2.processKeypress()) {
          holder2.formatQuick();
          e.preventDefault();
          return false;
        }
        holder2.formatted = false;
      });
      Fluent.on(input, "keyup.autoNumeric", function(e) {
        var holder2 = getHolder(input);
        holder2.init(e);
        holder2.settings.oEvent = "keyup";
        var skip = holder2.skipAllways(e);
        holder2.kdCode = 0;
        delete holder2.valuePartsBeforePaste;
        if (input.value === holder2.settings.aSign) {
          if (holder2.settings.pSign === "s") {
            setElementSelection(input, 0, 0);
          } else {
            setElementSelection(input, holder2.settings.aSign.length, holder2.settings.aSign.length);
          }
        }
        if (skip) {
          return true;
        }
        if (input.value === "") {
          return true;
        }
        if (!holder2.formatted) {
          holder2.formatQuick();
        }
      });
      Fluent.on(input, "focusin.autoNumeric", function() {
        if (input.matches("[readonly]") || input.matches("[disabled]"))
          return;
        var holder2 = getHolder(input);
        holder2.settingsClone.oEvent = "focusin";
        if (holder2.settingsClone.nBracket !== null) {
          var checkVal = input.value;
          input.value = negativeBracket(checkVal, holder2.settingsClone.nBracket, holder2.settingsClone.oEvent);
        }
        holder2.inVal = input.value;
        holder2.dirty = false;
        var onempty = checkEmpty(holder2.inVal, holder2.settingsClone, true);
        if (onempty !== null) {
          input.value = onempty != null ? onempty : "";
          if (holder2.settings.pSign === "s") {
            setElementSelection(input, 0, 0);
          } else {
            setElementSelection(input, holder2.settings.aSign.length, holder2.settings.aSign.length);
          }
        }
      });
      Fluent.on(input, "focusout.autoNumeric", function() {
        if (input.matches("[readonly]") || input.matches("[disabled]"))
          return;
        var holder2 = getHolder(input), settingsClone = holder2.settingsClone, value = input.value, origValue = value;
        holder2.settingsClone.oEvent = "focusout";
        var strip_zero = "";
        if (settingsClone.lZero === "allow") {
          settingsClone.allowLeading = false;
          strip_zero = "leading";
        }
        if (value !== "") {
          value = autoStrip(value, settingsClone, strip_zero);
          if (checkEmpty(value, settingsClone) === null && (!holder2.dirty && holder2.inVal == origValue || autoCheck(value, settingsClone))) {
            value = fixNumber(value, settingsClone.aDec, settingsClone.aNeg);
            value = autoRound(value, settingsClone);
            value = presentNumber(value, settingsClone.aDec, settingsClone.aNeg);
          } else {
            value = "";
          }
        }
        var groupedValue = checkEmpty(value, settingsClone, false);
        if (groupedValue === null) {
          groupedValue = autoGroup(value, settingsClone);
        }
        if (groupedValue !== origValue) {
          input.value = groupedValue;
        }
        if (groupedValue !== holder2.inVal) {
          Fluent.trigger(input, "change");
          delete holder2.inVal;
        }
        if (settingsClone.nBracket !== null && _AutoNumeric.getValue(input) < 0) {
          holder2.settingsClone.oEvent = "focusout";
          input.value = negativeBracket(input.value, settingsClone.nBracket, settingsClone.oEvent);
        }
      });
    }
  }
  /** method to remove settings and stop autoNumeric() */
  static destroy(input) {
    Fluent.off(input, ".autoNumeric");
    input == null ? true : delete input.autoNumeric;
  }
  /** method to update settings - can call as many times */
  static updateOptions(input, options) {
    var settings = _AutoNumeric.getSettings(input);
    if (typeof settings !== "object") {
      throw new Error("You must initialize autoNumeric('init', {options}) prior to calling the 'update' method");
    }
    var strip = _AutoNumeric.getValue(input);
    settings = Object.assign(settings, options);
    getHolder(input, settings, true);
    if (settings.aDec === settings.aSep) {
      throw new Error("autoNumeric will not function properly when the decimal character aDec: '" + settings.aDec + "' and thousand separator aSep: '" + settings.aSep + "' are the same character");
    }
    input.autoNumeric = settings;
    if (input.value !== "" || input.textContent !== "") {
      _AutoNumeric.setValue(input, strip);
    }
    return;
  }
  /** returns a formatted strings for "input:text" fields Uses jQuery's .val() method*/
  static setValue(input, valueIn) {
    var _a68;
    var settings = _AutoNumeric.getSettings(input), value = valueIn.toString(), testValue = valueIn.toString();
    if (typeof settings !== "object") {
      throw new Error("You must initialize autoNumeric('init', {options}) prior to calling the 'set' method");
    }
    if (testValue !== input.getAttribute("value") && input.tagName === "INPUT" && settings.runOnce === false) {
      value = settings.nBracket !== null ? negativeBracket(input.value, settings.nBracket, "pageLoad") : value;
      value = autoStrip(value, settings);
    }
    if ((testValue === input.getAttribute("value") || testValue === input.textContent) && settings.runOnce === false) {
      value = value.replace(",", ".");
    }
    if (isNaN(value)) {
      return "";
    }
    value = checkValue(value, settings);
    settings.oEvent = "set";
    value.toString();
    if (value !== "") {
      value = autoRound(value, settings);
    }
    value = presentNumber(value, settings.aDec, settings.aNeg);
    value = autoGroup(value, settings);
    if (input.matches("input[type=text], input[type=hidden], input[type=tel], input:not([type])")) {
      input.value = value;
    }
    if (!((_a68 = settings.tagList) == null ? void 0 : _a68.includes(input.tagName))) {
      return input.textContent = value;
    }
    throw new Error("The <" + input.tagName + "> is not supported by autoNumeric()");
  }
  /** method to get the unformatted value from a specific input field, returns a numeric value */
  static getValue(input) {
    var _a68;
    var settings = _AutoNumeric.getSettings(input);
    if (typeof settings !== "object") {
      throw new Error("You must initialize autoNumeric('init', {options}) prior to calling the 'get' method");
    }
    settings.oEvent = "get";
    var getValue = "";
    if (input.matches("input[type=text], input[type=hidden], input[type=tel], input:not([type])")) {
      getValue = input.value;
    } else if ((_a68 = settings.tagList) == null ? void 0 : _a68.includes(input.tagName)) {
      getValue = input.textContent;
    } else {
      throw new Error("The <" + input.tagName + "> is not supported by autoNumeric()");
    }
    if (getValue === "" && settings.wEmpty === "empty" || getValue === settings.aSign && (settings.wEmpty === "sign" || settings.wEmpty === "empty")) {
      return "";
    }
    if (settings.nBracket !== null && getValue !== "") {
      getValue = negativeBracket(getValue, settings.nBracket, settings.oEvent);
    }
    if (settings.runOnce || settings.aForm === false) {
      getValue = autoStrip(getValue, settings);
    }
    getValue = fixNumber(getValue, settings.aDec, settings.aNeg);
    if (+getValue === 0 && settings.lZero !== "keep") {
      getValue = "0";
    }
    if (settings.lZero === "keep") {
      return getValue;
    }
    getValue = checkValue(getValue, settings);
    return getValue;
  }
  /** returns the settings object for those who need to look under the hood */
  static getSettings(input) {
    return input == null ? void 0 : input.autoNumeric;
  }
  static hasInstance(input) {
    return typeof (input == null ? void 0 : input.autoNumeric) === "object";
  }
};

// src/ui/editors/decimaleditor.ts
var _DecimalEditor_decorators, _init61, _a14;
_DecimalEditor_decorators = [Decorators.registerEditor("Serenity.DecimalEditor", [IDoubleValue])];
var _DecimalEditor = class _DecimalEditor extends (_a14 = EditorWidget) {
  static createDefaultElement() {
    return Fluent("input").attr("type", "text").getNode();
  }
  constructor(props) {
    super(props);
    this.domNode.classList.add("decimalQ");
    this.initAutoNumeric();
  }
  destroy() {
    AutoNumeric.destroy(this.domNode);
    super.destroy();
  }
  initAutoNumeric() {
    AutoNumeric.init(this.domNode, this.getAutoNumericOptions());
  }
  getAutoNumericOptions() {
    var _a68, _b;
    var numericOptions = Object.assign({}, _DecimalEditor.defaultAutoNumericOptions(), {
      vMin: (_a68 = this.options.minValue) != null ? _a68 : this.options.allowNegatives ? this.options.maxValue != null ? "-" + this.options.maxValue : "-999999999999.99" : "0.00",
      vMax: (_b = this.options.maxValue) != null ? _b : "999999999999.99"
    });
    if (this.options.decimals != null) {
      numericOptions.mDec = this.options.decimals;
    }
    if (this.options.padDecimals != null) {
      numericOptions.aPad = this.options.padDecimals;
    }
    return numericOptions;
  }
  get_value() {
    var val;
    if (AutoNumeric.hasInstance(this.domNode)) {
      val = AutoNumeric.getValue(this.domNode);
      if (!!(val == null || val === ""))
        return null;
      return parseFloat(val);
    }
    val = this.domNode.value;
    return parseDecimal(val);
  }
  get value() {
    return this.get_value();
  }
  set_value(value) {
    if (value == null || value === "") {
      this.domNode.value = "";
    } else if (AutoNumeric.hasInstance(this.domNode)) {
      AutoNumeric.setValue(this.domNode, value);
    } else
      this.domNode.value = formatNumber(value);
  }
  set value(v) {
    this.set_value(v);
  }
  get_isValid() {
    return !isNaN(this.get_value());
  }
  static defaultAutoNumericOptions() {
    return {
      aDec: Culture.decimalSeparator,
      altDec: Culture.decimalSeparator === "." ? "," : ".",
      aSep: Culture.decimalSeparator === "." ? "," : ".",
      aPad: true
    };
  }
};
_init61 = __decoratorStart(_a14);
_DecimalEditor = __decorateElement(_init61, 0, "DecimalEditor", _DecimalEditor_decorators, _DecimalEditor);
__runInitializers(_init61, 1, _DecimalEditor);
var DecimalEditor = _DecimalEditor;

// src/ui/editors/integereditor.ts
var _IntegerEditor_decorators, _init62, _a15;
_IntegerEditor_decorators = [Decorators.registerEditor("Serenity.IntegerEditor", [IDoubleValue])];
var IntegerEditor = class extends (_a15 = EditorWidget) {
  static createDefaultElement() {
    return Fluent("input").attr("type", "text").getNode();
  }
  constructor(props) {
    super(props);
    this.domNode.classList.add("integerQ");
    this.initAutoNumeric();
  }
  destroy() {
    AutoNumeric.destroy(this.domNode);
    super.destroy();
  }
  initAutoNumeric() {
    AutoNumeric.init(this.domNode, this.getAutoNumericOptions());
  }
  getAutoNumericOptions() {
    var _a68, _b;
    var numericOptions = Object.assign({}, DecimalEditor.defaultAutoNumericOptions(), {
      vMin: (_a68 = this.options.minValue) != null ? _a68 : this.options.allowNegatives ? this.options.maxValue != null ? "-" + this.options.maxValue : "-2147483647" : "0",
      vMax: (_b = this.options.maxValue) != null ? _b : 2147483647,
      aSep: null
    });
    return numericOptions;
  }
  get_value() {
    var _a68;
    var val;
    if (AutoNumeric.hasInstance(this.domNode)) {
      val = AutoNumeric.getValue(this.domNode);
      if (isTrimmedEmpty(val))
        return null;
      else
        return parseInt(val, 10);
    } else {
      val = (_a68 = this.domNode.value) == null ? void 0 : _a68.trim();
      if (!val)
        return null;
      return parseInteger(val);
    }
  }
  get value() {
    return this.get_value();
  }
  set_value(value) {
    if (value == null || value === "")
      this.domNode.value = "";
    else if (AutoNumeric.hasInstance(this.domNode))
      AutoNumeric.setValue(this.domNode, value);
    else
      this.domNode.value = formatNumber(value);
  }
  set value(v) {
    this.set_value(v);
  }
  get_isValid() {
    return !isNaN(this.get_value());
  }
};
_init62 = __decoratorStart(_a15);
IntegerEditor = __decorateElement(_init62, 0, "IntegerEditor", _IntegerEditor_decorators, IntegerEditor);
__runInitializers(_init62, 1, IntegerEditor);

// src/ui/helpers/dateediting.ts
function dateInputChangeHandler(e) {
  var _a68, _b, _c;
  if (Culture.dateOrder !== "dmy")
    return;
  var input = e.target;
  if ((input == null ? void 0 : input.getAttribute("type")) === "date")
    return;
  var val = (_a68 = input.value) != null ? _a68 : "";
  if (val.length >= 6 && /^[0-9]*$/g.test(val))
    input.value = val.substring(0, 2) + Culture.dateSeparator + val.substring(2, 2) + Culture.dateSeparator + val.substring(4);
  val = (_b = input.value) != null ? _b : "";
  if (val.length >= 5) {
    var d = parseDate(val);
    if (d && !isNaN(d.valueOf()))
      input.value = (_c = formatDate(d, null)) != null ? _c : "";
  }
}
function dateInputKeyupHandler(e) {
  var _a68;
  if (Culture.dateOrder !== "dmy")
    return;
  var input = e.target;
  if ((input == null ? void 0 : input.getAttribute("type")) == "date") {
    return;
  }
  if (input.getAttribute("readonly") != null || input.getAttribute("disabled") != null)
    return;
  var val = (_a68 = input.value) != null ? _a68 : "";
  if (!!(val.length === 0 || input.selectionEnd !== val.length))
    return;
  if (val.indexOf(Culture.dateSeparator + Culture.dateSeparator) !== -1) {
    input.value = val.split(Culture.dateSeparator + Culture.dateSeparator).join(Culture.dateSeparator);
    return;
  }
  function isNumeric(c) {
    return c >= "0" && c <= "9";
  }
  if (e.which === 47 || e.which === 111) {
    if (val.length >= 2 && val.charAt(val.length - 1) === Culture.dateSeparator && val.charAt(val.length - 2) === Culture.dateSeparator) {
      input.value = val.substring(0, val.length - 1);
      return;
    }
    if (val.charAt(val.length - 1) !== Culture.dateSeparator)
      return;
    switch (val.length) {
      case 2: {
        if (isNumeric(val.charAt(0))) {
          val = "0" + val;
          break;
        } else {
          return;
        }
      }
      case 4: {
        if (isNumeric(val.charAt(0)) && isNumeric(val.charAt(2)) && val.charAt(1) == Culture.dateSeparator) {
          val = "0" + val.charAt(0) + Culture.dateSeparator + "0" + val.charAt(2) + Culture.dateSeparator;
          break;
        } else {
          return;
        }
      }
      case 5: {
        if (isNumeric(val.charAt(0)) && isNumeric(val.charAt(2)) && isNumeric(val.charAt(3)) && val.charAt(1) === Culture.dateSeparator) {
          val = "0" + val;
          break;
        } else if (isNumeric(val.charAt(0)) && isNumeric(val.charAt(1)) && isNumeric(val.charAt(3)) && val.charAt(2) === Culture.dateSeparator) {
          val = val.charAt(0) + val.charAt(1) + Culture.dateSeparator + "0" + val.charAt(3) + Culture.dateSeparator;
          break;
        } else {
          break;
        }
      }
      default: {
        return;
      }
    }
    input.value = val != null ? val : "";
  }
  if (!(val.length < 6 && (e.which >= 48 && e.which <= 57 || e.which >= 96 && e.which <= 105) && isNumeric(val.charAt(val.length - 1))))
    return;
  switch (val.length) {
    case 1:
      if (val.charCodeAt(0) <= 51)
        return;
      val = "0" + val;
      break;
    case 2:
      if (!isNumeric(val.charAt(0)))
        return;
      break;
    case 3:
      if (!isNumeric(val.charAt(0)) || val.charAt(1) !== Culture.dateSeparator || val.charCodeAt(2) <= 49) {
        return;
      }
      val = "0" + val.charAt(0) + Culture.dateSeparator + "0" + val.charAt(2);
      break;
    case 4:
      if (val.charAt(1) == Culture.dateSeparator) {
        if (!isNumeric(val.charAt(0)) || !isNumeric(val.charAt(2))) {
          return;
        }
        val = "0" + val;
        break;
      } else if (val.charAt(2) == Culture.dateSeparator) {
        if (!isNumeric(val.charAt(0)) || !isNumeric(val.charAt(1)) || val.charCodeAt(3) <= 49) {
          return;
        }
        val = val.charAt(0) + val.charAt(1) + Culture.dateSeparator + "0" + val.charAt(3);
        break;
      } else
        return;
    case 5:
      if (val.charAt(2) !== Culture.dateSeparator || !isNumeric(val.charAt(0)) || !isNumeric(val.charAt(1)) || !isNumeric(val.charAt(3))) {
        return;
      }
      break;
    default:
      return;
  }
  input.value = val + Culture.dateSeparator;
}
function flatPickrTrigger(input) {
  var button = document.createElement("button");
  button.type = "button";
  button.classList.add("ui-datepicker-trigger");
  button.addEventListener("click", () => {
    var _a68, _b, _c, _d, _e;
    if (!input.classList.contains("readonly") && input.getAttribute("readonly") == null) {
      (_b = (_a68 = input._flatpickr) == null ? void 0 : _a68.open) == null ? void 0 : _b.call(_a68);
      (_e = (_d = (_c = input._flatpickr) == null ? void 0 : _c.calendarContainer) == null ? void 0 : _d.focus) == null ? void 0 : _e.call(_d);
    }
  });
  return button;
}
function jQueryDatepickerZIndexWorkaround(input) {
  let $2 = getjQuery();
  if (!$2)
    return;
  let dialog = input == null ? void 0 : input.closest(".ui-dialog");
  if (!dialog)
    return;
  var dialogIndex = parseInt(getComputedStyle(dialog).zIndex, 10);
  if (dialogIndex == null || isNaN(dialogIndex))
    return;
  setTimeout(() => {
    let widget = $2(input).datepicker("widget");
    if (!widget || !widget.length)
      return;
    let zIndex = parseInt(widget.css("z-index"));
    if (!isNaN(zIndex) && zIndex <= dialogIndex)
      widget.css("z-index", dialogIndex + 1);
  }, 0);
}
function jQueryDatepickerInitialization() {
  var _a68, _b;
  let $2 = getjQuery();
  if (!((_b = (_a68 = $2 == null ? void 0 : $2.datepicker) == null ? void 0 : _a68.regional) == null ? void 0 : _b.en))
    return false;
  let order = Culture.dateOrder;
  let s = Culture.dateSeparator;
  let culture = typeof document === "undefined" ? "en" : (document.documentElement.lang || "en").toLowerCase();
  if (!$2.datepicker.regional[culture]) {
    culture = culture.split("-")[0];
    if (!$2.datepicker.regional[culture]) {
      culture = "en";
    }
  }
  $2.datepicker.setDefaults($2.datepicker.regional["en"]);
  $2.datepicker.setDefaults($2.datepicker.regional[culture]);
  $2.datepicker.setDefaults({
    dateFormat: order == "mdy" ? "mm" + s + "dd" + s + "yy" : order == "ymd" ? "yy" + s + "mm" + s + "dd" : "dd" + s + "mm" + s + "yy",
    buttonText: "",
    buttonImage: null,
    buttonImageOnly: false,
    showOn: "both",
    showButtonPanel: true,
    changeMonth: true,
    changeYear: true
  });
  return true;
}

// src/ui/editors/dateeditor.ts
var _DateEditor_decorators, _init63, _a16;
_DateEditor_decorators = [Decorators.registerEditor("Serenity.DateEditor", [IStringValue, IReadOnly])];
var _DateEditor = class _DateEditor extends (_a16 = EditorWidget) {
  static createDefaultElement() {
    return Fluent("input").attr("type", "text").getNode();
  }
  constructor(props) {
    var _a68, _b, _c, _d;
    super(props);
    let $2 = getjQuery();
    if (typeof flatpickr !== "undefined" && (_DateEditor.useFlatpickr || !((_a68 = $2 == null ? void 0 : $2.fn) == null ? void 0 : _a68.datepicker))) {
      var options = this.getFlatpickrOptions(this.domNode);
      flatpickr(this.domNode, options);
      this.createFlatPickrTrigger();
    } else if ((_b = $2 == null ? void 0 : $2.fn) == null ? void 0 : _b.datepicker) {
      $2(this.domNode).datepicker({
        showOn: "button",
        beforeShow: (inp, inst) => {
          if (this.get_readOnly())
            return false;
          _DateEditor.uiPickerZIndexWorkaround(this.domNode);
          return true;
        },
        yearRange: (_d = (_c = this.options) == null ? void 0 : _c.yearRange) != null ? _d : "-100:+50"
      });
    } else {
      this.domNode.setAttribute("type", "date");
    }
    Fluent.on(this.domNode, "keydown." + this.uniqueName, (e) => {
      if (this.get_readOnly() || e.key !== " ") {
        return;
      }
      e.preventDefault();
      if (this.get_valueAsDate() != today()) {
        this.setToToday(true);
      }
    });
    Fluent.on(this.domNode, "keyup." + this.uniqueName, (e) => {
      if (this.get_readOnly()) {
        return;
      }
      _DateEditor.dateInputKeyup(e);
    });
    Fluent.on(this.domNode, "change." + this.uniqueName, _DateEditor.dateInputChange);
    addValidationRule(this.domNode, () => {
      var value = this.get_value();
      if (!value) {
        return null;
      }
      if (this.get_minValue() && Invariant.stringCompare(formatDate(value, "yyyy-MM-dd"), formatDate(this.get_minValue(), "yyyy-MM-dd")) < 0) {
        return stringFormat(localText("Validation.MinDate"), formatDate(this.get_minValue(), null));
      }
      if (this.get_maxValue() && Invariant.stringCompare(formatDate(value, "yyyy-MM-dd"), formatDate(this.get_maxValue(), "yyyy-MM-dd")) > 0) {
        return stringFormat(localText("Validation.MaxDate"), formatDate(this.get_maxValue(), null));
      }
      return null;
    });
    this.set_sqlMinMax(true);
  }
  setToToday(triggerChange) {
    this.set_valueAsDate(today());
    triggerChange && Fluent.trigger(this.domNode, "change");
  }
  destroy() {
    if (this.domNode && this.domNode._flatpickr && this.domNode._flatpickr.destroy) {
      this.domNode._flatpickr.destroy();
    }
    super.destroy();
  }
  get_value() {
    var _a68;
    var value = (_a68 = this.domNode.value) == null ? void 0 : _a68.trim();
    if (!value) {
      return null;
    }
    return formatDate(value, "yyyy-MM-dd");
  }
  get value() {
    return this.get_value();
  }
  set_value(value) {
    if (value == null) {
      this.domNode.value = "";
    } else if (value.toLowerCase() === "today" || value.toLowerCase() === "now") {
      this.domNode.value = formatDate(today(), this.domNode.getAttribute("type") === "date" ? "yyyy-MM-dd" : null);
    } else {
      this.domNode.value = formatDate(value, this.domNode.getAttribute("type") === "date" ? "yyyy-MM-dd" : null);
    }
  }
  set value(v) {
    this.set_value(v);
  }
  get_valueAsDate() {
    if (!this.get_value())
      return null;
    return parseISODateTime(this.get_value());
  }
  get valueAsDate() {
    return this.get_valueAsDate();
  }
  set_valueAsDate(value) {
    if (value == null) {
      this.set_value(null);
    }
    this.set_value(formatDate(value, "yyyy-MM-dd"));
  }
  set valueAsDate(v) {
    this.set_valueAsDate(v);
  }
  get_readOnly() {
    return this.domNode.classList.contains("readonly") || this.domNode.getAttribute("readonly") != null;
  }
  set_readOnly(value) {
    if (value !== this.get_readOnly()) {
      this.domNode.classList.toggle("readonly", !!value);
      value ? this.domNode.setAttribute("readonly", "readonly") : this.domNode.removeAttribute("readonly");
      let trg = this.element.nextSibling(".ui-datepicker-trigger").getNode();
      trg && (trg.style.opacity = value ? "0.1" : "1");
    }
  }
  get_minValue() {
    return this.options.minValue;
  }
  set_minValue(value) {
    this.options.minValue = value;
  }
  get_maxValue() {
    return this.options.maxValue;
  }
  set_maxValue(value) {
    this.options.maxValue = value;
  }
  get_minDate() {
    return parseISODateTime(this.get_minValue());
  }
  set_minDate(value) {
    this.set_minValue(formatDate(value, "yyyy-MM-dd"));
  }
  get_maxDate() {
    return parseISODateTime(this.get_maxValue());
  }
  set_maxDate(value) {
    this.set_maxValue(formatDate(value, "yyyy-MM-dd"));
  }
  get_sqlMinMax() {
    return this.get_minValue() === "1753-01-01" && this.get_maxValue() === "9999-12-31";
  }
  set_sqlMinMax(value) {
    if (value) {
      this.set_minValue("1753-01-01");
      this.set_maxValue("9999-12-31");
    } else {
      this.set_minValue(null);
      this.set_maxValue(null);
    }
  }
  static dateInputKeyup(e) {
    dateInputKeyupHandler(e);
  }
  getFlatpickrOptions(input) {
    var opt = {
      clickOpens: false,
      allowInput: true,
      dateFormat: Culture.dateOrder.split("").join(Culture.dateSeparator).replace("y", "Y"),
      onChange: () => {
      },
      disable: [
        (d) => {
          var _a68;
          return this.get_readOnly() && formatDate(d, "d") != formatDate((_a68 = this.domNode) == null ? void 0 : _a68.value, "d");
        }
      ]
    };
    if (this.domNode.closest(".modal"))
      opt.appendTo = this.domNode.closest(".modal");
    else {
      setTimeout(() => {
        var modal = this.domNode.closest(".modal");
        if (modal && !opt.static && !opt.appendTo && this.domNode && this.domNode._flatpickr && this.domNode._flatpickr.calendarContainer && this.domNode._flatpickr.calendarContainer.parentElement !== modal) {
          modal.appendChild(this.domNode._flatpickr.calendarContainer);
        }
      }, 0);
    }
    return opt;
  }
  createFlatPickrTrigger() {
    if (!this.domNode)
      return;
    return Fluent(flatPickrTrigger(this.domNode)).insertAfter(this.domNode).getNode();
  }
  static uiPickerZIndexWorkaround(el) {
    let input = isArrayLike(el) ? el[0] : el;
    if (!input)
      return;
    jQueryDatepickerZIndexWorkaround(input);
  }
};
_init63 = __decoratorStart(_a16);
_DateEditor = __decorateElement(_init63, 0, "DateEditor", _DateEditor_decorators, _DateEditor);
_DateEditor.dateInputChange = function(e) {
  dateInputChangeHandler(e);
};
__runInitializers(_init63, 1, _DateEditor);
var DateEditor = _DateEditor;
!jQueryDatepickerInitialization() && Fluent.ready(jQueryDatepickerInitialization);

// src/ui/editors/datetimeeditor.ts
var _DateTimeEditor_decorators, _init64, _a17;
_DateTimeEditor_decorators = [Decorators.registerEditor("Serenity.DateTimeEditor", [IStringValue, IReadOnly])];
var _DateTimeEditor = class _DateTimeEditor extends (_a17 = EditorWidget) {
  static createDefaultElement() {
    return Fluent("input").attr("type", "text").getNode();
  }
  constructor(props) {
    var _a68, _b, _c, _d, _e, _f;
    super(props);
    this.domNode.classList.add("s-DateTimeEditor");
    let $2 = getjQuery();
    if (this.options.inputOnly) {
      this.domNode.classList.add("dateTimeQ");
    } else if (typeof flatpickr !== "undefined" && (DateEditor.useFlatpickr || !((_a68 = $2 == null ? void 0 : $2.fn) == null ? void 0 : _a68.datepicker) || this.options.seconds)) {
      this.domNode.classList.add("dateTimeQ");
      flatpickr(this.domNode, this.getFlatpickrOptions());
      this.createFlatPickrTrigger();
    } else if ((_b = $2 == null ? void 0 : $2.fn) == null ? void 0 : _b.datepicker) {
      this.domNode.classList.add("dateQ");
      let $3 = getjQuery();
      $3(this.domNode).datepicker({
        showOn: "button",
        beforeShow: () => {
          if (this.get_readOnly())
            return false;
          DateEditor.uiPickerZIndexWorkaround(this.domNode);
          return true;
        },
        yearRange: (_c = this.options.yearRange) != null ? _c : "-100:+50"
      });
      Fluent.on(this.domNode, "change." + this.uniqueName, (e) => {
        this.lastSetValue = null;
        DateEditor.dateInputChange(e);
      });
      this.time = Fluent("select").class("editor s-DateTimeEditor time").getNode();
      var after = this.domNode.nextElementSibling;
      if (after == null ? void 0 : after.classList.contains("ui-datepicker-trigger")) {
        Fluent(this.time).insertAfter(after);
      } else {
        after = this.domNode.previousElementSibling;
        if (after == null ? void 0 : after.classList.contains("ui-datepicker-trigger")) {
          Fluent(this.time).insertBefore(after);
        } else {
          Fluent(this.time).insertAfter(this.domNode);
        }
      }
      Fluent.on(this.time, "change", () => {
        this.lastSetValue = null;
        Fluent.trigger(this.domNode, "change");
      });
      var timeOpt = _DateTimeEditor.getTimeOptions(
        (_d = this.options.startHour) != null ? _d : 0,
        0,
        (_e = this.options.endHour) != null ? _e : 23,
        59,
        (_f = this.options.intervalMinutes) != null ? _f : 5
      );
      for (var t of timeOpt) {
        addOption(this.time, t, t);
      }
      addValidationRule(this.domNode, (e1) => {
        var value = this.get_value();
        if (!value) {
          return null;
        }
        if (this.get_minValue() && Invariant.stringCompare(value, this.get_minValue()) < 0) {
          return stringFormat(localText("Validation.MinDate"), formatDate(this.get_minValue(), null));
        }
        if (this.get_maxValue() && Invariant.stringCompare(value, this.get_maxValue()) > 0) {
          return stringFormat(localText("Validation.MaxDate"), formatDate(this.get_maxValue(), null));
        }
        return null;
      });
    } else {
      this.domNode.setAttribute("type", "datetime");
      this.domNode.classList.add("dateTimeQ");
    }
    Fluent.on(this.domNode, "keydown." + this.uniqueName, (e) => {
      var _a69, _b2, _c2;
      if (this.get_readOnly() || e.key !== " ")
        return;
      var input = this.domNode;
      if (input && !((_b2 = (_a69 = input.value) == null ? void 0 : _a69.trim()) == null ? void 0 : _b2.length) || input.selectionStart === 0 && input.selectionEnd === ((_c2 = input.value) == null ? void 0 : _c2.length)) {
        e.preventDefault();
        this.setToNow(true);
      }
    });
    Fluent.on(this.domNode, "keyup." + this.uniqueName, (e) => {
      if (this.get_readOnly())
        return;
      var before = this.domNode.value;
      DateEditor.dateInputKeyup(e);
      if (before != this.domNode.value)
        this.lastSetValue = null;
    });
    this.set_sqlMinMax(true);
    if (!this.options.inputOnly) {
      Fluent("i").class("inplace-button inplace-now").append(Fluent("b")).attr("title", this.getInplaceNowText()).insertAfter(this.time).on("click", () => {
        if (this.get_readOnly())
          return;
        this.setToNow(true);
      });
    }
  }
  setToNow(triggerChange) {
    this.lastSetValue = null;
    this.set_valueAsDate(/* @__PURE__ */ new Date());
    triggerChange && Fluent.trigger(this.domNode, "change");
  }
  destroy() {
    if (this.domNode && this.domNode._flatpickr && this.domNode._flatpickr.destroy) {
      this.domNode._flatpickr.destroy();
    }
    super.destroy();
  }
  getFlatpickrOptions() {
    var _a68;
    var opt = {
      clickOpens: false,
      allowInput: true,
      enableTime: true,
      time_24hr: true,
      enableSeconds: !!this.options.seconds,
      minuteIncrement: (_a68 = this.options.intervalMinutes) != null ? _a68 : 5,
      dateFormat: Culture.dateOrder.split("").join(Culture.dateSeparator).replace("y", "Y") + " H:i" + (this.options.seconds ? ":S" : ""),
      onChange: () => {
        this.lastSetValue = null;
      },
      disable: [
        (d) => {
          var _a69;
          return this.get_readOnly() && formatDate(d, "d") != formatDate((_a69 = this.domNode) == null ? void 0 : _a69.value, "d");
        }
      ]
    };
    if (this.domNode.closest(".modal"))
      opt.appendTo = this.domNode.closest(".modal");
    else {
      setTimeout(() => {
        var modal = this.domNode.closest(".modal");
        if (modal && !opt.static && !opt.appendTo && this.domNode && this.domNode._flatpickr && this.domNode._flatpickr.calendarContainer && this.domNode._flatpickr.calendarContainer.parentElement !== modal) {
          modal.appendChild(this.domNode._flatpickr.calendarContainer);
        }
      }, 0);
    }
    return opt;
  }
  createFlatPickrTrigger() {
    if (!this.domNode)
      return;
    return Fluent(flatPickrTrigger(this.domNode)).insertAfter(this.domNode).getNode();
  }
  get_value() {
    var _a68;
    var value = (_a68 = this.domNode.value) == null ? void 0 : _a68.trim();
    if (value != null && value.length === 0) {
      return null;
    }
    var result;
    if (this.time) {
      var datePart = formatDate(value, "yyyy-MM-dd");
      var timePart = this.time.value;
      result = datePart + "T" + timePart + ":00.000";
    } else
      result = formatDate(parseDate(this.domNode.value), "yyyy-MM-ddTHH:mm:ss.fff");
    if (this.options.useUtc)
      result = formatISODateTimeUTC(parseISODateTime(result));
    if (this.lastSetValue != null && this.lastSetValueGet == result)
      return this.lastSetValue;
    return result;
  }
  get value() {
    return this.get_value();
  }
  set_value(value) {
    var _a68;
    if (!value) {
      this.domNode.value = "";
      this.time && (this.time.value = "00:00");
    } else if (value.toLowerCase() === "today") {
      if (this.time) {
        this.domNode.value = formatDate(today(), null);
        this.time.value = "00:00";
      } else {
        this.domNode.value = formatDate(value, this.getDisplayFormat());
      }
    } else {
      var val = value.toLowerCase() === "now" ? /* @__PURE__ */ new Date() : parseISODateTime(value);
      if (this.time) {
        val = _DateTimeEditor.roundToMinutes(val, (_a68 = this.options.intervalMinutes) != null ? _a68 : 5);
        this.domNode.value = formatDate(val, null);
        this.time.value = formatDate(val, "HH:mm");
      } else
        this.domNode.value = formatDate(val, this.getDisplayFormat());
    }
    this.lastSetValue = null;
    if (value && value.toLowerCase() != "today" && value.toLowerCase() != "now") {
      this.lastSetValueGet = this.get_value();
      this.lastSetValue = value;
    }
  }
  getInplaceNowText() {
    var _a68;
    return (_a68 = tryGetText("Controls.DateTimeEditor.SetToNow")) != null ? _a68 : "set to now";
  }
  getDisplayFormat() {
    return this.options.seconds ? Culture.dateTimeFormat : Culture.dateTimeFormat.replace(":ss", "");
  }
  set value(v) {
    this.set_value(v);
  }
  get_valueAsDate() {
    if (!this.get_value())
      return null;
    return parseISODateTime(this.get_value());
  }
  get valueAsDate() {
    return this.get_valueAsDate();
  }
  set_valueAsDate(value) {
    if (value == null) {
      this.set_value(null);
    }
    this.set_value(formatDate(value, "yyyy-MM-ddTHH:mm" + (this.options.seconds ? ":ss" : "")));
  }
  set valueAsDate(value) {
    this.set_valueAsDate(value);
  }
  get_minValue() {
    return this.options.minValue;
  }
  set_minValue(value) {
    this.options.minValue = value;
  }
  get_maxValue() {
    return this.options.maxValue;
  }
  set_maxValue(value) {
    this.options.maxValue = value;
  }
  get_minDate() {
    return parseISODateTime(this.get_minValue());
  }
  set_minDate(value) {
    this.set_minValue(formatDate(value, "yyyy-MM-ddTHH:mm:ss"));
  }
  get_maxDate() {
    return parseISODateTime(this.get_maxValue());
  }
  set_maxDate(value) {
    this.set_maxValue(formatDate(value, "yyyy-MM-ddTHH:mm:ss"));
  }
  get_sqlMinMax() {
    return this.get_minValue() === "1753-01-01" && this.get_maxValue() === "9999-12-31";
  }
  set_sqlMinMax(value) {
    if (value) {
      this.set_minValue("1753-01-01");
      this.set_maxValue("9999-12-31");
    } else {
      this.set_minValue(null);
      this.set_maxValue(null);
    }
  }
  get_readOnly() {
    return this.domNode.classList.contains("readonly") || this.domNode.getAttribute("readonly") != null;
  }
  set_readOnly(value) {
    if (value !== this.get_readOnly()) {
      if (value) {
        this.domNode.classList.toggle("readonly", !!value);
        value ? this.domNode.setAttribute("readonly", "readonly") : this.domNode.removeAttribute("readonly");
        let trg = this.element.nextSibling(".ui-datepicker-trigger").getNode();
        trg && (trg.style.opacity = value ? "0.1" : "1");
        let now = this.element.nextSibling(".inplace-now").getNode();
        now && (now.style.opacity = value ? "0.1" : "1");
      }
      this.time && EditorUtils.setReadonly(this.time, value);
    }
  }
  static roundToMinutes(date, minutesStep) {
    date = new Date(date.getTime());
    var m = trunc(round(date.getMinutes() / minutesStep) * minutesStep);
    date.setMinutes(m);
    date.setSeconds(0);
    date.setMilliseconds(0);
    return date;
  }
};
_init64 = __decoratorStart(_a17);
_DateTimeEditor = __decorateElement(_init64, 0, "DateTimeEditor", _DateTimeEditor_decorators, _DateTimeEditor);
_DateTimeEditor.getTimeOptions = function(fromHour, fromMin, toHour, toMin, stepMins) {
  var list = [];
  if (toHour >= 23) {
    toHour = 23;
  }
  if (toMin >= 60) {
    toMin = 59;
  }
  var hour = fromHour;
  var min = fromMin;
  while (true) {
    if (hour > toHour || hour === toHour && min > toMin) {
      break;
    }
    var t = (hour >= 10 ? "" : "0") + hour + ":" + (min >= 10 ? "" : "0") + min;
    list.push(t);
    min += stepMins;
    if (min >= 60) {
      min -= 60;
      hour++;
    }
  }
  return list;
};
__runInitializers(_init64, 1, _DateTimeEditor);
var DateTimeEditor = _DateTimeEditor;

// src/ui/editors/timeeditor.ts
var TimeEditorBase = class extends EditorWidget {
  static createDefaultElement() {
    return document.createElement("select");
  }
  constructor(props) {
    super(props);
    let input = this.element;
    input.addClass("editor hour");
    if (!this.options.noEmptyOption) {
      addOption(input, "", "--");
    }
    for (let h = this.options.startHour || 0; h <= (this.options.endHour || 23); h++) {
      addOption(input, "" + h, zeroPad(h, 2));
    }
    this.minutes = Fluent("select").class("editor minute").insertAfter(input);
    this.minutes.on("change", () => Fluent.trigger(this.domNode, "change"));
    for (var m = 0; m <= 59; m += this.options.intervalMinutes || 5) {
      addOption(this.minutes, "" + m, zeroPad(m, 2));
    }
  }
  get hour() {
    return toId(this.domNode.value);
  }
  get minute() {
    return toId(this.minutes.val());
  }
  get_readOnly() {
    return this.domNode.classList.contains("readonly");
  }
  set_readOnly(value) {
    if (value !== this.get_readOnly()) {
      if (value) {
        this.element.addClass("readonly").attr("readonly", "readonly");
      } else {
        this.element.removeClass("readonly").removeAttr("readonly");
      }
      EditorUtils.setReadonly(this.minutes, value);
    }
  }
  /** Returns value in HH:mm format */
  get hourAndMin() {
    var hour = this.hour;
    var minute = this.minute;
    if (hour == null || minute == null) {
      return null;
    }
    return `${zeroPad(hour, 2)}:${zeroPad(minute, 2)}`;
  }
  /** Sets value in HH:mm format */
  set hourAndMin(value) {
    if (value == null || value === "") {
      if (this.options.noEmptyOption) {
        this.domNode.value = this.options.startHour;
        this.minutes.val("0");
      } else {
        this.domNode.value = "";
        this.minutes.val("0");
      }
      return;
    }
    var parts = value.split(":");
    this.domNode.value = "" + parseInt(parts[0], 10);
    this.minutes.val("" + parseInt(parts[1], 10));
  }
};
var _TimeEditor_decorators, _init65, _a18;
_TimeEditor_decorators = [Decorators.registerEditor("Serenity.TimeEditor", [IDoubleValue, IReadOnly])];
var TimeEditor = class extends (_a18 = TimeEditorBase) {
  constructor(props) {
    super(props);
    this.domNode.classList.add("s-TimeEditor");
    this.minutes.addClass("s-TimeEditor");
  }
  get value() {
    var hour = this.hour;
    var minute = this.minute;
    if (hour == null || minute == null) {
      return null;
    }
    return (hour * 60 + minute) * (this.options.multiplier || 1);
    ;
  }
  get_value() {
    return this.value;
  }
  set value(value) {
    if (value == null || value === "" || isNaN(value)) {
      if (this.options.noEmptyOption) {
        this.domNode.value = this.options.startHour;
        this.minutes.val("0");
      } else {
        this.domNode.value = "";
        this.minutes.val("0");
      }
    } else {
      value /= this.options.multiplier || 1;
      var hour = Math.floor(value / 60);
      this.domNode.value = "" + hour;
      this.minutes.val("" + value % 60);
    }
  }
  set_value(value) {
    this.value = value;
  }
};
_init65 = __decoratorStart(_a18);
TimeEditor = __decorateElement(_init65, 0, "TimeEditor", _TimeEditor_decorators, TimeEditor);
__runInitializers(_init65, 1, TimeEditor);
var _TimeSpanEditor_decorators, _init66, _a19;
_TimeSpanEditor_decorators = [Decorators.registerEditor("Serenity.TimeSpanEditor", [IStringValue, IReadOnly])];
var TimeSpanEditor = class extends (_a19 = TimeEditorBase) {
  constructor(props) {
    super(props);
    this.domNode.classList.add("s-TimeSpanEditor");
    this.minutes.addClass("s-TimeSpanEditor");
  }
  get_value() {
    return this.value;
  }
  set_value(value) {
    this.value = value;
  }
  get value() {
    return this.hourAndMin;
  }
  set value(value) {
    this.hourAndMin = value;
  }
};
_init66 = __decoratorStart(_a19);
TimeSpanEditor = __decorateElement(_init66, 0, "TimeSpanEditor", _TimeSpanEditor_decorators, TimeSpanEditor);
__runInitializers(_init66, 1, TimeSpanEditor);

// src/ui/editors/emaileditor.ts
var _EmailEditor_decorators, _init67, _a20;
_EmailEditor_decorators = [Decorators.registerEditor("Serenity.EmailEditor", [IStringValue, IReadOnly])];
var _EmailEditor = class _EmailEditor extends (_a20 = EditorWidget) {
  static createDefaultElement() {
    return Fluent("input").attr("type", "text").getNode();
  }
  constructor(props) {
    super(props);
    _EmailEditor.registerValidationMethods();
    this.domNode.classList.add("emailuser");
    var spanAt = Fluent("span").text("@").class("emailat").insertAfter(this.domNode);
    var domain = Fluent("input").attr("type", "text").class("emaildomain").insertAfter(spanAt);
    domain.on("blur." + this.uniqueName, function() {
      ValidationHelper.validateElement(this.domNode);
    });
    this.domain = domain.getNode();
    if (this.options.domain) {
      domain.val(this.options.domain);
    }
    if (this.options.readOnlyDomain) {
      domain.attr("readonly", "readonly").addClass("disabled").attr("tabindex", "-1");
    }
    this.element.on("keypress." + this.uniqueName, (e) => {
      if (e.key === "@") {
        e.preventDefault();
        if (!this.options.readOnlyDomain) {
          domain.getNode().focus();
          domain.getNode().select();
        }
      }
    });
    domain.on("keypress." + this.uniqueName, function(e) {
      if (e.key === "@")
        e.preventDefault();
    });
    if (!this.options.readOnlyDomain) {
      Fluent.on(this.domNode, "change", (e) => this.set_value(this.domNode.value));
    }
  }
  static registerValidationMethods() {
    Validator.addMethod("emailuser", function(value, element) {
      var domain = Fluent(element).nextSibling(".emaildomain").getNode();
      if (domain && domain.getAttribute("readonly") == null) {
        if (Validator.optional(element) && Validator.optional(domain)) {
          return true;
        }
        return Validator.methods.email(value + "@" + domain.value, element);
      } else {
        return Validator.methods.email(value + "@dummy.com", element);
      }
    }, tryGetText("Validation.Email"));
  }
  get_value() {
    var value = this.domNode.value;
    var domainValue = this.domain.value;
    if (!value) {
      if (this.options.readOnlyDomain || !domainValue) {
        return "";
      }
      return "@" + domainValue;
    }
    return value + "@" + domainValue;
  }
  get value() {
    return this.get_value();
  }
  set_value(value) {
    value = value == null ? void 0 : value.trim();
    if (!value) {
      if (!this.options.readOnlyDomain)
        this.domain.value = "";
      this.domNode.value = "";
    } else {
      var parts = value.split("@");
      if (parts.length > 1) {
        if (!this.options.readOnlyDomain) {
          this.domain.value = parts[1];
          this.domNode.value = parts[0];
        } else if (this.options.domain) {
          if (parts[1] !== this.options.domain)
            this.domNode.value = value;
          else
            this.domNode.value = parts[0];
        } else
          this.domNode.value = parts[0];
      } else
        this.domNode.value = parts[0];
    }
  }
  set value(v) {
    this.set_value(v);
  }
  get_readOnly() {
    return !(this.domNode.getAttribute("readonly") == null && (!this.options.readOnlyDomain || this.domain.getAttribute("readonly") == null));
  }
  set_readOnly(value) {
    if (value) {
      this.domNode.setAttribute("readonly", "readonly");
      this.domNode.classList.add("readonly");
      if (!this.options.readOnlyDomain) {
        this.domain.setAttribute("readonly", "readonly");
        this.domain.classList.add("readonly");
      }
    } else {
      this.domNode.removeAttribute("readonly");
      this.domNode.classList.remove("readonly");
      if (!this.options.readOnlyDomain) {
        this.domain.removeAttribute("readonly");
        this.domain.classList.remove("readonly");
      }
    }
  }
};
_init67 = __decoratorStart(_a20);
_EmailEditor = __decorateElement(_init67, 0, "EmailEditor", _EmailEditor_decorators, _EmailEditor);
__runInitializers(_init67, 1, _EmailEditor);
var EmailEditor = _EmailEditor;

// src/ui/editors/emailaddresseditor.ts
var _EmailAddressEditor_decorators, _init68, _a21;
_EmailAddressEditor_decorators = [Decorators.registerEditor("Serenity.EmailAddressEditor")];
var EmailAddressEditor = class extends (_a21 = StringEditor) {
  static createDefaultElement() {
    return Fluent("input").attr("type", "email").getNode();
  }
  constructor(props) {
    var _a68;
    super(props);
    (_a68 = this.domNode) == null ? void 0 : _a68.classList.add("email");
  }
};
_init68 = __decoratorStart(_a21);
EmailAddressEditor = __decorateElement(_init68, 0, "EmailAddressEditor", _EmailAddressEditor_decorators, EmailAddressEditor);
__runInitializers(_init68, 1, EmailAddressEditor);

// src/ui/editors/urleditor.ts
var _URLEditor_decorators, _init69, _a22;
_URLEditor_decorators = [Decorators.registerEditor("Serenity.URLEditor", [IStringValue])];
var URLEditor = class extends (_a22 = StringEditor) {
  constructor(props) {
    super(props);
    this.domNode.classList.add("url");
    this.domNode.setAttribute("title", "URL should be entered in format: 'http://www.site.com/page'.");
    Fluent.on(this.domNode, "blur." + this.uniqueName, (e) => {
      var _a68;
      var validator = ValidationHelper.getValidator(this.domNode);
      if (validator == null)
        return;
      if (!this.domNode.classList.contains("error"))
        return;
      var value = (_a68 = this.domNode.value) == null ? void 0 : _a68.trim();
      if (!value)
        return;
      value = "http://" + value;
      if (Validator.methods.url(value, this.domNode)) {
        this.domNode.value = value;
        validator.element(this.domNode);
      }
    });
  }
};
_init69 = __decoratorStart(_a22);
URLEditor = __decorateElement(_init69, 0, "URLEditor", _URLEditor_decorators, URLEditor);
__runInitializers(_init69, 1, URLEditor);

// src/ui/editors/radiobuttoneditor.ts
var _RadioButtonEditor_decorators, _init70, _a23;
_RadioButtonEditor_decorators = [Decorators.registerEditor("Serenity.RadioButtonEditor", [IStringValue, IReadOnly])];
var RadioButtonEditor = class extends (_a23 = EditorWidget) {
  constructor(props) {
    super(props);
    if (!this.options.enumKey && this.options.enumType == null && !this.options.lookupKey) {
      return;
    }
    if (this.options.lookupKey) {
      var lookup = getLookup(this.options.lookupKey);
      for (var item of lookup.items) {
        var textValue = item[lookup.textField];
        var text2 = textValue == null ? "" : textValue.toString();
        var idValue = item[lookup.idField];
        var id = idValue == null ? "" : idValue.toString();
        this.addRadio(id, text2);
      }
    } else {
      var enumType = this.options.enumType || EnumTypeRegistry.getOrLoad(this.options.enumKey);
      const then = (enumType2) => {
        var _a68;
        var enumKey = this.options.enumKey;
        if (enumKey == null && enumType2 != null) {
          var enumKeyAttr = getCustomAttribute(enumType2, EnumKeyAttribute, false);
          if (enumKeyAttr) {
            enumKey = enumKeyAttr.value;
          }
        }
        var values = Enum.getValues(enumType2);
        for (var x of values) {
          var name = Enum.toString(enumType2, x);
          this.addRadio(x.toString(), (_a68 = tryGetText(
            "Enums." + enumKey + "." + name
          )) != null ? _a68 : name);
        }
      };
      if (isPromiseLike(enumType))
        enumType.then(then);
      else
        then(enumType);
    }
  }
  addRadio(value, text2) {
    var label = Fluent("label").text(text2);
    Fluent("input").attr("type", "radio").attr("name", this.uniqueName).attr("id", this.uniqueName + "_" + value).attr("value", value).prependTo(label);
    label.appendTo(this.domNode);
  }
  get_value() {
    return this.element.findFirst("input:checked").val();
  }
  get value() {
    return this.get_value();
  }
  set_value(value) {
    if (value !== this.get_value()) {
      var inputs = this.element.findAll("input");
      var checks = inputs.filter((x) => x.checked);
      if (checks.length > 0) {
        checks[0].checked = false;
      }
      if (value) {
        checks = inputs.filter((x) => x.value === value);
        if (checks.length > 0) {
          checks[0].checked = true;
        }
      }
    }
  }
  set value(v) {
    this.set_value(v);
  }
  get_readOnly() {
    return this.domNode.getAttribute("disabled") != null;
  }
  set_readOnly(value) {
    if (this.get_readOnly() !== value) {
      if (value) {
        this.element.attr("disabled", "disabled").findFirst("input").attr("disabled", "disabled");
      } else {
        this.element.removeAttr("disabled").findFirst("input").removeAttr("disabled");
      }
    }
  }
};
_init70 = __decoratorStart(_a23);
RadioButtonEditor = __decorateElement(_init70, 0, "RadioButtonEditor", _RadioButtonEditor_decorators, RadioButtonEditor);
__runInitializers(_init70, 1, RadioButtonEditor);

// src/ui/editors/comboboxeditor.ts
var _ComboboxEditor_decorators, _init71, _a24;
_ComboboxEditor_decorators = [Decorators.registerClass(
  "Serenity.ComboboxEditor",
  [ISetEditValue, IGetEditValue, IStringValue, IReadOnly]
)];
var _ComboboxEditor = class _ComboboxEditor extends (_a24 = Widget) {
  static createDefaultElement() {
    return Fluent("input").attr("type", "hidden").getNode();
  }
  constructor(props) {
    super(props);
    let hidden = this.domNode;
    this._items = [];
    this._itemById = {};
    var emptyItemText = this.emptyItemText();
    if (emptyItemText != null) {
      hidden.setAttribute("placeholder", emptyItemText);
    }
    var comboboxOptions = this.getComboboxOptions();
    comboboxOptions.element = hidden;
    this.combobox = new Combobox(comboboxOptions);
    hidden.setAttribute("type", "text");
    Fluent.on(hidden, "change." + this.uniqueName, (e) => {
      var _a68, _b;
      if (!((_b = (_a68 = e.target) == null ? void 0 : _a68.dataset) == null ? void 0 : _b.comboboxsettingvalue))
        ValidationHelper.validateElement(hidden);
    });
    this.setCascadeFrom(this.options.cascadeFrom);
    if (this.useInplaceAdd())
      this.addInplaceCreate(localText("Controls.SelectEditor.InplaceAdd"), null);
  }
  destroy() {
    var _a68;
    (_a68 = this.combobox) == null ? void 0 : _a68.dispose();
    this.combobox = null;
    super.destroy();
  }
  hasAsyncSource() {
    return false;
  }
  asyncSearch(query) {
    return Promise.resolve({
      items: [],
      more: false
    });
  }
  getTypeDelay() {
    var _a68;
    return (_a68 = this.options["typeDelay"]) != null ? _a68 : 200;
  }
  emptyItemText() {
    var _a68;
    return (_a68 = this.domNode.getAttribute("placeholder")) != null ? _a68 : localText("Controls.SelectEditor.EmptyItemText");
  }
  getPageSize() {
    var _a68;
    return (_a68 = this.options["pageSize"]) != null ? _a68 : 100;
  }
  getIdField() {
    return this.options["idField"];
  }
  itemId(item) {
    var value = item[this.getIdField()];
    if (value == null)
      return "";
    return value.toString();
  }
  getTextField() {
    var _a68;
    return (_a68 = this.options["textField"]) != null ? _a68 : this.getIdField();
  }
  itemText(item) {
    var value = item[this.getTextField()];
    if (value == null)
      return "";
    return value.toString();
  }
  itemDisabled(item) {
    return false;
  }
  mapItem(item) {
    return {
      id: this.itemId(item),
      text: this.itemText(item),
      disabled: this.itemDisabled(item),
      source: item
    };
  }
  mapItems(items) {
    return items.map(this.mapItem.bind(this));
  }
  allowClear() {
    return this.options.allowClear != null ? !!this.options.allowClear : this.emptyItemText() != null;
  }
  isMultiple() {
    return !!this.options.multiple;
  }
  abortPendingQuery() {
    var _a68;
    (_a68 = this.combobox) == null ? void 0 : _a68.abortPendingQuery();
  }
  getComboboxOptions() {
    var emptyItemText = this.emptyItemText();
    var opt = {
      multiple: this.isMultiple(),
      placeholder: emptyItemText || null,
      allowClear: this.allowClear(),
      arbitraryValues: this.isAutoComplete()
    };
    if (this.hasAsyncSource()) {
      opt.search = (query) => this.asyncSearch(query).then((result) => {
        var _a68;
        var items = this.mapItems(result.items || []);
        var mappedResult = {
          items,
          more: result.more
        };
        if (this.isAutoComplete() && query.idList && items.length < query.idList.length) {
          for (var v of query.idList) {
            if (!items.some((z) => z.id == v)) {
              items.push({
                id: v,
                text: v
              });
            }
          }
        }
        (_a68 = this._itemById) != null ? _a68 : this._itemById = {};
        for (var x of items)
          this._itemById[x.id] = x;
        return mappedResult;
      });
    } else {
      opt.search = (query) => {
        var _a68;
        var items;
        if (query.initSelection) {
          items = this._items.filter((x) => {
            var _a69;
            return (_a69 = query.idList) == null ? void 0 : _a69.includes(x.id);
          });
        } else {
          items = _ComboboxEditor.filterByText(this._items, (x) => x.text, query.searchTerm);
        }
        if (this.isAutoComplete() && query.idList && items.length < query.idList.length) {
          (_a68 = this._itemById) != null ? _a68 : this._itemById = {};
          for (var v of query.idList) {
            if (!items.some((z) => z.id == v)) {
              var item = {
                id: v,
                text: v
              };
              items.push(item);
              this._itemById[item.id] = item;
            }
          }
        }
        return {
          items: items.slice(query.skip, query.take ? query.skip + query.take : items.length),
          more: query.take && items.length > 0 && items.length > query.skip + query.take
        };
      };
    }
    if (this.options.minimumResultsForSearch != null)
      opt.minimumResultsForSearch = this.options.minimumResultsForSearch;
    if (this.isAutoComplete() || this.useInplaceAdd())
      opt.createSearchChoice = this.getCreateSearchChoice(null);
    return opt;
  }
  get_delimited() {
    return !!this.options.delimited;
  }
  get items() {
    if (this.hasAsyncSource())
      throw new Error("Can't read items property of an async select editor!");
    return this._items || [];
  }
  set items(value) {
    if (this.hasAsyncSource())
      throw new Error("Can't set items of an async select editor!");
    this._items = value || [];
    this._itemById = {};
    for (var item of this._items)
      this._itemById[item.id] = item;
  }
  get itemById() {
    if (this.hasAsyncSource())
      throw new Error("Can't read items property of an async select editor!");
    return this._itemById;
  }
  set itemById(value) {
    if (this.hasAsyncSource())
      throw new Error("Can't set itemById of an async select editor!");
    this._itemById = value || {};
  }
  clearItems() {
    if (this.hasAsyncSource())
      throw new Error("Can't clear items of an async select editor!");
    this._items.length = 0;
    this._itemById = {};
  }
  addItem(item) {
    if (this.hasAsyncSource())
      throw new Error("Can't add item to an async select editor!");
    this._items.push(item);
    this._itemById[item.id] = item;
  }
  addOption(key, text2, source, disabled) {
    this.addItem({
      id: key,
      text: text2,
      source,
      disabled
    });
  }
  addInplaceCreate(addTitle, editTitle) {
    var _a68;
    var self2 = this;
    addTitle = addTitle != null ? addTitle : localText("Controls.SelectEditor.InplaceAdd");
    editTitle = editTitle != null ? editTitle : localText("Controls.SelectEditor.InplaceEdit");
    var inplaceButton = Fluent("a").class("inplace-button inplace-create").attr("title", addTitle).append(Fluent("b")).insertAfter(this.domNode).on("click", function(e) {
      self2.inplaceCreateClick(e);
    });
    (_a68 = this.getComboboxContainer()) == null ? void 0 : _a68.classList.add("has-inplace-button");
    this.domNode.classList.add("has-inplace-button");
    this.element.on("change", () => {
      var isNew = this.isMultiple() || !this.get_value();
      inplaceButton.attr("title", isNew ? addTitle : editTitle).toggleClass("edit", !isNew);
    });
    this.element.on("change", (e) => {
      if (e.target.dataset.comboboxsettingvalue)
        return;
      if (this.isMultiple()) {
        var values = this.get_values();
        if (values.length > 0 && values[values.length - 1] == (-2147483648).toString()) {
          this.set_values(values.slice(0, values.length - 1));
          this.inplaceCreateClick(e);
        }
      } else if (this.get_value() == (-2147483648).toString()) {
        this.set_value(null);
        this.inplaceCreateClick(e);
      }
    });
    if (this.isMultiple()) {
      Fluent.on(this.getComboboxContainer(), "dblclick." + this.uniqueName, ".select2-search-choice", (e3) => {
        var _a69;
        var q = Fluent(e3.target);
        if (!q.hasClass("select2-search-choice")) {
          q = q.closest(".select2-search-choice");
        }
        var index = Array.from(((_a69 = q.parent().getNode()) == null ? void 0 : _a69.children) || []).indexOf(q.getNode());
        var values1 = this.get_values();
        if (index == null || index < 0 || index >= this.get_values().length) {
          return;
        }
        e3["editItem"] = values1[index];
        this.inplaceCreateClick(e3);
      });
    }
  }
  useInplaceAdd() {
    return !this.isAutoComplete() && this.options.inplaceAdd && (this.options.inplaceAddPermission == null || Authorization.hasPermission(this.options.inplaceAddPermission));
  }
  isAutoComplete() {
    return !!this.options.autoComplete;
  }
  getCreateSearchChoice(getName) {
    return (s) => {
      var _a68;
      this.lastCreateTerm = s;
      s = ((_a68 = stripDiacritics(s)) != null ? _a68 : "").toLowerCase();
      if (isTrimmedEmpty(s)) {
        return null;
      }
      if ((this._items || []).some((x) => {
        var text2 = getName ? getName(x.source) : x.text;
        return stripDiacritics(text2 != null ? text2 : "").toLowerCase() == s;
      }))
        return null;
      if (!(this._items || []).some((x1) => {
        var _a69;
        return ((_a69 = stripDiacritics(x1.text)) != null ? _a69 : "").toLowerCase().indexOf(s) !== -1;
      })) {
        if (this.isAutoComplete()) {
          return {
            id: this.lastCreateTerm,
            text: this.lastCreateTerm
          };
        }
        return {
          id: (-2147483648).toString(),
          text: localText("Controls.SelectEditor.NoResultsClickToDefine")
        };
      }
      if (this.isAutoComplete()) {
        return {
          id: this.lastCreateTerm,
          text: this.lastCreateTerm
        };
      }
      return {
        id: (-2147483648).toString(),
        text: localText("Controls.SelectEditor.ClickToDefine")
      };
    };
  }
  setEditValue(source, property) {
    var val = source[property.name];
    if (Array.isArray(val)) {
      this.set_values(val);
    } else {
      this.set_value(val == null ? null : val.toString());
    }
  }
  getEditValue(property, target) {
    if (!this.isMultiple() || this.get_delimited()) {
      target[property.name] = this.get_value();
    } else {
      target[property.name] = this.get_values();
    }
  }
  getComboboxContainer() {
    var _a68;
    return (_a68 = Combobox.getInstance(this.domNode)) == null ? void 0 : _a68.container;
  }
  get_items() {
    return this.items;
  }
  get_itemByKey() {
    return this.itemById;
  }
  static filterByText(items, getText, term) {
    if (term == null || term.length == 0)
      return items;
    term = stripDiacritics(term).toUpperCase();
    var contains = [];
    function filter(item) {
      var text2 = getText(item);
      if (text2 == null || !text2.length)
        return false;
      text2 = stripDiacritics(text2).toUpperCase();
      if (text2.startsWith(term))
        return true;
      if (text2.indexOf(term) >= 0)
        contains.push(item);
      return false;
    }
    return items.filter(filter).concat(contains);
  }
  get_value() {
    var _a68;
    return this.combobox ? this.combobox.getValue() : (_a68 = this.domNode) == null ? void 0 : _a68.value;
  }
  get value() {
    return this.get_value();
  }
  set_value(value) {
    if (this.combobox) {
      this.combobox.setValue(
        value,
        /*triggerChange*/
        true
      );
    } else if (this.domNode) {
      this.domNode.value = value;
    }
    this.updateInplaceReadOnly();
  }
  set value(v) {
    this.set_value(v);
  }
  get selectedItem() {
    let selectedValue = this.get_value();
    if (selectedValue && this._itemById) {
      let item = this._itemById[selectedValue];
      if (item)
        return item.source;
    }
    return null;
  }
  get selectedItems() {
    let selectedValues = this.values;
    var result = [];
    for (var value of selectedValues) {
      if (value && this._itemById) {
        let item = this._itemById[value];
        if (item && item.source)
          result.push(item.source);
        else
          result.push(null);
      }
    }
    return result;
  }
  get_values() {
    var _a68;
    return (_a68 = this.combobox) == null ? void 0 : _a68.getValues();
  }
  get values() {
    return this.get_values();
  }
  set_values(value) {
    var _a68;
    (_a68 = this.combobox) == null ? void 0 : _a68.setValues(value);
  }
  set values(value) {
    this.set_values(value);
  }
  get_text() {
    var _a68;
    var combobox = Combobox.getInstance(this.domNode);
    if (combobox)
      return (_a68 = combobox.getSelectedItems()) == null ? void 0 : _a68.map((x) => x.text).join(", ");
    return this.domNode.value;
  }
  get text() {
    return this.get_text();
  }
  get_readOnly() {
    return this.domNode.getAttribute("readonly") != null;
  }
  get readOnly() {
    return this.get_readOnly();
  }
  updateInplaceReadOnly() {
    var readOnly = this.get_readOnly() && (this.isMultiple() || !this.value);
    let el = this.element.nextSibling(".inplace-create").getNode();
    if (el) {
      el.setAttribute("disabled", readOnly ? "disabled" : "");
      el.style.opacity = readOnly ? "0.1" : "";
      el.style.cursor = readOnly ? "default" : "";
    }
  }
  set_readOnly(value) {
    if (value !== this.get_readOnly()) {
      value ? this.domNode.setAttribute("readonly", "readonly") : this.domNode.removeAttribute("readonly");
      this.updateInplaceReadOnly();
    }
  }
  set readOnly(value) {
    this.set_readOnly(value);
  }
  getCascadeFromValue(parent2) {
    return EditorUtils.getValue(parent2);
  }
  setCascadeFrom(value) {
    if (!value) {
      if (this.cascadeLink != null) {
        this.cascadeLink.set_parentID(null);
        this.cascadeLink = null;
      }
      this.options.cascadeFrom = null;
      return;
    }
    this.cascadeLink = new CascadedWidgetLink(Widget, this, (p) => {
      this.set_cascadeValue(this.getCascadeFromValue(p));
    });
    this.cascadeLink.set_parentID(value);
    this.options.cascadeFrom = value;
  }
  get_cascadeFrom() {
    return this.options.cascadeFrom;
  }
  get cascadeFrom() {
    return this.get_cascadeFrom();
  }
  set_cascadeFrom(value) {
    if (value !== this.options.cascadeFrom) {
      this.setCascadeFrom(value);
      this.updateItems();
    }
  }
  set cascadeFrom(value) {
    this.set_cascadeFrom(value);
  }
  get_cascadeField() {
    var _a68;
    return (_a68 = this.options.cascadeField) != null ? _a68 : this.options.cascadeFrom;
  }
  get cascadeField() {
    return this.get_cascadeField();
  }
  set_cascadeField(value) {
    this.options.cascadeField = value;
  }
  set cascadeField(value) {
    this.set_cascadeField(value);
  }
  get_cascadeValue() {
    return this.options.cascadeValue;
  }
  get cascadeValue() {
    return this.get_cascadeValue();
  }
  set_cascadeValue(value) {
    if (this.options.cascadeValue !== value) {
      this.options.cascadeValue = value;
      this.set_value(null);
      this.updateItems();
    }
  }
  set cascadeValue(value) {
    this.set_cascadeValue(value);
  }
  get_filterField() {
    return this.options.filterField;
  }
  get filterField() {
    return this.get_filterField();
  }
  set_filterField(value) {
    this.options.filterField = value;
  }
  set filterField(value) {
    this.set_filterField(value);
  }
  get_filterValue() {
    return this.options.filterValue;
  }
  get filterValue() {
    return this.get_filterValue();
  }
  set_filterValue(value) {
    if (this.options.filterValue !== value) {
      this.options.filterValue = value;
      this.set_value(null);
      this.updateItems();
    }
  }
  set filterValue(value) {
    this.set_filterValue(value);
  }
  cascadeItems(items) {
    var val = this.get_cascadeValue();
    if (val == null || val === "") {
      if (this.get_cascadeField()) {
        return [];
      }
      return items;
    }
    var key = val.toString();
    var fld = this.get_cascadeField();
    return items.filter((x) => {
      var _a68;
      var itemKey = (_a68 = x[fld]) != null ? _a68 : ReflectionUtils.getPropertyValue(x, fld);
      return !!(itemKey != null && itemKey.toString() === key);
    });
  }
  filterItems(items) {
    var val = this.get_filterValue();
    if (val == null || val === "") {
      return items;
    }
    var key = val.toString();
    var fld = this.get_filterField();
    return items.filter((x) => {
      var _a68;
      var itemKey = (_a68 = x[fld]) != null ? _a68 : ReflectionUtils.getPropertyValue(x, fld);
      return !!(itemKey != null && itemKey.toString() === key);
    });
  }
  updateItems() {
  }
  getDialogTypeKey() {
    if (this.options.dialogType != null) {
      return this.options.dialogType;
    }
    return null;
  }
  createEditDialog(callback) {
    var dialogTypeKey = this.getDialogTypeKey();
    var dialogType = DialogTypeRegistry.getOrLoad(dialogTypeKey);
    const then = (dialogType2) => {
      var _a68, _b;
      var dialog = (_b = (_a68 = new dialogType2({})).init) == null ? void 0 : _b.call(_a68);
      callback == null ? void 0 : callback(dialog);
    };
    isPromiseLike(dialogType) ? dialogType.then(then) : then(dialogType);
  }
  initNewEntity(entity) {
    if (this.get_cascadeField()) {
      entity[this.get_cascadeField()] = this.get_cascadeValue();
    }
    if (this.get_filterField()) {
      entity[this.get_filterField()] = this.get_filterValue();
    }
    if (this.onInitNewEntity != null) {
      this.onInitNewEntity(entity);
    }
  }
  setEditDialogReadOnly(dialog) {
    dialog.element && dialog.element.findFirst && dialog.element.findFirst(".tool-button.delete-button").addClass("disabled").off("click", void 0);
  }
  editDialogDataChange() {
  }
  setTermOnNewEntity(entity, term, dialog) {
    if (term && typeof (dialog == null ? void 0 : dialog.getNameProperty) === "function") {
      const nameProperty = dialog.getNameProperty();
      if (nameProperty) {
        entity[nameProperty] = term;
      }
    }
  }
  inplaceCreateClick(e) {
    if (this.get_readOnly() && (this.isMultiple() && !e["editItem"] || !this.value))
      return;
    this.createEditDialog((dialog) => {
      var _a68, _b;
      if (this.get_readOnly())
        this.setEditDialogReadOnly(dialog);
      SubDialogHelper.bindToDataChange(dialog, this, (dci) => {
        this.editDialogDataChange();
        this.updateItems();
        this.lastCreateTerm = null;
        if ((dci.operationType === "create" || dci.operationType === "update") && dci.entityId != null) {
          var id = dci.entityId.toString();
          if (this.isMultiple()) {
            var values = this.get_values().slice();
            if (values.indexOf(id) < 0) {
              values.push(id);
            }
            this.set_values(null);
            this.set_values(values.slice());
          } else {
            this.set_value(null);
            this.set_value(id);
          }
        } else if (this.isMultiple() && dci.operationType === "delete" && dci.entityId != null) {
          var id1 = dci.entityId.toString();
          var values1 = this.get_values().slice();
          var idx1 = values1.indexOf(id1);
          if (idx1 >= 0)
            values1.splice(idx1, 1);
          this.set_values(values1.slice());
        } else if (!this.isMultiple()) {
          this.set_value(null);
        }
      }, true);
      var editItem = e["editItem"];
      if (editItem != null) {
        dialog.load(editItem, () => {
          dialog.dialogOpen(this.openDialogAsPanel);
        }, null);
      } else if (this.isMultiple() || !this.get_value()) {
        var entity = {};
        this.setTermOnNewEntity(entity, (_b = (_a68 = this.lastCreateTerm) == null ? void 0 : _a68.trim()) != null ? _b : "", dialog);
        this.initNewEntity(entity);
        dialog.load(entity, () => {
          dialog.dialogOpen(this.openDialogAsPanel);
        }, null);
      } else {
        dialog.load(this.get_value(), () => {
          dialog.dialogOpen(this.openDialogAsPanel);
        }, null);
      }
    });
  }
  openDropdown() {
    var _a68;
    (_a68 = Combobox.getInstance(this.domNode)) == null ? void 0 : _a68.openDropdown();
  }
};
_init71 = __decoratorStart(_a24);
_ComboboxEditor = __decorateElement(_init71, 0, "ComboboxEditor", _ComboboxEditor_decorators, _ComboboxEditor);
__runInitializers(_init71, 1, _ComboboxEditor);
var ComboboxEditor = _ComboboxEditor;

// src/ui/editors/selecteditor.ts
var _SelectEditor_decorators, _init72, _a25;
_SelectEditor_decorators = [Decorators.registerClass("Serenity.SelectEditor")];
var SelectEditor = class extends (_a25 = ComboboxEditor) {
  constructor(props) {
    super(props);
    this.updateItems();
  }
  getItems() {
    return this.options.items || [];
  }
  emptyItemText() {
    if (this.options.emptyOptionText) {
      return this.options.emptyOptionText;
    }
    return super.emptyItemText();
  }
  updateItems() {
    var _a68;
    var items = this.getItems();
    this.clearItems();
    if (items.length > 0) {
      var isStrings = typeof items[0] === "string";
      for (var item of items) {
        var key = isStrings ? item : item[0];
        var text2 = isStrings ? item : (_a68 = item[1]) != null ? _a68 : item[0];
        this.addOption(key, text2, item, false);
      }
    }
  }
};
_init72 = __decoratorStart(_a25);
SelectEditor = __decorateElement(_init72, 0, "SelectEditor", _SelectEditor_decorators, SelectEditor);
__runInitializers(_init72, 1, SelectEditor);

// src/ui/editors/dateyeareditor.ts
var _DateYearEditor_decorators, _init73, _a26;
_DateYearEditor_decorators = [Decorators.registerEditor("Serenity.DateYearEditor")];
var DateYearEditor = class extends (_a26 = SelectEditor) {
  constructor(props) {
    super(props);
    this.updateItems();
  }
  getItems() {
    var _a68, _b;
    var opt = this.options;
    if (opt.items != null && opt.items.length >= 1) {
      return opt.items;
    }
    var years = [];
    var minYear = (/* @__PURE__ */ new Date()).getFullYear();
    var maxYear = (/* @__PURE__ */ new Date()).getFullYear();
    opt.minYear = ((_a68 = opt.minYear) != null ? _a68 : "-10").toString();
    if (opt.minYear.startsWith("-")) {
      minYear -= parseInt(opt.minYear.substring(1), 10);
    } else if (opt.minYear.startsWith("+")) {
      minYear += parseInt(opt.minYear.substring(1), 10);
    } else {
      minYear = parseInt(opt.minYear, 10);
    }
    opt.maxYear = ((_b = opt.maxYear) != null ? _b : "+10").toString();
    if (opt.maxYear.startsWith("-")) {
      maxYear -= parseInt(opt.maxYear.substr(1), 10);
    } else if (opt.maxYear.startsWith("+")) {
      maxYear += parseInt(opt.maxYear.substring(1), 10);
    } else {
      maxYear = parseInt(opt.maxYear, 10);
    }
    if (opt.descending) {
      for (var i = maxYear; i >= minYear; i--) {
        years.push(i.toString());
      }
    } else {
      for (var i1 = minYear; i1 <= maxYear; i1++) {
        years.push(i1.toString());
      }
    }
    return years;
  }
};
_init73 = __decoratorStart(_a26);
DateYearEditor = __decorateElement(_init73, 0, "DateYearEditor", _DateYearEditor_decorators, DateYearEditor);
__runInitializers(_init73, 1, DateYearEditor);

// src/ui/editors/enumeditor.ts
var _EnumEditor_decorators, _init74, _a27;
_EnumEditor_decorators = [Decorators.registerEditor("Serenity.EnumEditor")];
var EnumEditor = class extends (_a27 = ComboboxEditor) {
  constructor(props) {
    super(props);
    this.updateItems();
  }
  updateItems() {
    this.clearItems();
    var enumType = this.options.enumType || EnumTypeRegistry.getOrLoad(this.options.enumKey);
    const then = (enumType2) => {
      var _a68;
      var enumKey = this.options.enumKey;
      if (enumKey == null && enumType2 != null) {
        var enumKeyAttr = getCustomAttribute(enumType2, EnumKeyAttribute, false);
        if (enumKeyAttr) {
          enumKey = enumKeyAttr.value;
        }
      }
      var values = Enum.getValues(enumType2);
      for (var x of values) {
        var name = Enum.toString(enumType2, x);
        this.addOption(
          parseInt(x, 10).toString(),
          (_a68 = tryGetText("Enums." + enumKey + "." + name)) != null ? _a68 : name,
          null,
          false
        );
      }
    };
    if (isPromiseLike(enumType))
      return enumType.then(then);
    else
      then(enumType);
  }
  allowClear() {
    var _a68;
    return (_a68 = this.options.allowClear) != null ? _a68 : true;
  }
};
_init74 = __decoratorStart(_a27);
EnumEditor = __decorateElement(_init74, 0, "EnumEditor", _EnumEditor_decorators, EnumEditor);
__runInitializers(_init74, 1, EnumEditor);

// src/ui/editors/lookupeditor.ts
var _LookupEditorBase_decorators, _init75, _a28;
_LookupEditorBase_decorators = [Decorators.registerEditor("Serenity.LookupEditorBase")];
var LookupEditorBase = class extends (_a28 = ComboboxEditor) {
  constructor(props) {
    super(props);
    if (!this.hasAsyncSource()) {
      this.updateItems();
      this.lookupChangeUnbind = ScriptData.bindToChange("Lookup." + this.getLookupKey(), this.updateItems.bind(this));
    }
  }
  hasAsyncSource() {
    return !!this.options.async;
  }
  destroy() {
    if (this.lookupChangeUnbind) {
      this.lookupChangeUnbind();
      this.lookupChangeUnbind = null;
    }
    super.destroy();
  }
  getLookupKey() {
    if (this.options.lookupKey != null) {
      return this.options.lookupKey;
    }
    var key = getTypeFullName(getInstanceType(this));
    var idx = key.indexOf(".");
    if (idx >= 0) {
      key = key.substring(idx + 1);
    }
    if (key.endsWith("Editor")) {
      key = key.substring(0, key.length - 6);
    }
    return key;
  }
  getLookupAsync() {
    return getLookupAsync(this.getLookupKey());
  }
  getLookup() {
    return getLookup(this.getLookupKey());
  }
  getItems(lookup) {
    return this.filterItems(this.cascadeItems(lookup.items));
  }
  getIdField() {
    return this.lookup != null ? this.lookup.idField : super.getIdField();
  }
  getItemText(item, lookup) {
    if (lookup == null)
      return super.itemText(item);
    var textValue = item[lookup.textField];
    return textValue == null ? "" : textValue.toString();
  }
  mapItem(item) {
    return {
      id: this.itemId(item),
      text: this.getItemText(item, this.lookup),
      disabled: this.getItemDisabled(item, this.lookup),
      source: item
    };
  }
  getItemDisabled(item, lookup) {
    return super.itemDisabled(item);
  }
  updateItems() {
    if (this.hasAsyncSource())
      return;
    this.clearItems();
    this.lookup = this.getLookup();
    var items = this.getItems(this.lookup);
    for (var item of items)
      this.addItem(this.mapItem(item));
  }
  asyncSearch(query) {
    return __async(this, null, function* () {
      this.lookup = yield this.getLookupAsync();
      var items = this.getItems(this.lookup);
      if (query.idList != null) {
        items = items.filter((x) => query.idList.indexOf(this.itemId(x)) >= 0);
      }
      function getText(item) {
        return this.getItemText(item, this.lookup);
      }
      items = ComboboxEditor.filterByText(items, getText.bind(this), query.searchTerm);
      return {
        items: items.slice(query.skip, query.take ? query.skip + query.take : items.length),
        more: query.take && items.length > 0 && items.length > query.skip + query.take
      };
    });
  }
  getDialogTypeKey() {
    var dialogTypeKey = super.getDialogTypeKey();
    if (dialogTypeKey)
      return dialogTypeKey;
    return this.getLookupKey();
  }
  setCreateTermOnNewEntity(entity, term) {
    entity[this.getLookup().textField] = term;
  }
  editDialogDataChange() {
    reloadLookup(this.getLookupKey());
  }
};
_init75 = __decoratorStart(_a28);
LookupEditorBase = __decorateElement(_init75, 0, "LookupEditorBase", _LookupEditorBase_decorators, LookupEditorBase);
__runInitializers(_init75, 1, LookupEditorBase);
var _LookupEditor_decorators, _init76, _a29;
_LookupEditor_decorators = [Decorators.registerEditor("Serenity.LookupEditor")];
var LookupEditor = class extends (_a29 = LookupEditorBase) {
  constructor(props) {
    super(props);
  }
};
_init76 = __decoratorStart(_a29);
LookupEditor = __decorateElement(_init76, 0, "LookupEditor", _LookupEditor_decorators, LookupEditor);
__runInitializers(_init76, 1, LookupEditor);

// src/ui/editors/servicelookupeditor.ts
var _ServiceLookupEditorBase_decorators, _init77, _a30;
_ServiceLookupEditorBase_decorators = [Decorators.registerEditor("Serenity.ServiceLookupEditorBase")];
var ServiceLookupEditorBase = class extends (_a30 = ComboboxEditor) {
  getDialogTypeKey() {
    var dialogTypeKey = super.getDialogTypeKey();
    if (dialogTypeKey)
      return dialogTypeKey;
    var service = this.getService();
    if (service.startsWith("~/Services/"))
      service = service.substring("~/Services/".length);
    if (service.split("/").length == 3)
      service = service.substring(0, service.lastIndexOf("/"));
    return service.replace("/", ".");
  }
  getService() {
    return this.options.service;
  }
  getServiceUrl() {
    var url = this.getService();
    if (url == null)
      throw new Error("ServiceLookupEditor requires 'service' option to be configured!");
    return resolveServiceUrl(url);
  }
  getIncludeColumns() {
    var include = this.options.includeColumns || [];
    var idField = this.getIdField();
    if (idField && include.indexOf(idField) < 0)
      include.push(idField);
    var textField = this.getTextField();
    if (textField && include.indexOf(textField) < 0)
      include.push(textField);
    return include;
  }
  getSort() {
    return this.options.sort || (this.getTextField() ? [this.getTextField()] : null);
  }
  getCascadeCriteria() {
    var val = this.get_cascadeValue();
    if (val == null || val === "") {
      if (this.get_cascadeField()) {
        return ["0", "=", "1"];
      }
      return null;
    }
    var fld = this.get_cascadeField();
    return Criteria(fld).eq(val);
  }
  getFilterCriteria() {
    var val = this.get_filterValue();
    if (val == null || val === "") {
      return null;
    }
    var fld = this.get_filterField();
    return [[fld], "=", val];
  }
  getIdListCriteria(idList) {
    if (idList == null)
      return null;
    if (idList.length == 0)
      return ["0", "=", "1"];
    var idField = this.getIdField();
    if (idField == null)
      throw new Error("ServiceLookupEditor requires 'idField' option to be configured!");
    return Criteria(idField).in(idList);
  }
  getCriteria(query) {
    return Criteria.and(
      Criteria.and(this.getIdListCriteria(query.idList), this.options.criteria),
      Criteria.and(this.getCascadeCriteria(), this.getFilterCriteria())
    );
  }
  getListRequest(query) {
    var request = {};
    if (query.searchTerm)
      request.ContainsText = query.searchTerm;
    request.Sort = this.getSort();
    request.ColumnSelection = this.options.columnSelection || 1 /* KeyOnly */;
    request.IncludeColumns = this.getIncludeColumns();
    request.ExcludeColumns = this.options.excludeColumns;
    request.ContainsField = this.options.containsField;
    request.EqualityFilter = this.options.equalityFilter;
    request.Criteria = this.getCriteria(query);
    request.Skip = query.skip || 0;
    request.Take = query.take ? query.checkMore ? query.take + 1 : query.take : 0;
    request.IncludeDeleted = this.options.includeDeleted;
    request.ExcludeTotalCount = true;
    return request;
  }
  getServiceCallOptions(query) {
    return {
      blockUI: false,
      service: this.getServiceUrl(),
      request: this.getListRequest(query),
      signal: query.signal
    };
  }
  hasAsyncSource() {
    return true;
  }
  canSearch(byId) {
    if (!byId && this.get_cascadeField()) {
      var val = this.get_cascadeValue();
      if (val == null || val === "")
        return false;
    }
    return true;
  }
  asyncSearch(query) {
    return __async(this, null, function* () {
      if (!this.canSearch(query.idList != null)) {
        return Promise.resolve({
          items: [],
          more: false
        });
      }
      var opt = this.getServiceCallOptions(query);
      var response = yield serviceCall(opt);
      var itemsPlus1 = response.Entities || [];
      var items = itemsPlus1;
      if (query.take && query.checkMore)
        items = items.slice(0, query.take);
      return {
        items,
        more: query.checkMore && query.take && itemsPlus1.length > query.take
      };
    });
  }
};
_init77 = __decoratorStart(_a30);
ServiceLookupEditorBase = __decorateElement(_init77, 0, "ServiceLookupEditorBase", _ServiceLookupEditorBase_decorators, ServiceLookupEditorBase);
__runInitializers(_init77, 1, ServiceLookupEditorBase);
var _ServiceLookupEditor_decorators, _init78, _a31;
_ServiceLookupEditor_decorators = [Decorators.registerEditor("Serenity.ServiceLookupEditor")];
var ServiceLookupEditor = class extends (_a31 = ServiceLookupEditorBase) {
  constructor(props) {
    super(props);
  }
};
_init78 = __decoratorStart(_a31);
ServiceLookupEditor = __decorateElement(_init78, 0, "ServiceLookupEditor", _ServiceLookupEditor_decorators, ServiceLookupEditor);
__runInitializers(_init78, 1, ServiceLookupEditor);

// src/ui/editors/htmlcontenteditor.ts
var _HtmlContentEditor_decorators, _init79, _a32;
_HtmlContentEditor_decorators = [Decorators.registerEditor("Serenity.HtmlContentEditor", [IStringValue, IReadOnly])];
var _HtmlContentEditor = class _HtmlContentEditor extends (_a32 = EditorWidget) {
  static createDefaultElement() {
    return document.createElement("textarea");
  }
  constructor(props) {
    var _a68, _b;
    super(props);
    this._instanceReady = false;
    let textArea = this.domNode;
    var id = textArea.getAttribute("id");
    if (isTrimmedEmpty(id)) {
      textArea.setAttribute("id", this.uniqueName);
      id = this.uniqueName;
    }
    if (this.options.cols != null)
      textArea.setAttribute("cols", "" + ((_a68 = this.options.cols) != null ? _a68 : 0));
    if (this.options.rows != null)
      textArea.setAttribute("rows", "" + ((_b = this.options.rows) != null ? _b : 0));
    this.addValidationRule(this.uniqueName, (input) => {
      var _a69;
      if (input.classList.contains("required")) {
        if (!((_a69 = this.get_value()) == null ? void 0 : _a69.trim()))
          return localText("Validation.Required");
      }
      return null;
    });
    _HtmlContentEditor.includeCKEditor(() => {
      LazyLoadHelper.executeOnceWhenShown(this.domNode, () => {
        var config = this.getConfig();
        window["CKEDITOR"] && window["CKEDITOR"].replace(id, config);
      });
    });
  }
  instanceReady(x) {
    this._instanceReady = true;
    this.domNode.classList.forEach((clss) => {
      var _a68;
      (_a68 = x.editor.container.$) == null ? void 0 : _a68.classList.add(clss);
    });
    this.domNode.classList.add("select2-offscreen");
    this.domNode.style.display = "block";
    x.editor.setData(this.domNode.value);
    x.editor.setReadOnly(this.get_readOnly());
  }
  getLanguage() {
    var _a68;
    if (!window["CKEDITOR"])
      return "en";
    var CKEDITOR = window["CKEDITOR"];
    var lang = ((_a68 = document.documentElement.getAttribute("lang")) == null ? void 0 : _a68.trim()) || "en";
    if (!!CKEDITOR.lang.languages[lang]) {
      return lang;
    }
    if (lang.indexOf(String.fromCharCode(45)) >= 0) {
      lang = lang.split(String.fromCharCode(45))[0];
    }
    if (!!CKEDITOR.lang.languages[lang]) {
      return lang;
    }
    return "en";
  }
  getConfig() {
    return {
      customConfig: "",
      language: this.getLanguage(),
      bodyClass: "s-HtmlContentBody",
      versionCheck: false,
      on: {
        instanceReady: (x) => this.instanceReady(x),
        change: (x1) => {
          x1.editor.updateElement();
          Fluent.trigger(this.domNode, "change");
        }
      },
      toolbarGroups: [
        {
          name: "clipboard",
          groups: ["clipboard", "undo"]
        },
        {
          name: "editing",
          groups: ["find", "selection", "spellchecker"]
        },
        {
          name: "insert",
          groups: ["links", "insert", "blocks", "bidi", "list", "indent"]
        },
        {
          name: "forms",
          groups: ["forms", "mode", "document", "doctools", "others", "about", "tools"]
        },
        {
          name: "colors"
        },
        {
          name: "basicstyles",
          groups: ["basicstyles", "cleanup"]
        },
        {
          name: "align"
        },
        {
          name: "styles"
        }
      ],
      removeButtons: "SpecialChar,Anchor,Subscript,Styles",
      format_tags: "p;h1;h2;h3;pre",
      removeDialogTabs: "image:advanced;link:advanced",
      removePlugins: "uploadimage,image2",
      contentsCss: resolveUrl("~/Content/site/site.htmlcontent.css"),
      entities: false,
      entities_latin: false,
      entities_greek: false,
      autoUpdateElement: true,
      height: this.options.rows == null || this.options.rows === 0 ? null : this.options.rows * 20 + "px"
    };
  }
  getEditorInstance() {
    var _a68, _b;
    var id = this.domNode.getAttribute("id");
    return (_b = (_a68 = window["CKEDITOR"]) == null ? void 0 : _a68.instances) == null ? void 0 : _b[id];
  }
  destroy() {
    var instance = this.getEditorInstance();
    instance && instance.destroy(true);
    super.destroy();
  }
  get_value() {
    var instance = this.getEditorInstance();
    if (this._instanceReady && instance) {
      return instance.getData();
    } else {
      return this.domNode.value;
    }
  }
  get value() {
    return this.get_value();
  }
  set_value(value) {
    var instance = this.getEditorInstance();
    this.domNode.value = value != null ? value : "";
    if (this._instanceReady && instance)
      instance.setData(value != null ? value : "");
  }
  set value(v) {
    this.set_value(v);
  }
  get_readOnly() {
    return !!this.domNode.getAttribute("disabled");
  }
  set_readOnly(value) {
    if (this.get_readOnly() !== value) {
      if (value) {
        this.domNode.setAttribute("disabled", "disabled");
      } else {
        this.domNode.removeAttribute("disabled");
      }
      var instance = this.getEditorInstance();
      if (this._instanceReady && instance)
        instance.setReadOnly(value);
    }
  }
  static getCKEditorBasePath() {
    var path = _HtmlContentEditor.CKEditorBasePath;
    if (path == null) {
      if (typeof CKEDITOR_BASEPATH !== "undefined" && CKEDITOR_BASEPATH)
        path = CKEDITOR_BASEPATH;
      else
        return "~/Serenity.Assets/Scripts/ckeditor/";
    }
    if (path.endsWith("/"))
      return path;
    return path + "/";
  }
  static includeCKEditor(then) {
    if (window["CKEDITOR"]) {
      return then();
    }
    var script = document.querySelector("#CKEditorScript");
    if (script) {
      return script.addEventListener("load", then);
    }
    Fluent("script").attr("type", "text/javascript").attr("id", "CKEditorScript").on("load", then).attr("async", "false").attr("src", resolveUrl(_HtmlContentEditor.getCKEditorBasePath() + "ckeditor.js?v=" + _HtmlContentEditor.CKEditorVer)).appendTo(document.head);
  }
};
_init79 = __decoratorStart(_a32);
_HtmlContentEditor = __decorateElement(_init79, 0, "HtmlContentEditor", _HtmlContentEditor_decorators, _HtmlContentEditor);
_HtmlContentEditor.CKEditorVer = "4.22.1";
__runInitializers(_init79, 1, _HtmlContentEditor);
var HtmlContentEditor = _HtmlContentEditor;
var _HtmlNoteContentEditor_decorators, _init80, _a33;
_HtmlNoteContentEditor_decorators = [Decorators.registerEditor("Serenity.HtmlNoteContentEditor")];
var HtmlNoteContentEditor = class extends (_a33 = HtmlContentEditor) {
  getConfig() {
    var config = super.getConfig();
    config.removeButtons += ",Cut,Copy,Paste,BulletedList,NumberedList,Indent,Outdent,SpecialChar,Subscript,Superscript,Styles,PasteText,PasteFromWord,Strike,Link,Unlink,CreatePlaceholder,Image,Table,HorizontalRule,Source,Maximize,Format,Font,FontSize,Anchor,Blockquote,CreatePlaceholder,BGColor,JustifyLeft,JustifyCenter,JustifyRight,JustifyBlock,Superscript,RemoveFormat";
    config.removePlugins = "elementspath,uploadimage,image2";
    return config;
  }
};
_init80 = __decoratorStart(_a33);
HtmlNoteContentEditor = __decorateElement(_init80, 0, "HtmlNoteContentEditor", _HtmlNoteContentEditor_decorators, HtmlNoteContentEditor);
__runInitializers(_init80, 1, HtmlNoteContentEditor);
var _HtmlReportContentEditor_decorators, _init81, _a34;
_HtmlReportContentEditor_decorators = [Decorators.registerEditor("Serenity.HtmlReportContentEditor")];
var HtmlReportContentEditor = class extends (_a34 = HtmlContentEditor) {
  getConfig() {
    var config = super.getConfig();
    config.removeButtons += ",Cut,Copy,Paste,BulletedList,NumberedList,Indent,Outdent,SpecialChar,Subscript,Superscript,Styles,PasteText,PasteFromWord,Strike,Link,Unlink,CreatePlaceholder,Image,Table,HorizontalRule,Source,Maximize,Format,Font,FontSize,Anchor,Blockquote,CreatePlaceholder,BGColor,JustifyLeft,JustifyCenter,JustifyRight,JustifyBlock,Superscript,RemoveFormat";
    config.removePlugins = "elementspath,uploadimage,image2";
    return config;
  }
};
_init81 = __decoratorStart(_a34);
HtmlReportContentEditor = __decorateElement(_init81, 0, "HtmlReportContentEditor", _HtmlReportContentEditor_decorators, HtmlReportContentEditor);
__runInitializers(_init81, 1, HtmlReportContentEditor);

// src/ui/editors/maskededitor.ts
var _MaskedEditor_decorators, _init82, _a35;
_MaskedEditor_decorators = [Decorators.registerEditor("Serenity.MaskedEditor", [IStringValue])];
var MaskedEditor = class extends (_a35 = EditorWidget) {
  static createDefaultElement() {
    return Fluent("input").attr("type", "text").getNode();
  }
  constructor(props) {
    var _a68, _b;
    super(props);
    let $2 = getjQuery();
    if ((_a68 = $2 == null ? void 0 : $2.fn) == null ? void 0 : _a68.mask) {
      $2(this.domNode).mask(this.options.mask || "", {
        placeholder: (_b = this.options.placeholder) != null ? _b : "_"
      });
    } else {
      notifyError('MaskedInput requires jQuery masked input plugin ("~/Serenity.Assets/Scripts/jquery.maskedinput.js") to be loaded in the page along with jQuery!');
    }
  }
  get value() {
    Fluent.trigger(this.domNode, "blur.mask");
    return this.domNode.value;
  }
  get_value() {
    return this.value;
  }
  set value(value) {
    this.domNode.value = value;
  }
  set_value(value) {
    this.value = value;
  }
};
_init82 = __decoratorStart(_a35);
MaskedEditor = __decorateElement(_init82, 0, "MaskedEditor", _MaskedEditor_decorators, MaskedEditor);
__runInitializers(_init82, 1, MaskedEditor);

// src/ui/editors/recaptcha.ts
var _Recaptcha_decorators, _init83, _a36;
_Recaptcha_decorators = [Decorators.registerEditor("Serenity.Recaptcha", [IStringValue])];
var Recaptcha = class extends (_a36 = EditorWidget) {
  constructor(props) {
    var _a68;
    super(props);
    this.domNode.classList.add("g-recaptcha");
    this.domNode.setAttribute("data-sitekey", this.options.siteKey);
    if (!!(window["grecaptcha"] == null && !document.querySelector("script#RecaptchaInclude"))) {
      var src = "https://www.google.com/recaptcha/api.js";
      var lng = this.options.language;
      if (lng == null) {
        lng = (_a68 = document.documentElement.getAttribute("lang")) != null ? _a68 : "";
      }
      src += "?hl=" + lng;
      var script = document.createElement("script");
      script.setAttribute("id", "RecaptchaInclude");
      script.setAttribute("src", src);
      document.head.append(script);
    }
    var valInput = document.createElement("input");
    Fluent(valInput).insertBefore(this.domNode);
    valInput.setAttribute("id", this.uniqueName + "_validate");
    valInput.value = "x";
    valInput.style.visibility = "hidden";
    valInput.style.width = "0px";
    valInput.style.height = "0px";
    valInput.style.padding = "0px";
    addValidationRule(valInput, (e) => {
      if (!this.get_value()) {
        return localText("Validation.Required");
      }
      return null;
    }, this.uniqueName);
  }
  get_value() {
    return this.domNode.querySelector(".g-recaptcha-response").value;
  }
  set_value(value) {
  }
};
_init83 = __decoratorStart(_a36);
Recaptcha = __decorateElement(_init83, 0, "Recaptcha", _Recaptcha_decorators, Recaptcha);
__runInitializers(_init83, 1, Recaptcha);

// src/ui/helpers/uploadhelper.ts
var UploadHelper;
((UploadHelper2) => {
  function addUploadInput(options) {
    var _a68, _b;
    let container = isArrayLike(options.container) ? options.container[0] : options.container;
    let progress = Fluent(isArrayLike(options.progress) ? options.progress[0] : options.progress);
    var button = (_b = (_a68 = container.closest(".tool-button")) != null ? _a68 : container.closest("button")) != null ? _b : container;
    button.classList.add("fileinput-button");
    var uploadUrl = options.uploadUrl || "~/File/TemporaryUpload";
    if (options.uploadIntent) {
      if (uploadUrl.indexOf("?") < 0)
        uploadUrl += "?";
      else
        uploadUrl += "&";
      uploadUrl += "uploadIntent=";
      uploadUrl += encodeURIComponent(options.uploadIntent);
    }
    var uploadInput = Fluent("input").attr("type", "file").attr("name", options.inputName + "[]").attr("data-url", resolveUrl(uploadUrl)).appendTo(container);
    if (options.allowMultiple) {
      uploadInput.attr("multiple", "multiple");
    }
    const setProgress = (percent) => {
      let bar = progress.children()[0];
      bar && (bar.style.width = (percent != null ? percent : 0).toString() + "%");
    };
    new Uploader({
      batchSize: 1,
      batchSuccess: (data) => {
        var _a69, _b2, _c, _d;
        const response = (_a69 = data.response) != null ? _a69 : {};
        if (response == null ? void 0 : response.Error) {
          notifyError(response.Error.Message);
          return;
        }
        (_d = options.fileDone) == null ? void 0 : _d.call(options, response, (_c = (_b2 = data.batch) == null ? void 0 : _b2.filePaths) == null ? void 0 : _c[0], data);
      },
      input: uploadInput.getNode(),
      dropZone: options.zone,
      batchStart: () => {
        blockUI(null);
        progress.show();
        setProgress(0);
      },
      batchStop: () => {
        blockUndo();
        setProgress(100);
        progress.hide();
      },
      batchProgress: (data) => {
        if (typeof data.loaded == "number" && data.total > 0) {
          var percent = data.loaded / data.total * 100;
          setProgress(percent);
        }
      }
    });
    return uploadInput;
  }
  UploadHelper2.addUploadInput = addUploadInput;
  function checkImageConstraints(file, opt) {
    if (!file.IsImage && !opt.allowNonImage) {
      notifyError(localText("Controls.ImageUpload.NotAnImageFile"));
      return false;
    }
    if (opt.minSize > 0 && file.Size < opt.minSize) {
      notifyError(stringFormat(
        localText("Controls.ImageUpload.UploadFileTooSmall"),
        fileSizeDisplay(opt.minSize)
      ));
      return false;
    }
    if (opt.maxSize > 0 && file.Size > opt.maxSize) {
      notifyError(stringFormat(
        localText("Controls.ImageUpload.UploadFileTooBig"),
        fileSizeDisplay(opt.maxSize)
      ));
      return false;
    }
    if (!file.IsImage) {
      return true;
    }
    if (opt.minWidth > 0 && file.Width < opt.minWidth) {
      notifyError(stringFormat(localText("Controls.ImageUpload.MinWidth"), opt.minWidth));
      return false;
    }
    if (opt.maxWidth > 0 && file.Width > opt.maxWidth) {
      notifyError(stringFormat(localText("Controls.ImageUpload.MaxWidth"), opt.maxWidth));
      return false;
    }
    if (opt.minHeight > 0 && file.Height < opt.minHeight) {
      notifyError(stringFormat(localText("Controls.ImageUpload.MinHeight"), opt.minHeight));
      return false;
    }
    if (opt.maxHeight > 0 && file.Height > opt.maxHeight) {
      notifyError(stringFormat(localText("Controls.ImageUpload.MaxHeight"), opt.maxHeight));
      return false;
    }
    return true;
  }
  UploadHelper2.checkImageConstraints = checkImageConstraints;
  function fileNameSizeDisplay(name, bytes) {
    return name + " (" + fileSizeDisplay(bytes) + ")";
  }
  UploadHelper2.fileNameSizeDisplay = fileNameSizeDisplay;
  function fileSizeDisplay(bytes) {
    var byteSize = round(bytes * 100 / 1024) * 0.01;
    var suffix = "KB";
    if (byteSize >= 1024) {
      byteSize = round(byteSize * 100 / 1024) * 0.01;
      suffix = "MB";
    }
    var sizeParts = byteSize.toString().split(String.fromCharCode(46));
    var value;
    if (sizeParts.length > 1) {
      value = sizeParts[0] + "." + sizeParts[1].substr(0, 2);
    } else {
      value = sizeParts[0];
    }
    return value + " " + suffix;
  }
  UploadHelper2.fileSizeDisplay = fileSizeDisplay;
  function hasImageExtension(filename) {
    if (!filename) {
      return false;
    }
    filename = filename.toLowerCase();
    return filename.endsWith(".jpg") || filename.endsWith(".jpeg") || filename.endsWith(".gif") || filename.endsWith(".png") || filename.endsWith(".webp");
  }
  UploadHelper2.hasImageExtension = hasImageExtension;
  function thumbFileName(filename) {
    filename = filename != null ? filename : "";
    var idx = filename.lastIndexOf(".");
    if (idx >= 0) {
      filename = filename.substr(0, idx);
    }
    return filename + "_t.jpg";
  }
  UploadHelper2.thumbFileName = thumbFileName;
  function dbFileUrl(filename) {
    filename = replaceAll(filename != null ? filename : "", "\\", "/");
    return resolveUrl("~/upload/") + filename;
  }
  UploadHelper2.dbFileUrl = dbFileUrl;
  function colorBox(link, options) {
    var _a68, _b;
    link = isArrayLike(link) ? link[0] : link;
    if (!link)
      return;
    let $2 = getjQuery();
    if (!$2)
      return;
    (_b = (_a68 = $2(link)).colorbox) == null ? void 0 : _b.call(_a68, {
      current: htmlEncode(localText("Controls.ImageUpload.ColorboxCurrent")),
      previous: htmlEncode(localText("Controls.ImageUpload.ColorboxPrior")),
      next: htmlEncode(localText("Controls.ImageUpload.ColorboxNext")),
      close: htmlEncode(localText("Controls.ImageUpload.ColorboxClose"))
    });
  }
  UploadHelper2.colorBox = colorBox;
  function populateFileSymbols(c, items, displayOriginalName, urlPrefix) {
    var _a68;
    let container = isArrayLike(c) ? c[0] : c;
    if (!container)
      return;
    items = items || [];
    container.innerHTML = "";
    for (var index = 0; index < items.length; index++) {
      var item = items[index];
      var li = Fluent("li").class("file-item").data("index", index.toString());
      var isImage = hasImageExtension(item.Filename);
      if (isImage) {
        li.addClass("file-image");
      } else {
        li.addClass("file-binary");
      }
      var thumb = Fluent("a").class("thumb").appendTo(li);
      var originalName = (_a68 = item.OriginalName) != null ? _a68 : "";
      var fileName = item.Filename;
      if (urlPrefix != null && fileName != null && !fileName.startsWith("temporary/")) {
        fileName = urlPrefix + fileName;
      }
      thumb.attr("href", dbFileUrl(fileName));
      thumb.attr("target", "_blank");
      if (originalName) {
        thumb.attr("title", originalName);
      }
      if (isImage) {
        thumb.getNode().style.backgroundImage = "url('" + dbFileUrl(thumbFileName(item.Filename)) + "')";
        colorBox(thumb, new Object());
      }
      if (displayOriginalName) {
        Fluent("div").class("filename").text(originalName).attr("title", originalName).appendTo(li);
      }
      li.appendTo(container);
    }
  }
  UploadHelper2.populateFileSymbols = populateFileSymbols;
})(UploadHelper || (UploadHelper = {}));

// src/ui/editors/uploadeditors.ts
var _FileUploadEditor_decorators, _init84, _a37;
_FileUploadEditor_decorators = [Decorators.registerEditor("Serenity.FileUploadEditor", [IReadOnly, IGetEditValue, ISetEditValue, IValidateRequired])];
var FileUploadEditor = class extends (_a37 = EditorWidget) {
  constructor(props) {
    super(props);
    if (!this.options || this.options.allowNonImage == null)
      this.options.allowNonImage = true;
    this.domNode.classList.add("s-FileUploadEditor");
    if (!this.options.originalNameProperty)
      this.domNode.classList.add("hide-original-name");
    this.toolbar = new Toolbar({
      buttons: this.getToolButtons(),
      element: (el) => this.domNode.appendChild(el)
    });
    this.progress = Fluent("div").class("upload-progress").append(Fluent("div")).prependTo(this.toolbar.domNode);
    var uio = this.getUploadInputOptions();
    this.uploadInput = UploadHelper.addUploadInput(uio);
    if (this.options.readOnly)
      this.set_readOnly(true);
    this.fileSymbols = Fluent("ul").appendTo(this.domNode);
    if (!this.domNode.getAttribute("id"))
      this.domNode.setAttribute("id", this.uniqueName);
    this.hiddenInput = Fluent("input").class("s-offscreen").attr("type", "text").attr("name", this.uniqueName + "_Validator").data("vx-highlight", this.domNode.getAttribute("id")).appendTo(this.domNode);
    this.updateInterface();
  }
  getUploadInputOptions() {
    return {
      container: this.toolbar.findButton("add-file-button"),
      zone: this.domNode,
      inputName: this.uniqueName,
      progress: this.progress,
      uploadIntent: this.options.uploadIntent,
      uploadUrl: this.options.uploadUrl,
      fileDone: (response, name, data) => {
        if (!UploadHelper.checkImageConstraints(response, this.options)) {
          return;
        }
        var newEntity = {
          OriginalName: name,
          Filename: response.TemporaryFile
        };
        this.entity = newEntity;
        this.populate();
        this.updateInterface();
        ValidationHelper.validateElement(this.hiddenInput);
      }
    };
  }
  addFileButtonText() {
    return localText("Controls.ImageUpload.AddFileButton");
  }
  getToolButtons() {
    return [
      {
        title: this.addFileButtonText(),
        action: "add-file",
        cssClass: "add-file-button",
        onClick: function() {
        }
      },
      {
        title: "",
        hint: localText("Controls.ImageUpload.DeleteButtonHint"),
        action: "delete",
        cssClass: "delete-button",
        onClick: () => {
          this.entity = null;
          this.populate();
          this.updateInterface();
          ValidationHelper.validateElement(this.hiddenInput);
        }
      }
    ];
  }
  populate() {
    var _a68;
    var displayOriginalName = this.options.displayFileName || !isTrimmedEmpty(this.options.originalNameProperty);
    if (this.entity == null) {
      UploadHelper.populateFileSymbols(
        this.fileSymbols,
        null,
        displayOriginalName,
        this.options.urlPrefix
      );
    } else {
      UploadHelper.populateFileSymbols(
        this.fileSymbols,
        [this.entity],
        displayOriginalName,
        this.options.urlPrefix
      );
    }
    this.hiddenInput.val(((_a68 = (this.get_value() || {}).Filename) == null ? void 0 : _a68.trim()) || null);
  }
  updateInterface() {
    var addButton = this.toolbar.findButton("add-file-button");
    var delButton = this.toolbar.findButton("delete-button");
    addButton.toggleClass("disabled", this.get_readOnly());
    delButton.toggleClass("disabled", this.get_readOnly() || this.entity == null);
  }
  get_readOnly() {
    return this.uploadInput.attr("disabled") != null;
  }
  set_readOnly(value) {
    var _a68, _b, _c, _d;
    if (this.get_readOnly() !== value) {
      let $2 = getjQuery();
      if (value) {
        this.uploadInput.attr("disabled", "disabled");
        try {
          $2 && ((_b = (_a68 = $2(this.uploadInput)).fileupload) == null ? void 0 : _b.call(_a68, "disable"));
        } catch (e) {
        }
      } else {
        this.uploadInput.removeAttr("disabled");
        try {
          $2 && ((_d = (_c = $2(this.uploadInput)).fileupload) == null ? void 0 : _d.call(_c, "enable"));
        } catch (e) {
        }
      }
      this.updateInterface();
    }
  }
  get_required() {
    return this.hiddenInput.hasClass("required");
  }
  set_required(value) {
    this.hiddenInput.toggleClass("required", !!value);
  }
  get_value() {
    if (this.entity == null) {
      return null;
    }
    var copy = extend({}, this.entity);
    return copy;
  }
  get value() {
    return this.get_value();
  }
  set_value(value) {
    var _a68;
    if (typeof value === "string") {
      var stringValue = value.trim();
      if (stringValue) {
        var idx = stringValue.indexOf("/");
        if (idx < 0)
          idx = stringValue.indexOf("\\");
        value = {
          Filename: value,
          OriginalName: stringValue.substring(idx + 1)
        };
      } else
        value = null;
    } else if (!((_a68 = value == null ? void 0 : value.Filename) == null ? void 0 : _a68.trim()))
      value = null;
    if (value != null) {
      if (value.Filename == null) {
        this.entity = null;
      } else {
        this.entity = extend({}, value);
      }
    } else {
      this.entity = null;
    }
    this.populate();
    ValidationHelper.validateElement(this.hiddenInput);
    this.updateInterface();
  }
  set value(v) {
    this.set_value(v);
  }
  getEditValue(property, target) {
    var _a68, _b;
    target[property.name] = ((_b = (_a68 = this.entity) == null ? void 0 : _a68.Filename) == null ? void 0 : _b.trim()) || null;
  }
  setEditValue(source, property) {
    var _a68;
    var value = {};
    value.Filename = source[property.name];
    if (!this.options.originalNameProperty) {
      if (this.options.displayFileName) {
        var s = (_a68 = value.Filename) != null ? _a68 : "";
        var idx = replaceAll(s, "\\", "/").lastIndexOf("/");
        if (idx >= 0) {
          value.OriginalName = s.substr(idx + 1);
        } else {
          value.OriginalName = s;
        }
      }
    } else {
      value.OriginalName = source[this.options.originalNameProperty];
    }
    this.set_value(value);
  }
};
_init84 = __decoratorStart(_a37);
FileUploadEditor = __decorateElement(_init84, 0, "FileUploadEditor", _FileUploadEditor_decorators, FileUploadEditor);
__runInitializers(_init84, 1, FileUploadEditor);
var _ImageUploadEditor_decorators, _init85, _a38;
_ImageUploadEditor_decorators = [Decorators.registerEditor("Serenity.ImageUploadEditor")];
var ImageUploadEditor = class extends (_a38 = FileUploadEditor) {
  constructor(props) {
    super(props);
    if (this.options.allowNonImage == null)
      this.options.allowNonImage = false;
    this.domNode.classList.add("s-ImageUploadEditor'");
  }
};
_init85 = __decoratorStart(_a38);
ImageUploadEditor = __decorateElement(_init85, 0, "ImageUploadEditor", _ImageUploadEditor_decorators, ImageUploadEditor);
__runInitializers(_init85, 1, ImageUploadEditor);
var _MultipleFileUploadEditor_decorators, _init86, _a39;
_MultipleFileUploadEditor_decorators = [Decorators.registerEditor("Serenity.MultipleFileUploadEditor", [IReadOnly, IGetEditValue, ISetEditValue, IValidateRequired])];
var MultipleFileUploadEditor = class extends (_a39 = EditorWidget) {
  constructor(props) {
    super(props);
    this.entities = [];
    this.domNode.classList.add("s-MultipleFileUploadEditor");
    this.toolbar = new Toolbar({
      buttons: this.getToolButtons(),
      element: (el) => this.domNode.append(el)
    });
    this.progress = Fluent("div").append(Fluent("div")).class("upload-progress").prependTo(this.toolbar.domNode);
    this.uploadInput = UploadHelper.addUploadInput(this.getUploadInputOptions());
    this.fileSymbols = Fluent("ul").appendTo(this.domNode);
    if (!this.domNode.getAttribute("id")) {
      this.domNode.setAttribute("id", this.uniqueName);
    }
    this.hiddenInput = Fluent("input").class("s-offscreen").attr("type", "text").attr("name", this.uniqueName + "_Validator").data("vx-highlight", this.domNode.getAttribute("id")).attr("multiple", "multiple").appendTo(this.domNode);
    this.updateInterface();
  }
  getUploadInputOptions() {
    var addFileButton = this.toolbar.findButton("add-file-button");
    return {
      container: addFileButton,
      zone: this.domNode,
      inputName: this.uniqueName,
      progress: this.progress,
      uploadIntent: this.options.uploadIntent,
      uploadUrl: this.options.uploadUrl,
      allowMultiple: true,
      fileDone: (response, name) => {
        if (!UploadHelper.checkImageConstraints(response, this.options)) {
          return;
        }
        var newEntity = { OriginalName: name, Filename: response.TemporaryFile };
        this.entities.push(newEntity);
        this.populate();
        ValidationHelper.validateElement(this.hiddenInput);
        this.updateInterface();
      }
    };
  }
  addFileButtonText() {
    return localText("Controls.ImageUpload.AddFileButton");
  }
  getToolButtons() {
    return [{
      title: this.addFileButtonText(),
      action: "add-file",
      cssClass: "add-file-button",
      onClick: function() {
      }
    }];
  }
  populate() {
    var _a68;
    UploadHelper.populateFileSymbols(
      this.fileSymbols,
      this.entities,
      true,
      this.options.urlPrefix
    );
    this.fileSymbols.children().forEach((e, i) => {
      var x = i;
      Fluent("a").class("delete").appendTo(Fluent(e).children().find((x2) => x2.matches(".filename"))).on("click", (ev) => {
        ev.preventDefault();
        this.entities.splice(x, 1);
        this.populate();
        ValidationHelper.validateElement(this.hiddenInput);
      });
    });
    this.hiddenInput.val(((_a68 = this.get_value()[0]) == null ? void 0 : _a68.Filename) || null);
  }
  updateInterface() {
    var addButton = this.toolbar.findButton("add-file-button");
    addButton.toggleClass("disabled", this.get_readOnly());
    this.fileSymbols.findEach("a.delete", (x) => x.toggle(!this.get_readOnly()));
  }
  get_readOnly() {
    return this.uploadInput.attr("disabled") != null;
  }
  set_readOnly(value) {
    var _a68, _b, _c;
    if (this.get_readOnly() !== value) {
      let $2 = getjQuery();
      if (value) {
        this.uploadInput.attr("disabled", "disabled");
        try {
          $2 && ((_b = (_a68 = $2(this.uploadInput)).fileupload) == null ? void 0 : _b.call(_a68, "disable"));
        } catch (e) {
        }
      } else {
        this.uploadInput.removeAttr("disabled");
        try {
          $2 && ((_c = $2(this.uploadInput)) == null ? void 0 : _c.fileupload("enable"));
        } catch (e) {
        }
      }
      this.updateInterface();
    }
  }
  get_required() {
    return this.hiddenInput.hasClass("required");
  }
  set_required(value) {
    this.hiddenInput && this.hiddenInput.toggleClass("required", !!value);
  }
  get_value() {
    return this.entities.map(function(x) {
      return extend({}, x);
    });
  }
  get value() {
    return this.get_value();
  }
  set_value(value) {
    this.entities = (value || []).map(function(x) {
      return extend({}, x);
    });
    this.populate();
    this.updateInterface();
  }
  set value(v) {
    this.set_value(v);
  }
  getEditValue(property, target) {
    if (this.jsonEncodeValue) {
      target[property.name] = JSON.stringify(this.get_value());
    } else {
      target[property.name] = this.get_value();
    }
  }
  setEditValue(source, property) {
    var val = source[property.name];
    if (typeof val == "string") {
      var json = val.trim();
      if (json.startsWith("[") && json.endsWith("]")) {
        this.set_value(JSON.parse(json));
      } else {
        this.set_value([{
          Filename: json,
          OriginalName: "UnknownFile"
        }]);
      }
    } else {
      this.set_value(val);
    }
  }
  get jsonEncodeValue() {
    return this.options.jsonEncodeValue;
  }
  set jsonEncodeValue(value) {
    this.options.jsonEncodeValue = value;
  }
};
_init86 = __decoratorStart(_a39);
MultipleFileUploadEditor = __decorateElement(_init86, 0, "MultipleFileUploadEditor", _MultipleFileUploadEditor_decorators, MultipleFileUploadEditor);
__runInitializers(_init86, 1, MultipleFileUploadEditor);
var _MultipleImageUploadEditor_decorators, _init87, _a40;
_MultipleImageUploadEditor_decorators = [Decorators.registerEditor("Serenity.MultipleImageUploadEditor")];
var MultipleImageUploadEditor = class extends (_a40 = MultipleFileUploadEditor) {
  constructor(props) {
    super(props);
    this.domNode.classList.add("s-MultipleImageUploadEditor'");
  }
};
_init87 = __decoratorStart(_a40);
MultipleImageUploadEditor = __decorateElement(_init87, 0, "MultipleImageUploadEditor", _MultipleImageUploadEditor_decorators, MultipleImageUploadEditor);
__runInitializers(_init87, 1, MultipleImageUploadEditor);

// src/ui/filtering/filterstore.ts
var _FilterStore_decorators, _init88;
_FilterStore_decorators = [Decorators.registerClass("Serenity.FilterStore")];
var _FilterStore = class _FilterStore {
  constructor(fields) {
    this.items = [];
    if (fields == null) {
      throw new ArgumentNullException("source");
    }
    this.fields = fields.slice();
    this.get_fields().sort(function(x, y) {
      var titleX = tryGetText(x.title);
      if (titleX == null) {
        titleX = x.title;
        if (titleX == null)
          titleX = x.name;
      }
      var titleY = tryGetText(y.title);
      if (titleY == null) {
        titleY = y.title;
        if (titleY == null)
          titleY = y.name;
      }
      return Culture.stringCompare(titleX, titleY);
    });
    this.fieldByName = {};
    for (var field of fields) {
      this.get_fieldByName()[field.name] = field;
    }
  }
  static getCriteriaFor(items) {
    if (items == null)
      return [""];
    var inParens = false;
    var currentBlock = [""];
    var isBlockOr = false;
    var criteria = [""];
    for (var i = 0; i < items.length; i++) {
      var line = items[i];
      if (line.leftParen || inParens && line.rightParen) {
        if (!Criteria.isEmpty(currentBlock)) {
          if (inParens)
            currentBlock = Criteria.paren(currentBlock);
          if (isBlockOr)
            criteria = Criteria.or(criteria, currentBlock);
          else
            criteria = Criteria.and(criteria, currentBlock);
          currentBlock = [""];
        }
        inParens = false;
      }
      if (line.leftParen) {
        isBlockOr = line.isOr;
        inParens = true;
      }
      if (line.isOr)
        currentBlock = Criteria.or(currentBlock, line.criteria);
      else
        currentBlock = Criteria.and(currentBlock, line.criteria);
    }
    if (!Criteria.isEmpty(currentBlock)) {
      if (isBlockOr)
        criteria = Criteria.or(criteria, Criteria.paren(currentBlock));
      else
        criteria = Criteria.and(criteria, Criteria.paren(currentBlock));
    }
    return criteria;
  }
  static getDisplayTextFor(items) {
    if (items == null)
      return "";
    var inParens = false;
    var displayText = "";
    for (var i = 0; i < items.length; i++) {
      var line = items[i];
      if (inParens && (line.rightParen || line.leftParen)) {
        displayText += ")";
        inParens = false;
      }
      if (displayText.length > 0) {
        displayText += " " + localText("Controls.FilterPanel." + (line.isOr ? "Or" : "And")) + " ";
      }
      if (line.leftParen) {
        displayText += "(";
        inParens = true;
      }
      displayText += line.displayText;
    }
    if (inParens) {
      displayText += ")";
    }
    return displayText;
  }
  get_fields() {
    return this.fields;
  }
  get_fieldByName() {
    return this.fieldByName;
  }
  get_items() {
    return this.items;
  }
  raiseChanged() {
    this.displayText = null;
    this.changed && this.changed(this, {});
  }
  add_changed(value) {
    this.changed = delegateCombine(this.changed, value);
  }
  remove_changed(value) {
    this.changed = delegateRemove(this.changed, value);
  }
  get_activeCriteria() {
    return _FilterStore.getCriteriaFor(this.items);
  }
  get_displayText() {
    if (this.displayText == null)
      this.displayText = _FilterStore.getDisplayTextFor(this.items);
    return this.displayText;
  }
};
_init88 = __decoratorStart(null);
_FilterStore = __decorateElement(_init88, 0, "FilterStore", _FilterStore_decorators, _FilterStore);
__runInitializers(_init88, 1, _FilterStore);
var FilterStore = _FilterStore;
var _mkdel = (targets) => {
  var delegate = function() {
    if (targets.length === 2) {
      return targets[1].apply(targets[0], arguments);
    } else {
      var clone = targets.slice();
      for (var i = 0; i < clone.length; i += 2) {
        if (delegateContains(targets, clone[i], clone[i + 1])) {
          clone[i + 1].apply(clone[i], arguments);
        }
      }
      return null;
    }
  };
  delegate._targets = targets;
  return delegate;
};
function delegateCombine(delegate1, delegate2) {
  if (!delegate1) {
    if (!delegate2._targets) {
      return delegate2;
    }
    return delegate2;
  }
  if (!delegate2) {
    if (!delegate1._targets) {
      return delegate1;
    }
    return delegate1;
  }
  var targets1 = delegate1._targets ? delegate1._targets : [null, delegate1];
  var targets2 = delegate2._targets ? delegate2._targets : [null, delegate2];
  return _mkdel(targets1.concat(targets2));
}
function delegateRemove(delegate1, delegate2) {
  if (!delegate1 || delegate1 === delegate2) {
    return null;
  }
  if (!delegate2) {
    return delegate1;
  }
  var targets = delegate1._targets;
  var object = null;
  var method;
  if (delegate2._targets) {
    object = delegate2._targets[0];
    method = delegate2._targets[1];
  } else {
    method = delegate2;
  }
  for (var i = 0; i < targets.length; i += 2) {
    if (targets[i] === object && targets[i + 1] === method) {
      if (targets.length === 2) {
        return null;
      }
      var t = targets.slice();
      t.splice(i, 2);
      return _mkdel(t);
    }
  }
  return delegate1;
}
function delegateContains(targets, object, method) {
  for (var i = 0; i < targets.length; i += 2) {
    if (targets[i] === object && targets[i + 1] === method) {
      return true;
    }
  }
  return false;
}

// src/ui/datagrid/quickfilterbar.ts
var _QuickFilterBar_decorators, _init89, _a41;
_QuickFilterBar_decorators = [Decorators.registerClass("Serenity.QuickFilterBar")];
var _QuickFilterBar = class _QuickFilterBar extends (_a41 = Widget) {
  constructor(props) {
    var _a68;
    super(props);
    this.domNode.classList.add("quick-filters-bar", "clear");
    var filters = this.options.filters;
    for (var f = 0; f < filters.length; f++) {
      var filter = filters[f];
      this.add(filter);
    }
    this.options.idPrefix = (_a68 = this.options.idPrefix) != null ? _a68 : this.uniqueName + "_";
  }
  addSeparator() {
    Fluent("hr").appendTo(this.domNode);
  }
  add(opt) {
    var _a68, _b;
    if (opt == null) {
      throw new ArgumentNullException("opt");
    }
    if (opt.separator) {
      this.addSeparator();
    }
    var quickFilter = Fluent("div").class("quick-filter-item").appendTo(this.domNode).data("qffield", opt.field);
    var title = (_a68 = tryGetText(opt.title)) != null ? _a68 : opt.title;
    if (title == null) {
      title = this.options.getTitle ? this.options.getTitle(opt) : null;
      if (title == null) {
        title = opt.field;
      }
    }
    Fluent("span").class("quick-filter-label").text(title).appendTo(quickFilter);
    var qfElement = quickFilter.getNode();
    if (opt.displayText != null) {
      qfElement.qfdisplaytext = opt.displayText;
    }
    if (opt.saveState != null) {
      qfElement.qfsavestate = opt.saveState;
    }
    if (opt.loadState != null) {
      qfElement.qfloadstate = opt.loadState;
    }
    if (opt.cssClass) {
      quickFilter.addClass(opt.cssClass);
    }
    var widget = Widget.create({
      type: opt.type,
      options: __spreadValues({
        element: (el) => {
          if (opt.field)
            el.setAttribute("id", this.options.idPrefix + opt.field);
          el.setAttribute("placeholder", " ");
          quickFilter.append(el);
          if (opt.element != null) {
            opt.element(Fluent(el));
          }
        }
      }, opt.options)
    });
    (_b = opt.init) == null ? void 0 : _b.call(opt, widget);
    var submitHandler = (request) => {
      if (quickFilter.hasClass("ignore")) {
        return;
      }
      request.EqualityFilter = request.EqualityFilter || {};
      var value = EditorUtils.getValue(widget);
      var active = !!(value == null ? void 0 : value.toString());
      if (opt.handler != null) {
        var args = {
          field: opt.field,
          request,
          equalityFilter: request.EqualityFilter,
          value,
          active,
          widget,
          handled: true
        };
        opt.handler(args);
        quickFilter.toggleClass("quick-filter-active", args.active);
        if (!args.handled) {
          request.EqualityFilter[opt.field] = value;
        }
      } else {
        request.EqualityFilter[opt.field] = value;
        quickFilter.toggleClass("quick-filter-active", active);
      }
    };
    widget.changeSelect2((e1) => {
      window.setTimeout(() => this.onChange && this.onChange(e1), 0);
    });
    this.add_submitHandlers(submitHandler);
    Fluent.on(widget.domNode, "cleanup." + this.uniqueName, (x) => {
      this.remove_submitHandlers(submitHandler);
    });
    return widget;
  }
  addDateRange(field, title) {
    return this.add(_QuickFilterBar.dateRange(field, title));
  }
  static dateRange(field, title) {
    var end = null;
    return {
      field,
      type: DateEditor,
      title,
      element: function(el) {
        end = new DateEditor({ element: (el2) => Fluent(el2).insertAfter(el) });
        Fluent.on(end.domNode, "change", () => el.trigger("change"));
        Fluent("span").class("range-separator").text("-").insertAfter(el);
      },
      handler: function(args) {
        var date1 = parseDate(args.widget.value);
        if (date1) {
          if (isNaN(date1.valueOf())) {
            notifyWarning(localText("Validation.DateInvalid"), "", null);
            args.widget.domNode.value = "";
            date1 = null;
          } else {
            args.request.Criteria = Criteria.and(
              args.request.Criteria,
              Criteria(args.field).ge(args.widget.value)
            );
          }
        }
        var date2 = parseDate(end.value);
        if (date2) {
          if (isNaN(date2 == null ? void 0 : date2.valueOf())) {
            notifyWarning(localText("Validation.DateInvalid"), "", null);
            end.domNode.value = "";
            date2 = null;
          } else {
            var next = new Date(end.valueAsDate.valueOf());
            next.setDate(next.getDate() + 1);
            args.request.Criteria = Criteria.and(
              args.request.Criteria,
              Criteria(args.field).lt(formatDate(next, "yyyy-MM-dd"))
            );
          }
        }
        args.active = !!(date1 || date2);
      },
      displayText: function(w, l) {
        var _a68;
        var v1 = EditorUtils.getDisplayText(w);
        var v2 = EditorUtils.getDisplayText(end);
        if (!v1 && !v2)
          return null;
        var text1 = l + " >= " + v1;
        var text2 = l + " <= " + v2;
        if (v1 && v2) {
          return text1 + " " + ((_a68 = tryGetText("Controls.FilterPanel.And")) != null ? _a68 : "and") + " " + text2;
        } else if (v1) {
          return text1;
        } else {
          return text2;
        }
      },
      saveState: function(w1) {
        return [EditorUtils.getValue(w1), EditorUtils.getValue(end)];
      },
      loadState: function(w2, state) {
        if (state == null || !Array.isArray(state) || state.length !== 2) {
          state = [null, null];
        }
        EditorUtils.setValue(w2, state[0]);
        EditorUtils.setValue(end, state[1]);
      }
    };
  }
  addDateTimeRange(field, title) {
    return this.add(_QuickFilterBar.dateTimeRange(field, title));
  }
  static dateTimeRange(field, title, useUtc) {
    var end = null;
    return {
      field,
      type: DateTimeEditor,
      title,
      element: function(el) {
        end = new DateTimeEditor({
          element: (el2) => Fluent(el2).insertAfter(el),
          useUtc: useUtc == null ? void 0 : useUtc
        });
        Fluent.on(end.domNode, ".change", () => el.trigger("change"));
        Fluent("span").class("range-separator").text("-").insertAfter(el);
      },
      init: function(w) {
        var _a68;
        Fluent.on((_a68 = w.domNode.parentElement) == null ? void 0 : _a68.querySelector(".time"), "change", () => Fluent.trigger(w.domNode, "change"));
      },
      handler: function(args) {
        var date1 = parseDate(args.widget.value);
        if (date1) {
          if (isNaN(date1 == null ? void 0 : date1.valueOf())) {
            notifyWarning(localText("Validation.DateInvalid"), "", null);
            args.widget.value = "";
            date1 = null;
          } else {
            args.request.Criteria = Criteria.and(
              args.request.Criteria,
              Criteria(args.field).ge(args.widget.value)
            );
          }
        }
        var date2 = parseDate(end.value);
        if (date2) {
          if (isNaN(date2 == null ? void 0 : date2.valueOf())) {
            notifyWarning(localText("Validation.DateInvalid"), "", null);
            end.value = "";
            date2 = null;
          } else {
            args.request.Criteria = Criteria.and(
              args.request.Criteria,
              Criteria(args.field).le(end.value)
            );
          }
        }
        args.active = !!(date1 || date2);
      },
      displayText: function(w, l) {
        var _a68;
        var v1 = EditorUtils.getDisplayText(w);
        var v2 = EditorUtils.getDisplayText(end);
        if (!v1 && !v2) {
          return null;
        }
        var text1 = l + " >= " + v1;
        var text2 = l + " <= " + v2;
        if (v1 && v2) {
          return text1 + " " + ((_a68 = tryGetText("Controls.FilterPanel.And")) != null ? _a68 : "and") + " " + text2;
        } else if (v1) {
          return text1;
        } else {
          return text2;
        }
      },
      saveState: function(w1) {
        return [EditorUtils.getValue(w1), EditorUtils.getValue(end)];
      },
      loadState: function(w2, state) {
        if (state == null || !Array.isArray(state) || state.length !== 2) {
          state = [null, null];
        }
        EditorUtils.setValue(w2, state[0]);
        EditorUtils.setValue(end, state[1]);
      },
      options: useUtc == null ? null : { useUtc }
    };
  }
  addBoolean(field, title, yes, no) {
    return this.add(_QuickFilterBar.boolean(field, title, yes, no));
  }
  static boolean(field, title, yes, no) {
    var opt = {};
    var items = [];
    var trueText = yes;
    if (trueText == null) {
      trueText = localText("Controls.FilterPanel.OperatorNames.true");
    }
    items.push(["1", trueText]);
    var falseText = no;
    if (falseText == null) {
      falseText = localText("Controls.FilterPanel.OperatorNames.false");
    }
    items.push(["0", falseText]);
    opt.items = items;
    return {
      field,
      type: SelectEditor,
      title,
      options: opt,
      handler: function(args) {
        var _a68;
        args.equalityFilter[args.field] = !((_a68 = args.value) == null ? void 0 : _a68.toString()) ? null : !!toId(args.value);
      }
    };
  }
  destroy() {
    this.submitHandlers = null;
    super.destroy();
  }
  onSubmit(request) {
    this.submitHandlers && this.submitHandlers(request);
  }
  add_submitHandlers(action) {
    this.submitHandlers = delegateCombine(this.submitHandlers, action);
  }
  remove_submitHandlers(action) {
    this.submitHandlers = delegateRemove(this.submitHandlers, action);
  }
  clear_submitHandlers() {
  }
  find(type, field) {
    var _a68, _b;
    const selector = "#" + this.options.idPrefix + field;
    return getWidgetFrom((_b = (_a68 = this.domNode) == null ? void 0 : _a68.querySelector(selector)) != null ? _b : selector, type);
  }
  tryFind(type, field) {
    var _a68, _b;
    const selector = "#" + this.options.idPrefix + field;
    return tryGetWidget((_b = (_a68 = this.domNode) == null ? void 0 : _a68.querySelector(selector)) != null ? _b : selector, type);
  }
};
_init89 = __decoratorStart(_a41);
_QuickFilterBar = __decorateElement(_init89, 0, "QuickFilterBar", _QuickFilterBar_decorators, _QuickFilterBar);
__runInitializers(_init89, 1, _QuickFilterBar);
var QuickFilterBar = _QuickFilterBar;

// src/ui/datagrid/quicksearchinput.ts
var _QuickSearchInput_decorators, _init90, _a42;
_QuickSearchInput_decorators = [Decorators.registerClass("Serenity.QuickSearchInput")];
var QuickSearchInput = class extends (_a42 = Widget) {
  static createDefaultElement() {
    return Fluent("input").attr("type", "text").getNode();
  }
  constructor(props) {
    var _a68, _b;
    super(props);
    this.domNode.setAttribute("title", localText("Controls.QuickSearch.Hint"));
    this.domNode.setAttribute("placeholder", localText("Controls.QuickSearch.Placeholder"));
    this.lastValue = ((_a68 = this.domNode.value) != null ? _a68 : "").trim();
    Fluent.on(this.domNode, "keyup." + this.uniqueName, this.checkIfValueChanged.bind(this));
    Fluent.on(this.domNode, "change." + this.uniqueName, this.checkIfValueChanged.bind(this));
    Fluent("span").class("quick-search-icon").append(Fluent("i")).insertBefore(this.domNode);
    if (((_b = this.options.fields) == null ? void 0 : _b.length) > 0) {
      var dropdown = Fluent("div").class("dropdown quick-search-field").insertBefore(this.domNode);
      this.fieldLink = Fluent("a").class(".quick-search-field-toggle").attr("title", localText("Controls.QuickSearch.FieldSelection")).data("bs-toggle", "dropdown").appendTo(dropdown).getNode();
      var menu = Fluent("ul").class("dropdown-menu").appendTo(dropdown);
      this.options.fields.forEach((item) => {
        var _a69;
        return Fluent("li").appendTo(menu).append(Fluent("a").class("dropdown-item").attr("href", "#").text((_a69 = item.title) != null ? _a69 : "").on("click", (e) => {
          e.preventDefault();
          this.fieldChanged = item !== this.field;
          this.field = item;
          this.updateInputPlaceHolder();
          this.checkIfValueChanged();
        }));
      });
      this.field = this.options.fields[0];
      this.updateInputPlaceHolder();
    }
    Fluent.on(this.domNode, "execute-search." + this.uniqueName, () => {
      var _a69;
      if (this.timer)
        window.clearTimeout(this.timer);
      this.searchNow(((_a69 = this.domNode.value) != null ? _a69 : "").trim());
    });
  }
  checkIfValueChanged() {
    var _a68;
    if (this.domNode.classList.contains("ignore-change")) {
      return;
    }
    var value = this.get_value();
    if (value == this.lastValue && (!this.fieldChanged || !value)) {
      this.fieldChanged = false;
      return;
    }
    this.fieldChanged = false;
    if (!!this.timer) {
      window.clearTimeout(this.timer);
    }
    var self2 = this;
    this.timer = window.setTimeout(function() {
      self2.searchNow(value);
    }, (_a68 = this.options.typeDelay) != null ? _a68 : 500);
    this.lastValue = value;
  }
  get_value() {
    var _a68;
    return ((_a68 = this.domNode.value) != null ? _a68 : "").trim();
  }
  get_field() {
    return this.field;
  }
  set_field(value) {
    if (this.field !== value) {
      this.fieldChanged = true;
      this.field = value;
      this.updateInputPlaceHolder();
      this.checkIfValueChanged();
    }
  }
  updateInputPlaceHolder() {
    var _a68, _b;
    this.fieldLink && (this.fieldLink.textContent = (_b = (_a68 = this.field) == null ? void 0 : _a68.title) != null ? _b : "");
  }
  restoreState(value, field) {
    this.fieldChanged = false;
    this.field = field;
    var value = (value != null ? value : "").trim();
    this.domNode.value = value;
    this.lastValue = value;
    if (!!this.timer) {
      window.clearTimeout(this.timer);
      this.timer = null;
    }
    this.updateInputPlaceHolder();
  }
  searchNow(value) {
    var _a68, _b, _c, _d, _e;
    (_b = this.domNode.parentElement) == null ? void 0 : _b.classList.toggle(
      (_a68 = this.options.filteredParentClass) != null ? _a68 : "s-QuickSearchFiltered",
      !!(value.length > 0)
    );
    let klass = (_c = this.options.loadingParentClass) != null ? _c : "s-QuickSearchLoading";
    this.domNode.classList.add(klass);
    (_d = this.domNode.parentElement) == null ? void 0 : _d.classList.add(klass);
    var done = (results) => {
      var _a69, _b2;
      this.domNode.classList.remove(klass);
      (_a69 = this.domNode.parentElement) == null ? void 0 : _a69.classList.remove(klass);
      if (!results) {
        var el = (_b2 = this.domNode.closest(".s-QuickSearchBar")) == null ? void 0 : _b2.querySelector(".quick-search-icon i");
        if (el) {
          el.classList.add("s-shake-effect");
          setTimeout(() => el.classList.remove("s-shake-effect"), 2e3);
        }
      }
    };
    if (this.options.onSearch != null) {
      this.options.onSearch((_e = this.field) == null ? void 0 : _e.name, value, done);
    } else {
      done(true);
    }
  }
};
_init90 = __decoratorStart(_a42);
QuickSearchInput = __decorateElement(_init90, 0, "QuickSearchInput", _QuickSearchInput_decorators, QuickSearchInput);
__runInitializers(_init90, 1, QuickSearchInput);

// src/ui/filtering/filteroperator.ts
var FilterOperators;
((FilterOperators2) => {
  FilterOperators2.isTrue = "true";
  FilterOperators2.isFalse = "false";
  FilterOperators2.contains = "contains";
  FilterOperators2.startsWith = "startswith";
  FilterOperators2.EQ = "eq";
  FilterOperators2.NE = "ne";
  FilterOperators2.GT = "gt";
  FilterOperators2.GE = "ge";
  FilterOperators2.LT = "lt";
  FilterOperators2.LE = "le";
  FilterOperators2.BW = "bw";
  FilterOperators2.IN = "in";
  FilterOperators2.isNull = "isnull";
  FilterOperators2.isNotNull = "isnotnull";
  FilterOperators2.toCriteriaOperator = {
    eq: "=",
    ne: "!=",
    gt: ">",
    ge: ">=",
    lt: "<",
    le: "<="
  };
})(FilterOperators || (FilterOperators = {}));

// src/ui/filtering/filtering.ts
var _IFiltering_decorators, _init91;
_IFiltering_decorators = [Decorators.registerInterface("Serenity.IFiltering")];
var IFiltering = class {
};
_init91 = __decoratorStart(null);
IFiltering = __decorateElement(_init91, 0, "IFiltering", _IFiltering_decorators, IFiltering);
__runInitializers(_init91, 1, IFiltering);
var _IQuickFiltering_decorators, _init92;
_IQuickFiltering_decorators = [Decorators.registerInterface("Serenity.IQuickFiltering")];
var IQuickFiltering = class {
};
_init92 = __decoratorStart(null);
IQuickFiltering = __decorateElement(_init92, 0, "IQuickFiltering", _IQuickFiltering_decorators, IQuickFiltering);
__runInitializers(_init92, 1, IQuickFiltering);
var _BaseFiltering_decorators, _init93;
_BaseFiltering_decorators = [Decorators.registerClass("Serenity.BaseFiltering", [IFiltering, IQuickFiltering])];
var BaseFiltering = class {
  get_field() {
    return this.field;
  }
  set_field(value) {
    this.field = value;
  }
  get_container() {
    return this.container;
  }
  set_container(value) {
    this.container = value;
  }
  get_operator() {
    return this.operator;
  }
  set_operator(value) {
    this.operator = value;
  }
  appendNullableOperators(list) {
    if (!this.isNullable()) {
      return list;
    }
    list.push({ key: FilterOperators.isNotNull });
    list.push({ key: FilterOperators.isNull });
    return list;
  }
  appendComparisonOperators(list) {
    list.push({ key: FilterOperators.EQ });
    list.push({ key: FilterOperators.NE });
    list.push({ key: FilterOperators.LT });
    list.push({ key: FilterOperators.LE });
    list.push({ key: FilterOperators.GT });
    list.push({ key: FilterOperators.GE });
    return list;
  }
  isNullable() {
    return this.get_field().required !== true;
  }
  createEditor() {
    switch (this.get_operator().key) {
      case "true":
      case "false":
      case "isnull":
      case "isnotnull": {
        return;
      }
      case "contains":
      case "startswith":
      case "eq":
      case "ne":
      case "lt":
      case "le":
      case "gt":
      case "ge": {
        Fluent(this.get_container()).empty().append(Fluent("input").attr("type", "text"));
        return;
      }
    }
    throw new Exception(stringFormat(
      "Filtering '{0}' has no editor for '{1}' operator",
      getTypeFullName(getInstanceType(this)),
      this.get_operator().key
    ));
  }
  operatorFormat(op) {
    var _a68, _b;
    return (_b = (_a68 = op.format) != null ? _a68 : tryGetText("Controls.FilterPanel.OperatorFormats." + op.key)) != null ? _b : op.key;
  }
  getTitle(field) {
    var _a68, _b;
    return (_b = tryGetText(field.title)) != null ? _b : (_a68 = field.title) != null ? _a68 : field.name;
  }
  displayText(op, values) {
    if (!values || values.length === 0) {
      return stringFormat(this.operatorFormat(op), this.getTitle(this.field));
    } else if (values.length === 1) {
      return stringFormat(this.operatorFormat(op), this.getTitle(this.field), values[0]);
    } else {
      return stringFormat(this.operatorFormat(op), this.getTitle(this.field), values[0], values[1]);
    }
  }
  getCriteriaField() {
    return this.field.name;
  }
  getCriteria() {
    var result = {};
    var text2;
    var field = Criteria(this.getCriteriaField());
    var op = this.get_operator().key;
    switch (op) {
      case "true": {
        result.displayText = this.displayText(this.get_operator(), []);
        result.criteria = field.eq(true);
        return result;
      }
      case "false": {
        result.displayText = this.displayText(this.get_operator(), []);
        result.criteria = field.eq(false);
        return result;
      }
      case "isnull": {
        result.displayText = this.displayText(this.get_operator(), []);
        result.criteria = field.isNull();
        return result;
      }
      case "isnotnull": {
        result.displayText = this.displayText(this.get_operator(), []);
        result.criteria = field.isNotNull();
        return result;
      }
      case "contains": {
        text2 = this.getEditorText();
        result.displayText = this.displayText(this.get_operator(), [text2]);
        result.criteria = field.contains(text2);
        return result;
      }
      case "startswith": {
        text2 = this.getEditorText();
        result.displayText = this.displayText(this.get_operator(), [text2]);
        result.criteria = field.startsWith(text2);
        return result;
      }
      case "eq":
      case "ne":
      case "lt":
      case "le":
      case "gt":
      case "ge": {
        text2 = this.getEditorText();
        result.displayText = this.displayText(this.get_operator(), [text2]);
        result.criteria = field[op](this.getEditorValue());
        return result;
      }
    }
    throw new Exception(stringFormat(
      "Filtering '{0}' has no handler for '{1}' operator",
      getTypeFullName(getInstanceType(this)),
      this.get_operator().key
    ));
  }
  loadState(state) {
    var input = this.get_container().querySelector(Fluent.inputLikeSelector);
    input && (input.value = state);
  }
  saveState() {
    switch (this.get_operator().key) {
      case "contains":
      case "startswith":
      case "eq":
      case "ne":
      case "lt":
      case "le":
      case "gt":
      case "ge": {
        var input = this.get_container().querySelector(Fluent.inputLikeSelector);
        return input == null ? void 0 : input.value;
      }
    }
    return null;
  }
  argumentNull() {
    return new Error(localText("Controls.FilterPanel.ValueRequired"));
  }
  validateEditorValue(value) {
    if (value.length === 0) {
      throw this.argumentNull();
    }
    return value;
  }
  getEditorValue() {
    var _a68;
    var inputs = this.get_container().querySelectorAll(Fluent.inputLikeSelector + ":not(.select2-focusser)");
    if (inputs.length !== 1) {
      throw new Exception(stringFormat(
        "Couldn't find input in filter container for {0}",
        (_a68 = this.field.title) != null ? _a68 : this.field.name
      ));
    }
    let input = inputs[0];
    var value;
    let combobox = Combobox.getInstance(input);
    if (combobox) {
      value = combobox.isMultiple ? combobox.getValues().join(",") : combobox.getValue();
    } else {
      value = input.value;
    }
    value = (value != null ? value : "").trim();
    return this.validateEditorValue(value);
  }
  getEditorText() {
    var _a68, _b;
    var input = this.get_container().querySelector(Fluent.inputLikeSelector + ":not(.select2-focusser):not(.select2-input)");
    if (!input) {
      return (_a68 = this.get_container().textContent) == null ? void 0 : _a68.trim();
    }
    var value;
    let combobox = Combobox.getInstance(input);
    if (combobox) {
      value = (_b = combobox.getSelectedItems()) == null ? void 0 : _b.join(", ");
    } else {
      value = input.value;
    }
    return value;
  }
  initQuickFilter(filter) {
    filter.field = this.getCriteriaField();
    filter.type = StringEditor;
    filter.title = this.getTitle(this.field);
    filter.options = deepClone(this.get_field().quickFilterParams);
  }
};
_init93 = __decoratorStart(null);
BaseFiltering = __decorateElement(_init93, 0, "BaseFiltering", _BaseFiltering_decorators, BaseFiltering);
__runInitializers(_init93, 1, BaseFiltering);
function Filtering(name) {
  return Decorators.registerClass("Serenity." + name + "Filtering");
}
var _BaseEditorFiltering_decorators, _init94, _a43;
_BaseEditorFiltering_decorators = [Filtering("BaseEditor")];
var BaseEditorFiltering = class extends (_a43 = BaseFiltering) {
  constructor(editorTypeRef) {
    super();
    this.editorTypeRef = editorTypeRef;
  }
  useEditor() {
    switch (this.get_operator().key) {
      case "eq":
      case "ne":
      case "lt":
      case "le":
      case "gt":
      case "ge":
        return true;
    }
    return false;
  }
  createEditor() {
    if (this.useEditor()) {
      this.editor = new this.editorTypeRef(__spreadValues({
        element: (el) => {
          this.get_container().append(el);
        }
      }, this.getEditorOptions())).init();
      return;
    }
    this.editor = null;
    super.createEditor();
  }
  useIdField() {
    return false;
  }
  getCriteriaField() {
    if (this.useEditor() && this.useIdField() && this.get_field().filteringIdField) {
      return this.get_field().filteringIdField;
    }
    return super.getCriteriaField();
  }
  getEditorOptions() {
    var opt = deepClone(this.get_field().editorParams || {});
    delete opt["cascadeFrom"];
    return extend(opt, this.get_field().filteringParams);
  }
  loadState(state) {
    if (this.useEditor()) {
      if (state == null) {
        return;
      }
      EditorUtils.setValue(this.editor, state);
      return;
    }
    super.loadState(state);
  }
  saveState() {
    if (this.useEditor()) {
      return EditorUtils.getValue(this.editor);
    }
    return super.saveState();
  }
  getEditorValue() {
    if (this.useEditor()) {
      var value = EditorUtils.getValue(this.editor);
      if (value == null || typeof value == "string" && value.trim().length === 0)
        throw this.argumentNull();
      return value;
    }
    return super.getEditorValue();
  }
  initQuickFilter(filter) {
    super.initQuickFilter(filter);
    filter.type = this.editorTypeRef;
    filter.options = extend(extend({}, deepClone(this.getEditorOptions())), deepClone(this.get_field().quickFilterParams));
  }
};
_init94 = __decoratorStart(_a43);
BaseEditorFiltering = __decorateElement(_init94, 0, "BaseEditorFiltering", _BaseEditorFiltering_decorators, BaseEditorFiltering);
__runInitializers(_init94, 1, BaseEditorFiltering);
var _DateFiltering_decorators, _init95, _a44;
_DateFiltering_decorators = [Filtering("Date")];
var DateFiltering = class extends (_a44 = BaseEditorFiltering) {
  constructor() {
    super(DateEditor);
  }
  getOperators() {
    return this.appendNullableOperators(this.appendComparisonOperators([]));
  }
};
_init95 = __decoratorStart(_a44);
DateFiltering = __decorateElement(_init95, 0, "DateFiltering", _DateFiltering_decorators, DateFiltering);
__runInitializers(_init95, 1, DateFiltering);
var _BooleanFiltering_decorators, _init96, _a45;
_BooleanFiltering_decorators = [Filtering("Boolean")];
var BooleanFiltering = class extends (_a45 = BaseFiltering) {
  getOperators() {
    return this.appendNullableOperators([
      { key: FilterOperators.isTrue },
      { key: FilterOperators.isFalse }
    ]);
  }
};
_init96 = __decoratorStart(_a45);
BooleanFiltering = __decorateElement(_init96, 0, "BooleanFiltering", _BooleanFiltering_decorators, BooleanFiltering);
__runInitializers(_init96, 1, BooleanFiltering);
var _DateTimeFiltering_decorators, _init97, _a46;
_DateTimeFiltering_decorators = [Filtering("DateTime")];
var DateTimeFiltering = class extends (_a46 = BaseEditorFiltering) {
  constructor() {
    super(DateTimeEditor);
  }
  getOperators() {
    return this.appendNullableOperators(
      this.appendComparisonOperators([])
    );
  }
  getCriteria() {
    var result = {};
    switch (this.get_operator().key) {
      case "eq":
      case "ne":
      case "lt":
      case "le":
      case "gt":
      case "ge": {
        {
          var text2 = this.getEditorText();
          result.displayText = this.displayText(this.get_operator(), [text2]);
          var date = parseISODateTime(this.getEditorValue());
          date = new Date(date.getFullYear(), date.getMonth(), date.getDate());
          var next = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1);
          var criteria = Criteria(this.getCriteriaField());
          var dateValue = formatDate(date, "yyyy-MM-dd");
          var nextValue = formatDate(next, "yyyy-MM-dd");
          switch (this.get_operator().key) {
            case "eq": {
              result.criteria = Criteria.and(criteria.ge(dateValue), criteria.lt(nextValue));
              return result;
            }
            case "ne": {
              result.criteria = Criteria.paren(Criteria.or(criteria.lt(dateValue), criteria.gt(nextValue)));
              return result;
            }
            case "lt": {
              result.criteria = criteria.lt(dateValue);
              return result;
            }
            case "le": {
              result.criteria = criteria.lt(nextValue);
            }
            case "gt": {
              result.criteria = criteria.ge(nextValue);
              return result;
            }
            case "ge": {
              result.criteria = criteria.ge(dateValue);
              return result;
            }
          }
        }
        break;
      }
    }
    return super.getCriteria();
  }
};
_init97 = __decoratorStart(_a46);
DateTimeFiltering = __decorateElement(_init97, 0, "DateTimeFiltering", _DateTimeFiltering_decorators, DateTimeFiltering);
__runInitializers(_init97, 1, DateTimeFiltering);
var _DecimalFiltering_decorators, _init98, _a47;
_DecimalFiltering_decorators = [Filtering("Decimal")];
var DecimalFiltering = class extends (_a47 = BaseEditorFiltering) {
  constructor() {
    super(DecimalEditor);
  }
  getOperators() {
    return this.appendNullableOperators(
      this.appendComparisonOperators([])
    );
  }
};
_init98 = __decoratorStart(_a47);
DecimalFiltering = __decorateElement(_init98, 0, "DecimalFiltering", _DecimalFiltering_decorators, DecimalFiltering);
__runInitializers(_init98, 1, DecimalFiltering);
var _EditorFiltering_decorators, _init99, _a48;
_EditorFiltering_decorators = [Filtering("Editor")];
var EditorFiltering = class extends (_a48 = BaseEditorFiltering) {
  constructor(props = {}) {
    var _a68;
    super(Widget);
    this.props = props;
    (_a68 = this.props) != null ? _a68 : this.props = {};
  }
  get editorType() {
    return this.props.editorType;
  }
  set editorType(value) {
    this.props.editorType = value;
  }
  get useRelative() {
    return this.props.useRelative;
  }
  set useRelative(value) {
    this.props.useRelative = value;
  }
  get useLike() {
    return this.props.useLike;
  }
  set useLike(value) {
    this.props.useLike = value;
  }
  getOperators() {
    var list = [];
    list.push({ key: FilterOperators.EQ });
    list.push({ key: FilterOperators.NE });
    if (this.useRelative) {
      list.push({ key: FilterOperators.LT });
      list.push({ key: FilterOperators.LE });
      list.push({ key: FilterOperators.GT });
      list.push({ key: FilterOperators.GE });
    }
    if (this.useLike) {
      list.push({ key: FilterOperators.contains });
      list.push({ key: FilterOperators.startsWith });
    }
    this.appendNullableOperators(list);
    return list;
  }
  useEditor() {
    var op = this.get_operator().key;
    return op === FilterOperators.EQ || op === FilterOperators.NE || this.useRelative && (op === FilterOperators.LT || op === FilterOperators.LE || op === FilterOperators.GT || op === FilterOperators.GE);
  }
  getEditorOptions() {
    var _a68;
    var opt = super.getEditorOptions();
    if (this.useEditor() && this.editorType === ((_a68 = this.get_field().editorType) != null ? _a68 : "String")) {
      opt = extend(opt, this.get_field().editorParams);
    }
    return opt;
  }
  createEditor() {
    if (this.useEditor()) {
      var editorType = EditorTypeRegistry.get(this.editorType);
      this.editor = new editorType(__spreadValues({
        element: (el) => this.get_container().append(el)
      }, this.getEditorOptions()));
      return;
    }
    super.createEditor();
  }
  useIdField() {
    return this.useEditor();
  }
  initQuickFilter(filter) {
    super.initQuickFilter(filter);
    filter.type = EditorTypeRegistry.get(this.editorType);
  }
};
_init99 = __decoratorStart(_a48);
EditorFiltering = __decorateElement(_init99, 0, "EditorFiltering", _EditorFiltering_decorators, EditorFiltering);
__runInitializers(_init99, 1, EditorFiltering);
var _EnumFiltering_decorators, _init100, _a49;
_EnumFiltering_decorators = [Filtering("Enum")];
var EnumFiltering = class extends (_a49 = BaseEditorFiltering) {
  constructor() {
    super(EnumEditor);
  }
  getOperators() {
    var op = [{ key: FilterOperators.EQ }, { key: FilterOperators.NE }];
    return this.appendNullableOperators(op);
  }
  getEditorText() {
    if (this.useEditor()) {
      return this.editor.text;
    }
    return super.getEditorText();
  }
};
_init100 = __decoratorStart(_a49);
EnumFiltering = __decorateElement(_init100, 0, "EnumFiltering", _EnumFiltering_decorators, EnumFiltering);
__runInitializers(_init100, 1, EnumFiltering);
var _IntegerFiltering_decorators, _init101, _a50;
_IntegerFiltering_decorators = [Filtering("Integer")];
var IntegerFiltering = class extends (_a50 = BaseEditorFiltering) {
  constructor() {
    super(IntegerEditor);
  }
  getOperators() {
    return this.appendNullableOperators(this.appendComparisonOperators([]));
  }
};
_init101 = __decoratorStart(_a50);
IntegerFiltering = __decorateElement(_init101, 0, "IntegerFiltering", _IntegerFiltering_decorators, IntegerFiltering);
__runInitializers(_init101, 1, IntegerFiltering);
var _LookupFiltering_decorators, _init102, _a51;
_LookupFiltering_decorators = [Filtering("Lookup")];
var LookupFiltering = class extends (_a51 = BaseEditorFiltering) {
  constructor() {
    super(LookupEditor);
  }
  getOperators() {
    var ops = [{ key: FilterOperators.EQ }, { key: FilterOperators.NE }, { key: FilterOperators.contains }, { key: FilterOperators.startsWith }];
    return this.appendNullableOperators(ops);
  }
  useEditor() {
    var op = this.get_operator().key;
    return op == FilterOperators.EQ || op == FilterOperators.NE;
  }
  useIdField() {
    return this.useEditor();
  }
  getEditorText() {
    if (this.useEditor()) {
      return this.editor.text;
    }
    return super.getEditorText();
  }
};
_init102 = __decoratorStart(_a51);
LookupFiltering = __decorateElement(_init102, 0, "LookupFiltering", _LookupFiltering_decorators, LookupFiltering);
__runInitializers(_init102, 1, LookupFiltering);
var _ServiceLookupFiltering_decorators, _init103, _a52;
_ServiceLookupFiltering_decorators = [Filtering("ServiceLookup")];
var ServiceLookupFiltering = class extends (_a52 = BaseEditorFiltering) {
  constructor() {
    super(ServiceLookupEditor);
  }
  getOperators() {
    var ops = [{ key: FilterOperators.EQ }, { key: FilterOperators.NE }, { key: FilterOperators.contains }, { key: FilterOperators.startsWith }];
    return this.appendNullableOperators(ops);
  }
  useEditor() {
    var op = this.get_operator().key;
    return op == FilterOperators.EQ || op == FilterOperators.NE;
  }
  useIdField() {
    return this.useEditor();
  }
  getEditorText() {
    if (this.useEditor()) {
      return this.editor.text;
    }
    return super.getEditorText();
  }
};
_init103 = __decoratorStart(_a52);
ServiceLookupFiltering = __decorateElement(_init103, 0, "ServiceLookupFiltering", _ServiceLookupFiltering_decorators, ServiceLookupFiltering);
__runInitializers(_init103, 1, ServiceLookupFiltering);
var _StringFiltering_decorators, _init104, _a53;
_StringFiltering_decorators = [Filtering("String")];
var StringFiltering = class extends (_a53 = BaseFiltering) {
  getOperators() {
    var ops = [
      { key: FilterOperators.contains },
      { key: FilterOperators.startsWith },
      { key: FilterOperators.EQ },
      { key: FilterOperators.NE }
    ];
    return this.appendNullableOperators(ops);
  }
  validateEditorValue(value) {
    if (value.length === 0) {
      return value;
    }
    return super.validateEditorValue(value);
  }
};
_init104 = __decoratorStart(_a53);
StringFiltering = __decorateElement(_init104, 0, "StringFiltering", _StringFiltering_decorators, StringFiltering);
__runInitializers(_init104, 1, StringFiltering);
var FilteringTypeRegistry;
((FilteringTypeRegistry2) => {
  let knownTypes;
  function initialize() {
    if (knownTypes != null)
      return;
    knownTypes = {};
    for (var type of getTypes()) {
      if (!isAssignableFrom(IFiltering, type))
        continue;
      var fullName = getTypeFullName(type).toLowerCase();
      knownTypes[fullName] = type;
      for (var k of Config.rootNamespaces) {
        if (fullName.startsWith(k.toLowerCase() + ".")) {
          var kx = fullName.substr(k.length + 1).toLowerCase();
          if (knownTypes[kx] == null) {
            knownTypes[kx] = type;
          }
        }
      }
    }
    setTypeKeysWithoutFilterHandlerSuffix();
  }
  function setTypeKeysWithoutFilterHandlerSuffix() {
    var suffix = "filtering";
    for (var k of Object.keys(knownTypes)) {
      if (!k.endsWith(suffix))
        continue;
      var p = k.substring(0, k.length - suffix.length);
      if (!p)
        continue;
      if (knownTypes[p] != null)
        continue;
      knownTypes[p] = knownTypes[k];
    }
  }
  function reset() {
    knownTypes = null;
  }
  FilteringTypeRegistry2.reset = reset;
  function get(key) {
    if (!key)
      throw new ArgumentNullException("key");
    initialize();
    var formatterType = knownTypes[key.toLowerCase()];
    if (formatterType == null)
      throw new Exception(stringFormat(
        "Can't find {0} filter handler type!",
        key
      ));
    return formatterType;
  }
  FilteringTypeRegistry2.get = get;
})(FilteringTypeRegistry || (FilteringTypeRegistry = {}));

// src/ui/filtering/filterwidgetbase.ts
var _FilterWidgetBase_decorators, _init105, _a54;
_FilterWidgetBase_decorators = [Decorators.registerClass("Serenity.FilterWidgetBase")];
var FilterWidgetBase = class extends (_a54 = Widget) {
  constructor(props) {
    super(props);
    this.store = new FilterStore([]);
    this.onFilterStoreChanged = () => this.filterStoreChanged();
    this.store.add_changed(this.onFilterStoreChanged);
  }
  destroy() {
    if (this.store) {
      this.store.remove_changed(this.onFilterStoreChanged);
      this.onFilterStoreChanged = null;
      this.store = null;
    }
    super.destroy();
  }
  filterStoreChanged() {
  }
  get_store() {
    return this.store;
  }
  set_store(value) {
    if (this.store !== value) {
      if (this.store != null)
        this.store.remove_changed(this.onFilterStoreChanged);
      this.store = value || new FilterStore([]);
      this.store.add_changed(this.onFilterStoreChanged);
      this.filterStoreChanged();
    }
  }
};
_init105 = __decoratorStart(_a54);
FilterWidgetBase = __decorateElement(_init105, 0, "FilterWidgetBase", _FilterWidgetBase_decorators, FilterWidgetBase);
__runInitializers(_init105, 1, FilterWidgetBase);

// src/ui/filtering/filterpanel.ts
var _FilterFieldSelect_decorators, _init106, _a55;
_FilterFieldSelect_decorators = [Decorators.registerClass("Serenity.FilterFieldSelect")];
var FilterFieldSelect = class extends (_a55 = ComboboxEditor) {
  constructor(props) {
    var _a68, _b;
    super(props);
    for (var field of this.options.fields) {
      this.addOption(field.name, (_b = (_a68 = tryGetText(field.title)) != null ? _a68 : field.title) != null ? _b : field.name, field);
    }
  }
  emptyItemText() {
    if (!this.value) {
      return localText("Controls.FilterPanel.SelectField");
    }
    return null;
  }
  getComboboxOptions() {
    var opt = super.getComboboxOptions();
    opt.allowClear = false;
    return opt;
  }
};
_init106 = __decoratorStart(_a55);
FilterFieldSelect = __decorateElement(_init106, 0, "FilterFieldSelect", _FilterFieldSelect_decorators, FilterFieldSelect);
__runInitializers(_init106, 1, FilterFieldSelect);
var _FilterOperatorSelect_decorators, _init107, _a56;
_FilterOperatorSelect_decorators = [Decorators.registerClass("Serenity.FilterOperatorSelect")];
var FilterOperatorSelect = class extends (_a56 = ComboboxEditor) {
  constructor(props) {
    var _a68, _b;
    super(props);
    for (var op of this.options.source) {
      var title = (_b = op.title) != null ? _b : (_a68 = tryGetText("Controls.FilterPanel.OperatorNames." + op.key)) != null ? _a68 : op.key;
      this.addOption(op.key, title, op);
    }
    if (this.options.source.length && this.options.source[0])
      this.value = this.options.source[0].key;
  }
  emptyItemText() {
    return null;
  }
  getComboboxOptions() {
    var opt = super.getComboboxOptions();
    opt.allowClear = false;
    return opt;
  }
};
_init107 = __decoratorStart(_a56);
FilterOperatorSelect = __decorateElement(_init107, 0, "FilterOperatorSelect", _FilterOperatorSelect_decorators, FilterOperatorSelect);
__runInitializers(_init107, 1, FilterOperatorSelect);
var _FilterPanel_decorators, _init108, _a57;
_FilterPanel_decorators = [Decorators.registerClass("Serenity.FilterPanel")];
var FilterPanel = class extends (_a57 = FilterWidgetBase) {
  constructor(props) {
    super(props);
    this.domNode.classList.add("s-FilterPanel'");
    this.rowsDiv = this.findById("Rows");
    this.initButtons();
    this.updateButtons();
  }
  get_showInitialLine() {
    return this.showInitialLine;
  }
  set_showInitialLine(value) {
    if (this.showInitialLine !== value) {
      this.showInitialLine = value;
      if (this.showInitialLine && !this.rowsDiv.lastElementChild) {
        this.addEmptyRow(false);
      }
    }
  }
  filterStoreChanged() {
    super.filterStoreChanged();
    this.updateRowsFromStore();
  }
  updateRowsFromStore() {
    Fluent(this.rowsDiv).empty();
    var items = this.get_store().get_items();
    for (var item of items) {
      this.addEmptyRow(false);
      var rowDiv = this.rowsDiv.lastElementChild;
      var divl = rowDiv.querySelector("div.l");
      divl.querySelector(".leftparen").classList.toggle("active", !!item.leftParen);
      divl.querySelector(".rightparen").classList.toggle("active", !!item.rightParen);
      var andor = divl.querySelector(".andor");
      andor.classList.toggle("or", !!item.isOr);
      andor.textContent = localText(!!item.isOr ? "Controls.FilterPanel.Or" : "Controls.FilterPanel.And");
      var fieldSelect = getWidgetFrom(rowDiv.querySelector("div.f input.field-select"), FilterFieldSelect);
      fieldSelect.value = item.field;
      this.rowFieldChange(rowDiv);
      var operatorSelect = getWidgetFrom(rowDiv.querySelector(":scope div.o > input.op-select"), FilterOperatorSelect);
      operatorSelect.set_value(item.operator);
      this.rowOperatorChange(rowDiv);
      var filtering = this.getFilteringFor(rowDiv);
      if (filtering != null) {
        filtering.set_operator({ key: item.operator });
        filtering.loadState(item.state);
      }
    }
    if (this.get_showInitialLine() && !this.rowsDiv.childElementCount) {
      this.addEmptyRow(false);
    }
    this.updateParens();
  }
  get_showSearchButton() {
    return this.showSearchButton;
  }
  set_showSearchButton(value) {
    if (this.showSearchButton !== value) {
      this.showSearchButton = value;
      this.updateButtons();
    }
  }
  get_updateStoreOnReset() {
    return this.updateStoreOnReset;
  }
  set_updateStoreOnReset(value) {
    if (this.updateStoreOnReset !== value) {
      this.updateStoreOnReset = value;
    }
  }
  renderContents() {
    const id = this.useIdPrefix();
    return Fluent(document.createDocumentFragment()).append(Fluent("div").attr("id", id.Rows).class("filter-lines")).append(Fluent("div").attr("id", id.Buttons).class("buttons").append(Fluent("button").attr("id", id.AddButton).attr("type", "button").class("btn btn-primary add")).append(Fluent("button").attr("id", id.SearchButton).attr("type", "button").class("btn btn-success search")).append(Fluent("button").attr("id", id.ResetButton).attr("type", "button").class("btn btn-danger reset"))).append(Fluent("div").attr("style", "clear: both")).getNode();
  }
  initButtons() {
    this.byId("AddButton").text(localText("Controls.FilterPanel.AddFilter")).on("click", (e) => this.addButtonClick(e));
    this.byId("SearchButton").text(localText("Controls.FilterPanel.SearchButton")).on("click", (e) => this.searchButtonClick(e));
    this.byId("ResetButton").text(localText("Controls.FilterPanel.ResetButton")).on("click", (e) => this.resetButtonClick(e));
  }
  searchButtonClick(e) {
    e.preventDefault();
    this.search();
  }
  get_hasErrors() {
    return !!this.rowsDiv.querySelector(":scope > div.v > span.error");
  }
  search() {
    var _a68, _b;
    this.rowsDiv.querySelectorAll(":scope > div.v > span.error").forEach((x) => x.remove());
    var filterLines = [];
    var errorText = null;
    for (var i = 0; i < this.rowsDiv.children.length; i++) {
      var row = this.rowsDiv.children[i];
      var filtering = this.getFilteringFor(row);
      if (filtering == null) {
        continue;
      }
      var field = this.getFieldFor(row);
      var op = getWidgetFrom(row.querySelector("div.o input.op-select"), FilterOperatorSelect).value;
      if (op == null || op.length === 0) {
        errorText = localText("Controls.FilterPanel.InvalidOperator");
        break;
      }
      var line = {};
      line.field = field.name;
      line.operator = op;
      var divL = row.querySelector("div.l");
      line.isOr = !!divL.querySelector("a.andor.or");
      line.leftParen = !!row.querySelector("div.l a.leftparen.active");
      line.rightParen = !!row.querySelector("div.l a.rightparen.active");
      filtering.set_operator({ key: op });
      var criteria;
      try {
        criteria = filtering.getCriteria();
      } catch (ex) {
        errorText = (_a68 = ex.message) != null ? _a68 : ex.toString();
        break;
      }
      line.criteria = criteria.criteria;
      line.state = filtering.saveState();
      line.displayText = criteria.displayText;
      filterLines.push(line);
    }
    if (errorText != null) {
      Fluent("span").class("error").attr("title", errorText).appendTo(row.querySelector("div.v"));
      (_b = row.querySelector("div.v input")) == null ? void 0 : _b.focus();
      return;
    }
    var items = this.get_store().get_items();
    items.length = 0;
    items.push.apply(items, filterLines);
    this.get_store().raiseChanged();
  }
  addButtonClick(e) {
    this.addEmptyRow(true);
    e.preventDefault();
  }
  resetButtonClick(e) {
    e.preventDefault();
    if (this.get_updateStoreOnReset()) {
      if (this.get_store().get_items().length > 0) {
        this.get_store().get_items().length = 0;
        this.get_store().raiseChanged();
      }
    }
    Fluent(this.rowsDiv).empty();
    this.updateButtons();
    if (this.get_showInitialLine()) {
      this.addEmptyRow(false);
    }
  }
  findEmptyRow() {
    var result = null;
    Array.from(this.rowsDiv.children).forEach(function(row) {
      var fieldInput = row.querySelector("div.f input.field-select");
      if (!fieldInput)
        return;
      var val = fieldInput.value;
      if (!val) {
        result = row;
        return false;
      }
    });
    return result;
  }
  addEmptyRow(popupField) {
    var _a68, _b, _c, _d, _e;
    var emptyRow = this.findEmptyRow();
    if (emptyRow != null) {
      (_a68 = emptyRow.querySelector("input.field-select")) == null ? void 0 : _a68.focus();
      if (popupField) {
        (_b = Combobox.getInstance(emptyRow == null ? void 0 : emptyRow.querySelector("input.field-select"))) == null ? void 0 : _b.openDropdown();
      }
      return emptyRow;
    }
    var isLastRowOr = !!((_c = this.rowsDiv.lastElementChild) == null ? void 0 : _c.querySelector("a.andor.or"));
    var row = this.rowsDiv.appendChild(document.createElement("div"));
    row.classList.add("filter-line");
    row.innerHTML = "<a class='delete'><span></span></a><div class='l'><a class='rightparen' href='#'>)</a><a class='andor' href='#'></a><a class='leftparen' href='#'>(</a></div><div class='f'><input type='hidden' class='field-select'></div><div class='o'></div><div class='v'></div><div style='clear: both'></div>";
    var parenDiv = row.querySelector("div.l");
    parenDiv.style.display = "none";
    parenDiv.querySelectorAll("a.leftparen, a.rightparen").forEach((el) => Fluent.on(el, "click", this.leftRightParenClick.bind(this)));
    var andor = parenDiv.querySelector("a.andor");
    andor.setAttribute("title", localText("Controls.FilterPanel.ChangeAndOr"));
    if (isLastRowOr) {
      andor.classList.add("or");
      andor.textContent = localText("Controls.FilterPanel.Or");
    } else {
      andor.textContent = localText("Controls.FilterPanel.And");
    }
    Fluent.on(andor, "click", this.andOrClick.bind(this));
    var del = row.querySelector("a.delete");
    del.setAttribute("title", localText("Controls.FilterPanel.RemoveField"));
    Fluent.on(del, "click", this.deleteRowClick.bind(this));
    new FilterFieldSelect({
      fields: this.get_store().get_fields(),
      element: row.querySelector("div.f input")
    }).changeSelect2((e) => this.onRowFieldChange(e));
    this.updateParens();
    this.updateButtons();
    (_d = row.querySelector("input.field-select")) == null ? void 0 : _d.focus();
    if (popupField) {
      (_e = Combobox.getInstance(row.querySelector("input.field-select"))) == null ? void 0 : _e.openDropdown();
    }
    return row;
  }
  onRowFieldChange(e) {
    var _a68;
    var row = e.target.closest("div.filter-line");
    this.rowFieldChange(row);
    (_a68 = row.querySelector("div.o input.op-select")) == null ? void 0 : _a68.focus();
  }
  rowFieldChange(row) {
    delete row.__Filtering;
    this.removeFiltering(row);
    this.populateOperatorList(row);
    this.rowOperatorChange(row);
    this.updateParens();
    this.updateButtons();
  }
  removeFiltering(row) {
    delete row.__Filtering;
    delete row.__FilteringField;
  }
  populateOperatorList(row) {
    var opDiv = row.querySelector("div.o");
    Fluent(opDiv).empty();
    var filtering = this.getFilteringFor(row);
    if (filtering == null)
      return;
    var hidden = Fluent("input").attr("type", "hidden").class("op-select").appendTo(opDiv);
    var operators = filtering.getOperators();
    var opSelect = new FilterOperatorSelect({ element: hidden, source: operators });
    opSelect.changeSelect2(this.onRowOperatorChange.bind(this));
  }
  getFieldFor(row) {
    if (!row) {
      return null;
    }
    var select = getWidgetFrom(row.querySelector("div.f input.field-select"), FilterFieldSelect);
    if (!select || !select.value) {
      return null;
    }
    return this.get_store().get_fieldByName()[select.get_value()];
  }
  getFilteringFor(row) {
    var _a68, _b;
    var field = this.getFieldFor(row);
    if (field == null)
      return null;
    var filtering = row.__Filtering;
    if (filtering != null)
      return filtering;
    var filteringType = FilteringTypeRegistry.get(
      (_a68 = field.filteringType) != null ? _a68 : "String"
    );
    var editorDiv = row.querySelector("div.v");
    filtering = new filteringType((_b = field.filteringParams) != null ? _b : {});
    ReflectionOptionsSetter.set(filtering, field.filteringParams);
    filtering.set_container(editorDiv);
    filtering.set_field(field);
    row.__Filtering = filtering;
    return filtering;
  }
  onRowOperatorChange(e) {
    var row = e.target.closest("div.filter-line");
    this.rowOperatorChange(row);
    row.querySelectorAll("div.v input, div.v textarea, div.v select").forEach((el) => {
      if (Fluent.isVisibleLike(el)) {
        try {
          el.focus();
        } catch (e2) {
        }
      }
      return false;
    });
  }
  rowOperatorChange(row) {
    if (!row) {
      return;
    }
    var editorDiv = row.querySelector("div.v");
    Fluent(editorDiv).empty();
    var filtering = this.getFilteringFor(row);
    if (filtering == null)
      return;
    var operatorSelect = getWidgetFrom(row.querySelector("div.o input.op-select"), FilterOperatorSelect);
    if (!operatorSelect.get_value())
      return;
    var ops = filtering.getOperators().filter(function(x) {
      return x.key === operatorSelect.value;
    });
    var op = ops.length > 0 ? ops[0] : null;
    if (op == null)
      return;
    filtering.set_operator(op);
    filtering.createEditor();
  }
  deleteRowClick(e) {
    e.preventDefault();
    var row = e.target.closest("div.filter-line");
    row.remove();
    if (!this.rowsDiv.childElementCount) {
      this.search();
    }
    this.updateParens();
    this.updateButtons();
  }
  updateButtons() {
    this.byId("SearchButton").toggle(
      this.rowsDiv.childElementCount >= 1 && this.showSearchButton
    );
    this.byId("ResetButton").toggle(
      this.rowsDiv.childElementCount >= 1
    );
  }
  andOrClick(e) {
    e.preventDefault();
    var andor = e.target;
    andor.classList.toggle("or");
    andor.textContent = localText("Controls.FilterPanel." + (andor.classList.contains("or") ? "Or" : "And"));
  }
  leftRightParenClick(e) {
    e.preventDefault();
    e.target.classList.toggle("active");
    this.updateParens();
  }
  updateParens() {
    var rows = Array.from(this.rowsDiv.children);
    var inParen = false;
    rows.forEach((row, index) => {
      row.classList.remove("paren-start");
      row.classList.remove("paren-end");
      var divL = row.querySelector("div.l");
      if (!divL)
        return;
      divL.style.display = rows.length === 1 ? "none" : "block";
      if (index === 0)
        divL.querySelectorAll("a.rightparen, a.andor").forEach((el) => el.style.visibility = "hidden");
      else {
        divL.style.display = "block";
        divL.querySelectorAll("a.lefparen, a.andor").forEach((el) => el.style.visibility = "visible");
      }
      var lp = divL.querySelector("a.leftparen");
      var rp = divL.querySelector("a.rightparen");
      if (rp.classList.contains("active") && inParen) {
        inParen = false;
        if (index > 0) {
          rows[index - 1].classList.add("paren-end");
        }
      }
      if (lp.classList.contains("active")) {
        inParen = true;
        if (index > 0) {
          rows[index - 1].classList.add("paren-start");
        }
      }
    });
  }
};
_init108 = __decoratorStart(_a57);
FilterPanel = __decorateElement(_init108, 0, "FilterPanel", _FilterPanel_decorators, FilterPanel);
__runInitializers(_init108, 1, FilterPanel);

// src/ui/filtering/filterdialog.ts
var _FilterDialog_decorators, _init109, _a58;
_FilterDialog_decorators = [Decorators.registerClass("Serenity.FilterDialog")];
var FilterDialog = class extends (_a58 = BaseDialog) {
  constructor(props) {
    super(props);
    this.filterPanel = new FilterPanel({ element: this.findById("FilterPanel") });
    this.filterPanel.set_showInitialLine(true);
    this.filterPanel.set_showSearchButton(false);
    this.filterPanel.set_updateStoreOnReset(false);
    this.dialogTitle = localText("Controls.FilterPanel.DialogTitle");
  }
  get_filterPanel() {
    return this.filterPanel;
  }
  renderContents() {
    return Fluent("div").attr("id", this.useIdPrefix().FilterPanel).getNode();
  }
  getDialogOptions() {
    var opt = super.getDialogOptions();
    opt.fullScreen = "lg-down";
    return opt;
  }
  getDialogButtons() {
    return [
      okDialogButton({
        click: (e) => {
          this.filterPanel.search();
          if (this.filterPanel.get_hasErrors()) {
            e.preventDefault();
            notifyError(localText("Controls.FilterPanel.FixErrorsMessage"), "", null);
            return;
          }
        }
      }),
      cancelDialogButton()
    ];
  }
};
_init109 = __decoratorStart(_a58);
FilterDialog = __decorateElement(_init109, 0, "FilterDialog", _FilterDialog_decorators, FilterDialog);
__runInitializers(_init109, 1, FilterDialog);

// src/ui/filtering/filterdisplaybar.ts
var _FilterDisplayBar_decorators, _init110, _a59;
_FilterDisplayBar_decorators = [Decorators.registerClass("Serenity.FilterDisplayBar")];
var FilterDisplayBar = class extends (_a59 = FilterWidgetBase) {
  renderContents() {
    var openFilterDialog = (e) => {
      e.preventDefault();
      var dialog = new FilterDialog({});
      dialog.get_filterPanel().set_store(this.get_store());
      dialog.dialogOpen(null);
    };
    return Fluent("div").append(Fluent("a").class("reset").attr("title", localText("Controls.FilterPanel.ResetFilterHint")).on("click", (e) => {
      e.preventDefault();
      this.get_store().get_items().length = 0;
      this.get_store().raiseChanged();
    })).append(Fluent("a").class("edit").text(localText("Controls.FilterPanel.EditFilter")).on("click", openFilterDialog)).append(Fluent("div").class("current").append(Fluent("span").class("cap").text(localText("Controls.FilterPanel.EffectiveFilter"))).append(Fluent("a").class("txt").on("click", openFilterDialog))).getNode();
  }
  filterStoreChanged() {
    var _a68;
    super.filterStoreChanged();
    var displayText = ((_a68 = this.get_store().get_displayText()) == null ? void 0 : _a68.trim()) || null;
    this.element.findFirst(".current").toggle(displayText != null);
    this.element.findFirst(".reset").toggle(displayText != null);
    if (displayText == null)
      displayText = localText("Controls.FilterPanel.EffectiveEmpty");
    this.element.findFirst(".txt").text("[" + displayText + "]");
  }
};
_init110 = __decoratorStart(_a59);
FilterDisplayBar = __decorateElement(_init110, 0, "FilterDisplayBar", _FilterDisplayBar_decorators, FilterDisplayBar);
__runInitializers(_init110, 1, FilterDisplayBar);

// src/ui/datagrid/slickpager.ts
var _SlickPager_decorators, _init111, _a60;
_SlickPager_decorators = [Decorators.registerClass("Serenity.SlickPager")];
var SlickPager = class extends (_a60 = Widget) {
  constructor(props) {
    var _a68, _b;
    super(props);
    let opt = this.options;
    (_a68 = opt.showRowsPerPage) != null ? _a68 : opt.showRowsPerPage = true;
    (_b = opt.rowsPerPageOptions) != null ? _b : opt.rowsPerPageOptions = [20, 100, 500, 2e3];
    var v = opt.view;
    if (!v) throw "SlickPager requires view option to be set!";
    let p = "slick-pg-";
    let grp = (t) => Fluent("div").class(`${p}grp ${p}grp-${t}`);
    let btn = (key) => Fluent("div").class(`${p}${key} ${p}btn`).append(Fluent("span").class(`${p}btn-span`));
    let nav = (key) => btn(key).on("click", () => this._changePage(key));
    let el = this.element.addClass("s-SlickPager slick-pg");
    this.currentPage = Fluent("input").class(`${p}current mx-1`).attr("type", "text").attr("size", 4).attr("value", 1).on("keydown", (e) => {
      if (e.key === "Enter") this._changePage("input");
    });
    this.totalPages = Fluent("span").class(`${p}total`).text("1");
    let control = grp("control").append(
      Fluent("span").class(`${p}control`).append(Fluent("span").class(`${p}pagetext`).text(localText("Controls.Pager.Page"))).append(this.currentPage).append(Fluent("span").class(`${p}pagesep px-1`).text("/")).append(this.totalPages)
    );
    this.stat = Fluent("span").class(`${p}stat`);
    let inner = Fluent("div").class(p + "in").appendTo(el).append(grp("firstprev").append(nav("first")).append(nav("prev"))).append(control).append(grp("nextlast").append(nav("next")).append(nav("last"))).append(grp("reload").append(btn("reload").on("click", () => v.populate()))).append(grp("stat").append(this.stat));
    if (this.options.showRowsPerPage) {
      this.pageSize = Fluent("select").class(`${p}size`).attr("name", "rp").appendTo(grp("size").prependTo(inner)).on("change", () => {
        if (opt.onRowsPerPageChange)
          opt.onRowsPerPageChange(+this.pageSize.val());
        else {
          v["newp"] = 1;
          v.setPagingOptions({
            page: 1,
            rowsPerPage: +this.pageSize.val()
          });
        }
      });
      for (var rowsPerPage of opt.rowsPerPageOptions) {
        Fluent("option").attr("value", rowsPerPage).attr("selected", v.rowsPerPage == rowsPerPage && "selected").text("" + rowsPerPage).appendTo(this.pageSize);
      }
    }
    v.onPagingInfoChanged.subscribe(() => this._updatePager());
  }
  _changePage(ctype) {
    var view = this.options.view;
    if (!view || view.loading)
      return true;
    var info = view.getPagingInfo();
    var pages = !info.rowsPerPage || !info.totalCount ? 1 : Math.ceil(info.totalCount / info.rowsPerPage);
    var newp;
    switch (ctype) {
      case "first":
        newp = 1;
        break;
      case "prev":
        if (info.page > 1) newp = parseInt(info.page) - 1;
        break;
      case "next":
        if (info.page < pages) newp = parseInt(info.page) + 1;
        break;
      case "last":
        newp = pages;
        break;
      case "input":
        var nv = parseInt(this.currentPage.val());
        if (isNaN(nv))
          nv = 1;
        else if (nv < 1)
          nv = 1;
        else if (nv > pages)
          nv = pages;
        this.currentPage.val("" + nv);
        newp = nv;
        break;
    }
    if (newp == info.page)
      return false;
    if (this.options.onChangePage)
      this.options.onChangePage(newp);
    else {
      view.setPagingOptions({ page: newp });
    }
  }
  _updatePager() {
    var _a68;
    var view = this.options.view;
    var info = view.getPagingInfo();
    var pages = !info.rowsPerPage || !info.totalCount ? 1 : Math.ceil(info.totalCount / info.rowsPerPage);
    this.currentPage.val(info.page);
    this.totalPages.text("" + pages);
    var r1 = (info.page - 1) * info.rowsPerPage + 1;
    var r2 = r1 + info.rowsPerPage - 1;
    if (info.totalCount < r2)
      r2 = info.totalCount;
    var stat;
    if (info.loading) {
      stat = localText("Controls.Pager.LoadingStatus");
    } else if (info.error) {
      stat = info.error;
    } else if (info.totalCount > 0) {
      stat = localText("Controls.Pager.PageStatus");
      stat = stat.replace(/{from}/, r1);
      stat = stat.replace(/{to}/, r2);
      stat = stat.replace(/{total}/, info.totalCount);
    } else
      stat = localText("Controls.Pager.NoRowStatus");
    this.stat.text(stat);
    (_a68 = this.pageSize) == null ? void 0 : _a68.val((info.rowsPerPage || 0).toString());
  }
};
_init111 = __decoratorStart(_a60);
SlickPager = __decorateElement(_init111, 0, "SlickPager", _SlickPager_decorators, SlickPager);
__runInitializers(_init111, 1, SlickPager);

// src/ui/helpers/slickhelpers.ts
import { Grid as Grid2, RowMoveManager } from "@serenity-is/sleekgrid";

// src/ui/formatters/formatters.ts
var _IInitializeColumn_decorators, _init112;
_IInitializeColumn_decorators = [Decorators.registerInterface("Serenity.IInitializeColumn")];
var IInitializeColumn = class {
};
_init112 = __decoratorStart(null);
IInitializeColumn = __decorateElement(_init112, 0, "IInitializeColumn", _IInitializeColumn_decorators, IInitializeColumn);
__runInitializers(_init112, 1, IInitializeColumn);
var _BooleanFormatter_decorators, _init113;
_BooleanFormatter_decorators = [Decorators.registerFormatter("Serenity.BooleanFormatter")];
var BooleanFormatter = class {
  constructor(props = {}) {
    this.props = props;
    var _a68;
    (_a68 = this.props) != null ? _a68 : this.props = {};
  }
  format(ctx) {
    var _a68, _b;
    if (ctx.value == null)
      return "";
    if (!!ctx.value)
      return ctx.escape(localText(this.trueText, (_a68 = this.trueText) != null ? _a68 : DialogTexts.YesButton));
    return ctx.escape(localText(this.falseText, (_b = this.falseText) != null ? _b : DialogTexts.NoButton));
  }
  get falseText() {
    return this.props.falseText;
  }
  set falseText(value) {
    this.props.falseText = value;
  }
  get trueText() {
    return this.props.trueText;
  }
  set trueText(value) {
    this.props.trueText = value;
  }
};
_init113 = __decoratorStart(null);
BooleanFormatter = __decorateElement(_init113, 0, "BooleanFormatter", _BooleanFormatter_decorators, BooleanFormatter);
__runInitializers(_init113, 1, BooleanFormatter);
var _CheckboxFormatter_decorators, _init114;
_CheckboxFormatter_decorators = [Decorators.registerType()];
var CheckboxFormatter = class {
  format(ctx) {
    return '<span class="check-box no-float readonly slick-edit-preclick ' + (!!ctx.value ? " checked" : "") + '"></span>';
  }
};
_init114 = __decoratorStart(null);
CheckboxFormatter = __decorateElement(_init114, 0, "CheckboxFormatter", _CheckboxFormatter_decorators, CheckboxFormatter);
CheckboxFormatter.typeInfo = Decorators.formatterType("Serenity.CheckboxFormatter");
__runInitializers(_init114, 1, CheckboxFormatter);
var _DateFormatter_decorators, _init115;
_DateFormatter_decorators = [Decorators.registerFormatter("Serenity.DateFormatter")];
var _DateFormatter = class _DateFormatter {
  constructor(props = {}) {
    this.props = props;
    var _a68, _b, _c;
    (_a68 = this.props) != null ? _a68 : this.props = {};
    (_c = (_b = this.props).displayFormat) != null ? _c : _b.displayFormat = Culture.dateFormat;
  }
  static format(value, format2) {
    if (value == null) {
      return "";
    }
    var date;
    if (value instanceof Date) {
      date = value;
    } else if (typeof value === "string") {
      date = parseISODateTime(value);
      if (date == null || isNaN(date.valueOf())) {
        return htmlEncode(value);
      }
    } else {
      return value.toString();
    }
    return htmlEncode(formatDate(date, format2));
  }
  get displayFormat() {
    return this.props.displayFormat;
  }
  set displayFormat(value) {
    this.props.displayFormat = value;
  }
  format(ctx) {
    return _DateFormatter.format(ctx.value, this.displayFormat);
  }
};
_init115 = __decoratorStart(null);
_DateFormatter = __decorateElement(_init115, 0, "DateFormatter", _DateFormatter_decorators, _DateFormatter);
__runInitializers(_init115, 1, _DateFormatter);
var DateFormatter = _DateFormatter;
var _DateTimeFormatter_decorators, _init116, _a61;
_DateTimeFormatter_decorators = [Decorators.registerFormatter("Serenity.DateTimeFormatter")];
var DateTimeFormatter = class extends (_a61 = DateFormatter) {
  constructor(props = {}) {
    super(__spreadValues({ displayFormat: Culture.dateTimeFormat }, props));
  }
};
_init116 = __decoratorStart(_a61);
DateTimeFormatter = __decorateElement(_init116, 0, "DateTimeFormatter", _DateTimeFormatter_decorators, DateTimeFormatter);
__runInitializers(_init116, 1, DateTimeFormatter);
var _EnumFormatter_decorators, _init117;
_EnumFormatter_decorators = [Decorators.registerFormatter("Serenity.EnumFormatter")];
var _EnumFormatter = class _EnumFormatter {
  constructor(props = {}) {
    this.props = props;
    var _a68;
    (_a68 = this.props) != null ? _a68 : this.props = {};
  }
  format(ctx) {
    var enumType = EnumTypeRegistry.getOrLoad(this.enumKey);
    if (isPromiseLike(enumType)) {
      const node = document.createElement("span");
      enumType.then(() => {
        const text2 = new Text(_EnumFormatter.format(enumType, ctx.value));
        node.parentElement && node.replaceWith(text2);
      });
      return node;
    }
    return _EnumFormatter.format(enumType, ctx.value);
  }
  get enumKey() {
    return this.props.enumKey;
  }
  set enumKey(value) {
    this.props.enumKey = value;
  }
  static format(enumType, value) {
    if (value == null) {
      return "";
    }
    var name = Enum.toString(enumType, value);
    var enumKeyAttr = getCustomAttribute(enumType, EnumKeyAttribute, false);
    var enumKey = enumKeyAttr ? enumKeyAttr.value : getTypeFullName(enumType);
    return _EnumFormatter.getText(enumKey, name);
  }
  static getText(enumKey, name) {
    var _a68;
    if (!name)
      return "";
    return htmlEncode((_a68 = tryGetText("Enums." + enumKey + "." + name)) != null ? _a68 : name);
  }
  static getName(enumType, value) {
    if (value == null) {
      return "";
    }
    return Enum.toString(enumType, value);
  }
};
_init117 = __decoratorStart(null);
_EnumFormatter = __decorateElement(_init117, 0, "EnumFormatter", _EnumFormatter_decorators, _EnumFormatter);
__runInitializers(_init117, 1, _EnumFormatter);
var EnumFormatter = _EnumFormatter;
var _FileDownloadFormatter_decorators, _init118;
_FileDownloadFormatter_decorators = [Decorators.registerFormatter("Serenity.FileDownloadFormatter", [IInitializeColumn])];
var _FileDownloadFormatter = class _FileDownloadFormatter {
  constructor(props = {}) {
    this.props = props;
    var _a68;
    (_a68 = this.props) != null ? _a68 : this.props = {};
  }
  format(ctx) {
    var _a68, _b;
    var dbFile = ctx.value;
    if (!dbFile)
      return "";
    var downloadUrl = _FileDownloadFormatter.dbFileUrl(dbFile);
    var originalName = this.originalNameProperty ? ctx.item[this.originalNameProperty] : null;
    originalName = originalName != null ? originalName : "";
    var text2 = stringFormat(
      (_a68 = this.displayFormat) != null ? _a68 : "{0}",
      originalName,
      dbFile,
      downloadUrl
    );
    var iconClass = iconClassName((_b = this.iconClass) != null ? _b : faIcon("download"));
    return "<a class='file-download-link' target='_blank' href='" + htmlEncode(downloadUrl) + "'><i class='" + iconClass + "'></i> " + htmlEncode(text2) + "</a>";
  }
  static dbFileUrl(filename) {
    filename = replaceAll(filename != null ? filename : "", "\\", "/");
    return resolveUrl("~/upload/") + filename;
  }
  initializeColumn(column) {
    column.referencedFields = column.referencedFields || [];
    if (this.originalNameProperty) {
      column.referencedFields.push(this.originalNameProperty);
      return;
    }
  }
  get displayFormat() {
    return this.props.displayFormat;
  }
  set displayFormat(value) {
    this.props.displayFormat = value;
  }
  get originalNameProperty() {
    return this.props.originalNameProperty;
  }
  set originalNameProperty(value) {
    this.props.originalNameProperty = value;
  }
  get iconClass() {
    return this.props.iconClass;
  }
  set iconClass(value) {
    this.props.iconClass = value;
  }
};
_init118 = __decoratorStart(null);
_FileDownloadFormatter = __decorateElement(_init118, 0, "FileDownloadFormatter", _FileDownloadFormatter_decorators, _FileDownloadFormatter);
__runInitializers(_init118, 1, _FileDownloadFormatter);
var FileDownloadFormatter = _FileDownloadFormatter;
var _MinuteFormatter_decorators, _init119;
_MinuteFormatter_decorators = [Decorators.registerFormatter("Serenity.MinuteFormatter")];
var _MinuteFormatter = class _MinuteFormatter {
  format(ctx) {
    return _MinuteFormatter.format(ctx.value);
  }
  static format(value) {
    var hour = Math.floor(value / 60);
    var minute = value - hour * 60;
    var hourStr, minuteStr;
    if (value == null || isNaN(value))
      return "";
    if (hour < 10)
      hourStr = "0" + hour;
    else
      hourStr = hour.toString();
    if (minute < 10)
      minuteStr = "0" + minute;
    else
      minuteStr = minute.toString();
    return stringFormat("{0}:{1}", hourStr, minuteStr);
  }
};
_init119 = __decoratorStart(null);
_MinuteFormatter = __decorateElement(_init119, 0, "MinuteFormatter", _MinuteFormatter_decorators, _MinuteFormatter);
__runInitializers(_init119, 1, _MinuteFormatter);
var MinuteFormatter = _MinuteFormatter;
var _NumberFormatter_decorators, _init120;
_NumberFormatter_decorators = [Decorators.registerFormatter("Serenity.NumberFormatter")];
var _NumberFormatter = class _NumberFormatter {
  constructor(props = {}) {
    this.props = props;
    var _a68;
    (_a68 = this.props) != null ? _a68 : this.props = {};
  }
  format(ctx) {
    return _NumberFormatter.format(ctx.value, this.displayFormat);
  }
  static format(value, format2) {
    var _a68;
    format2 = format2 != null ? format2 : "0.##";
    if (value == null)
      return "";
    if (typeof value === "number") {
      if (isNaN(value))
        return "";
      return htmlEncode(formatNumber(value, format2));
    }
    var dbl = parseDecimal(value.toString());
    if (dbl == null || isNaN(dbl))
      return (_a68 = value == null ? void 0 : value.toString()) != null ? _a68 : "";
    return htmlEncode(formatNumber(dbl, format2));
  }
  get displayFormat() {
    return this.props.displayFormat;
  }
  set displayFormat(value) {
    this.props.displayFormat = value;
  }
};
_init120 = __decoratorStart(null);
_NumberFormatter = __decorateElement(_init120, 0, "NumberFormatter", _NumberFormatter_decorators, _NumberFormatter);
__runInitializers(_init120, 1, _NumberFormatter);
var NumberFormatter = _NumberFormatter;
var _UrlFormatter_decorators, _init121;
_UrlFormatter_decorators = [Decorators.registerFormatter("Serenity.UrlFormatter", [IInitializeColumn])];
var UrlFormatter = class {
  constructor(props = {}) {
    this.props = props;
    var _a68;
    (_a68 = this.props) != null ? _a68 : this.props = {};
  }
  format(ctx) {
    var _a68, _b, _c, _d;
    var url = this.urlProperty ? ((_a68 = ctx.item[this.urlProperty]) != null ? _a68 : "").toString() : ((_b = ctx.value) != null ? _b : "").toString();
    if (!url)
      return "";
    if (this.urlFormat)
      url = stringFormat(this.urlFormat, url);
    url = resolveUrl(url);
    var display = this.displayProperty ? ((_c = ctx.item[this.displayProperty]) != null ? _c : "").toString() : ((_d = ctx.value) != null ? _d : "").toString();
    if (this.displayFormat)
      display = stringFormat(this.displayFormat, display);
    var s = "<a href='" + htmlEncode(url) + "'";
    if (this.target)
      s += " target='" + this.target + "'";
    s += ">" + htmlEncode(display) + "</a>";
    return s;
  }
  initializeColumn(column) {
    column.referencedFields = column.referencedFields || [];
    if (this.displayProperty) {
      column.referencedFields.push(this.displayProperty);
    }
    if (this.urlProperty) {
      column.referencedFields.push(this.urlProperty);
    }
  }
  get displayProperty() {
    return this.props.displayProperty;
  }
  set displayProperty(value) {
    this.props.displayProperty = value;
  }
  get displayFormat() {
    return this.props.displayFormat;
  }
  set displayFormat(value) {
    this.props.displayFormat = value;
  }
  get urlProperty() {
    return this.props.urlProperty;
  }
  set urlProperty(value) {
    this.props.urlProperty = value;
  }
  get urlFormat() {
    return this.props.urlFormat;
  }
  set urlFormat(value) {
    this.props.urlFormat = value;
  }
  get target() {
    return this.props.target;
  }
  set target(value) {
    this.props.target = value;
  }
};
_init121 = __decoratorStart(null);
UrlFormatter = __decorateElement(_init121, 0, "UrlFormatter", _UrlFormatter_decorators, UrlFormatter);
__runInitializers(_init121, 1, UrlFormatter);

// src/ui/helpers/slickhelpers.ts
var _GridRowSelectionMixin_decorators, _init122;
_GridRowSelectionMixin_decorators = [Decorators.registerClass("Serenity.GridRowSelectionMixin")];
var GridRowSelectionMixin = class {
  constructor(grid, options) {
    this.include = {};
    this.grid = grid;
    this.idField = grid.getView().idField;
    this.options = options || {};
    grid.getGrid().onClick.subscribe((e, p) => {
      if (e.target.classList.contains("select-item")) {
        e.preventDefault();
        var item = grid.getView().getItem(p.row);
        var id = item[this.idField].toString();
        if (this.include[id]) {
          delete this.include[id];
        } else {
          this.include[id] = true;
        }
        for (var i = 0; i < grid.getView().getLength(); i++) {
          grid.getGrid().updateRow(i);
        }
        this.updateSelectAll();
      }
    });
    grid.getGrid().onHeaderClick.subscribe((e1) => {
      if (Fluent.isDefaultPrevented(e1))
        return;
      if (e1.target.classList.contains("select-all-items")) {
        e1.preventDefault();
        if (Object.keys(this.include).length > 0) {
          clearKeys(this.include);
        } else {
          var items = grid.getView().getItems();
          for (var x of items.filter(this.isSelectable.bind(this))) {
            var id1 = x[this.idField];
            this.include[id1] = true;
          }
        }
        this.updateSelectAll();
        grid.getView().setItems(grid.getView().getItems(), true);
        setTimeout(this.updateSelectAll.bind(this), 0);
      }
    });
    grid.getView().onRowsChanged.subscribe(() => {
      return this.updateSelectAll();
    });
  }
  updateSelectAll() {
    var selectAllButton = this.grid.getElement().querySelector(".select-all-header .slick-column-name .select-all-items");
    if (selectAllButton) {
      var keys = Object.keys(this.include);
      selectAllButton.classList.toggle(
        "checked",
        keys.length > 0 && this.grid.getView().getItems().filter(
          this.isSelectable.bind(this)
        ).length <= keys.length
      );
    }
  }
  clear() {
    clearKeys(this.include);
    this.updateSelectAll();
  }
  resetCheckedAndRefresh() {
    this.include = {};
    this.updateSelectAll();
    this.grid.getView().populate();
  }
  selectKeys(keys) {
    for (var k of keys) {
      this.include[k] = true;
    }
    this.updateSelectAll();
  }
  getSelectedKeys() {
    return Object.keys(this.include);
  }
  getSelectedAsInt32() {
    return Object.keys(this.include).map(function(x) {
      return parseInt(x, 10);
    });
  }
  getSelectedAsInt64() {
    return Object.keys(this.include).map(function(x) {
      return parseInt(x, 10);
    });
  }
  setSelectedKeys(keys) {
    this.clear();
    for (var k of keys) {
      this.include[k] = true;
    }
    this.updateSelectAll();
  }
  isSelectable(item) {
    return item && (this.options.selectable == null || this.options.selectable(item));
  }
  static createSelectColumn(getMixin) {
    return {
      name: '<span class="select-all-items check-box no-float "></span>',
      nameIsHtml: true,
      toolTip: " ",
      field: "__select__",
      width: 27,
      minWidth: 27,
      headerCssClass: "select-all-header",
      sortable: false,
      format: function(ctx) {
        var item = ctx.item;
        var mixin = getMixin();
        if (!mixin || !mixin.isSelectable(item)) {
          return "";
        }
        var isChecked = mixin.include[ctx.item[mixin.idField]];
        return '<span class="select-item check-box no-float ' + (isChecked ? " checked" : "") + '"></span>';
      }
    };
  }
};
_init122 = __decoratorStart(null);
GridRowSelectionMixin = __decorateElement(_init122, 0, "GridRowSelectionMixin", _GridRowSelectionMixin_decorators, GridRowSelectionMixin);
__runInitializers(_init122, 1, GridRowSelectionMixin);
var _GridRadioSelectionMixin_decorators, _init123;
_GridRadioSelectionMixin_decorators = [Decorators.registerClass("GridRadioSelectionMixin")];
var GridRadioSelectionMixin = class {
  constructor(grid, options) {
    this.include = {};
    this.grid = grid;
    this.idField = grid.getView().idField;
    this.options = options || {};
    grid.getGrid().onClick.subscribe((e, p) => {
      if (e.target.classList.contains("rad-select-item")) {
        e.preventDefault();
        var item = grid.getView().getItem(p.row);
        if (!this.isSelectable(item)) {
          return;
        }
        var id = item[this.idField].toString();
        if (this.include[id] == true) {
          clearKeys(this.include);
        } else {
          clearKeys(this.include);
          this.include[id] = true;
        }
        for (var i = 0; i < grid.getView().getLength(); i++) {
          grid.getGrid().updateRow(i);
        }
      }
    });
  }
  isSelectable(item) {
    return item && (this.options.selectable == null || this.options.selectable(item));
  }
  clear() {
    clearKeys(this.include);
  }
  resetCheckedAndRefresh() {
    this.include = {};
    this.grid.getView().populate();
  }
  getSelectedKey() {
    var items = Object.keys(this.include);
    if (items != null && items.length > 0) {
      return items[0];
    }
    return null;
  }
  getSelectedAsInt32() {
    var items = Object.keys(this.include).map(function(x) {
      return parseInt(x, 10);
    });
    if (items != null && items.length > 0) {
      return items[0];
    }
    return null;
  }
  getSelectedAsInt64() {
    var items = Object.keys(this.include).map(function(x) {
      return parseInt(x, 10);
    });
    if (items != null && items.length > 0) {
      return items[0];
    }
    return null;
  }
  setSelectedKey(key) {
    this.clear();
    this.include[key] = true;
  }
  static createSelectColumn(getMixin) {
    return {
      name: "",
      toolTip: " ",
      field: "__select__",
      width: 27,
      minWidth: 27,
      headerCssClass: "",
      sortable: false,
      formatter: function(row, cell, value, column, item) {
        var mixin = getMixin();
        if (!mixin || !mixin.isSelectable(item)) {
          return "";
        }
        var isChecked = mixin.include[item[mixin.idField]];
        return '<input type="radio" name="radio-selection-group" class="rad-select-item no-float" style="cursor: pointer;width: 13px; height:13px;" ' + (isChecked ? " checked" : "") + " /> ";
      }
    };
  }
};
_init123 = __decoratorStart(null);
GridRadioSelectionMixin = __decorateElement(_init123, 0, "GridRadioSelectionMixin", _GridRadioSelectionMixin_decorators, GridRadioSelectionMixin);
__runInitializers(_init123, 1, GridRadioSelectionMixin);
var GridSelectAllButtonHelper;
((GridSelectAllButtonHelper2) => {
  function update(grid, getSelected) {
    var toolbar = grid.getElement().querySelector(".s-Toolbar");
    if (!toolbar) {
      return;
    }
    var btn = getWidgetFrom(toolbar, Toolbar).findButton("select-all-button");
    var items = grid.getView().getItems();
    btn.toggleClass("checked", items.length > 0 && !items.some(function(x) {
      return !getSelected(x);
    }));
  }
  GridSelectAllButtonHelper2.update = update;
  function define(getGrid, getId, getSelected, setSelected, text2, onClick) {
    var _a68;
    if (text2 == null) {
      text2 = (_a68 = tryGetText("Controls.CheckTreeEditor.SelectAll")) != null ? _a68 : "Select All";
    }
    return {
      title: text2,
      action: "select-all",
      cssClass: "select-all-button",
      onClick: function(e) {
        var grid = getGrid();
        var view = grid.getView();
        var btn = e.target.closest(".select-all-button");
        var makeSelected = !(btn == null ? void 0 : btn.classList.contains("checked"));
        view.beginUpdate();
        try {
          for (var item of view.getItems()) {
            setSelected(item, makeSelected);
            view.updateItem(getId(item), item);
          }
          onClick && onClick();
        } finally {
          view.endUpdate();
        }
        btn == null ? void 0 : btn.classList.toggle("checked", makeSelected);
      }
    };
  }
  GridSelectAllButtonHelper2.define = define;
})(GridSelectAllButtonHelper || (GridSelectAllButtonHelper = {}));
var GridUtils;
((GridUtils2) => {
  function addToggleButton(toolDiv, cssClass, callback, hint, initial) {
    toolDiv = isArrayLike(toolDiv) ? toolDiv[0] : toolDiv;
    var div = Fluent("div").class(["s-ToggleButton", cssClass]).prependTo(toolDiv).append(Fluent("a").attr("href", "#").attr("title", hint != null ? hint : "").on("click", function(e) {
      e.preventDefault();
      div.toggleClass("pressed");
      var pressed = div.hasClass("pressed");
      callback && callback(pressed);
    }));
    if (initial) {
      div.addClass("pressed");
    }
  }
  GridUtils2.addToggleButton = addToggleButton;
  function addIncludeDeletedToggle(toolDiv, view, hint, initial) {
    var includeDeleted = false;
    var oldSubmit = view.onSubmit;
    view.onSubmit = function(v) {
      v.params.IncludeDeleted = includeDeleted;
      if (oldSubmit != null) {
        return oldSubmit(v);
      }
      return true;
    };
    if (hint == null)
      hint = localText("Controls.EntityGrid.IncludeDeletedToggle");
    addToggleButton(
      toolDiv,
      "s-IncludeDeletedToggle",
      function(pressed) {
        includeDeleted = pressed;
        view.seekToPage = 1;
        view.populate();
      },
      hint,
      initial
    );
    Fluent.one(isArrayLike(toolDiv) ? toolDiv[0] : toolDiv, "disposing", function() {
      view.onSubmit = null;
      oldSubmit = null;
    });
  }
  GridUtils2.addIncludeDeletedToggle = addIncludeDeletedToggle;
  function addQuickSearchInput(toolDiv, view, fields, onChange) {
    var oldSubmit = view.onSubmit;
    var input;
    view.onSubmit = function(v) {
      var _a68;
      if (input) {
        var searchText = input.get_value();
        if (searchText && searchText.length > 0) {
          v.params.ContainsText = searchText;
        } else {
          delete v.params["ContainsText"];
        }
        var searchField = (_a68 = input.get_field()) == null ? void 0 : _a68.name;
        if (searchField != null && searchField.length > 0) {
          v.params.ContainsField = searchField;
        } else {
          delete v.params["ContainsField"];
        }
      }
      if (oldSubmit != null)
        return oldSubmit(v);
      return true;
    };
    var lastDoneEvent = null;
    input = addQuickSearchInputCustom(toolDiv, (field, query, done) => {
      onChange && onChange();
      view.seekToPage = 1;
      lastDoneEvent = done;
      view.populate();
    }, fields);
    view.onDataLoaded.subscribe(function(e, ui) {
      if (lastDoneEvent != null) {
        lastDoneEvent(view.getLength() > 0);
        lastDoneEvent = null;
      }
    });
    return input;
  }
  GridUtils2.addQuickSearchInput = addQuickSearchInput;
  function addQuickSearchInputCustom(container, onSearch, fields) {
    var input = Fluent("input").attr("type", "text");
    var div = Fluent("div").class("s-QuickSearchBar").append(input).prependTo(isArrayLike(container) ? container[0] : container);
    if (fields != null && fields.length > 0) {
      div.addClass("has-quick-search-fields");
    }
    return new QuickSearchInput({
      element: input,
      fields,
      onSearch
    });
  }
  GridUtils2.addQuickSearchInputCustom = addQuickSearchInputCustom;
  function makeOrderable(grid, handleMove) {
    var moveRowsPlugin = new RowMoveManager({ cancelEditOnDrag: true });
    moveRowsPlugin.onBeforeMoveRows.subscribe(function(e, data) {
      for (var i = 0; !!(i < data.rows.length); i++) {
        if (!!(data.rows[i] === data.insertBefore || data.rows[i] === data.insertBefore - 1)) {
          e.stopPropagation();
          return false;
        }
      }
      return true;
    });
    moveRowsPlugin.onMoveRows.subscribe(function(_, data) {
      handleMove(data.rows, data.insertBefore);
      try {
        grid.setSelectedRows([]);
      } catch (e) {
      }
    });
    grid.registerPlugin(moveRowsPlugin);
  }
  GridUtils2.makeOrderable = makeOrderable;
  function makeOrderableWithUpdateRequest(grid, getId, getDisplayOrder, service, getUpdateRequest) {
    makeOrderable(grid.getGrid(), function(rows, insertBefore) {
      var _a68, _b;
      if (rows.length === 0) {
        return;
      }
      var order;
      var index = insertBefore;
      if (index < 0) {
        order = 1;
      } else if (insertBefore >= grid.getGrid().getDataLength()) {
        order = (_a68 = getDisplayOrder(grid.getGrid().getDataItem(grid.getGrid().getDataLength() - 1))) != null ? _a68 : 0;
        if (order === 0) {
          order = insertBefore + 1;
        } else {
          order = order + 1;
        }
      } else {
        order = (_b = getDisplayOrder(grid.getGrid().getDataItem(insertBefore))) != null ? _b : 0;
        if (order === 0) {
          order = insertBefore + 1;
        }
      }
      var i = 0;
      var next = null;
      next = function() {
        serviceRequest(
          service,
          getUpdateRequest(getId(grid.getGrid().getDataItem(rows[i])), order++),
          () => {
            i++;
            if (i < rows.length) {
              next();
            } else {
              grid.getView().populate();
            }
          }
        );
      };
      next();
    });
  }
  GridUtils2.makeOrderableWithUpdateRequest = makeOrderableWithUpdateRequest;
})(GridUtils || (GridUtils = {}));
var PropertyItemSlickConverter;
((PropertyItemSlickConverter2) => {
  function toSlickColumns(items) {
    var result = [];
    if (items == null) {
      return result;
    }
    for (var i = 0; i < items.length; i++) {
      result.push(PropertyItemSlickConverter2.toSlickColumn(items[i]));
    }
    return result;
  }
  PropertyItemSlickConverter2.toSlickColumns = toSlickColumns;
  function toSlickColumn(item) {
    var _a68, _b;
    var result = {
      field: item.name,
      sourceItem: item,
      cssClass: item.cssClass,
      headerCssClass: item.headerCssClass,
      sortable: item.sortable !== false,
      sortOrder: (_a68 = item.sortOrder) != null ? _a68 : 0,
      width: item.width != null ? item.width : 80,
      minWidth: (_b = item.minWidth) != null ? _b : 30,
      maxWidth: item.maxWidth == null || item.maxWidth === 0 ? null : item.maxWidth,
      resizable: item.resizable == null || !!item.resizable
    };
    result.visible = item.visible !== false && item.filterOnly !== true && (item.readPermission == null || Authorization.hasPermission(item.readPermission));
    var name = tryGetText(item.title);
    if (name == null)
      name = item.title;
    result.name = name;
    if (item.alignment != null && item.alignment.length > 0) {
      if (result.cssClass) {
        result.cssClass += " align-" + item.alignment;
      } else {
        result.cssClass = "align-" + item.alignment;
      }
    }
    if (!item.formatterType)
      return result;
    const formatterType = FormatterTypeRegistry.getOrLoad(item.formatterType);
    const then = (formatterType2) => {
      var _a69;
      var formatter = new formatterType2((_a69 = item.formatterParams) != null ? _a69 : {});
      if (item.formatterParams != null) {
        ReflectionOptionsSetter.set(formatter, item.formatterParams);
      }
      var initializer = safeCast(formatter, IInitializeColumn);
      if (initializer != null) {
        initializer.initializeColumn(result);
      }
      result.format = (ctx) => formatter.format(ctx);
    };
    if (isPromiseLike(formatterType)) {
      result.format = (ctx) => {
        if (ctx.row != null && ctx.cell != null && ctx.grid instanceof Grid2) {
          const grid = ctx.grid;
          const row = ctx.row;
          const cell = ctx.cell;
          formatterType.then(() => {
            var _a69;
            (_a69 = grid.updateCell) == null ? void 0 : _a69.call(grid, row, cell);
          });
        }
        return "";
      };
      formatterType.then(then);
    } else {
      then(formatterType);
    }
    return result;
  }
  PropertyItemSlickConverter2.toSlickColumn = toSlickColumn;
})(PropertyItemSlickConverter || (PropertyItemSlickConverter = {}));
var SlickFormatting;
((SlickFormatting2) => {
  function getEnumText(enumKey, name) {
    return EnumFormatter.getText(enumKey, name);
  }
  SlickFormatting2.getEnumText = getEnumText;
  function treeToggle(getView, getId, formatter) {
    return function(ctx) {
      var _a68, _b;
      var text2 = formatter(ctx);
      var view = getView();
      var indent = (_a68 = ctx.item._indent) != null ? _a68 : 0;
      var spacer = Fluent("span").class("s-TreeIndent");
      spacer.getNode().style.width = 15 * indent + "px";
      var toggle = Fluent("span").class("s-TreeToggle");
      var id = getId(ctx.item);
      var idx = view.getIdxById(id);
      var next = view.getItemByIdx(idx + 1);
      if (next != null) {
        var nextIndent = (_b = next._indent) != null ? _b : 0;
        if (nextIndent > indent) {
          if (!!!!ctx.item._collapsed) {
            toggle.addClass("s-TreeExpand");
          } else {
            toggle.addClass("s-TreeCollapse");
          }
        }
      }
      if (text2 instanceof Element) {
        var fragment = document.createDocumentFragment();
        fragment.appendChild(spacer.getNode());
        fragment.appendChild(toggle.getNode());
        return fragment;
      } else if (text2 instanceof DocumentFragment) {
        text2.prepend(toggle.getNode());
        text2.prepend(spacer.getNode());
        return text2;
      } else
        return spacer.getNode().outerHTML + toggle.getNode().outerHTML + (text2 != null ? text2 : "");
    };
  }
  SlickFormatting2.treeToggle = treeToggle;
  function date(format2) {
    if (format2 == null) {
      format2 = Culture.dateFormat;
    }
    return function(ctx) {
      return ctx.escape(DateFormatter.format(ctx.value, format2));
    };
  }
  SlickFormatting2.date = date;
  function dateTime(format2) {
    if (format2 == null) {
      format2 = Culture.dateTimeFormat;
    }
    return function(ctx) {
      return ctx.escape(DateFormatter.format(ctx.value, format2));
    };
  }
  SlickFormatting2.dateTime = dateTime;
  function checkBox() {
    return function(ctx) {
      return '<span class="check-box no-float ' + (!!ctx.value ? " checked" : "") + '"></span>';
    };
  }
  SlickFormatting2.checkBox = checkBox;
  function number(format2) {
    return function(ctx) {
      return NumberFormatter.format(ctx.value, format2);
    };
  }
  SlickFormatting2.number = number;
  function getItemType(link) {
    var _a68;
    return (_a68 = isArrayLike(link) ? link[0] : link) == null ? void 0 : _a68.getAttribute("data-item-type");
  }
  SlickFormatting2.getItemType = getItemType;
  function getItemId(link) {
    var _a68;
    var value = (_a68 = isArrayLike(link) ? link[0] : link) == null ? void 0 : _a68.getAttribute("data-item-id");
    return value == null ? null : value.toString();
  }
  SlickFormatting2.getItemId = getItemId;
  function itemLinkText(itemType, id, text2, extraClass, encode) {
    var link = Fluent("a").class([`s-EditLink s-${replaceAll(itemType, ".", "-")}Link`, extraClass]).attr("href", id != null ? "#" + replaceAll(itemType, ".", "-") + "/" + id : "").data("item-type", itemType).data("item-id", "" + id);
    if (text2 instanceof Node) {
      link.append(text2);
      return link.getNode();
    } else if (text2 == null || text2 === "") {
      return link.getNode().outerHTML;
    } else if (encode) {
      return link.text(text2).getNode().outerHTML;
    } else {
      link.getNode().innerHTML = text2;
      return link.getNode().outerHTML;
    }
  }
  SlickFormatting2.itemLinkText = itemLinkText;
  function itemLink(itemType, idField, getText, cssClass, encode) {
    return function(ctx) {
      var _a68, _b;
      var text2 = (_a68 = getText == null ? ctx.value : getText(ctx)) != null ? _a68 : "";
      if ((_b = ctx.item) == null ? void 0 : _b.__nonDataRow) {
        return text2 instanceof Node ? text2 : encode ? htmlEncode(text2) : text2;
      }
      return itemLinkText(
        itemType,
        ctx.item[idField],
        text2,
        cssClass == null ? "" : cssClass(ctx),
        encode
      );
    };
  }
  SlickFormatting2.itemLink = itemLink;
})(SlickFormatting || (SlickFormatting = {}));
var SlickHelper;
((SlickHelper2) => {
  function setDefaults(columns, localTextPrefix) {
    for (var col of columns) {
      col.sortable = col.sortable != null ? col.sortable : true;
      var id = col.id;
      if (id == null) {
        id = col.field;
      }
      col.id = id;
      if (localTextPrefix != null && col.id != null && (col.name == null || col.name.startsWith("~"))) {
        var key = col.name != null ? col.name.substring(1) : col.id;
        col.name = localText(localTextPrefix + key);
      }
    }
    return columns;
  }
  SlickHelper2.setDefaults = setDefaults;
})(SlickHelper || (SlickHelper = {}));
var SlickTreeHelper;
((SlickTreeHelper2) => {
  function filterCustom(item, getParent) {
    var parent2 = getParent(item);
    var loop = 0;
    while (parent2 != null) {
      if (!!parent2._collapsed) {
        return false;
      }
      parent2 = getParent(parent2);
      if (loop++ > 1e3) {
        throw new Error(
          "Possible infinite loop, check parents has no circular reference!"
        );
      }
    }
    return true;
  }
  SlickTreeHelper2.filterCustom = filterCustom;
  function filterById(item, view, getParentId) {
    return filterCustom(item, function(x) {
      var parentId = getParentId(x);
      if (parentId == null) {
        return null;
      }
      return view.getItemById(parentId);
    });
  }
  SlickTreeHelper2.filterById = filterById;
  function setCollapsed(items, collapsed) {
    if (items != null) {
      for (var item of items) {
        item._collapsed = collapsed;
      }
    }
  }
  SlickTreeHelper2.setCollapsed = setCollapsed;
  function setCollapsedFlag(item, collapsed) {
    item._collapsed = collapsed;
  }
  SlickTreeHelper2.setCollapsedFlag = setCollapsedFlag;
  function setIndents(items, getId, getParentId, setCollapsed2) {
    var depth = 0;
    var depths = {};
    for (var line = 0; line < items.length; line++) {
      var item = items[line];
      if (line > 0) {
        var parentId = getParentId(item);
        if (parentId != null && parentId === getId(items[line - 1])) {
          depth += 1;
        } else if (parentId == null) {
          depth = 0;
        } else if (parentId !== getParentId(items[line - 1])) {
          if (depths[parentId] != null) {
            depth = depths[parentId] + 1;
          } else {
            depth = 0;
          }
        }
      }
      depths[getId(item)] = depth;
      item._indent = depth;
      if (setCollapsed2 != null) {
        item._collapsed = setCollapsed2;
      }
    }
  }
  SlickTreeHelper2.setIndents = setIndents;
  function toggleClick(e, row, cell, view, getId) {
    var target = e.target;
    if (!target.classList.contains("s-TreeToggle")) {
      return;
    }
    if (target.classList.contains("s-TreeCollapse") || target.classList.contains("s-TreeExpand")) {
      var item = view.getItem(row);
      if (item != null) {
        if (!!!item._collapsed) {
          item._collapsed = true;
        } else {
          item._collapsed = false;
        }
        view.updateItem(getId(item), item);
      }
      if (e.shiftKey) {
        view.beginUpdate();
        try {
          setCollapsed(view.getItems(), !!item._collapsed);
          view.setItems(view.getItems(), true);
        } finally {
          view.endUpdate();
        }
      }
    }
  }
  SlickTreeHelper2.toggleClick = toggleClick;
})(SlickTreeHelper || (SlickTreeHelper = {}));
var ColumnsBase = class {
  constructor(items) {
    var _a68;
    this.__items = items;
    for (var col of items) {
      let id = col.id;
      if (id && !this[id])
        this[id] = col;
    }
    for (var col of items) {
      let id = (_a68 = col.sourceItem) == null ? void 0 : _a68.name;
      if (id && !this[id])
        this[id] = col;
    }
    for (var col of items) {
      let id = col.field;
      if (id && !this[id])
        this[id] = col;
    }
  }
  valueOf() {
    return this.__items;
  }
};

// src/ui/datagrid/datagrid.ts
import { AutoTooltips, Grid as Grid3 } from "@serenity-is/sleekgrid";
var _DataGrid_decorators, _init124, _a62;
_DataGrid_decorators = [Decorators.registerClass("Serenity.DataGrid", [IReadOnly])];
var _DataGrid = class _DataGrid extends (_a62 = Widget) {
  constructor(props) {
    super(props);
    this.restoringSettings = 0;
    this.domNode.classList.add("s-DataGrid");
    var layout = function() {
      this.layout();
      if (this._layoutTimer != null)
        LayoutTimer.store(this._layoutTimer);
    }.bind(this);
    this.element.addClass("require-layout").on("layout." + this.uniqueName, layout);
    if (this.useLayoutTimer())
      this._layoutTimer = LayoutTimer.onSizeChange(() => this.domNode && this.domNode, debounce(layout, 50));
    this.setTitle(this.getInitialTitle());
    var buttons = this.getButtons();
    if (buttons != null) {
      this.createToolbar(buttons);
    }
    this.slickContainer = this.createSlickContainer();
    this.view = this.createView();
    this.syncOrAsyncThen(this.getPropertyItemsData, this.getPropertyItemsDataAsync, (itemsData) => {
      this.propertyItemsReady(itemsData);
      this.afterInit();
    });
  }
  propertyItemsReady(itemsData) {
    var _a68;
    this.propertyItemsData = itemsData;
    this.allColumns = (_a68 = this.allColumns) != null ? _a68 : this.getColumns();
    this.slickGrid = this.createSlickGrid();
    if (this.enableFiltering()) {
      this.createFilterBar();
    }
    if (this.usePager()) {
      this.createPager();
    }
    this.bindToSlickEvents();
    this.bindToViewEvents();
    if (this.toolbar) {
      this.createToolbarExtensions();
    }
    this.createQuickFilters();
    this.updateDisabledState();
    this.updateInterface();
    this.initialSettings = this.getCurrentSettings(null);
    var restoreResult = this.restoreSettings(null, null);
    if (restoreResult == null ? void 0 : restoreResult.then)
      restoreResult.then(() => window.setTimeout(() => this.initialPopulate(), 0));
    else
      window.setTimeout(() => this.initialPopulate(), 0);
  }
  afterInit() {
  }
  useAsync() {
    return false;
  }
  useLayoutTimer() {
    return true;
  }
  layout() {
    if (!this.domNode || !Fluent.isVisibleLike(this.domNode) || !this.slickContainer || !this.slickGrid)
      return;
    var responsiveHeight = this.domNode.classList.contains("responsive-height");
    var madeAutoHeight = this.slickGrid != null && this.slickGrid.getOptions().autoHeight;
    var shouldAutoHeight = responsiveHeight && window.innerWidth < 768;
    if (shouldAutoHeight) {
      if (!madeAutoHeight) {
        this.slickGrid.setOptions({ autoHeight: true });
      }
    } else if (madeAutoHeight) {
      this.slickContainer.getNode().style.height = "";
      this.slickContainer.findAll(".slick-viewport").forEach((x) => x.style.height = "");
      this.slickGrid.setOptions({ autoHeight: false });
    }
    this.slickGrid.resizeCanvas();
  }
  getInitialTitle() {
    return null;
  }
  createToolbarExtensions() {
  }
  ensureQuickFilterBar() {
    if (this.quickFiltersDiv == null)
      this.createQuickFilters([]);
    return this.quickFiltersBar;
  }
  createQuickFilters(filters) {
    if (this.quickFiltersDiv == null && (filters != null || (filters = this.getQuickFilters()) && filters != null && filters.length)) {
      this.quickFiltersDiv = Fluent("div").class("quick-filters-bar");
      if (this.toolbar) {
        Fluent("div").class("clear").appendTo(this.toolbar.domNode);
        this.quickFiltersDiv.appendTo(this.toolbar.domNode);
      } else {
        this.quickFiltersDiv.appendTo(Fluent("div").class("s-Toolbar").insertBefore(this.slickContainer));
      }
      this.quickFiltersBar = new QuickFilterBar({
        filters,
        getTitle: (filter) => this.determineText((pre) => pre + filter.field),
        idPrefix: this.uniqueName + "_QuickFilter_",
        element: this.quickFiltersDiv
      });
      this.quickFiltersBar.onChange = (e) => this.quickFilterChange(e);
    }
  }
  getQuickFilters() {
    return this.allColumns.filter(function(x) {
      return x.sourceItem && x.sourceItem.quickFilter === true && (x.sourceItem.readPermission == null || Authorization.hasPermission(x.sourceItem.readPermission));
    }).map((x) => _DataGrid.propertyItemToQuickFilter(x.sourceItem)).filter((x) => x != null);
  }
  static propertyItemToQuickFilter(item) {
    var _a68, _b, _c;
    var quick = {};
    var name = item.name;
    var title = tryGetText(item.title);
    if (title == null) {
      title = item.title;
      if (title == null) {
        title = name;
      }
    }
    var filteringType = FilteringTypeRegistry.get((_a68 = item.filteringType) != null ? _a68 : "String");
    if (filteringType === DateFiltering) {
      quick = QuickFilterBar.dateRange(name, title);
    } else if (filteringType === DateTimeFiltering) {
      quick = QuickFilterBar.dateTimeRange(name, title, (_b = item.editorParams) == null ? void 0 : _b.useUtc);
    } else if (filteringType === BooleanFiltering) {
      var q = item.quickFilterParams || {};
      var f = item.filteringParams || {};
      var trueText = q["trueText"];
      if (trueText == null) {
        trueText = f["trueText"];
      }
      var falseText = q["falseText"];
      if (falseText == null) {
        falseText = f["falseText"];
      }
      quick = QuickFilterBar.boolean(name, title, trueText, falseText);
    } else {
      var filtering = new filteringType((_c = item.filteringParams) != null ? _c : {});
      if (filtering && isInstanceOfType(filtering, IQuickFiltering)) {
        ReflectionOptionsSetter.set(filtering, item.filteringParams);
        filtering.set_field(item);
        filtering.set_operator({ key: FilterOperators.EQ });
        filtering.initQuickFilter(quick);
        quick.options = extend(deepClone(quick.options), item.quickFilterParams);
      } else {
        return null;
      }
    }
    if (!!item.quickFilterSeparator) {
      quick.separator = true;
    }
    quick.cssClass = item.quickFilterCssClass;
    return quick;
  }
  findQuickFilter(type, field) {
    var _a68, _b;
    if (this.quickFiltersBar != null)
      return this.quickFiltersBar.find(type, field);
    const selector = "#" + CSS.escape(this.uniqueName + "_QuickFilter_" + field);
    return getWidgetFrom((_b = (_a68 = this.domNode) == null ? void 0 : _a68.querySelector(selector)) != null ? _b : selector, type);
  }
  tryFindQuickFilter(type, field) {
    var _a68, _b;
    if (this.quickFiltersBar != null)
      return this.quickFiltersBar.tryFind(type, field);
    const selector = "#" + CSS.escape(this.uniqueName + "_QuickFilter_" + field);
    return tryGetWidget((_b = (_a68 = this.domNode) == null ? void 0 : _a68.querySelector(selector)) != null ? _b : selector, type);
  }
  createIncludeDeletedButton() {
    if (this.getIsActiveProperty() || this.getIsDeletedProperty())
      GridUtils.addIncludeDeletedToggle(this.toolbar.domNode, this.view, null, false);
  }
  getQuickSearchFields() {
    return null;
  }
  createQuickSearchInput() {
    var _a68;
    var input = GridUtils.addQuickSearchInput(this.toolbar.domNode, this.view, this.getQuickSearchFields(), () => this.persistSettings(null));
    (_a68 = input == null ? void 0 : input.domNode) == null ? void 0 : _a68.setAttribute("id", this.idPrefix + "QuickSearchInput");
  }
  destroy() {
    if (this._layoutTimer) {
      this._layoutTimer = LayoutTimer.off(this._layoutTimer);
    }
    if (this.quickFiltersBar) {
      this.quickFiltersBar.destroy();
      this.quickFiltersBar = null;
    }
    if (this.toolbar) {
      this.toolbar.destroy();
      this.toolbar = null;
    }
    if (this.slickGrid) {
      this.slickGrid.onClick.clear();
      this.slickGrid.onSort.clear();
      this.slickGrid.onColumnsResized.clear();
      this.slickGrid.onColumnsReordered.clear();
      this.slickGrid.destroy();
      this.slickGrid = null;
    }
    if (this.view) {
      this.view.onDataChanged.clear();
      this.view.onSubmit = null;
      this.view.setFilter(null);
      this.view = null;
    }
    this.titleDiv = null;
    super.destroy();
  }
  getItemCssClass(item, index) {
    var activeFieldName = this.getIsActiveProperty();
    var deletedFieldName = this.getIsDeletedProperty();
    if (activeFieldName && deletedFieldName)
      return null;
    if (activeFieldName) {
      var value = item[activeFieldName];
      if (value == null) {
        return null;
      }
      if (typeof value === "number") {
        if (value < 0) {
          return "deleted";
        } else if (value === 0) {
          return "inactive";
        }
      } else if (typeof value === "boolean") {
        if (value === false) {
          return "deleted";
        }
      }
    } else {
      return item[deletedFieldName] ? "deleted" : null;
    }
    return null;
  }
  getItemMetadata(item, index) {
    var itemClass = this.getItemCssClass(item, index);
    if (!itemClass) {
      return new Object();
    }
    return { cssClasses: itemClass };
  }
  postProcessColumns(columns) {
    SlickHelper.setDefaults(columns, this.getLocalTextDbPrefix());
    var delta = this.getColumnWidthDelta();
    var scale = this.getColumnWidthScale();
    if (scale < 0)
      scale = 1;
    if (delta !== 0 || scale !== 1) {
      for (var col of columns) {
        if (typeof col.width === "number")
          col.width = Math.round(col.width * scale + delta);
        if (typeof col.minWidth === "number")
          col.minWidth = Math.round(col.minWidth * scale + delta);
        if (typeof col.maxWidth === "number")
          col.maxWidth = Math.round(col.maxWidth * scale + delta);
      }
    }
    return columns;
  }
  getColumnWidthDelta() {
    var _a68;
    return (_a68 = _DataGrid.defaultColumnWidthDelta) != null ? _a68 : 0;
  }
  getColumnWidthScale() {
    var _a68;
    return (_a68 = _DataGrid.defaultColumnWidthScale) != null ? _a68 : 1;
  }
  initialPopulate() {
    var self2 = this;
    if (this.populateWhenVisible()) {
      LazyLoadHelper.executeEverytimeWhenShown(this.domNode, function() {
        self2.refreshIfNeeded();
      }, false);
      if (Fluent.isVisibleLike(this.domNode) && this.view) {
        this.view.populate();
      }
    } else if (this.view) {
      this.view.populate();
    }
  }
  canFilterColumn(column) {
    return column.sourceItem != null && column.sourceItem.notFilterable !== true && (column.sourceItem.readPermission == null || Authorization.hasPermission(column.sourceItem.readPermission));
  }
  initializeFilterBar() {
    this.filterBar.set_store(new FilterStore(
      this.allColumns.filter((c) => this.canFilterColumn(c)).map((x) => x.sourceItem)
    ));
    this.filterBar.get_store().add_changed(() => {
      if (this.restoringSettings <= 0) {
        this.persistSettings(null);
        this.view && (this.view.seekToPage = 1);
        this.refresh();
      }
    });
  }
  createSlickGrid() {
    var visibleColumns = this.postProcessColumns(this.allColumns).filter(function(x) {
      return x.visible !== false;
    });
    var slickOptions = this.getSlickOptions();
    var grid = new Grid3(this.slickContainer.getNode(), this.view, visibleColumns, slickOptions);
    grid.registerPlugin(new AutoTooltips({
      enableForHeaderCells: true
    }));
    this.slickGrid = grid;
    this.setInitialSortOrder();
    return grid;
  }
  setInitialSortOrder() {
    var sortBy = this.getDefaultSortBy();
    if (this.view) {
      this.view.sortBy = Array.prototype.slice.call(sortBy);
    }
    var mapped = sortBy.map(function(s) {
      var x;
      if (s && s.toLowerCase().endsWith(" desc")) {
        return {
          columnId: s.substr(0, s.length - 5).trimEnd(),
          sortAsc: false
        };
      } else return {
        columnId: s,
        sortAsc: true
      };
      return x;
    });
    this.slickGrid.setSortColumns(mapped);
  }
  itemAt(row) {
    return this.slickGrid.getDataItem(row);
  }
  rowCount() {
    return this.slickGrid.getDataLength();
  }
  getItems() {
    return this.view.getItems();
  }
  setItems(value) {
    this.view.setItems(value, true);
  }
  bindToSlickEvents() {
    var self2 = this;
    this._slickGridOnSort = (_, p) => {
      self2.view.populateLock();
      try {
        var sortBy = [];
        var col;
        if (!!p.multiColumnSort) {
          for (var i = 0; !!(i < p.sortCols.length); i++) {
            var x = p.sortCols[i];
            col = x.sortCol;
            if (col == null) {
              col = {};
            }
            sortBy.push(col.field + (!!x.sortAsc ? "" : " DESC"));
          }
        } else {
          var col = p.sortCol;
          if (col == null) {
            col = {};
          }
          sortBy.push(col.field + (!!p.sortAsc ? "" : " DESC"));
        }
        self2.view.seekToPage = 1;
        self2.view.sortBy = sortBy;
      } finally {
        self2.view.populateUnlock();
      }
      if (self2.view.getLocalSort && self2.view.getLocalSort()) {
        self2.view.sort();
      } else {
        self2.view.populate();
      }
      this.persistSettings(null);
    };
    this.slickGrid.onSort.subscribe(this._slickGridOnSort);
    this._slickGridOnClick = (e1, p1) => {
      self2.onClick(e1, p1.row, p1.cell);
    };
    this.slickGrid.onClick.subscribe(this._slickGridOnClick);
    this.slickGrid.onColumnsReordered.subscribe(() => {
      return this.persistSettings(null);
    });
    this.slickGrid.onColumnsResized.subscribe(() => {
      return this.persistSettings(null);
    });
  }
  getAddButtonCaption() {
    var _a68;
    return (_a68 = tryGetText("Controls.DataGrid.NewButton")) != null ? _a68 : "New";
  }
  getButtons() {
    return [];
  }
  editItem(entityOrId) {
    throw new Error("Not Implemented!");
  }
  editItemOfType(itemType, entityOrId) {
    if (itemType === this.getItemType()) {
      this.editItem(entityOrId);
      return;
    }
    throw new Error("Not Implemented!");
  }
  onClick(e, row, cell) {
    if (Fluent.isDefaultPrevented(e)) {
      return;
    }
    var target = e.target;
    if (!target.classList.contains("s-EditLink")) {
      target = target.closest("a");
    }
    if (target && target.classList.contains("s-EditLink")) {
      e.preventDefault();
      this.editItemOfType(SlickFormatting.getItemType(target), SlickFormatting.getItemId(target));
    }
  }
  viewDataChanged(e, rows) {
    this.markupReady();
    this.layout();
  }
  bindToViewEvents() {
    var self2 = this;
    this.view.onDataChanged.subscribe(function(e, d) {
      return self2.viewDataChanged(e, d);
    });
    this.view.onSubmit = function(view) {
      return self2.onViewSubmit();
    };
    this.view.setFilter(function(item, view1) {
      return self2.onViewFilter(item);
    });
    this.view.onProcessData = function(response, view2) {
      return self2.onViewProcessData(response);
    };
  }
  onViewProcessData(response) {
    return response;
  }
  onViewFilter(item) {
    return true;
  }
  getIncludeColumns(include) {
    var columns = this.slickGrid.getColumns();
    for (var column of columns) {
      if (column.field) {
        include[column.field] = true;
      }
      if (column.referencedFields) {
        for (var x of column.referencedFields) {
          include[x] = true;
        }
      }
    }
  }
  setCriteriaParameter() {
    delete this.view.params["Criteria"];
    if (this.filterBar) {
      var criteria = this.filterBar.get_store().get_activeCriteria();
      if (!Criteria.isEmpty(criteria)) {
        this.view.params.Criteria = criteria;
      }
    }
  }
  setEquality(field, value) {
    setEquality(this.view.params, field, value);
  }
  setIncludeColumnsParameter() {
    var include = {};
    this.getIncludeColumns(include);
    var array = [];
    for (var key of Object.keys(include)) {
      array.push(key);
    }
    this.view.params.IncludeColumns = array;
  }
  onViewSubmit() {
    if (this._isDisabled || !this.getGridCanLoad()) {
      return false;
    }
    this.setCriteriaParameter();
    this.setIncludeColumnsParameter();
    this.invokeSubmitHandlers();
    return true;
  }
  markupReady() {
  }
  createSlickContainer() {
    return Fluent("div").class("grid-container").appendTo(this.domNode);
  }
  createView() {
    var opt = this.getViewOptions();
    return new RemoteView(opt);
  }
  getDefaultSortBy() {
    if (this.slickGrid) {
      var columns = this.slickGrid.getColumns().filter(function(x) {
        return x.sortOrder && x.sortOrder !== 0;
      });
      if (columns.length > 0) {
        columns.sort(function(x1, y) {
          return Math.abs(x1.sortOrder) < Math.abs(y.sortOrder) ? -1 : Math.abs(x1.sortOrder) > Math.abs(y.sortOrder) ? 1 : 0;
        });
        var list = [];
        for (var i = 0; i < columns.length; i++) {
          var col = columns[i];
          list.push(col.field + (col.sortOrder < 0 ? " DESC" : ""));
        }
        return list;
      }
    }
    return [];
  }
  usePager() {
    return false;
  }
  enableFiltering() {
    var _a68;
    return (_a68 = this.getCustomAttribute(FilterableAttribute)) == null ? void 0 : _a68.value;
  }
  populateWhenVisible() {
    return false;
  }
  createFilterBar() {
    this.filterBar = new FilterDisplayBar({
      element: (el) => this.domNode.append(el)
    });
    this.initializeFilterBar();
  }
  getPagerOptions() {
    return {
      view: this.view,
      rowsPerPage: 20,
      rowsPerPageOptions: [20, 100, 500, 2500]
    };
  }
  createPager() {
    new SlickPager(__spreadProps(__spreadValues({}, this.getPagerOptions()), { element: (el) => this.domNode.append(el) }));
  }
  getViewOptions() {
    var opt = {};
    opt.idField = this.getIdProperty();
    opt.sortBy = this.getDefaultSortBy();
    if (!this.usePager()) {
      opt.rowsPerPage = 0;
    } else if (this.domNode.classList.contains("responsive-height")) {
      opt.rowsPerPage = window.innerWidth < 768 ? 20 : 100;
    } else {
      opt.rowsPerPage = 100;
    }
    opt.getItemMetadata = (item, index) => {
      return this.getItemMetadata(item, index);
    };
    return opt;
  }
  createToolbar(buttons) {
    this.toolbar = new Toolbar({
      buttons,
      hotkeyContext: this.domNode,
      element: (el) => this.domNode.appendChild(el).classList.add("grid-toolbar")
    });
  }
  getTitle() {
    if (!this.titleDiv) {
      return null;
    }
    return this.titleDiv.findFirst(".title-text").text();
  }
  setTitle(value) {
    if (value !== this.getTitle()) {
      if (value == null) {
        if (this.titleDiv) {
          this.titleDiv.remove();
          this.titleDiv = null;
        }
      } else {
        if (!this.titleDiv) {
          this.titleDiv = Fluent("div").class("grid-title").append(Fluent("div").class("title-text")).prependTo(this.domNode);
        }
        this.titleDiv.findFirst(".title-text").text(value);
      }
      this.layout();
    }
  }
  getItemType() {
    return "Item";
  }
  itemLink(itemType, idField, text2, cssClass, encode = true) {
    if (itemType == null) {
      itemType = this.getItemType();
    }
    if (idField == null) {
      idField = this.getIdProperty();
    }
    return SlickFormatting.itemLink(itemType, idField, text2, cssClass, encode);
  }
  getColumnsKey() {
    var _a68;
    return (_a68 = this.getCustomAttribute(ColumnsKeyAttribute)) == null ? void 0 : _a68.value;
  }
  getPropertyItems() {
    var _a68;
    return ((_a68 = this.propertyItemsData) == null ? void 0 : _a68.items) || [];
  }
  getPropertyItemsData() {
    var columnsKey = this.getColumnsKey();
    if (this.getColumnsKey === _DataGrid.prototype.getColumnsKey && this.getPropertyItems !== _DataGrid.prototype.getPropertyItems && !ScriptData.canLoad("Columns." + columnsKey)) {
      return {
        items: this.getPropertyItems(),
        additionalItems: []
      };
    }
    if (columnsKey) {
      return getColumnsData(columnsKey);
    }
    return { items: [], additionalItems: [] };
  }
  getPropertyItemsDataAsync() {
    return __async(this, null, function* () {
      var columnsKey = this.getColumnsKey();
      if (columnsKey) {
        return yield getColumnsDataAsync(columnsKey);
      }
      return { items: [], additionalItems: [] };
    });
  }
  getColumns() {
    return this.propertyItemsToSlickColumns(this.getPropertyItems());
  }
  wrapFormatterWithEditLink(column, item) {
    const orgFormat = column.format;
    const itemType = item.editLinkItemType || null;
    const idField = item.editLinkIdField || null;
    const linkClass = item.editLinkCssClass || null;
    column.format = this.itemLink(
      itemType,
      idField,
      (ctx) => orgFormat != null ? orgFormat(ctx) : ctx.escape(),
      () => linkClass,
      false
    );
    if (idField) {
      column.referencedFields = column.referencedFields || [];
      column.referencedFields.push(idField);
    }
  }
  propertyItemsToSlickColumns(propertyItems) {
    var columns = PropertyItemSlickConverter.toSlickColumns(propertyItems);
    for (var i = 0; i < propertyItems.length; i++) {
      var item = propertyItems[i];
      if (item.editLink) {
        this.wrapFormatterWithEditLink(columns[i], item);
      }
    }
    return columns;
  }
  getSlickOptions() {
    var opt = {};
    opt.multiSelect = false;
    opt.multiColumnSort = true;
    opt.enableCellNavigation = false;
    if (!getjQuery()) {
      opt.emptyNode = Fluent.empty;
      opt.removeNode = Fluent.remove;
    }
    if (_DataGrid.defaultHeaderHeight)
      opt.headerRowHeight = _DataGrid.defaultHeaderHeight;
    if (_DataGrid.defaultRowHeight)
      opt.rowHeight = _DataGrid.defaultRowHeight;
    return opt;
  }
  populateLock() {
    this.view.populateLock();
  }
  populateUnlock() {
    this.view.populateUnlock();
  }
  getGridCanLoad() {
    return true;
  }
  refresh() {
    if (!this.populateWhenVisible()) {
      this.internalRefresh();
      return;
    }
    if (Fluent.isVisibleLike(this.slickContainer.getNode())) {
      this.slickContainer.data("needsRefresh", null);
      this.internalRefresh();
      return;
    }
    this.slickContainer.getNode().dataset.needsRefresh = "true";
  }
  refreshIfNeeded() {
    if (!!this.slickContainer.data("needsRefresh")) {
      this.slickContainer.data("needsRefresh", null);
      this.internalRefresh();
    }
  }
  internalRefresh() {
    this.view.populate();
  }
  setIsDisabled(value) {
    if (this._isDisabled !== value) {
      this._isDisabled = value;
      if (this._isDisabled) {
        this.view.setItems([], true);
      }
      this.updateDisabledState();
    }
  }
  get readOnly() {
    return this.get_readOnly();
  }
  set readOnly(value) {
    this.set_readOnly(value);
  }
  get_readOnly() {
    return !!this._readonly;
  }
  set_readOnly(value) {
    if (!!this._readonly != !!value) {
      this._readonly = !!value;
      this.updateInterface();
    }
  }
  updateInterface() {
    this.toolbar && this.toolbar.updateInterface();
  }
  getRowDefinition() {
    return null;
  }
  getLocalTextDbPrefix() {
    var _a68;
    if (this._localTextDbPrefix != null)
      return this._localTextDbPrefix;
    this._localTextDbPrefix = (_a68 = this.getLocalTextPrefix()) != null ? _a68 : "";
    if (this._localTextDbPrefix.length > 0 && !this._localTextDbPrefix.endsWith("."))
      this._localTextDbPrefix = "Db." + this._localTextDbPrefix + ".";
    return this._localTextDbPrefix;
  }
  getLocalTextPrefix() {
    var _a68;
    var rowDefinition = this.getRowDefinition();
    if (rowDefinition)
      return rowDefinition.localTextPrefix;
    return (_a68 = this.getCustomAttribute(LocalTextPrefixAttribute)) == null ? void 0 : _a68.value;
  }
  getIdProperty() {
    var _a68, _b;
    if (this._idProperty != null)
      return this._idProperty;
    var rowDefinition = this.getRowDefinition();
    if (rowDefinition)
      return this._idProperty = (_a68 = rowDefinition.idProperty) != null ? _a68 : "";
    var attr2 = this.getCustomAttribute(IdPropertyAttribute);
    if (attr2)
      return this._idProperty = (_b = attr2.value) != null ? _b : "";
    return this._idProperty = "ID";
  }
  getIsDeletedProperty() {
    var _a68;
    return (_a68 = this.getRowDefinition()) == null ? void 0 : _a68.isDeletedProperty;
  }
  getIsActiveProperty() {
    var _a68, _b;
    if (this._isActiveProperty != null)
      return this._isActiveProperty;
    var rowDefinition = this.getRowDefinition();
    if (rowDefinition)
      return this._isActiveProperty = (_a68 = rowDefinition.isActiveProperty) != null ? _a68 : "";
    var attr2 = this.getCustomAttribute(IsActivePropertyAttribute);
    if (attr2)
      return this._isActiveProperty = (_b = attr2.value) != null ? _b : "";
    return this._isActiveProperty = "";
  }
  updateDisabledState() {
    this.slickContainer.toggleClass("ui-state-disabled", !!this._isDisabled);
  }
  resizeCanvas() {
    var _a68;
    (_a68 = this.slickGrid) == null ? void 0 : _a68.resizeCanvas();
  }
  subDialogDataChange() {
    this.refresh();
  }
  addFilterSeparator() {
    this.ensureQuickFilterBar().addSeparator();
  }
  determineText(getKey) {
    var localTextPrefix = this.getLocalTextDbPrefix();
    if (localTextPrefix) {
      var local2 = tryGetText(getKey(localTextPrefix));
      if (local2 != null) {
        return local2;
      }
    }
    return null;
  }
  addQuickFilter(opt) {
    return this.ensureQuickFilterBar().add(opt);
  }
  addDateRangeFilter(field, title) {
    return this.ensureQuickFilterBar().addDateRange(field, title);
  }
  dateRangeQuickFilter(field, title) {
    return QuickFilterBar.dateRange(field, title);
  }
  addDateTimeRangeFilter(field, title) {
    return this.ensureQuickFilterBar().addDateTimeRange(field, title);
  }
  dateTimeRangeQuickFilter(field, title) {
    return QuickFilterBar.dateTimeRange(field, title);
  }
  addBooleanFilter(field, title, yes, no) {
    return this.ensureQuickFilterBar().addBoolean(field, title, yes, no);
  }
  booleanQuickFilter(field, title, yes, no) {
    return QuickFilterBar.boolean(field, title, yes, no);
  }
  invokeSubmitHandlers() {
    if (this.quickFiltersBar != null) {
      this.quickFiltersBar.onSubmit(this.view.params);
    }
  }
  quickFilterChange(e) {
    this.persistSettings(null);
    this.view && (this.view.seekToPage = 1);
    this.refresh();
  }
  getPersistanceStorage() {
    return _DataGrid.defaultPersistanceStorage;
  }
  getPersistanceKey() {
    var key = "GridSettings:";
    var path = window.location.pathname;
    if (path) {
      key += path.substr(1).split(String.fromCharCode(47)).slice(0, 2).join("/") + ":";
    }
    key += getTypeFullName(getInstanceType(this));
    return key;
  }
  gridPersistanceFlags() {
    return {};
  }
  canShowColumn(column) {
    if (column == null) {
      return false;
    }
    var item = column.sourceItem;
    if (item == null) {
      return true;
    }
    if (item.filterOnly === true) {
      return false;
    }
    if (item.readPermission == null) {
      return true;
    }
    return Authorization.hasPermission(item.readPermission);
  }
  getPersistedSettings() {
    var storage = this.getPersistanceStorage();
    if (storage == null)
      return null;
    function fromJson(json) {
      json = json == null ? void 0 : json.trim();
      if ((json == null ? void 0 : json.startsWith("{")) && json.endsWith("}"))
        return JSON.parse(json);
      return null;
    }
    var jsonOrPromise = storage.getItem(this.getPersistanceKey());
    if (jsonOrPromise == null ? void 0 : jsonOrPromise.then)
      return jsonOrPromise.then((json) => fromJson(json));
    return fromJson(jsonOrPromise);
  }
  restoreSettings(settings, flags) {
    if (settings != null)
      return this.restoreSettingsFrom(settings, flags);
    var settingsOrPromise = this.getPersistedSettings();
    if (settingsOrPromise == null ? void 0 : settingsOrPromise.then)
      return settingsOrPromise.then((s) => this.restoreSettingsFrom(s));
    this.restoreSettingsFrom(settingsOrPromise);
  }
  restoreSettingsFrom(settings, flags) {
    var _a68, _b;
    if (!this.slickGrid || !settings)
      return;
    var columns = this.slickGrid.getColumns();
    var colById = null;
    var updateColById = function(cl) {
      colById = {};
      for (var $t1 = 0; $t1 < cl.length; $t1++) {
        var c = cl[$t1];
        colById[c.id] = c;
      }
    };
    this.view.beginUpdate();
    this.restoringSettings++;
    try {
      flags = flags || this.gridPersistanceFlags();
      if (settings.columns != null) {
        if (flags.columnVisibility !== false) {
          var visible = {};
          updateColById(this.allColumns);
          var newColumns = [];
          for (var $t2 = 0; $t2 < settings.columns.length; $t2++) {
            var x = settings.columns[$t2];
            if (x.id != null && x.visible === true) {
              var column = colById[x.id];
              if (this.canShowColumn(column)) {
                column.visible = true;
                newColumns.push(column);
                delete colById[x.id];
              }
            }
          }
          for (var $t3 = 0; $t3 < this.allColumns.length; $t3++) {
            var c1 = this.allColumns[$t3];
            if (colById[c1.id] != null) {
              c1.visible = false;
              newColumns.push(c1);
            }
          }
          this.allColumns = newColumns;
          columns = this.allColumns.filter(function(x1) {
            return x1.visible === true;
          });
        }
        if (flags.columnWidths !== false) {
          updateColById(columns);
          for (var $t4 = 0; $t4 < settings.columns.length; $t4++) {
            var x2 = settings.columns[$t4];
            if (x2.id != null && x2.width != null && x2.width !== 0) {
              var column1 = colById[x2.id];
              if (column1 != null) {
                column1.width = x2.width;
              }
            }
          }
        }
        if (flags.sortColumns !== false) {
          updateColById(columns);
          var list = [];
          var sortColumns = settings.columns.filter(function(x3) {
            var _a69;
            return x3.id != null && ((_a69 = x3.sort) != null ? _a69 : 0) !== 0;
          });
          sortColumns.sort(function(a, b) {
            return Math.abs(a.sort) - Math.abs(b.sort);
          });
          for (var $t5 = 0; $t5 < sortColumns.length; $t5++) {
            var x4 = sortColumns[$t5];
            var column2 = colById[x4.id];
            if (column2 != null) {
              list.push({
                columnId: x4.id,
                sortAsc: x4.sort > 0
              });
            }
          }
          this.view.sortBy = list.map(function(x5) {
            return x5.columnId + (x5.sortAsc === false ? " DESC" : "");
          });
          this.slickGrid.setSortColumns(list);
        }
        this.slickGrid.setColumns(columns);
        this.slickGrid.invalidate();
      }
      if (settings.filterItems != null && flags.filterItems !== false && this.filterBar != null && this.filterBar.get_store() != null) {
        var items = this.filterBar.get_store().get_items();
        items.length = 0;
        items.push.apply(items, settings.filterItems);
        this.filterBar.get_store().raiseChanged();
      }
      if (settings.includeDeleted != null && flags.includeDeleted !== false) {
        var includeDeletedToggle = this.domNode.querySelector(".s-IncludeDeletedToggle");
        if (includeDeletedToggle && !!settings.includeDeleted !== includeDeletedToggle.classList.contains("pressed")) {
          Fluent.trigger(includeDeletedToggle.querySelector("a"), "click");
        }
      }
      if (settings.quickFilters != null && flags.quickFilters !== false && this.quickFiltersDiv != null && this.quickFiltersDiv.length > 0) {
        this.quickFiltersDiv.findAll(".quick-filter-item").forEach((e) => {
          var field = e.dataset.qffield;
          if (!(field == null ? void 0 : field.length)) {
            return;
          }
          var widget = tryGetWidget("#" + CSS.escape(this.uniqueName + "_QuickFilter_" + field), Widget);
          if (widget == null) {
            return;
          }
          var state = settings.quickFilters[field];
          var loadState = e.qfloadstate;
          if (typeof loadState === "function") {
            loadState(widget, state);
          } else {
            EditorUtils.setValue(widget, state);
          }
        });
      }
      if (flags.quickSearch === true && (settings.quickSearchField !== void 0 || settings.quickSearchText !== void 0)) {
        var qsInput = (_b = (_a68 = this.toolbar) == null ? void 0 : _a68.domNode) == null ? void 0 : _b.querySelector(".s-QuickSearchInput");
        if (qsInput) {
          var qsWidget = tryGetWidget(qsInput, QuickSearchInput);
          qsWidget && qsWidget.restoreState(settings.quickSearchText, settings.quickSearchField);
        }
      }
    } finally {
      this.restoringSettings--;
      this.view.endUpdate();
    }
  }
  persistSettings(flags) {
    var storage = this.getPersistanceStorage();
    if (!storage) {
      return;
    }
    var settings = this.getCurrentSettings(flags);
    return storage.setItem(this.getPersistanceKey(), JSON.stringify(settings));
  }
  getCurrentSettings(flags) {
    var _a68, _b;
    flags = flags || this.gridPersistanceFlags();
    var settings = {};
    if (flags.columnVisibility !== false || flags.columnWidths !== false || flags.sortColumns !== false) {
      settings.columns = [];
      var sortColumns = this.slickGrid.getSortColumns();
      var columns = this.slickGrid.getColumns();
      for (var column of columns) {
        var p = {
          id: column.id
        };
        if (flags.columnVisibility !== false) {
          p.visible = true;
        }
        if (flags.columnWidths !== false) {
          p.width = column.width;
        }
        if (flags.sortColumns !== false) {
          var sort = sortColumns.findIndex((x) => x.columnId == column.id);
          p.sort = sort >= 0 ? sortColumns[sort].sortAsc !== false ? sort + 1 : -sort - 1 : 0;
        }
        settings.columns.push(p);
      }
    }
    if (flags.includeDeleted !== false) {
      settings.includeDeleted = !!this.domNode.querySelector(".s-IncludeDeletedToggle.pressed");
    }
    if (flags.filterItems !== false && this.filterBar != null && this.filterBar.get_store() != null) {
      settings.filterItems = this.filterBar.get_store().get_items().slice();
    }
    if (flags.quickSearch === true) {
      var qsInput = (_b = (_a68 = this.toolbar) == null ? void 0 : _a68.domNode) == null ? void 0 : _b.querySelector(".s-QuickSearchInput");
      if (qsInput) {
        var qsWidget = tryGetWidget(qsInput, QuickSearchInput);
        if (qsWidget) {
          settings.quickSearchField = qsWidget.get_field();
          settings.quickSearchText = qsWidget.domNode.value;
        }
      }
    }
    if (flags.quickFilters !== false && this.quickFiltersDiv != null && this.quickFiltersDiv.length > 0) {
      settings.quickFilters = {};
      this.quickFiltersDiv.findAll(".quick-filter-item").forEach((e) => {
        var _a69, _b2, _c, _d;
        var field = e.dataset.qffield;
        if (!(field == null ? void 0 : field.length)) {
          return;
        }
        var widget = tryGetWidget("#" + this.uniqueName + "_QuickFilter_" + field, Widget);
        if (!widget)
          return;
        var qfElement = e;
        var saveState = qfElement.qfsavestate;
        var state = typeof saveState === "function" ? saveState(widget) : EditorUtils.getValue(widget);
        settings.quickFilters[field] = state;
        if (flags.quickFilterText === true && e.classList.contains("quick-filter-active")) {
          var getDisplayText = qfElement.qfdisplaytext;
          var filterLabel = (_b2 = (_a69 = e.querySelector(".quick-filter-label")) == null ? void 0 : _a69.textContent) != null ? _b2 : "";
          var displayText;
          if (typeof getDisplayText === "function") {
            displayText = getDisplayText(widget, filterLabel);
          } else {
            displayText = filterLabel + " = " + EditorUtils.getDisplayText(widget);
          }
          if (displayText == null ? void 0 : displayText.length) {
            if ((_c = settings.quickFilterText) == null ? void 0 : _c.length) {
              settings.quickFilterText += " " + ((_d = tryGetText("Controls.FilterPanel.And")) != null ? _d : "and") + " ";
              settings.quickFilterText += displayText;
            } else {
              settings.quickFilterText = displayText;
            }
          }
        }
      });
    }
    return settings;
  }
  getElement() {
    return this.domNode;
  }
  getGrid() {
    return this.slickGrid;
  }
  getView() {
    return this.view;
  }
  getFilterStore() {
    return this.filterBar == null ? null : this.filterBar.get_store();
  }
};
_init124 = __decoratorStart(_a62);
_DataGrid = __decorateElement(_init124, 0, "DataGrid", _DataGrid_decorators, _DataGrid);
__runInitializers(_init124, 1, _DataGrid);
var DataGrid = _DataGrid;

// src/ui/datagrid/columnpickerdialog.ts
var _ColumnPickerDialog_decorators, _init125, _a63;
_ColumnPickerDialog_decorators = [Decorators.registerClass("Serenity.ColumnPickerDialog"), Decorators.resizable(), Decorators.responsive()];
var _ColumnPickerDialog = class _ColumnPickerDialog extends (_a63 = BaseDialog) {
  renderContents() {
    this.dialogTitle = localText("Controls.ColumnPickerDialog.Title");
    var visibles = Fluent("div").class("column-list visible-list bg-success").append(Fluent("h5").append(Fluent("i").class(faIcon("eye"))).append(" ").append(localText(localText("Controls.ColumnPickerDialog.VisibleColumns")))).append(this.ulVisible = Fluent("ul"));
    var hiddens = Fluent("div").class("column-list hidden-list bg-info").append(Fluent("h5").append(Fluent("i").class(faIcon("eye-slash"))).append(" ").append(localText(localText("Controls.ColumnPickerDialog.HiddenColumns")))).append(this.ulHidden = Fluent("ul"));
    return Fluent("div").class("columns-container").append(visibles).append(hiddens);
  }
  static createToolButton(grid) {
    function onClick() {
      var picker = new _ColumnPickerDialog({});
      picker.allColumns = grid.allColumns;
      if (grid.initialSettings) {
        var initialSettings = grid.initialSettings;
        if (initialSettings.columns && initialSettings.columns.length)
          picker.defaultColumns = initialSettings.columns.map((x) => x.id);
      }
      picker.visibleColumns = grid.getGrid().getColumns().map((x) => x.id);
      picker.done = () => {
        grid.allColumns = picker.allColumns;
        var visible = picker.allColumns.filter((x) => x.visible === true);
        grid.getGrid().setColumns(visible);
        Promise.resolve(grid.persistSettings()).then(() => grid.getView().populate());
      };
      Router && Router.dialog && Router.dialog(grid.element, picker.domNode, () => "columns");
      picker.dialogOpen();
    }
    grid.element.on("handleroute." + grid.uniqueName, (e, arg) => {
      if (arg && !arg.handled && arg.route == "columns") {
        onClick();
      }
    });
    return {
      hint: localText("Controls.ColumnPickerDialog.Title"),
      action: "column-picker",
      cssClass: "column-picker-button",
      icon: faIcon("th-list", "blue"),
      onClick
    };
  }
  getDialogButtons() {
    return [
      {
        text: localText("Controls.ColumnPickerDialog.RestoreDefaults"),
        cssClass: "btn btn-secondary restore-defaults",
        click: () => {
          let liByKey = {};
          this.ulVisible.children().concat(...this.ulHidden.children()).forEach((el) => {
            liByKey[el.dataset.key] = el;
          });
          let last = null;
          for (let id of this.defaultColumns) {
            let li = liByKey[id];
            if (!li)
              continue;
            if (last == null)
              this.ulVisible.prepend(li);
            else
              Fluent(li).insertAfter(last);
            last = li;
            let key = li.dataset.key;
            delete liByKey[key];
          }
          for (let key in liByKey)
            this.ulHidden.append(liByKey[key]);
          this.updateListStates();
        }
      },
      okDialogButton({
        click: () => {
          let newColumns = [];
          for (var col of this.allColumns)
            col.visible = false;
          this.visibleColumns = this.ulVisible.children().map((x) => {
            let id = x.dataset.key;
            var col2 = this.colById[id];
            col2.visible = true;
            newColumns.push(col2);
            return id;
          });
          for (var col of this.allColumns) {
            if (!col.visible)
              newColumns.push(col);
          }
          this.allColumns = newColumns;
          this.done && this.done();
        }
      }),
      cancelDialogButton()
    ];
  }
  getDialogOptions() {
    var opt = super.getDialogOptions();
    opt.width = 600;
    return opt;
  }
  getTitle(col) {
    if (col.id == "__select__")
      return "[x]";
    return col.name || col.toolTip || col.id;
  }
  allowHide(col) {
    return col.sourceItem == null || col.sourceItem.allowHide == null || col.sourceItem.allowHide;
  }
  createLI(col) {
    var allowHide = this.allowHide(col);
    var li = Fluent("li").class(!allowHide && "cant-hide").data("key", col.id).append(Fluent("span").class("drag-handle").text("\u2630")).append(this.getTitle(col));
    allowHide && li.append(Fluent("i").class(["js-hide", faIcon("eye-slash")]).attr("title", localText("Controls.ColumnPickerDialog.HideHint")));
    li.append(Fluent("i").class(["js-show", faIcon("eye")]).attr("title", localText("Controls.ColumnPickerDialog.ShowHint")));
    return li.getNode();
  }
  updateListStates() {
    this.ulVisible.children().forEach((x) => {
      x.classList.remove("bg-info");
      x.classList.add("bg-success");
    });
    this.ulHidden.children().forEach((x) => {
      x.classList.remove("bg-success");
      x.classList.add("bg-info");
    });
  }
  setupColumns() {
    this.allColumns = this.allColumns || [];
    this.visibleColumns = this.visibleColumns || [];
    let visible = {};
    for (let id of this.visibleColumns) {
      visible[id] = true;
    }
    this.colById = {};
    for (let c2 of this.allColumns) {
      this.colById[c2.id] = c2;
    }
    if (this.defaultColumns == null)
      this.defaultColumns = this.visibleColumns.slice(0);
    let hidden = [];
    for (let c2 of this.allColumns) {
      if (!visible[c2.id] && (!c2.sourceItem || c2.sourceItem.filterOnly !== true && (c2.sourceItem.readPermission == null || Authorization.hasPermission(c2.sourceItem.readPermission)))) {
        hidden.push(c2);
      }
    }
    let hiddenColumns = hidden.sort((a, b) => Culture.stringCompare(this.getTitle(a), this.getTitle(b)));
    for (let id of this.visibleColumns) {
      var c = this.colById[id];
      if (!c)
        continue;
      this.ulVisible.append(this.createLI(c));
    }
    for (let c2 of hiddenColumns) {
      this.ulHidden.append(this.createLI(c2));
    }
    this.updateListStates();
    if (typeof Sortable !== "undefined" && Sortable.create) {
      Sortable.create(this.ulVisible.getNode(), {
        group: this.uniqueName + "_group",
        filter: ".js-hide",
        onFilter: (evt) => {
          this.ulHidden.append(evt.item);
          this.updateListStates();
        },
        onMove: (x) => {
          if (x.dragged.classList.contains("cant-hide") && x.from == this.ulVisible.getNode() && x.to !== x.from)
            return false;
          return true;
        },
        onEnd: (evt) => this.updateListStates()
      });
      Sortable.create(this.ulHidden[0], {
        group: this.uniqueName + "_group",
        sort: false,
        filter: ".js-show",
        onFilter: (evt) => {
          this.ulVisible.append(evt.item);
          this.updateListStates();
        },
        onEnd: () => this.updateListStates()
      });
    }
  }
  onDialogOpen() {
    var _a68, _b, _c, _d;
    this.setupColumns();
    super.onDialogOpen();
    var restoreButton = (_b = (_a68 = Dialog.getInstance(this.domNode)) == null ? void 0 : _a68.getFooterNode()) == null ? void 0 : _b.querySelector(".restore-defaults");
    if (restoreButton)
      (_d = (_c = restoreButton.nextElementSibling) == null ? void 0 : _c.focus) == null ? void 0 : _d.call(_c);
  }
};
_init125 = __decoratorStart(_a63);
_ColumnPickerDialog = __decorateElement(_init125, 0, "ColumnPickerDialog", _ColumnPickerDialog_decorators, _ColumnPickerDialog);
__runInitializers(_init125, 1, _ColumnPickerDialog);
var ColumnPickerDialog = _ColumnPickerDialog;

// src/ui/datagrid/treegridmixin.ts
var TreeGridMixin = class _TreeGridMixin {
  constructor(options) {
    this.options = options;
    var _a68;
    var dg = this.dataGrid = options.grid;
    var idProperty = dg.getIdProperty();
    var getId = (item) => item[idProperty];
    Fluent.on(dg.domNode.querySelector(".grid-container"), "click", (e) => {
      if (e.target.classList.contains("s-TreeToggle")) {
        var src = dg.slickGrid.getCellFromEvent(e);
        if (src.cell >= 0 && src.row >= 0) {
          SlickTreeHelper.toggleClick(e, src.row, src.row, dg.view, getId);
        }
      }
    });
    var oldViewFilter = dg.onViewFilter;
    dg.onViewFilter = function(item) {
      if (!oldViewFilter.apply(this, [item]))
        return false;
      return SlickTreeHelper.filterById(item, dg.view, options.getParentId);
    };
    var oldProcessData = dg.onViewProcessData;
    dg.onViewProcessData = function(response) {
      response = oldProcessData.apply(this, [response]);
      response.Entities = _TreeGridMixin.applyTreeOrdering(response.Entities, getId, options.getParentId);
      SlickTreeHelper.setIndents(
        response.Entities,
        getId,
        options.getParentId,
        options.initialCollapse && options.initialCollapse() || false
      );
      return response;
    };
    if (options.toggleField) {
      var col = (_a68 = dg["allColumns"] || dg.slickGrid.getColumns()) == null ? void 0 : _a68.find((x) => x.field == options.toggleField);
      if (col) {
        col.format = SlickFormatting.treeToggle(
          () => dg.view,
          getId,
          col.format || ((ctx) => ctx.escape())
        );
      }
    }
  }
  /**
   * Expands / collapses all rows in a grid automatically
   */
  toggleAll() {
    SlickTreeHelper.setCollapsed(
      this.dataGrid.view.getItems(),
      !this.dataGrid.view.getItems().every((x) => x._collapsed == true)
    );
    this.dataGrid.view.setItems(this.dataGrid.view.getItems(), true);
  }
  collapseAll() {
    SlickTreeHelper.setCollapsed(this.dataGrid.view.getItems(), true);
    this.dataGrid.view.setItems(this.dataGrid.view.getItems(), true);
  }
  expandAll() {
    SlickTreeHelper.setCollapsed(this.dataGrid.view.getItems(), false);
    this.dataGrid.view.setItems(this.dataGrid.view.getItems(), true);
  }
  /**
   * Reorders a set of items so that parents comes before their children.
   * This method is required for proper tree ordering, as it is not so easy to perform with SQL.
   * @param items list of items to be ordered
   * @param getId a delegate to get ID of a record (must return same ID with grid identity field)
   * @param getParentId a delegate to get parent ID of a record
   */
  static applyTreeOrdering(items, getId, getParentId) {
    var result = [];
    var byId = toGrouping(items, getId);
    var byParentId = toGrouping(items, getParentId);
    var visited = {};
    function takeChildren(theParentId) {
      if (visited[theParentId])
        return;
      visited[theParentId] = true;
      for (var child of byParentId[theParentId] || []) {
        result.push(child);
        takeChildren(getId(child));
      }
    }
    for (var item of items) {
      var parentId = getParentId(item);
      if (parentId == null || !(byId[parentId] || []).length) {
        result.push(item);
        takeChildren(getId(item));
      }
    }
    return result;
  }
};

// src/ui/editors/checktreeeditor.ts
var _CheckTreeEditor_decorators, _init126, _a64;
_CheckTreeEditor_decorators = [Decorators.registerEditor("Serenity.CheckTreeEditor", [IGetEditValue, ISetEditValue, IReadOnly])];
var CheckTreeEditor = class extends (_a64 = DataGrid) {
  static createDefaultElement() {
    return document.createElement("div");
  }
  constructor(props) {
    super(props);
    this.domNode.classList.add("s-CheckTreeEditor");
    this.updateItems();
  }
  getIdProperty() {
    return "id";
  }
  getTreeItems() {
    return [];
  }
  updateItems() {
    var items = this.getTreeItems();
    var itemById = {};
    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      item.children = [];
      if (item.id) {
        itemById[item.id] = item;
      }
      if (item.parentId) {
        var parent2 = itemById[item.parentId];
        if (parent2 != null) {
          parent2.children.push(item);
        }
      }
    }
    this.view.addData({ Entities: items, Skip: 0, Take: 0, TotalCount: items.length });
    this.updateSelectAll();
    this.updateFlags();
  }
  getEditValue(property, target) {
    if (this.getDelimited())
      target[property.name] = this.get_value().join(",");
    else
      target[property.name] = this.get_value();
  }
  setEditValue(source, property) {
    var value = source[property.name];
    this.set_value(value);
  }
  getButtons() {
    var selectAllText = this.getSelectAllText();
    if (!selectAllText) {
      return null;
    }
    var self2 = this;
    var buttons = [];
    buttons.push(GridSelectAllButtonHelper.define(function() {
      return self2;
    }, function(x) {
      return x.id;
    }, function(x1) {
      return x1.isSelected;
    }, (x2, v) => {
      if (x2.isSelected !== v) {
        x2.isSelected = v;
        this.itemSelectedChanged(x2);
      }
    }, null, () => {
      this.updateFlags();
    }));
    return buttons;
  }
  itemSelectedChanged(item) {
  }
  getSelectAllText() {
    var _a68;
    return (_a68 = tryGetText("Controls.CheckTreeEditor.SelectAll")) != null ? _a68 : "Select All";
  }
  isThreeStateHierarchy() {
    return false;
  }
  createSlickGrid() {
    this.domNode.classList.add("slick-no-cell-border", "slick-no-odd-even", "slick-hide-header");
    var result = super.createSlickGrid();
    result.resizeCanvas();
    return result;
  }
  onViewFilter(item) {
    if (!super.onViewFilter(item)) {
      return false;
    }
    var items = this.view.getItems();
    var self2 = this;
    return SlickTreeHelper.filterCustom(item, function(x) {
      if (x.parentId == null) {
        return null;
      }
      if (self2.itemById == null) {
        self2.itemById = {};
        for (var i = 0; i < items.length; i++) {
          var o = items[i];
          if (o.id != null) {
            self2.itemById[o.id] = o;
          }
        }
      }
      return self2.itemById[x.parentId];
    });
  }
  getInitialCollapse() {
    return false;
  }
  onViewProcessData(response) {
    response = super.onViewProcessData(response);
    this.itemById = null;
    SlickTreeHelper.setIndents(response.Entities, function(x) {
      return x.id;
    }, function(x1) {
      return x1.parentId;
    }, this.getInitialCollapse());
    return response;
  }
  onClick(e, row, cell) {
    super.onClick(e, row, cell);
    if (!Fluent.isDefaultPrevented(e)) {
      SlickTreeHelper.toggleClick(e, row, cell, this.view, function(x) {
        return x.id;
      });
    }
    if (Fluent.isDefaultPrevented(e)) {
      return;
    }
    var target = e.target;
    if (target.classList.contains("check-box")) {
      e.preventDefault();
      if (this._readOnly)
        return;
      var checkedOrPartial = target.classList.contains("checked") || target.classList.contains("partial");
      var item = this.itemAt(row);
      var anyChanged = item.isSelected !== !checkedOrPartial;
      this.view.beginUpdate();
      try {
        if (item.isSelected !== !checkedOrPartial) {
          item.isSelected = !checkedOrPartial;
          this.view.updateItem(item.id, item);
          this.itemSelectedChanged(item);
        }
        anyChanged = this.setAllSubTreeSelected(item, item.isSelected) || anyChanged;
        this.updateSelectAll();
        this.updateFlags();
      } finally {
        this.view.endUpdate();
      }
      if (anyChanged) {
        Fluent.trigger(this.domNode, "change");
      }
    }
  }
  updateSelectAll() {
    GridSelectAllButtonHelper.update(this, function(x) {
      return x.isSelected;
    });
  }
  updateFlags() {
    var view = this.view;
    var items = view.getItems();
    var threeState = this.isThreeStateHierarchy();
    if (!threeState) {
      return;
    }
    view.beginUpdate();
    try {
      for (var i = 0; i < items.length; i++) {
        var item = items[i];
        if (item.children == null || item.children.length === 0) {
          var allsel = this.getDescendantsSelected(item);
          if (allsel !== item.isAllDescendantsSelected) {
            item.isAllDescendantsSelected = allsel;
            view.updateItem(item.id, item);
          }
          continue;
        }
        var allSelected = this.allDescendantsSelected(item);
        var selected = allSelected || this.anyDescendantsSelected(item);
        if (allSelected !== item.isAllDescendantsSelected || selected !== item.isSelected) {
          var selectedChange = item.isSelected !== selected;
          item.isAllDescendantsSelected = allSelected;
          item.isSelected = selected;
          view.updateItem(item.id, item);
          if (selectedChange) {
            this.itemSelectedChanged(item);
          }
        }
      }
    } finally {
      view.endUpdate();
    }
  }
  getDescendantsSelected(item) {
    return true;
  }
  setAllSubTreeSelected(item, selected) {
    var result = false;
    for (var i = 0; i < item.children.length; i++) {
      var sub = item.children[i];
      if (sub.isSelected !== selected) {
        result = true;
        sub.isSelected = selected;
        this.view.updateItem(sub.id, sub);
        this.itemSelectedChanged(sub);
      }
      if (sub.children.length > 0) {
        result = this.setAllSubTreeSelected(sub, selected) || result;
      }
    }
    return result;
  }
  allItemsSelected() {
    for (var i = 0; i < this.rowCount(); i++) {
      var row = this.itemAt(i);
      if (!row.isSelected) {
        return false;
      }
    }
    return this.rowCount() > 0;
  }
  allDescendantsSelected(item) {
    if (item.children.length > 0) {
      for (var i = 0; i < item.children.length; i++) {
        var sub = item.children[i];
        if (!sub.isSelected) {
          return false;
        }
        if (!this.allDescendantsSelected(sub)) {
          return false;
        }
      }
    }
    return true;
  }
  getDelimited() {
    return !!!!this.options["delimited"];
  }
  anyDescendantsSelected(item) {
    if (item.children.length > 0) {
      for (var i = 0; i < item.children.length; i++) {
        var sub = item.children[i];
        if (sub.isSelected) {
          return true;
        }
        if (this.anyDescendantsSelected(sub)) {
          return true;
        }
      }
    }
    return false;
  }
  getColumns() {
    var self2 = this;
    var columns = [];
    columns.push({
      field: "text",
      name: "Record",
      width: 80,
      format: SlickFormatting.treeToggle(function() {
        return self2.view;
      }, function(x) {
        return x.id;
      }, (ctx) => {
        var cls = "check-box";
        var item = ctx.item;
        if (item.hideCheckBox) {
          return this.getItemText(ctx);
        }
        var threeState = this.isThreeStateHierarchy();
        if (item.isSelected) {
          if (threeState && !item.isAllDescendantsSelected) {
            cls += " partial";
          } else {
            cls += " checked";
          }
        }
        if (this._readOnly)
          cls += " readonly";
        return '<span class="' + cls + '"></span>' + this.getItemText(ctx);
      })
    });
    return columns;
  }
  getItemText(ctx) {
    return ctx.escape();
  }
  getSlickOptions() {
    var opt = super.getSlickOptions();
    opt.forceFitColumns = true;
    return opt;
  }
  sortItems() {
    if (!this.moveSelectedUp()) {
      return;
    }
    var oldIndexes = {};
    var list = this.view.getItems();
    var i = 0;
    for (var $t1 = 0; $t1 < list.length; $t1++) {
      var x = list[$t1];
      oldIndexes[x.id] = i++;
    }
    list.sort(function(x1, y) {
      if (x1.isSelected && !y.isSelected) {
        return -1;
      }
      if (y.isSelected && !x1.isSelected) {
        return 1;
      }
      var c = Culture.stringCompare(x1.text, y.text);
      if (c !== 0) {
        return c;
      }
      return oldIndexes[x1.id] < oldIndexes[y.id] ? -1 : oldIndexes[x1.id] > oldIndexes[y.id] ? 1 : 0;
    });
    this.view.setItems(list, true);
  }
  moveSelectedUp() {
    return false;
  }
  get_readOnly() {
    return this._readOnly;
  }
  set_readOnly(value) {
    if (!!this._readOnly != !!value) {
      this._readOnly = !!value;
      this.view.refresh();
    }
  }
  get_value() {
    var list = [];
    var items = this.view.getItems();
    for (var i = 0; i < items.length; i++) {
      if (items[i].isSelected) {
        list.push(items[i].id);
      }
    }
    return list;
  }
  get value() {
    return this.get_value();
  }
  set_value(value) {
    var selected = {};
    if (value != null) {
      if (typeof value == "string") {
        value = value.split(",").map((x) => x == null ? void 0 : x.trim()).filter((x) => !!x);
      }
      for (var i = 0; i < value.length; i++) {
        selected[value[i]] = true;
      }
    }
    this.view.beginUpdate();
    try {
      var items = this.view.getItems();
      for (var i1 = 0; i1 < items.length; i1++) {
        var item = items[i1];
        var select = selected[item.id];
        if (select !== item.isSelected) {
          item.isSelected = select;
          this.view.updateItem(item.id, item);
        }
      }
      this.updateSelectAll();
      this.updateFlags();
      this.sortItems();
    } finally {
      this.view.endUpdate();
    }
  }
  set value(v) {
    this.set_value(v);
  }
};
_init126 = __decoratorStart(_a64);
CheckTreeEditor = __decorateElement(_init126, 0, "CheckTreeEditor", _CheckTreeEditor_decorators, CheckTreeEditor);
__runInitializers(_init126, 1, CheckTreeEditor);
var _CheckLookupEditor_decorators, _init127, _a65;
_CheckLookupEditor_decorators = [Decorators.registerEditor("Serenity.CheckLookupEditor")];
var CheckLookupEditor = class extends (_a65 = CheckTreeEditor) {
  constructor(props) {
    super(props);
    this.enableUpdateItems = true;
    this.setCascadeFrom(this.options.cascadeFrom);
    this.updateItems();
    this.lookupChangeUnbind = ScriptData.bindToChange("Lookup." + this.getLookupKey(), this.updateItems.bind(this));
  }
  destroy() {
    if (this.lookupChangeUnbind) {
      this.lookupChangeUnbind();
      this.lookupChangeUnbind = null;
    }
    super.destroy();
  }
  updateItems() {
    if (this.enableUpdateItems)
      super.updateItems();
  }
  getLookupKey() {
    return this.options.lookupKey;
  }
  getButtons() {
    var _a68;
    return (_a68 = super.getButtons()) != null ? _a68 : this.options.hideSearch ? null : [];
  }
  createToolbarExtensions() {
    super.createToolbarExtensions();
    GridUtils.addQuickSearchInputCustom(this.toolbar.domNode, (field, text2) => {
      this.searchText = stripDiacritics(text2 || "").toUpperCase();
      this.view.setItems(this.view.getItems(), true);
    });
  }
  getSelectAllText() {
    if (!this.options.showSelectAll)
      return null;
    return super.getSelectAllText();
  }
  cascadeItems(items) {
    var val = this.get_cascadeValue();
    if (val == null || val === "") {
      if (this.get_cascadeField()) {
        return [];
      }
      return items;
    }
    var key = val.toString();
    var fld = this.get_cascadeField();
    return items.filter((x) => {
      var _a68;
      var itemKey = (_a68 = x[fld]) != null ? _a68 : ReflectionUtils.getPropertyValue(x, fld);
      return !!(itemKey != null && itemKey.toString() === key);
    });
  }
  filterItems(items) {
    var val = this.get_filterValue();
    if (val == null || val === "") {
      return items;
    }
    var key = val.toString();
    var fld = this.get_filterField();
    return items.filter((x) => {
      var _a68;
      var itemKey = (_a68 = x[fld]) != null ? _a68 : ReflectionUtils.getPropertyValue(x, fld);
      return !!(itemKey != null && itemKey.toString() === key);
    });
  }
  getLookupItems(lookup) {
    return this.filterItems(this.cascadeItems(lookup.items));
  }
  getTreeItems() {
    var lookup = getLookup(this.options.lookupKey);
    var items = this.getLookupItems(lookup);
    return items.map((item) => {
      var _a68, _b;
      return {
        id: ((_a68 = item[lookup.idField]) != null ? _a68 : "").toString(),
        text: ((_b = item[lookup.textField]) != null ? _b : "").toString(),
        source: item
      };
    });
  }
  onViewFilter(item) {
    return super.onViewFilter(item) && (!this.searchText || stripDiacritics(item.text || "").toUpperCase().indexOf(this.searchText) >= 0);
  }
  moveSelectedUp() {
    return this.options.checkedOnTop;
  }
  get_cascadeFrom() {
    return this.options.cascadeFrom;
  }
  get cascadeFrom() {
    return this.get_cascadeFrom();
  }
  getCascadeFromValue(parent2) {
    return EditorUtils.getValue(parent2);
  }
  setCascadeFrom(value) {
    if (!value) {
      if (this.cascadeLink != null) {
        this.cascadeLink.set_parentID(null);
        this.cascadeLink = null;
      }
      this.options.cascadeFrom = null;
      return;
    }
    this.cascadeLink = new CascadedWidgetLink(Widget, this, (p) => {
      this.set_cascadeValue(this.getCascadeFromValue(p));
    });
    this.cascadeLink.set_parentID(value);
    this.options.cascadeFrom = value;
  }
  set_cascadeFrom(value) {
    if (value !== this.options.cascadeFrom) {
      this.setCascadeFrom(value);
      this.updateItems();
    }
  }
  set cascadeFrom(value) {
    this.set_cascadeFrom(value);
  }
  get_cascadeField() {
    var _a68;
    return (_a68 = this.options.cascadeField) != null ? _a68 : this.options.cascadeFrom;
  }
  get cascadeField() {
    return this.get_cascadeField();
  }
  set_cascadeField(value) {
    this.options.cascadeField = value;
  }
  set cascadeField(value) {
    this.set_cascadeField(value);
  }
  get_cascadeValue() {
    return this.options.cascadeValue;
  }
  get cascadeValue() {
    return this.get_cascadeValue();
  }
  set_cascadeValue(value) {
    if (this.options.cascadeValue !== value) {
      this.options.cascadeValue = value;
      this.value = [];
      this.updateItems();
    }
  }
  set cascadeValue(value) {
    this.set_cascadeValue(value);
  }
  get_filterField() {
    return this.options.filterField;
  }
  get filterField() {
    return this.get_filterField();
  }
  set_filterField(value) {
    this.options.filterField = value;
  }
  set filterField(value) {
    this.set_filterField(value);
  }
  get_filterValue() {
    return this.options.filterValue;
  }
  get filterValue() {
    return this.get_filterValue();
  }
  set_filterValue(value) {
    if (this.options.filterValue !== value) {
      this.options.filterValue = value;
      this.value = null;
      this.updateItems();
    }
  }
  set filterValue(value) {
    this.set_filterValue(value);
  }
};
_init127 = __decoratorStart(_a65);
CheckLookupEditor = __decorateElement(_init127, 0, "CheckLookupEditor", _CheckLookupEditor_decorators, CheckLookupEditor);
__runInitializers(_init127, 1, CheckLookupEditor);

// src/ui/datagrid/entitygrid.ts
var _EntityGrid_decorators, _init128, _a66;
_EntityGrid_decorators = [Decorators.registerClass("Serenity.EntityGrid")];
var EntityGrid = class extends (_a66 = DataGrid) {
  constructor(props) {
    super(props);
    this.domNode.classList.add("route-handler");
    Fluent.on(this.domNode, "handleroute." + this.uniqueName, this.handleRoute.bind(this));
  }
  destroy() {
    Fluent.off(document, "." + this.uniqueName + "_routerfix");
    super.destroy();
  }
  handleRoute(e) {
    let route = Fluent.eventProp(e, "route");
    if (typeof route !== "string")
      return;
    if (route === "new") {
      e.preventDefault();
      this.addButtonClick();
      return;
    }
    var oldRequests = getActiveRequests();
    var parts = route.split("/");
    if (parts.length === 2 && parts[0] === "edit") {
      e.preventDefault();
      this.editItem(decodeURIComponent(parts[1]));
    } else if (parts.length === 2 && parts[1] === "new") {
      e.preventDefault();
      this.editItemOfType(parts[0], null);
    } else if (parts.length === 3 && parts[1] === "edit") {
      e.preventDefault();
      this.editItemOfType(parts[0], decodeURIComponent(parts[2]));
    } else
      return;
    if (!Fluent.eventProp(e, "isInitial"))
      return;
    Fluent.off(document, "." + this.uniqueName + "_routerfix");
    let evParts = Fluent.eventProp(e, "parts");
    let evIndex = Fluent.eventProp(e, "index");
    if (getActiveRequests() > oldRequests && evParts != null && evIndex != null && evIndex >= 0 && evIndex < evParts.length - 1 && !evParts[evIndex + 1].startsWith("!") && Fluent.isDefaultPrevented(e)) {
      Fluent.one(document, "ajaxStop." + this.uniqueName + "_routerfix", () => {
        window.location.hash = "#" + evParts.join("/+/");
      });
    }
  }
  usePager() {
    return true;
  }
  createToolbarExtensions() {
    this.createIncludeDeletedButton();
    this.createQuickSearchInput();
  }
  getInitialTitle() {
    return this.getDisplayName();
  }
  getLocalTextPrefix() {
    var result = super.getLocalTextPrefix();
    if (result != null || this.getRowDefinition())
      return result;
    return this.getEntityType();
  }
  getEntityType() {
    if (this._entityType != null)
      return this._entityType;
    var attr2 = this.getCustomAttribute(EntityTypeAttribute);
    if (attr2) {
      return this._entityType = attr2.value;
    }
    var name = getTypeFullName(getInstanceType(this));
    var px = name.indexOf(".");
    if (px >= 0) {
      name = name.substring(px + 1);
    }
    if (name.endsWith("Grid")) {
      name = name.substring(0, name.length - 4);
    } else if (name.endsWith("SubGrid")) {
      name = name.substring(0, name.length - 7);
    }
    this._entityType = name;
    return this._entityType;
  }
  getDisplayName() {
    if (this._displayName != null)
      return this._displayName;
    var attr2 = this.getCustomAttribute(DisplayNameAttribute);
    if (attr2) {
      this._displayName = attr2.displayName;
      this._displayName = localText(this._displayName, this._displayName);
    } else {
      this._displayName = tryGetText(this.getLocalTextDbPrefix() + "EntityPlural");
      if (this._displayName == null)
        this._displayName = this.getEntityType();
    }
    return this._displayName;
  }
  getItemName() {
    if (this._itemName != null)
      return this._itemName;
    var attr2 = this.getCustomAttribute(ItemNameAttribute);
    if (attr2) {
      this._itemName = attr2.value;
      this._itemName = localText(this._itemName, this._itemName);
    } else {
      this._itemName = tryGetText(this.getLocalTextDbPrefix() + "EntitySingular");
      if (this._itemName == null)
        this._itemName = this.getEntityType();
    }
    return this._itemName;
  }
  getAddButtonCaption() {
    return stringFormat(localText("Controls.EntityGrid.NewButton"), this.getItemName());
  }
  getButtons() {
    var buttons = [];
    buttons.push({
      title: this.getAddButtonCaption(),
      action: "add",
      cssClass: "add-button",
      icon: faIcon("plus-circle", "green"),
      hotkey: "alt+n",
      onClick: () => {
        this.addButtonClick();
      },
      disabled: () => !this.hasInsertPermission() || this.readOnly
    });
    buttons.push(this.newRefreshButton(true));
    buttons.push(ColumnPickerDialog.createToolButton(this));
    return buttons;
  }
  newRefreshButton(noText) {
    return {
      title: noText ? null : localText("Controls.EntityGrid.RefreshButton"),
      hint: noText ? localText("Controls.EntityGrid.RefreshButton") : null,
      icon: faIcon("refresh", "blue"),
      action: "refresh",
      cssClass: "refresh-button",
      onClick: () => {
        this.refresh();
      }
    };
  }
  addButtonClick() {
    this.editItem(new Object());
  }
  editItem(entityOrId) {
    this.createEntityDialog(this.getItemType(), (dlg) => {
      var dialog = safeCast(dlg, IEditDialog);
      if (dialog != null) {
        dialog.load(entityOrId, () => {
          dialog.dialogOpen(this.openDialogsAsPanel);
        });
        return;
      }
      throw new Error(
        stringFormat(
          "{0} doesn't implement IEditDialog!",
          getTypeFullName(getInstanceType(dlg))
        )
      );
    });
  }
  editItemOfType(itemType, entityOrId) {
    if (itemType === this.getItemType()) {
      this.editItem(entityOrId);
      return;
    }
    this.createEntityDialog(itemType, (dlg) => {
      var dialog = safeCast(dlg, IEditDialog);
      if (dialog != null) {
        dialog.load(entityOrId, () => {
          dialog.dialogOpen(this.openDialogsAsPanel);
        });
        return;
      }
      throw new Error(
        stringFormat(
          "{0} doesn't implement IEditDialog!",
          getTypeFullName(getInstanceType(dlg))
        )
      );
    });
  }
  getService() {
    if (this._service != null)
      return this._service;
    var attr2 = this.getCustomAttribute(ServiceAttribute);
    if (attr2)
      this._service = attr2.value;
    else
      this._service = replaceAll(this.getEntityType(), ".", "/");
    return this._service;
  }
  getViewOptions() {
    var opt = super.getViewOptions();
    opt.url = resolveUrl("~/Services/" + this.getService() + "/List");
    return opt;
  }
  getItemType() {
    return this.getEntityType();
  }
  routeDialog(itemType, dialog) {
    Router && Router.dialog && Router.dialog(this.domNode, dialog.domNode, () => {
      var hash = "";
      if (itemType !== this.getItemType())
        hash = itemType + "/";
      if (dialog != null && dialog.entityId != null)
        hash += "edit/" + dialog.entityId.toString();
      else
        hash += "new";
      return hash;
    });
  }
  getInsertPermission() {
    var _a68;
    return (_a68 = this.getRowDefinition()) == null ? void 0 : _a68.insertPermission;
  }
  hasInsertPermission() {
    var insertPermission = this.getInsertPermission();
    return insertPermission == null || Authorization.hasPermission(this.getInsertPermission());
  }
  transferDialogReadOnly(dialog) {
    if (this.readOnly)
      EditorUtils.setReadOnly(dialog, true);
  }
  initDialog(dialog) {
    SubDialogHelper.bindToDataChange(dialog, this, (_) => {
      this.subDialogDataChange();
    }, true);
    this.transferDialogReadOnly(dialog);
    this.routeDialog(this.getItemType(), dialog);
  }
  initEntityDialog(itemType, dialog) {
    if (itemType === this.getItemType()) {
      this.initDialog(dialog);
      return;
    }
    SubDialogHelper.bindToDataChange(dialog, this, (_) => {
      this.subDialogDataChange();
    }, true);
    this.transferDialogReadOnly(dialog);
    this.routeDialog(itemType, dialog);
  }
  createEntityDialog(itemType, callback) {
    const dialogType = this.getDialogTypeFor(itemType);
    const then = (dialogType2) => {
      var dialog = Widget.create({
        type: dialogType2,
        options: this.getDialogOptionsFor(itemType)
      });
      this.initEntityDialog(itemType, dialog);
      callback == null ? void 0 : callback(dialog);
      return dialog;
    };
    if (isPromiseLike(dialogType)) {
      return dialogType.then(then);
    } else {
      return then(dialogType);
    }
  }
  getDialogOptions() {
    return {};
  }
  getDialogOptionsFor(itemType) {
    if (itemType === this.getItemType())
      return this.getDialogOptions();
    return {};
  }
  getDialogTypeFor(itemType) {
    if (itemType === this.getItemType()) {
      return this.getDialogType();
    }
    return DialogTypeRegistry.getOrLoad(itemType);
  }
  getDialogType() {
    if (this._dialogType != null)
      return this._dialogType;
    var attr2 = this.getCustomAttribute(DialogTypeAttribute);
    if (attr2)
      this._dialogType = attr2.value;
    else {
      const promise = DialogTypeRegistry.getOrLoad(this.getEntityType());
      if (isPromiseLike(promise)) {
        return promise.then((t) => {
          this._dialogType = t;
          return t;
        });
      }
      this._dialogType = promise;
    }
    return this._dialogType;
  }
};
_init128 = __decoratorStart(_a66);
EntityGrid = __decorateElement(_init128, 0, "EntityGrid", _EntityGrid_decorators, EntityGrid);
__runInitializers(_init128, 1, EntityGrid);

// src/ui/dialogs/entitydialog.ts
var _EntityDialog_decorators, _init129, _a67;
_EntityDialog_decorators = [Decorators.registerClass("Serenity.EntityDialog", [IEditDialog, IReadOnly]), Decorators.panel(true)];
var _EntityDialog = class _EntityDialog extends (_a67 = BaseDialog) {
  constructor(props) {
    super(props);
    this.syncOrAsyncThen(this.getPropertyItemsData, this.getPropertyItemsDataAsync, (itemsData) => {
      this.propertyItemsReady(itemsData);
      this.afterInit();
    });
  }
  propertyItemsReady(itemsData) {
    this.propertyItemsData = itemsData;
    this.initPropertyGrid();
    this.initLocalizationGrid();
  }
  afterInit() {
  }
  useAsync() {
    return false;
  }
  destroy() {
    if (this.propertyGrid) {
      this.propertyGrid.destroy();
      this.propertyGrid = null;
    }
    if (this.localizationGrid) {
      this.localizationGrid.destroy();
      this.localizationGrid = null;
    }
    this.undeleteButton = null;
    this.applyChangesButton = null;
    this.deleteButton = null;
    this.saveAndCloseButton = null;
    this.editButton = null;
    this.cloneButton = null;
    this.toolbar = null;
    super.destroy();
  }
  get entity() {
    return this._entity;
  }
  set entity(value) {
    this._entity = value || new Object();
  }
  /** @deprecated use entityId */
  get_entityId() {
    return this.entityId;
  }
  get entityId() {
    return this._entityId;
  }
  set entityId(value) {
    this._entityId = value;
  }
  getEntityNameFieldValue() {
    var _a68;
    return ((_a68 = this.entity[this.getNameProperty()]) != null ? _a68 : "").toString();
  }
  getEntityTitle() {
    var _a68;
    if (!this.isEditMode()) {
      return stringFormat(localText("Controls.EntityDialog.NewRecordTitle"), this.getEntitySingular());
    } else {
      var titleFormat = this.isViewMode() || this.readOnly || !this.hasSavePermission() ? localText("Controls.EntityDialog.ViewRecordTitle") : localText("Controls.EntityDialog.EditRecordTitle");
      var title = (_a68 = this.getEntityNameFieldValue()) != null ? _a68 : "";
      return stringFormat(
        titleFormat,
        this.getEntitySingular(),
        !title ? "" : " (" + title + ")"
      );
    }
  }
  updateTitle() {
    this.dialogTitle = this.getEntityTitle();
  }
  isCloneMode() {
    return false;
  }
  isEditMode() {
    return this.entityId != null && !this.isCloneMode();
  }
  isDeleted() {
    if (this.entityId == null) {
      return false;
    }
    var isDeletedProperty = this.getIsDeletedProperty();
    if (isDeletedProperty) {
      return !!this.entity[isDeletedProperty];
    }
    var value = this.entity[this.getIsActiveProperty()];
    if (value == null) {
      return false;
    }
    return value < 0;
  }
  isNew() {
    return this.entityId == null;
  }
  isNewOrDeleted() {
    return this.isNew() || this.isDeleted();
  }
  getDeleteOptions(callback) {
    return {};
  }
  deleteHandler(options, callback) {
    serviceCall(options);
  }
  doDelete(callback) {
    var self2 = this;
    var request = {
      EntityId: this.entityId
    };
    var baseOptions = {
      service: this.getService() + "/Delete",
      request,
      onSuccess: (response) => {
        self2.onDeleteSuccess(response);
        if (callback != null) {
          callback(response);
        }
        Fluent.trigger(this.domNode, "ondatachange", {
          entityId: request.EntityId,
          entity: this.entity,
          operationType: "delete"
        });
      }
    };
    var thisOptions = this.getDeleteOptions(callback);
    var finalOptions = extend(baseOptions, thisOptions);
    this.deleteHandler(finalOptions, callback);
  }
  onDeleteSuccess(response) {
  }
  getRowDefinition() {
    return null;
  }
  getEntityType() {
    if (this._entityType != null)
      return this._entityType;
    var attr2 = this.getCustomAttribute(EntityTypeAttribute);
    if (attr2)
      return this._entityType = attr2.value;
    var name = getTypeFullName(getInstanceType(this));
    var px = name.indexOf(".");
    if (px >= 0)
      name = name.substring(px + 1);
    if (name.endsWith("Dialog") || name.endsWith("Control"))
      name = name.substring(0, name.length - 6);
    else if (name.endsWith("Panel"))
      name = name.substring(0, name.length - 5);
    return this._entityType = name;
  }
  getFormKey() {
    if (this._formKey != null)
      return this._formKey;
    var attr2 = this.getCustomAttribute(FormKeyAttribute);
    if (attr2)
      return this._formKey = attr2.value;
    return this._formKey = this.getEntityType();
  }
  getLocalTextDbPrefix() {
    var _a68;
    if (this._localTextDbPrefix != null)
      return this._localTextDbPrefix;
    this._localTextDbPrefix = (_a68 = this.getLocalTextPrefix()) != null ? _a68 : "";
    if (this._localTextDbPrefix.length > 0 && !this._localTextDbPrefix.endsWith("."))
      this._localTextDbPrefix = "Db." + this._localTextDbPrefix + ".";
    return this._localTextDbPrefix;
  }
  getLocalTextPrefix() {
    var rowDefinition = this.getRowDefinition();
    if (rowDefinition)
      return rowDefinition.localTextPrefix;
    var attr2 = this.getCustomAttribute(LocalTextPrefixAttribute);
    if (attr2)
      return attr2.value;
    return this.getEntityType();
  }
  getEntitySingular() {
    var _a68;
    if (this._entitySingular != null)
      return this._entitySingular;
    var attr2 = this.getCustomAttribute(ItemNameAttribute);
    return this._entitySingular = attr2 ? localText(attr2.value, attr2.value) : (_a68 = tryGetText(this.getLocalTextDbPrefix() + "EntitySingular")) != null ? _a68 : this.getEntityType();
  }
  getNameProperty() {
    var _a68, _b;
    if (this._nameProperty != null)
      return this._nameProperty;
    var rowDefinition = this.getRowDefinition();
    if (rowDefinition)
      return this._nameProperty = (_a68 = rowDefinition.nameProperty) != null ? _a68 : "";
    var attr2 = this.getCustomAttribute(NamePropertyAttribute);
    if (attr2)
      return this._nameProperty = (_b = attr2.value) != null ? _b : "";
    return this._nameProperty = "Name";
  }
  getIdProperty() {
    var _a68, _b;
    if (this._idProperty != null)
      return this._idProperty;
    var rowDefinition = this.getRowDefinition();
    if (rowDefinition)
      return this._idProperty = (_a68 = rowDefinition.idProperty) != null ? _a68 : "";
    var attr2 = this.getCustomAttribute(IdPropertyAttribute);
    if (attr2)
      return this._idProperty = (_b = attr2.value) != null ? _b : "";
    return this._idProperty = "ID";
  }
  getIsActiveProperty() {
    var _a68, _b;
    if (this._isActiveProperty != null)
      return this._isActiveProperty;
    var rowDefinition = this.getRowDefinition();
    if (rowDefinition)
      return this._isActiveProperty = (_a68 = rowDefinition.isActiveProperty) != null ? _a68 : "";
    var attr2 = this.getCustomAttribute(IsActivePropertyAttribute);
    if (attr2)
      return this._isActiveProperty = (_b = attr2.value) != null ? _b : "";
    return this._isActiveProperty = "";
  }
  getIsDeletedProperty() {
    var _a68;
    return (_a68 = this.getRowDefinition()) == null ? void 0 : _a68.isDeletedProperty;
  }
  getService() {
    if (this._service != null)
      return this._service;
    var attr2 = this.getCustomAttribute(ServiceAttribute);
    if (attr2)
      this._service = attr2.value;
    else
      this._service = replaceAll(this.getEntityType(), ".", "/");
    return this._service;
  }
  load(entityOrId, done, fail) {
    var action = () => {
      if (entityOrId == null) {
        this.loadResponse({});
        done && done();
        return;
      }
      var scriptType = typeof entityOrId;
      if (scriptType === "string" || scriptType === "number") {
        var entityId = entityOrId;
        this.loadById(entityId, function(response) {
          if (done)
            window.setTimeout(done, 0);
        }, null);
        return;
      }
      var entity = entityOrId || new Object();
      this.loadResponse({ Entity: entity });
      done && done();
    };
    if (fail == null) {
      action();
      return;
    }
    try {
      action();
    } catch (ex1) {
      var ex = Exception.wrap(ex1);
      fail(ex);
    }
  }
  loadNewAndOpenDialog(asPanel) {
    this.loadResponse({});
    this.dialogOpen(asPanel);
  }
  loadEntityAndOpenDialog(entity, asPanel) {
    this.loadResponse({ Entity: entity });
    this.dialogOpen(asPanel);
  }
  loadResponse(data) {
    data = data || {};
    this.onLoadingData(data);
    var entity = data.Entity || new Object();
    this.beforeLoadEntity(entity);
    this.loadEntity(entity);
    this.entity = entity;
    this.afterLoadEntity();
  }
  loadEntity(entity) {
    var idField = this.getIdProperty();
    if (idField != null)
      this.entityId = entity[idField];
    this.entity = entity;
    if (this.propertyGrid != null) {
      this.propertyGrid.set_mode(this.isEditMode() ? 2 /* update */ : 1 /* insert */);
      this.propertyGrid.load(entity);
    }
  }
  beforeLoadEntity(entity) {
    this.localizationPendingValue = null;
    this.localizationLastValue = null;
  }
  afterLoadEntity() {
    this.updateInterface();
    this.updateTitle();
  }
  loadByIdAndOpenDialog(entityId, asPanel) {
    this.loadById(
      entityId,
      (response) => window.setTimeout(() => this.dialogOpen(asPanel), 0),
      () => {
        if (!Fluent.isVisibleLike(this.domNode)) {
          this.domNode.remove();
        }
      }
    );
  }
  onLoadingData(data) {
  }
  getLoadByIdOptions(id, callback) {
    return {};
  }
  getLoadByIdRequest(id) {
    var request = {};
    request.EntityId = id;
    return request;
  }
  reloadById() {
    this.loadById(this.entityId);
  }
  loadById(id, callback, fail) {
    var baseOptions = {
      service: this.getService() + "/Retrieve",
      blockUI: true,
      request: this.getLoadByIdRequest(id),
      onSuccess: (response) => {
        this.loadResponse(response);
        callback && callback(response);
      },
      onCleanup: () => {
        if (this.validator != null) {
          validatorAbortHandler(this.validator);
        }
      }
    };
    var thisOptions = this.getLoadByIdOptions(id, callback);
    var finalOptions = extend(baseOptions, thisOptions);
    this.loadByIdHandler(finalOptions, callback, fail);
  }
  loadByIdHandler(options, callback, fail) {
    var request = serviceCall(options);
    fail && ((request == null ? void 0 : request.fail) ? request.fail(fail) : request.then(null, fail));
  }
  initLocalizationGrid() {
    var pgDiv = this.findById("PropertyGrid");
    if (!pgDiv) {
      return;
    }
    var pgOptions = this.getPropertyGridOptions();
    this.initLocalizationGridCommon(pgOptions);
  }
  initLocalizationGridCommon(pgOptions) {
    var pgDiv = this.findById("PropertyGrid");
    if (!pgOptions.items.some((x) => x.localizable === true))
      return;
    var localGridDiv = Fluent("div").attr("id", this.idPrefix + "LocalizationGrid").hide().insertAfter(pgDiv);
    pgOptions.idPrefix = this.idPrefix + "Localization_";
    var items = [];
    for (var item1 of pgOptions.items) {
      var langs = null;
      if (item1.localizable === true) {
        var copy = extend({}, item1);
        copy.oneWay = true;
        copy.readOnly = true;
        copy.required = false;
        copy.defaultValue = null;
        items.push(copy);
        if (langs == null)
          langs = this.getLangs();
        for (var lang of langs) {
          copy = extend({}, item1);
          copy.name = lang[0] + "$" + copy.name;
          copy.title = lang[1];
          copy.cssClass = [copy.cssClass, "translation"].join(" ");
          copy.insertable = true;
          copy.updatable = true;
          copy.oneWay = false;
          copy.required = false;
          copy.localizable = false;
          copy.defaultValue = null;
          items.push(copy);
        }
      }
    }
    pgOptions.items = items;
    this.localizationGrid = new PropertyGrid(__spreadValues({ element: localGridDiv }, pgOptions)).init();
    localGridDiv.addClass("s-LocalizationGrid");
  }
  isLocalizationMode() {
    return this.localizationButton != null && this.localizationButton.hasClass("pressed");
  }
  isLocalizationModeAndChanged() {
    if (!this.isLocalizationMode()) {
      return false;
    }
    var newValue = this.getLocalizationGridValue();
    return JSON.stringify(this.localizationLastValue) != JSON.stringify(newValue);
  }
  localizationButtonClick() {
    if (this.isLocalizationMode() && !this.validateForm()) {
      return;
    }
    if (this.isLocalizationModeAndChanged()) {
      var newValue = this.getLocalizationGridValue();
      this.localizationLastValue = newValue;
      this.localizationPendingValue = newValue;
    }
    this.localizationButton.toggleClass("pressed");
    this.updateInterface();
    if (this.isLocalizationMode()) {
      this.loadLocalization();
    }
  }
  getLanguages() {
    if (_EntityDialog.defaultLanguageList != null)
      return _EntityDialog.defaultLanguageList() || [];
    return [];
  }
  // for compatibility with older getLanguages methods written in Saltaralle
  getLangs() {
    var langsTuple = this.getLanguages();
    var langs = safeCast(langsTuple, Array);
    if (langs == null || langs.length === 0 || langs[0] == null || !Array.isArray(langs[0])) {
      langs = Array.prototype.slice.call(langsTuple.map(function(x) {
        return [x.item1, x.item2];
      }));
    }
    return langs;
  }
  loadLocalization() {
    if (this.localizationLastValue == null && this.isNew()) {
      this.localizationGrid.load({});
      this.setLocalizationGridCurrentValues();
      this.localizationLastValue = this.getLocalizationGridValue();
      return;
    }
    if (this.localizationLastValue != null) {
      this.localizationGrid.load(this.localizationLastValue);
      this.setLocalizationGridCurrentValues();
      return;
    }
    var opt = {
      service: this.getService() + "/Retrieve",
      blockUI: true,
      request: {
        EntityId: this.entityId,
        ColumnSelection: "keyOnly",
        IncludeColumns: ["Localizations"]
      },
      onSuccess: (response) => {
        var copy = extend(new Object(), this.entity);
        if (response.Localizations) {
          for (var language of Object.keys(response.Localizations)) {
            var entity = response.Localizations[language];
            for (var key of Object.keys(entity)) {
              copy[language + "$" + key] = entity[key];
            }
          }
        }
        this.localizationGrid.load(copy);
        this.setLocalizationGridCurrentValues();
        this.localizationPendingValue = null;
        this.localizationLastValue = this.getLocalizationGridValue();
      }
    };
    serviceCall(opt);
  }
  setLocalizationGridCurrentValues() {
    var valueByName = {};
    this.localizationGrid.enumerateItems((item, widget) => {
      if (item.name.indexOf("$") < 0 && Fluent.isInputLike(widget.domNode)) {
        valueByName[item.name] = this.byId(item.name).val();
        widget.element.val(valueByName[item.name]);
      }
    });
    this.localizationGrid.enumerateItems((item1, widget1) => {
      var idx = item1.name.indexOf("$");
      if (idx >= 0 && Fluent.isInputLike(widget1.domNode)) {
        var hint = valueByName[item1.name.substr(idx + 1)];
        if (hint != null && hint.length > 0) {
          widget1.element.attr("title", hint).attr("placeholder", hint);
        }
      }
    });
  }
  getLocalizationGridValue() {
    var value = {};
    this.localizationGrid.save(value);
    for (var k of Object.keys(value)) {
      if (k.indexOf("$") < 0) {
        delete value[k];
      }
    }
    return value;
  }
  getPendingLocalizations() {
    if (this.localizationPendingValue == null) {
      return null;
    }
    var result = {};
    var idField = this.getIdProperty();
    var langs = this.getLangs();
    for (var pair of langs) {
      var language = pair[0];
      var entity = {};
      if (idField != null) {
        entity[idField] = this.entityId;
      }
      var prefix = language + "$";
      for (var k of Object.keys(this.localizationPendingValue)) {
        if (k.startsWith(prefix))
          entity[k.substr(prefix.length)] = this.localizationPendingValue[k];
      }
      result[language] = entity;
    }
    return result;
  }
  initPropertyGrid() {
    var pgDiv = this.byId("PropertyGrid");
    if (pgDiv.length <= 0) {
      return;
    }
    var pgOptions = this.getPropertyGridOptions();
    this.propertyGrid = new PropertyGrid(__spreadValues({ element: pgDiv }, pgOptions)).init();
  }
  getPropertyItems() {
    var _a68;
    return ((_a68 = this.propertyItemsData) == null ? void 0 : _a68.items) || [];
  }
  getPropertyItemsData() {
    var formKey = this.getFormKey();
    if (this.getFormKey === _EntityDialog.prototype.getFormKey && this.getPropertyItems !== _EntityDialog.prototype.getPropertyItems && !ScriptData.canLoad("Form." + formKey)) {
      return {
        items: this.getPropertyItems(),
        additionalItems: []
      };
    }
    if (formKey) {
      return getFormData(formKey);
    }
    return { items: [], additionalItems: [] };
  }
  getPropertyItemsDataAsync() {
    return __async(this, null, function* () {
      var formKey = this.getFormKey();
      if (formKey) {
        return yield getFormDataAsync(formKey);
      }
      return { items: [], additionalItems: [] };
    });
  }
  getPropertyGridOptions() {
    return {
      idPrefix: this.idPrefix,
      items: this.getPropertyItems(),
      mode: 1 /* insert */,
      localTextPrefix: "Forms." + this.getFormKey() + "."
    };
  }
  validateBeforeSave() {
    return true;
  }
  getSaveOptions(callback) {
    var opt = {};
    opt.service = this.getService() + "/" + (this.isEditMode() ? "Update" : "Create"), opt.onSuccess = (response) => {
      this.onSaveSuccess(response);
      callback && callback(response);
      var typ = this.isEditMode() ? "update" : "create";
      var ent = opt.request == null ? null : opt.request.Entity;
      var eid = this.isEditMode() ? this.entityId : response == null ? null : response.EntityId;
      var dci = {
        operationType: typ,
        entity: ent,
        entityId: eid
      };
      Fluent.trigger(this.domNode, "ondatachange", dci);
    };
    opt.onCleanup = () => {
      this.validator && validatorAbortHandler(this.validator);
    };
    opt.request = this.getSaveRequest();
    return opt;
  }
  getSaveEntity() {
    var entity = new Object();
    if (this.propertyGrid != null) {
      this.propertyGrid.save(entity);
    }
    if (this.isEditMode()) {
      var idField = this.getIdProperty();
      if (idField != null && entity[idField] == null) {
        entity[idField] = this.entityId;
      }
    }
    return entity;
  }
  getSaveRequest() {
    var entity = this.getSaveEntity();
    var req = {};
    req.Entity = entity;
    if (this.isEditMode()) {
      var idField = this.getIdProperty();
      if (idField != null) {
        req.EntityId = this.entityId;
      }
    }
    if (this.localizationPendingValue != null) {
      req.Localizations = this.getPendingLocalizations();
    }
    return req;
  }
  onSaveSuccess(response) {
  }
  save_submitHandler(callback) {
    var options = this.getSaveOptions(callback);
    this.saveHandler(options, callback);
  }
  save(callback) {
    return ValidationHelper.submit(
      this.byId("Form"),
      () => this.validateBeforeSave(),
      () => this.save_submitHandler(callback)
    );
  }
  saveHandler(options, callback) {
    serviceCall(options);
  }
  initToolbar() {
    super.initToolbar();
    if (!this.toolbar)
      return;
    this.saveAndCloseButton = this.toolbar.findButton("save-and-close-button");
    this.applyChangesButton = this.toolbar.findButton("apply-changes-button");
    this.deleteButton = this.toolbar.findButton("delete-button");
    this.undeleteButton = this.toolbar.findButton("undo-delete-button");
    this.editButton = this.toolbar.findButton("edit-button");
    this.cloneButton = this.toolbar.findButton("clone-button");
    this.localizationButton = this.toolbar.findButton("localization-button");
  }
  showSaveSuccessMessage(response) {
    notifySuccess(localText("Controls.EntityDialog.SaveSuccessMessage"), "", null);
  }
  getToolbarButtons() {
    var list = [];
    list.push({
      title: localText("Controls.EntityDialog.SaveButton"),
      action: "save-and-close",
      cssClass: "save-and-close-button",
      icon: faIcon("check-circle", "purple"),
      hotkey: "alt+s",
      onClick: () => {
        this.save(() => {
          this.dialogClose("save-and-close");
        });
      },
      visible: () => !this.isDeleted() && !this.isViewMode(),
      disabled: () => !this.hasSavePermission() || this.readOnly
    });
    list.push({
      title: "",
      hint: localText("Controls.EntityDialog.ApplyChangesButton"),
      action: "apply-changes",
      cssClass: "apply-changes-button",
      icon: faIcon("clipboard-check", "purple"),
      hotkey: "alt+a",
      onClick: () => {
        this.save((response1) => {
          if (this.isEditMode()) {
            var id1 = response1.EntityId;
            if (id1 == null) {
              id1 = this.entityId;
            }
            this.loadById(id1);
          } else {
            this.loadById(response1.EntityId);
          }
          this.showSaveSuccessMessage(response1);
        });
      },
      visible: () => !this.isDeleted() && !this.isViewMode(),
      disabled: () => !this.hasSavePermission() || this.readOnly
    });
    list.push({
      title: localText("Controls.EntityDialog.DeleteButton"),
      action: "delete",
      cssClass: "delete-button",
      icon: faIcon("trash-o", "danger"),
      hotkey: "alt+x",
      onClick: () => {
        confirmDialog(localText("Controls.EntityDialog.DeleteConfirmation"), () => {
          this.doDelete(() => this.dialogClose("delete"));
        });
      },
      visible: () => this.isEditMode() && !this.isDeleted() && !this.isViewMode(),
      disabled: () => !this.hasDeletePermission() || this.readOnly
    });
    list.push({
      title: localText("Controls.EntityDialog.UndeleteButton"),
      action: "undo-delete",
      cssClass: "undo-delete-button",
      onClick: () => {
        if (this.isDeleted()) {
          confirmDialog(localText("Controls.EntityDialog.UndeleteConfirmation"), () => {
            this.undelete(() => this.loadById(this.entityId));
          });
        }
      },
      visible: () => this.isEditMode() && this.isDeleted() && !this.isViewMode(),
      disabled: () => !this.hasDeletePermission() || this.readOnly
    });
    if (this.useViewMode()) {
      list.push({
        title: localText("Controls.EntityDialog.EditButton"),
        action: "edit",
        cssClass: "edit-button",
        icon: faIcon("edit"),
        onClick: () => {
          if (!this.isEditMode())
            return;
          this.editClicked = true;
          this.updateInterface();
          this.updateTitle();
        },
        visible: () => this.isViewMode(),
        disabled: () => !this.hasSavePermission() || this.readOnly
      });
    }
    list.push({
      title: localText("Controls.EntityDialog.LocalizationButton"),
      action: "localization",
      cssClass: "localization-button",
      onClick: () => this.localizationButtonClick()
    });
    list.push({
      title: localText("Controls.EntityDialog.CloneButton"),
      action: "clone",
      cssClass: "clone-button",
      icon: faIcon("clone"),
      onClick: () => {
        if (!this.isEditMode())
          return;
        var cloneEntity = this.getCloningEntity();
        var cloneDialog = Widget.create({ type: getInstanceType(this) });
        SubDialogHelper.bubbleDataChange(SubDialogHelper.cascade(cloneDialog, this.domNode), this, true);
        cloneDialog.loadEntityAndOpenDialog(cloneEntity, null);
      },
      visible: () => false,
      disabled: () => !this.hasInsertPermission() || this.readOnly
    });
    return list;
  }
  getCloningEntity() {
    var clone = new Object();
    clone = extend(clone, this.entity);
    var idField = this.getIdProperty();
    if (idField) {
      delete clone[idField];
    }
    var isActiveField = this.getIsActiveProperty();
    if (isActiveField) {
      delete clone[isActiveField];
    }
    var isDeletedField = this.getIsDeletedProperty();
    if (isDeletedField) {
      delete clone[isDeletedField];
    }
    return clone;
  }
  updateInterface() {
    EditorUtils.setContainerReadOnly(this.byId("Form"), false);
    var isLocalizationMode = this.isLocalizationMode();
    var hasSavePermission = this.hasSavePermission();
    var viewMode = this.isViewMode();
    var readOnly = this.readOnly;
    this.toolbar.updateInterface();
    TabsExtensions.setDisabled(this.tabs, "Log", this.isNewOrDeleted());
    if (this.propertyGrid != null) {
      Fluent(this.propertyGrid.domNode).toggle(!isLocalizationMode);
    }
    if (this.localizationGrid != null) {
      Fluent(this.localizationGrid.domNode).toggle(isLocalizationMode);
    }
    if (this.localizationButton != null) {
      this.localizationButton.toggle(this.localizationGrid != null);
      this.localizationButton.findFirst(".button-inner").text(this.isLocalizationMode() ? localText("Controls.EntityDialog.LocalizationBack") : localText("Controls.EntityDialog.LocalizationButton"));
    }
    if (isLocalizationMode) {
      if (this.toolbar != null)
        this.toolbar.findButton("tool-button:not(.localization-hidden)").addClass(".localization-hidden").hide();
      this.localizationButton && this.localizationButton.show();
      return;
    }
    this.toolbar.findButton("localization-hidden").removeClass("localization-hidden").show();
    if (!hasSavePermission || viewMode || readOnly)
      EditorUtils.setContainerReadOnly(this.byId("Form"), true);
  }
  getUndeleteOptions(callback) {
    return {};
  }
  undeleteHandler(options, callback) {
    serviceCall(options);
  }
  undelete(callback) {
    var baseOptions = {};
    baseOptions.service = this.getService() + "/Undelete";
    var request = {};
    request.EntityId = this.entityId;
    baseOptions.request = request;
    baseOptions.onSuccess = (response) => {
      callback && callback(response);
      Fluent.trigger(this.domNode, "ondatachange", {
        entityId: this.entityId,
        entity: this.entity,
        operationType: "undelete"
      });
    };
    var thisOptions = this.getUndeleteOptions(callback);
    var finalOptions = extend(baseOptions, thisOptions);
    this.undeleteHandler(finalOptions, callback);
  }
  get readOnly() {
    return this.get_readOnly();
  }
  set readOnly(value) {
    this.set_readOnly(value);
  }
  get_readOnly() {
    return !!this._readonly;
  }
  set_readOnly(value) {
    if (!!this._readonly != !!value) {
      this._readonly = !!value;
      this.updateInterface();
      this.updateTitle();
    }
  }
  getInsertPermission() {
    var _a68;
    return (_a68 = this.getRowDefinition()) == null ? void 0 : _a68.insertPermission;
  }
  getUpdatePermission() {
    var _a68;
    return (_a68 = this.getRowDefinition()) == null ? void 0 : _a68.updatePermission;
  }
  getDeletePermission() {
    var _a68;
    return (_a68 = this.getRowDefinition()) == null ? void 0 : _a68.deletePermission;
  }
  hasDeletePermission() {
    var deletePermission = this.getDeletePermission();
    return deletePermission == null || Authorization.hasPermission(deletePermission);
  }
  hasInsertPermission() {
    var insertPermission = this.getInsertPermission();
    return insertPermission == null || Authorization.hasPermission(insertPermission);
  }
  hasUpdatePermission() {
    var updatePermission = this.getUpdatePermission();
    return updatePermission == null || Authorization.hasPermission(updatePermission);
  }
  hasSavePermission() {
    return this.isNew() ? this.hasInsertPermission() : this.hasUpdatePermission();
  }
  isViewMode() {
    return this.useViewMode() && this.isEditMode() && !this.editClicked;
  }
  useViewMode() {
    return false;
  }
  renderContents() {
    if (this.legacyTemplateRender())
      return void 0;
    const id = this.useIdPrefix();
    return Fluent(document.createDocumentFragment()).append(Fluent("div").attr("id", id.Toolbar)).append(Fluent("div").class("s-Form").append(Fluent("form").attr("id", id.Form).attr("action", "").append(Fluent("div").attr("id", id.PropertyGrid)))).getNode();
  }
};
_init129 = __decoratorStart(_a67);
_EntityDialog = __decorateElement(_init129, 0, "EntityDialog", _EntityDialog_decorators, _EntityDialog);
__runInitializers(_init129, 1, _EntityDialog);
var EntityDialog = _EntityDialog;
export {
  AggregateFormatting,
  Aggregators,
  ArgumentNullException,
  Authorization,
  AutoNumeric,
  BaseDialog,
  BaseEditorFiltering,
  BaseFiltering,
  BasePanel,
  BooleanEditor,
  BooleanFiltering,
  BooleanFormatter,
  CaptureOperationType,
  CascadedWidgetLink,
  CategoryAttribute,
  CheckLookupEditor,
  CheckTreeEditor,
  CheckboxFormatter,
  CloseButtonAttribute,
  ColumnPickerDialog,
  ColumnSelection,
  ColumnsBase,
  ColumnsKeyAttribute,
  Combobox,
  ComboboxEditor,
  Config,
  Criteria,
  CriteriaBuilder,
  CriteriaOperator,
  CssClassAttribute,
  Culture,
  DataGrid,
  DateEditor,
  DateFiltering,
  DateFormatter,
  DateTimeEditor,
  DateTimeFiltering,
  DateTimeFormatter,
  DateYearEditor,
  DecimalEditor,
  DecimalFiltering,
  Decorators,
  DefaultValueAttribute,
  Dialog,
  DialogExtensions,
  DialogTexts,
  DialogTypeAttribute,
  DialogTypeRegistry,
  DisplayNameAttribute,
  EditorAttribute,
  EditorFiltering,
  EditorOptionAttribute,
  EditorTypeAttribute,
  EditorTypeAttributeBase,
  EditorTypeRegistry,
  EditorUtils,
  EditorWidget,
  ElementAttribute,
  EmailAddressEditor,
  EmailEditor,
  EntityDialog,
  EntityGrid,
  EntityTypeAttribute,
  Enum,
  EnumEditor,
  EnumFiltering,
  EnumFormatter,
  EnumKeyAttribute,
  EnumTypeRegistry,
  ErrorHandling,
  Exception,
  FileDownloadFormatter,
  FileUploadEditor,
  FilterDialog,
  FilterDisplayBar,
  FilterOperators,
  FilterPanel,
  FilterStore,
  FilterWidgetBase,
  FilterableAttribute,
  FilteringTypeRegistry,
  FlexifyAttribute,
  Fluent,
  FormKeyAttribute,
  FormatterTypeRegistry,
  GeneratedCodeAttribute,
  GridPageInit,
  GridRadioSelectionMixin,
  GridRowSelectionMixin,
  GridSelectAllButtonHelper,
  GridUtils,
  HiddenAttribute,
  HintAttribute,
  HtmlContentEditor,
  HtmlNoteContentEditor,
  HtmlReportContentEditor,
  IBooleanValue,
  IDialog,
  IDoubleValue,
  IEditDialog,
  IFiltering,
  IGetEditValue,
  IInitializeColumn,
  IQuickFiltering,
  IReadOnly,
  ISetEditValue,
  ISlickFormatter,
  IStringValue,
  IValidateRequired,
  IdPropertyAttribute,
  ImageUploadEditor,
  InsertableAttribute,
  IntegerEditor,
  IntegerFiltering,
  InvalidCastException,
  Invariant,
  IsActivePropertyAttribute,
  ItemNameAttribute,
  LT,
  LayoutTimer,
  LazyLoadHelper,
  LocalTextPrefixAttribute,
  Lookup,
  LookupEditor,
  LookupEditorBase,
  LookupFiltering,
  MaskedEditor,
  MaxLengthAttribute,
  MaximizableAttribute,
  MemberType,
  MinuteFormatter,
  MultipleFileUploadEditor,
  MultipleImageUploadEditor,
  NamePropertyAttribute,
  NumberFormatter,
  OneWayAttribute,
  OptionAttribute,
  OptionsTypeAttribute,
  PanelAttribute,
  PanelPageInit,
  PasswordEditor,
  PlaceholderAttribute,
  PrefixedContext,
  PropertyCategories,
  PropertyCategory,
  PropertyCategoryTitle,
  PropertyDialog,
  PropertyField,
  PropertyFieldCaption,
  PropertyFieldEditor,
  PropertyFieldLineBreak,
  PropertyGrid,
  PropertyGridMode,
  PropertyItemSlickConverter,
  PropertyPanel,
  PropertyTabItem,
  PropertyTabList,
  PropertyTabPane,
  PropertyTabPanes,
  PropertyTabs,
  QuickFilterBar,
  QuickSearchInput,
  RadioButtonEditor,
  ReadOnlyAttribute,
  Recaptcha,
  ReflectionOptionsSetter,
  ReflectionUtils,
  RemoteView,
  RequiredAttribute,
  ResizableAttribute,
  ResponsiveAttribute,
  RetrieveColumnSelection,
  Router,
  ScriptData,
  Select2,
  SelectEditor,
  ServiceAttribute,
  ServiceLookupEditor,
  ServiceLookupEditorBase,
  ServiceLookupFiltering,
  SlickFormatting,
  SlickHelper,
  SlickPager,
  SlickTreeHelper,
  StaticPanelAttribute,
  StringEditor,
  StringFiltering,
  SubDialogHelper,
  SummaryType,
  TabsExtensions,
  TemplatedDialog,
  TemplatedPanel,
  TemplatedWidget,
  TextAreaEditor,
  TimeEditor,
  TimeEditorBase,
  TimeSpanEditor,
  Toastr,
  Toolbar,
  ToolbarButton,
  Tooltip,
  TreeGridMixin,
  URLEditor,
  UpdatableAttribute,
  UploadHelper,
  Uploader,
  UrlFormatter,
  ValidationHelper,
  Validator,
  Widget,
  addClass,
  addCustomAttribute,
  addEmptyOption,
  addLocalText,
  addOption,
  addTypeMember,
  addValidationRule,
  alert2 as alert,
  alertDialog,
  any,
  appendToNode,
  associateWidget,
  attrEncode,
  bgColor,
  blockUI,
  blockUndo,
  canLoadScriptData,
  cancelDialogButton,
  cast,
  centerDialog,
  classTypeInfo,
  clearKeys,
  clearOptions,
  coalesce,
  compareStringFactory,
  confirm,
  confirmDialog,
  count,
  dbText,
  dbTryText,
  deassociateWidget,
  debounce,
  deepClone,
  defaultNotifyOptions,
  delegateCombine,
  delegateContains,
  delegateRemove,
  editorTypeInfo,
  endsWith,
  executeEverytimeWhenVisible,
  executeOnceWhenVisible,
  extend,
  faIcon,
  fabIcon,
  fetchScriptData,
  fieldsProxy,
  findElementWithRelativeId,
  first,
  format,
  formatDate,
  formatDayHourAndMin,
  formatISODateTimeUTC,
  formatNumber,
  formatterTypeInfo,
  getActiveRequests,
  getBaseType,
  getColumns,
  getColumnsAsync,
  getColumnsData,
  getColumnsDataAsync,
  getColumnsScript,
  getCookie,
  getCustomAttribute,
  getCustomAttributes,
  getForm,
  getFormAsync,
  getFormData,
  getFormDataAsync,
  getFormScript,
  getGlobalObject,
  getInstanceType,
  getLookup,
  getLookupAsync,
  getMembers,
  getNested,
  getRemoteData,
  getRemoteDataAsync,
  getScriptData,
  getScriptDataHash,
  getType,
  getTypeFullName,
  getTypeNameProp,
  getTypeRegistry,
  getTypeShortName,
  getTypes,
  getWidgetFrom,
  getWidgetName,
  getjQuery,
  gridPageInit,
  groupBy,
  handleScriptDataError,
  hasBSModal,
  hasCustomAttribute,
  hasUIDialog,
  htmlEncode,
  iconClassName,
  iframeDialog,
  indexOf,
  information,
  informationDialog,
  initFormType,
  initFullHeightGridPage,
  initializeTypes,
  insert,
  interfaceTypeInfo,
  isArray,
  isArrayLike,
  isAssignableFrom,
  isBS3,
  isBS5Plus,
  isEmptyOrNull,
  isEnum,
  isInstanceOfType,
  isMobileView,
  isPromiseLike,
  isSameOrigin,
  isTrimmedEmpty,
  isValue,
  jQueryPatch,
  keyOf,
  layoutFillHeight,
  layoutFillHeightValue,
  localText,
  localeFormat,
  newBodyDiv,
  noDialogButton,
  notifyError,
  notifyInfo,
  notifySuccess,
  notifyWarning,
  okDialogButton,
  omitUndefined,
  outerHtml,
  padLeft,
  panelPageInit,
  parseCriteria,
  parseDate,
  parseDayHourAndMin,
  parseDecimal,
  parseHourAndMin,
  parseISODateTime,
  parseInteger,
  parseQueryString,
  peekScriptData,
  positionToastContainer,
  postToService,
  postToUrl,
  prefixedText,
  proxyTexts,
  reactPatch,
  registerClass,
  registerEditor,
  registerEnum,
  registerFormatter,
  registerInterface,
  registerType,
  reloadLookup,
  reloadLookupAsync,
  removeClass,
  removeValidationRule,
  replaceAll,
  requestFinished,
  requestStarting,
  resolveServiceUrl,
  resolveUrl,
  round,
  safeCast,
  serviceCall,
  serviceRequest,
  setEquality,
  setRegisteredScripts,
  setScriptData,
  setTypeNameProp,
  single,
  splitDateString,
  startsWith,
  stringFormat,
  stringFormatLocale,
  stripDiacritics,
  success,
  successDialog,
  text,
  textColor,
  toGrouping,
  toId,
  toSingleLine,
  today,
  toggleClass,
  triggerLayoutOnShow,
  trim,
  trimEnd,
  trimStart,
  trimToEmpty,
  trimToNull,
  trunc,
  tryFirst,
  tryGetText,
  tryGetWidget,
  turkishLocaleCompare,
  turkishLocaleToLower,
  turkishLocaleToUpper,
  typeInfoProperty,
  uiAndBSButtonNoConflict,
  useIdPrefix,
  validateOptions,
  validatorAbortHandler,
  warning,
  warningDialog,
  yesDialogButton,
  zeroPad
};

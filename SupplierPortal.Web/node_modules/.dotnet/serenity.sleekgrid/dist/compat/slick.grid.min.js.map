{
  "version": 3,
  "sources": ["../../src/grid/index.ts", "global-externals:_", "../../src/grid/gridoptions.ts", "../../src/grid/basiclayout.ts", "../../src/grid/cellnavigator.ts", "../../src/grid/draggable.ts", "../../src/grid/internal.ts", "../../src/grid/grid.ts"],
  "sourcesContent": ["export * from \"./eventargs\";\nexport * from \"./gridoptions\";\nexport * from \"./grid\";\nexport { BasicLayout } from \"./basiclayout\"\nexport type { LayoutEngine, LayoutHost } from \"./layout\";\nexport type { IPlugin, SelectionModel, ViewRange, ViewportInfo } from \"./types\";\n", "const { addClass, applyFormatterResultToCellNode, basicRegexSanitizer, columnDefaults, convertCompatFormatter, ensureUniqueColumnIds, escapeHtml, defaultColumnFormat, disableSelection, EventEmitter, EventData, GlobalEditorLock, initializeColumns, H, keyCode, NonDataRow, parsePx, preClickClassName, CellRange, removeClass, RowCell, spacerDiv, titleize } = Slick;export {\n     addClass, applyFormatterResultToCellNode, basicRegexSanitizer, columnDefaults, convertCompatFormatter, ensureUniqueColumnIds, escapeHtml, defaultColumnFormat, disableSelection, EventEmitter, EventData, GlobalEditorLock, initializeColumns, H, keyCode, NonDataRow, parsePx, preClickClassName, CellRange, removeClass, RowCell, spacerDiv, titleize\n};", "import type { Column, EditCommand, EditorFactory, EditorLock } from \"../core\";\nimport { ColumnFormat, CompatFormatter, FormatterFactory, GlobalEditorLock, GroupTotals, defaultColumnFormat } from \"../core\";\nimport { LayoutEngine } from \"./layout\";\n\n/**\n * Configuration options for the SleekGrid component.\n *\n * @template TItem - The type of items in the grid.\n */\nexport interface GridOptions<TItem = any> {\n    /**\n     * CSS class applied to newly added rows for custom styling. Default is `\"new-row\"`.\n     */\n    addNewRowCssClass?: string;\n\n    /**\n     * Defaults to `false`. If `true`, a horizontal scrollbar is always visible regardless of content width.\n     */\n    alwaysAllowHorizontalScroll?: boolean;\n\n    /**\n     * Defaults to `false`. If `true`, a vertical scrollbar is always visible, useful for fixed-height grids or menus.\n     */\n    alwaysShowVerticalScroll?: boolean;\n\n    /**\n     * Defaults to `100`. Delay in milliseconds before asynchronous loading of editors.\n     */\n    asyncEditorLoadDelay?: number;\n\n    /**\n     * Defaults to `false`. If `true`, editors are loaded asynchronously, reducing initial rendering load.\n     */\n    asyncEditorLoading?: boolean;\n\n    /**\n     * Defaults to `40`. Delay in milliseconds before cleaning up post-rendered elements.\n     */\n    asyncPostCleanupDelay?: number;\n\n    /**\n     * Defaults to `-1` which means immediate execution. Delay in milliseconds before starting asynchronous post-rendering.\n     */\n    asyncPostRenderDelay?: number;\n\n    /**\n     * Defaults to `true`. If `true`, automatically opens the cell editor when a cell gains focus.\n     */\n    autoEdit?: boolean;\n\n    /**\n     * Defaults to `false`. If `true`, automatically adjusts the grid's height to fit the entire content without scrolling.\n     */\n    autoHeight?: boolean;\n\n    /**\n     * CSS class applied to cells with a flashing effect. Default is `\"flashing\"`.\n     */\n    cellFlashingCssClass?: string;\n\n    /**\n     * Function to handle clearing a DOM node, used for custom cleanup logic. Default is `null`.\n     */\n    emptyNode?: (node: Element) => void;\n\n    /**\n     * Array of column definitions for the grid.\n     */\n    columns?: Column<TItem>[];\n\n    /**\n     * Defaults to `false`. If `true`, creates an extra pre-header panel for column grouping.\n     */\n    createPreHeaderPanel?: boolean;\n\n    /**\n     * Function to extract column values from data items, used for custom copy buffer operations. Default is `null`.\n     */\n    dataItemColumnValueExtractor?: (item: TItem, column: Column<TItem>) => void;\n\n    /**\n     * Defaults to `80`. Default width of columns in pixels.\n     */\n    defaultColumnWidth?: number;\n\n    /**\n     * Default formatting options for columns. Default is `defaultColumnFormat`.\n     */\n    defaultFormat?: ColumnFormat<TItem>;\n\n    /**\n     * Default formatter function for cells.\n     */\n    defaultFormatter?: CompatFormatter<TItem>;\n\n    /**\n     * Defaults to `false`. If `true`, cells can be edited inline.\n     */\n    editable?: boolean;\n\n    /**\n     * Function to handle edit commands, useful for implementing custom undo support. Default is `null`.\n     */\n    editCommandHandler?: (item: TItem, column: Column<TItem>, command: EditCommand) => void;\n\n    /**\n     * Defaults to `false`. If `true`, enables navigation between cells using left and right arrow keys within the editor.\n     */\n    editorCellNavOnLRKeys?: boolean;\n\n    /**\n     * Factory function for creating custom editors. Default is `null`.\n     */\n    editorFactory?: EditorFactory;\n\n    /**\n     * Global editor lock instance, used for managing concurrent editor access. Default is `GlobalEditorLock`.\n     */\n    editorLock?: EditorLock;\n\n    /**\n     * Defaults to `false`. If `true`, enables the ability to add new rows to the grid.\n     */\n    enableAddRow?: boolean;\n\n    /**\n     * Defaults to `false`. If `true`, enables asynchronous post-rendering.\n     */\n    enableAsyncPostRender?: boolean;\n\n    /**\n     * Defaults to `false`. If `true`, enables cleanup after asynchronous post-rendering.\n     */\n    enableAsyncPostRenderCleanup?: boolean;\n\n    /**\n     * Defaults to `true`. If `true`, enables cell navigation with arrow keys.\n     */\n    enableCellNavigation?: boolean;\n\n    /**\n     * Defaults to `false`. If `true`, allows selection of cell ranges.\n     */\n    enableCellRangeSelection?: boolean;\n\n    /**\n     * Defaults to `true`. If `true`, enables column reordering.\n     */\n    enableColumnReorder?: boolean;\n\n    /**\n     * Defaults to `false`. If `true`, enables row reordering.\n     */\n    enableRowReordering?: boolean;\n\n    /**\n     * Defaults to `true`. If `true`, enables navigation between cells using the Tab key.\n     */\n    enableTabKeyNavigation?: boolean;\n\n    /**\n     * Defaults to `false`. If `true`, enables text selection within cells.\n     */\n    enableTextSelectionOnCells?: boolean;\n\n    /**\n     * Defaults to `false`. If `true`, requires explicit initialization of the grid.\n     */\n    explicitInitialization?: boolean;\n\n    /**\n     * Defaults to `30`. Height of the footer row in pixels.\n     */\n    footerRowHeight?: number;\n\n    /**\n     * Defaults to `false`. If `true`, forces columns to fit the grid width.\n     */\n    forceFitColumns?: boolean;\n\n    /**\n     * Defaults to `false`. If `true`, synchronizes scrolling between the grid and its container.\n     */\n    forceSyncScrolling?: boolean;\n\n    /**\n     * Defaults to `250`. Interval in milliseconds for synchronizing scrolling when `forceSyncScrolling` is enabled.\n     */\n    forceSyncScrollInterval?: number;\n\n    /**\n     * Factory function for creating custom formatters. Default is `null`.\n     */\n    formatterFactory?: FormatterFactory;\n\n    /**\n     * Defaults to `false`. If `true`, places frozen rows at the bottom edge of the grid.\n     */\n    frozenBottom?: boolean;\n\n    /**\n     * Defaults to `undefined`. If specified, freezes the given number of columns on the left edge of the grid.\n     * Prefer setting column.frozen = 'true' for individual columns as this is only for compatibility.\n     */\n    frozenColumns?: number;\n\n    /**\n     * Defaults to `undefined`. If specified, freezes the given number of rows at the top or bottom\n     * edge of the grid based on `frozenBottom`.\n     */\n    frozenRows?: number;\n\n    /**\n     * Defaults to `false`. If `true`, makes rows take the full width of the grid.\n     */\n    fullWidthRows?: boolean;\n\n    /**\n     * Defaults to `false`. If `true`, shows the grouping panel for grouping columns.\n     */\n    groupingPanel?: boolean;\n\n    /**\n     * Defaults to `30`. Height of the grouping panel in pixels.\n     */\n    groupingPanelHeight?: number;\n\n    /**\n     * Function to format group totals for display in the grouping panel.\n     */\n    groupTotalsFormatter?: (p1?: GroupTotals<TItem>, p2?: Column<TItem>, grid?: any) => string;\n\n    /**\n     * Defaults to `30`. Height of the header row in pixels.\n     */\n    headerRowHeight?: number;\n\n    /**\n     * jQuery object for compatibility or custom integration purposes. Default is `undefined` unless jQuery is available in the global object (e.g. window).\n     */\n    jQuery?: { ready: any, fn: any };\n\n    /**\n     * Defaults to `false`. If `true`, leaves space for new rows in the DOM visible buffer.\n     */\n    leaveSpaceForNewRows?: boolean;\n\n    /**\n     * Layout engine for custom grid layouts. Default is `BasicLayout`. Use FrozenLayout to enable frozen columns / rows.\n     */\n    layoutEngine?: LayoutEngine;\n\n    /**\n     * Defaults to `3`. Minimum number of rows to keep in the buffer.\n     */\n    minBuffer?: number;\n\n    /**\n     * Defaults to `false`. If `true`, allows sorting by multiple columns simultaneously.\n     */\n    multiColumnSort?: boolean;\n\n    /**\n     * Defaults to `true`. If `true`, enables multiple cell selection.\n     */\n    multiSelect?: boolean;\n\n    /**\n     * Sets grouping panel height. Default is `undefined`, e.g. it is set via CSS.\n     */\n    preHeaderPanelHeight?: number;\n\n    /**\n     * Defaults to `false`. If `true`, renders all cells (row columns) in the viewport, at the cost of higher memory usage and reduced performance.\n     */\n    renderAllCells?: boolean;\n\n    /**\n     * Defaults to `false`. If `true`, renders all rows in the viewport, at the cost of higher memory usage and reduced performance.\n     * When both renderAllCells and renderAllRows are true, all cells in the grid are rendered (e.g. virtualization is disabled),\n     * which can be very slow for large datasets, but may be desired to keep all rows and cells in the DOM for accessibility purposes,\n     * proper tabbing and screen reader support.\n     */\n    renderAllRows?: boolean;\n\n    /**\n     * Function to handle removing a DOM node, used for custom cleanup logic. Default is `null` or jQuery.remove if available.\n     */\n    removeNode?: (node: Element) => void;\n\n    /**\n     * Defaults to `30`. Height of rows in pixels.\n     */\n    rowHeight?: number;\n\n    /**\n     * Default is based on document element's (`<html/>`) `dir` property.. If `true`, enables right-to-left text direction.\n     */\n    rtl?: boolean;\n\n    /**\n     * Optional function for sanitizing HTML strings to avoid XSS attacks.\n     * Default is `DOMPurify.sanitize` if available globally, otherwise falls back to `basicRegexSanitizer`.\n     */\n    sanitizer?: (dirtyHtml: string) => string;\n\n    /**\n     * CSS class applied to selected cells. Default is `\"selected\"`.\n     */\n    selectedCellCssClass?: string;\n\n    /**\n     * Defaults to `true`. If `true`, shows cell selection indicators.\n     */\n    showCellSelection?: boolean;\n\n    /**\n     * Defaults to `true`. If `true`, displays the column header.\n     */\n    showColumnHeader?: boolean;\n\n    /**\n     * Defaults to `false`. If `true`, displays the footer row.\n     */\n    showFooterRow?: boolean;\n\n    /**\n     * Defaults to `true`. If `true`, displays the grouping panel.\n     */\n    showGroupingPanel?: boolean;\n\n    /**\n     * Defaults to `false`. If `true`, displays the header row.\n     */\n    showHeaderRow?: boolean;\n\n    /**\n     * Defaults to `false`. If `true`, displays the pre-header panel for column grouping.\n     */\n    showPreHeaderPanel?: boolean;\n\n    /**\n     * Defaults to `false`. If `true`, displays the top panel for additional controls or information.\n     */\n    showTopPanel?: boolean;\n\n    /**\n     * Defaults to `false`. If `true`, suppresses the activation of cells when they contain an editor and are clicked.\n     */\n    suppressActiveCellChangeOnEdit?: boolean;\n\n    /**\n     * Defaults to `false`. If `true`, synchronizes column resizing with cell resizing.\n     */\n    syncColumnCellResize?: boolean;\n\n    /**\n     * Defaults to `30`. Height of the top panel in pixels.\n     */\n    topPanelHeight?: number;\n\n    /**\n     * Defaults to `false`. If `true`, uses legacy jQuery UI classes like ui-state-default and ui-widget-content.\n     */\n    useLegacyUI?: boolean;\n\n    /**\n     * Defaults to `false`. If `true`, uses CSS variables for styling.\n     */\n    useCssVars?: boolean;\n\n    /**\n     * CSS class applied to the viewport container. Default is `undefined`.\n     */\n    viewportClass?: string;\n\n}\n\nexport const gridDefaults: GridOptions = {\n    addNewRowCssClass: \"new-row\",\n    alwaysAllowHorizontalScroll: false,\n    alwaysShowVerticalScroll: false,\n    asyncEditorLoadDelay: 100,\n    asyncEditorLoading: false,\n    asyncPostCleanupDelay: 40,\n    asyncPostRenderDelay: -1,\n    autoEdit: true,\n    autoHeight: false,\n    cellFlashingCssClass: \"flashing\",\n    dataItemColumnValueExtractor: null,\n    defaultColumnWidth: 80,\n    defaultFormat: defaultColumnFormat,\n    editable: false,\n    editorFactory: null,\n    editorLock: GlobalEditorLock,\n    enableAddRow: false,\n    enableAsyncPostRender: false,\n    enableAsyncPostRenderCleanup: false,\n    enableCellNavigation: true,\n    enableColumnReorder: true,\n    enableTabKeyNavigation: true,\n    enableTextSelectionOnCells: false,\n    explicitInitialization: false,\n    footerRowHeight: 30,\n    forceFitColumns: false,\n    forceSyncScrolling: false,\n    forceSyncScrollInterval: 250,\n    formatterFactory: null,\n    fullWidthRows: false,\n    groupingPanel: false,\n    groupingPanelHeight: 30,\n    headerRowHeight: 30,\n    leaveSpaceForNewRows: false,\n    minBuffer: 3,\n    multiColumnSort: false,\n    multiSelect: true,\n    renderAllCells: false,\n    rowHeight: 30,\n    selectedCellCssClass: \"selected\",\n    showCellSelection: true,\n    showColumnHeader: true,\n    showFooterRow: false,\n    showGroupingPanel: true,\n    showHeaderRow: false,\n    showTopPanel: false,\n    suppressActiveCellChangeOnEdit: false,\n    topPanelHeight: 30,\n    useLegacyUI: false,\n    useCssVars: false\n}\n", "import { Column, H, parsePx, spacerDiv } from \"../core\";\nimport { LayoutEngine, LayoutHost } from \"./layout\";\n\nexport const BasicLayout: { new(): LayoutEngine } = function(): LayoutEngine {\n    var host: LayoutHost;\n    var canvasWidth: number;\n    var headersWidth: number;\n\n    var canvas: HTMLDivElement;\n    var headerCols: HTMLDivElement;\n    var headerRowCols: HTMLDivElement;\n    var headerRowSpacer: HTMLDivElement;\n    var footerRowCols: HTMLDivElement;\n    var footerRowSpacer: HTMLDivElement;\n    var topPanel: HTMLDivElement;\n    var viewport: HTMLDivElement;\n\n    function init(hostGrid: LayoutHost) {\n        host = hostGrid;\n        const spacerW = calcCanvasWidth() + host.getScrollDims().width + 'px';\n        const options = host.getOptions();\n        const uisd = options.useLegacyUI ? ' ui-state-default' : '';\n\n        headerCols = H('div', { class: 'slick-header-columns', style: (options.rtl ? 'right' : 'left') + ':-1000px' });\n        var headerColsS = H('div', { class: 'slick-header' + uisd, style: !options.showColumnHeader && 'display: none' }, headerCols);\n        updateHeadersWidth();\n\n        headerRowCols = H('div', { class: 'slick-headerrow-columns' });\n        headerRowSpacer = spacerDiv(spacerW);\n        var headerRow = H('div', { class: 'slick-headerrow' + uisd, style: !options.showHeaderRow && 'display: none' }, headerRowCols, headerRowSpacer);\n\n        topPanel = H('div', { class: 'slick-top-panel', style: 'width: 10000px' });\n        var topPanelS = H('div', { class: 'slick-top-panel-scroller' + uisd, style: !options.showTopPanel && 'display: none' }, topPanel);\n\n        canvas = H('div', { class: \"grid-canvas\", tabIndex: \"0\", hideFocus: '' })\n        viewport = H('div', { class: \"slick-viewport\", tabIndex: \"0\", hideFocus: '' }, canvas);\n\n        footerRowCols = H('div', { class: 'slick-footerrow-columns' });\n        footerRowSpacer = spacerDiv(spacerW);\n        var footerRow = H('div', { class: 'slick-footerrow' + uisd, style: !options.showFooterRow && 'display: none' }, footerRowCols, footerRowSpacer);\n\n        host.getContainerNode().append(headerColsS, headerRow, topPanelS, viewport, footerRow);\n    }\n\n    function appendCachedRow(_: number, rowNode: HTMLDivElement): void {\n        rowNode && canvas.appendChild(rowNode);\n    }\n\n    function applyColumnWidths() {\n        var x = 0, w, rule, cols = host.getColumns(), opts = host.getOptions(), rtl = opts.rtl;\n\n        if (opts.useCssVars) {\n            var styles = host.getContainerNode().style;\n            for (var i = 0; i < cols.length; i++) {\n                w = cols[i].width;\n                var prop = \"--l\" + i;\n                var oldVal = styles.getPropertyValue(prop);\n                var newVal = x + \"px\";\n                if (oldVal !== newVal) \n                    styles.setProperty(prop, newVal);\n                prop = \"--r\" + i;\n                oldVal = styles.getPropertyValue(prop);\n                newVal = (canvasWidth - x - w) + \"px\"\n                if (oldVal !== newVal) \n                    styles.setProperty(prop, newVal);\n                x += w;\n            }\n        }\n        else {\n            for (var i = 0; i < cols.length; i++) {\n                w = cols[i].width;\n                rule = host.getColumnCssRules(i);\n                rule[rtl ? 'right' : 'left'].style[rtl ? 'right' : 'left'] = x + \"px\";\n                rule[rtl ? 'left' : 'right'].style[rtl ? 'left' : 'right'] = (canvasWidth - x - w) + \"px\";\n                x += w;\n            }\n        }\n    }\n\n    function bindAncestorScrollEvents(): void {\n        var elem: HTMLElement = canvas;\n        while ((elem = elem.parentNode as HTMLElement) != document.body && elem != null) {\n            // bind to scroll containers only\n            if (elem == viewport || elem.scrollWidth != elem.clientWidth || elem.scrollHeight != elem.clientHeight) {\n                host.bindAncestorScroll(elem);\n            }\n        }\n    }\n\n    function calcCanvasWidth() {\n        var cols = host.getColumns(), i = cols.length;\n        var rowWidth = 0;\n        while (i--) {\n            rowWidth += cols[i].width;\n        }\n\n        return host.getOptions().fullWidthRows ? Math.max(rowWidth,\n            host.getAvailableWidth()) : rowWidth;\n    }\n\n    function updateHeadersWidth() {\n        headersWidth = 0;\n\n        var scrollWidth = host.getScrollDims().width;\n        var cols = host.getColumns();\n        for (var i = 0, ii = cols.length; i < ii; i++) {\n            headersWidth +=  cols[i].width;\n        }\n\n        headersWidth += scrollWidth;\n        headersWidth = Math.max(headersWidth, host.getViewportInfo().width) + 1000;\n        headerCols.style.width = headersWidth + 'px';\n    }\n\n    const destroy = () => {\n        host = null;\n    }\n\n    function getCanvasNodeFor() {\n        return canvas;\n    }\n\n    function getCanvasNodes() {\n        return [canvas];\n    }\n\n    function getCanvasWidth() {\n        return canvasWidth;\n    }\n\n    function getHeaderCols() {\n        return [headerCols];\n    }\n\n    function getHeaderColumn(cell: number) {\n        return headerCols.children.item(cell) as HTMLDivElement;\n    }\n\n    function getHeaderRowCols() {\n        return [headerRowCols];\n    }\n\n    function getHeaderRowColumn(cell: number) {\n        return headerRowCols.childNodes.item(cell) as HTMLDivElement;\n    }\n\n    function getHeaderRowColsFor() {\n        return headerRowCols;\n    }\n\n    function getFooterRowColumn(cell: number) {\n        return footerRowCols.childNodes.item(cell) as HTMLDivElement;\n    }\n\n    function getFooterRowColsFor() {\n        return footerRowCols;\n    }\n\n    function getHeaderColsFor() {\n        return headerCols;\n    }\n\n    function getFooterRowCols(): HTMLDivElement[] {\n        return [footerRowCols];\n    }\n\n    function getRowFromCellNode(cellNode: HTMLElement): number {\n        return host.getRowFromNode(cellNode.parentElement);\n    }\n\n    function getTopPanelFor() {\n        return topPanel;\n    }\n\n    function getTopPanelNodes() {\n        return [topPanel];\n    }\n\n    function getViewportNodeFor(): HTMLDivElement {\n        return viewport;\n    }\n\n    function getViewportNodes(): HTMLDivElement[] {\n        return [viewport];\n    }\n\n    function handleScrollH(): void {\n        headerCols.parentElement.scrollLeft = host.getScrollLeft();\n        topPanel.parentElement.scrollLeft = host.getScrollLeft();\n        headerRowCols.parentElement.scrollLeft = host.getScrollLeft();\n        footerRowCols.parentElement.scrollLeft = host.getScrollLeft();\n    }\n\n    function noop(): void {\n    }\n\n    function realScrollHeightChange() {\n        canvas.style.height = host.getViewportInfo().realScrollHeight + 'px'\n    }\n\n    function reorderViewColumns(viewCols: Column[]): Column[] {\n        return viewCols;\n    }\n\n    function returnFalse() {\n        return false;\n    }\n\n    function setOverflow(): void {\n        var alwaysVS = host.getOptions().alwaysShowVerticalScroll;\n\n        viewport.style.overflowX = 'auto';\n        viewport.style.overflowY = alwaysVS ? 'scroll' : (host.getOptions().autoHeight ? 'hidden' : 'auto');\n    }\n\n    function updateCanvasWidth(): boolean {\n        var oldCanvasWidth = canvasWidth;\n        canvasWidth = calcCanvasWidth();\n        var scrollWidth = host.getScrollDims().width;\n\n        const vpi = host.getViewportInfo();\n        var canvasWidthPx = canvasWidth + 'px'\n        canvas.style.width = canvasWidthPx;\n        headerRowCols.style.width = canvasWidthPx;\n        footerRowCols.style.width = canvasWidthPx;\n        updateHeadersWidth();\n        vpi.hasHScroll = (canvasWidth > host.getViewportInfo().width - scrollWidth);\n\n        var spacerWidthPx = (canvasWidth + (vpi.hasVScroll ? scrollWidth : 0)) + 'px';\n        headerRowSpacer.style.width = spacerWidthPx;\n        footerRowSpacer.style.width = spacerWidthPx;\n\n        return canvasWidth != oldCanvasWidth;\n    }\n\n    const resizeCanvas = () => {\n        var vs = host.getViewportInfo();\n        var _paneTopH = vs.height + vs.topPanelHeight + vs.headerRowHeight + vs.footerRowHeight;\n        const options = host.getOptions();\n        if (options.autoHeight) {\n            host.getContainerNode().style.height = (_paneTopH + vs.groupingPanelHeight +\n                parsePx(getComputedStyle(headerCols.parentElement).height)) + 'px';\n            viewport.style.height = '';\n        }\n        else\n            viewport.style.height = vs.height + 'px'\n    }\n\n    function returnZero() {\n        return 0;\n    }\n\n    var intf: LayoutEngine = {\n        afterHeaderColumnDrag: noop,\n        afterRenderRows: noop,\n        afterSetOptions: noop,\n        appendCachedRow,\n        applyColumnWidths,\n        beforeCleanupAndRenderCells: noop,\n        bindAncestorScrollEvents,\n        calcCanvasWidth,\n        updateHeadersWidth,\n        isFrozenRow: returnFalse,\n        destroy,\n        getCanvasNodeFor,\n        getCanvasNodes,\n        getCanvasWidth,\n        getFooterRowCols,\n        getFooterRowColsFor,\n        getFooterRowColumn,\n        getHeaderCols,\n        getHeaderColsFor,\n        getHeaderColumn,\n        getHeaderRowCols,\n        getHeaderRowColsFor,\n        getHeaderRowColumn,\n        getRowFromCellNode,\n        getFrozenCols: returnZero,\n        getFrozenRowOffset: returnZero,\n        getFrozenRows: returnZero,\n        getScrollCanvasY: getCanvasNodeFor,\n        getScrollContainerX: getViewportNodeFor,\n        getScrollContainerY: getViewportNodeFor,\n        getTopPanelFor,\n        getTopPanelNodes,\n        getViewportNodeFor,\n        getViewportNodes,\n        handleScrollH,\n        handleScrollV: noop,\n        init,\n        layoutName: \"basic\",\n        realScrollHeightChange,\n        reorderViewColumns,\n        resizeCanvas,\n        setOverflow,\n        setPaneVisibility: noop,\n        setScroller: noop,\n        updateCanvasWidth\n    }\n\n    return intf;\n} as any;\n", "import { GoToResult } from \"./internal\";\n\nexport interface CellNavigatorHost {\n    getColumnCount(): number;\n    getRowCount(): number;\n    getColspan(row: number, cell: number): number;\n    canCellBeActive(row: number, cell: number): boolean;\n    setTabbingDirection(dir: number): void;\n    isRTL(): boolean;\n}\n\nexport class CellNavigator {\n\n    declare private host: CellNavigatorHost;\n\n    constructor(h: CellNavigatorHost) {\n        this.host = h;\n    }\n\n    private findFirstFocusableCell(row: number): number {\n        var cell = 0;\n        var cols = this.host.getColumnCount();\n        while (cell < cols) {\n            if (this.host.canCellBeActive(row, cell)) {\n                return cell;\n            }\n            cell += this.host.getColspan(row, cell);\n        }\n        return null;\n    }\n\n    private findLastFocusableCell(row: number): number {\n        var cell = 0;\n        var lastFocusableCell = null;\n        var cols = this.host.getColumnCount();\n        while (cell < cols) {\n            if (this.host.canCellBeActive(row, cell)) {\n                lastFocusableCell = cell;\n            }\n            cell += this.host.getColspan(row, cell);\n        }\n        return lastFocusableCell;\n    }\n\n\n    private gotoRight(row?: number, cell?: number): GoToResult {\n        var cols = this.host.getColumnCount();\n        if (cell >= cols) {\n            return null;\n        }\n\n        do {\n            cell += this.host.getColspan(row, cell);\n        }\n        while (cell < cols && !this.host.canCellBeActive(row, cell));\n\n        if (cell < cols) {\n            return {\n                row: row,\n                cell: cell,\n                posX: cell\n            };\n        }\n        return null;\n    }\n\n    private gotoLeft(row?: number, cell?: number): GoToResult {\n        if (cell <= 0) {\n            return null;\n        }\n\n        var firstFocusableCell = this.findFirstFocusableCell(row);\n        if (firstFocusableCell === null || firstFocusableCell >= cell) {\n            return null;\n        }\n\n        var prev = {\n            row: row,\n            cell: firstFocusableCell,\n            posX: firstFocusableCell\n        };\n        var pos;\n        while (true) {\n            pos = this.gotoRight(prev.row, prev.cell);\n            if (!pos) {\n                return null;\n            }\n            if (pos.cell >= cell) {\n                return prev;\n            }\n            prev = pos;\n        }\n    }\n\n    private gotoDown(row?: number, cell?: number, posX?: number): GoToResult {\n        var prevCell;\n        var rowCount = this.host.getRowCount();\n        while (true) {\n            if (++row >= rowCount) {\n                return null;\n            }\n\n            prevCell = cell = 0;\n            while (cell <= posX) {\n                prevCell = cell;\n                cell += this.host.getColspan(row, cell);\n            }\n\n            if (this.host.canCellBeActive(row, prevCell)) {\n                return {\n                    row: row,\n                    cell: prevCell,\n                    posX: posX\n                };\n            }\n        }\n    }\n\n    private gotoUp(row?: number, cell?: number, posX?: number): GoToResult {\n        var prevCell;\n        while (true) {\n            if (--row < 0) {\n                return null;\n            }\n\n            prevCell = cell = 0;\n            while (cell <= posX) {\n                prevCell = cell;\n                cell += this.host.getColspan(row, cell);\n            }\n\n            if (this.host.canCellBeActive(row, prevCell)) {\n                return {\n                    row: row,\n                    cell: prevCell,\n                    posX: posX\n                };\n            }\n        }\n    }\n\n    private gotoNext(row?: number, cell?: number, posX?: number): GoToResult {\n        if (row == null && cell == null) {\n            row = cell = posX = 0;\n            if (this.host.canCellBeActive(row, cell)) {\n                return {\n                    row: row,\n                    cell: cell,\n                    posX: cell\n                };\n            }\n        }\n\n        var pos = this.gotoRight(row, cell);\n        if (pos) {\n            return pos;\n        }\n\n        var firstFocusableCell = null;\n        var dataLengthIncludingAddNew = this.host.getRowCount();\n        while (++row < dataLengthIncludingAddNew) {\n            firstFocusableCell = this.findFirstFocusableCell(row);\n            if (firstFocusableCell != null) {\n                return {\n                    row: row,\n                    cell: firstFocusableCell,\n                    posX: firstFocusableCell\n                };\n            }\n        }\n        return null;\n    }\n\n    private gotoPrev(row?: number, cell?: number, posX?: number): { row: number; cell: number; posX: number; } {\n        var cols = this.host.getColumnCount();\n        if (row == null && cell == null) {\n            row = this.host.getRowCount() - 1;\n            cell = posX = cols - 1;\n            if (this.host.canCellBeActive(row, cell)) {\n                return {\n                    row: row,\n                    cell: cell,\n                    posX: cell\n                };\n            }\n        }\n\n        var pos;\n        var lastSelectableCell;\n        while (!pos) {\n            pos = this.gotoLeft(row, cell);\n            if (pos) {\n                break;\n            }\n            if (--row < 0) {\n                return null;\n            }\n\n            cell = 0;\n            lastSelectableCell = this.findLastFocusableCell(row);\n            if (lastSelectableCell != null) {\n                pos = {\n                    row: row,\n                    cell: lastSelectableCell,\n                    posX: lastSelectableCell\n                };\n            }\n        }\n        return pos;\n    }\n\n    private gotoRowStart(row: number) {\n        var newCell = this.findFirstFocusableCell(row);\n        if (newCell === null)\n            return null;\n\n        return {\n            row: row,\n            cell: newCell,\n            posX: newCell\n        };\n    }\n\n    private gotoRowEnd(row: number) {\n        var newCell = this.findLastFocusableCell(row);\n        if (newCell === null)\n            return null;\n\n        return {\n            row: row,\n            cell: newCell,\n            posX: newCell\n        };\n    }\n\n    /**\n     * @param {string} dir Navigation direction.\n     * @return {boolean} Whether navigation resulted in a change of active cell.\n     */\n     navigate(dir: string, activeRow: number, activeCell: number, activePosX: number): GoToResult {\n        var tabbingDirections: Record<string, number> = {\n            up: -1,\n            down: 1,\n            prev: -1,\n            next: 1,\n            home: -1,\n            end: 1\n        };\n\n        const rtl = this.host.isRTL();\n        tabbingDirections[rtl ? 'right' : 'left'] = -1;\n        tabbingDirections[rtl ? 'left' : 'right'] = 1;\n\n        this.host.setTabbingDirection(tabbingDirections[dir]);\n\n        var stepFunctions: Record<string, Function> = {\n            up: this.gotoUp,\n            down: this.gotoDown,\n            prev: this.gotoPrev,\n            next: this.gotoNext,\n            home: this.gotoRowStart,\n            end: this.gotoRowEnd\n        };\n\n        stepFunctions[rtl ? 'right' : 'left'] = this.gotoLeft;\n        stepFunctions[rtl ? 'left' : 'right'] = this.gotoRight;\n\n        var stepFn = stepFunctions[dir].bind(this);\n        return stepFn(activeRow, activeCell, activePosX) as GoToResult;\n    }\n}\n", "// Adapted from https://github.com/6pac/SlickGrid/blob/master/src/slick.interactions.ts to replace jquery.event.drag.js\n\nexport interface DragItem {\n    dragSource: HTMLElement | Document | null;\n    dragHandle: HTMLElement | null;\n    deltaX: number;\n    deltaY: number;\n    range: DragRange;\n    target: HTMLElement;\n    startX: number;\n    startY: number;\n}\n\nexport interface DragRange {\n    start: {\n        row?: number;\n        cell?: number;\n    };\n    end: {\n        row?: number;\n        cell?: number;\n    };\n}\n\nfunction windowScrollPosition() {\n    return {\n        left: window.scrollX ?? document.documentElement.scrollLeft ?? 0,\n        top: window.scrollY ?? document.documentElement.scrollTop ?? 0\n    };\n}\n\nexport interface DragPosition {\n    startX: number;\n    startY: number;\n    range: DragRange;\n}\n\nexport interface DraggableOption {\n    /** container DOM element, defaults to \"document\" */\n    containerElement?: HTMLElement | Document;\n\n    /** when defined, will allow dragging from a specific element by using the .matches() query selector. */\n    allowDragFrom?: string;\n\n    /** when defined, will allow dragging from a specific element or its closest parent by using the .closest() query selector. */\n    allowDragFromClosest?: string;\n\n    /** Defaults to `['ctrlKey', 'metaKey']`, list of keys that when pressed will prevent Draggable events from triggering (e.g. prevent onDrag when Ctrl key is pressed while dragging) */\n    preventDragFromKeys?: Array<'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'>;\n\n    /** drag initialized callback */\n    onDragInit?: (e: DragEvent, dd: DragPosition) => boolean | void;\n\n    /** drag started callback */\n    onDragStart?: (e: DragEvent, dd: DragPosition) => boolean | void;\n\n    /** drag callback */\n    onDrag?: (e: DragEvent, dd: DragPosition) => boolean | void;\n\n    /** drag ended callback */\n    onDragEnd?: (e: DragEvent, dd: DragPosition) => boolean | void;\n}\n\nexport function Draggable(options: DraggableOption) {\n    let { containerElement } = options;\n    const { onDragInit, onDragStart, onDrag, onDragEnd, preventDragFromKeys } = options;\n    let element: HTMLElement | null;\n    let startX: number;\n    let startY: number;\n    let deltaX: number;\n    let deltaY: number;\n    let dragStarted: boolean;\n\n    if (!containerElement) {\n        containerElement = document.body;\n    }\n\n    let originaldd: Partial<DragItem> = {\n        dragSource: containerElement,\n        dragHandle: null,\n    };\n\n    function init() {\n        if (containerElement) {\n            containerElement.addEventListener('mousedown', userPressed as EventListener);\n            containerElement.addEventListener('touchstart', userPressed as EventListener, { passive: true });\n        }\n    }\n\n    function executeDragCallbackWhenDefined(callback?: (e: DragEvent, dd: DragItem) => boolean | void, evt?: MouseEvent | Touch | TouchEvent | KeyboardEvent, dd?: DragItem) {\n        if (typeof callback === 'function') {\n            return callback(evt as DragEvent, dd as DragItem);\n        }\n    }\n\n    function destroy() {\n        if (containerElement) {\n            containerElement.removeEventListener('mousedown', userPressed as EventListener);\n            containerElement.removeEventListener('touchstart', userPressed as EventListener);\n        }\n    }\n\n    /** Do we want to prevent Drag events from happening (for example prevent onDrag when Ctrl key is pressed while dragging) */\n    function preventDrag(event: MouseEvent | TouchEvent | KeyboardEvent) {\n        let eventPrevented = false;\n        if (preventDragFromKeys) {\n            preventDragFromKeys.forEach(key => {\n                if ((event as any)[key]) {\n                    eventPrevented = true;\n                }\n            });\n        }\n        return eventPrevented;\n    }\n\n    function userPressed(event: MouseEvent | TouchEvent | KeyboardEvent) {\n        if (!preventDrag(event)) {\n            element = event.target as HTMLElement;\n            const targetEvent: MouseEvent | Touch = ((event as TouchEvent)?.touches?.[0] ?? event) as any;\n            const { target } = targetEvent;\n\n            if (!options.allowDragFrom || (options.allowDragFrom && (element.matches(options.allowDragFrom)) || (options.allowDragFromClosest && element.closest(options.allowDragFromClosest)))) {\n                originaldd.dragHandle = element as HTMLElement;\n                const winScrollPos = windowScrollPosition();\n                startX = winScrollPos.left + targetEvent.clientX;\n                startY = winScrollPos.top + targetEvent.clientY;\n                deltaX = targetEvent.clientX - targetEvent.clientX;\n                deltaY = targetEvent.clientY - targetEvent.clientY;\n                originaldd = Object.assign(originaldd, { deltaX, deltaY, startX, startY, target });\n                const result = executeDragCallbackWhenDefined(onDragInit as (e: DragEvent, dd: DragPosition) => boolean | void, event, originaldd as DragItem);\n\n                if (result !== false) {\n                    document.body.addEventListener('mousemove', userMoved);\n                    document.body.addEventListener('touchmove', userMoved, { passive: true });\n                    document.body.addEventListener('mouseup', userReleased);\n                    document.body.addEventListener('touchend', userReleased, { passive: true });\n                    document.body.addEventListener('touchcancel', userReleased, { passive: true });\n                }\n            }\n        }\n    }\n\n    function userMoved(event: MouseEvent | TouchEvent | KeyboardEvent) {\n        if (!preventDrag(event)) {\n            const targetEvent: MouseEvent | Touch = (event as TouchEvent)?.touches?.[0] ?? event as any;\n            deltaX = targetEvent.clientX - startX;\n            deltaY = targetEvent.clientY - startY;\n            const { target } = targetEvent;\n\n            if (!dragStarted) {\n                originaldd = Object.assign(originaldd, { deltaX, deltaY, startX, startY, target });\n                executeDragCallbackWhenDefined(onDragStart, event, originaldd as DragItem);\n                dragStarted = true;\n            }\n\n            originaldd = Object.assign(originaldd, { deltaX, deltaY, startX, startY, target });\n            executeDragCallbackWhenDefined(onDrag, event, originaldd as DragItem);\n        }\n    }\n\n    function userReleased(event: MouseEvent | TouchEvent) {\n        document.body.removeEventListener('mousemove', userMoved);\n        document.body.removeEventListener('touchmove', userMoved);\n        document.body.removeEventListener('mouseup', userReleased);\n        document.body.removeEventListener('touchend', userReleased);\n        document.body.removeEventListener('touchcancel', userReleased);\n\n        // trigger a dragEnd event only after dragging started and stopped\n        if (dragStarted) {\n            const { target } = event;\n            originaldd = Object.assign(originaldd, { target });\n            executeDragCallbackWhenDefined(onDragEnd, event, originaldd as DragItem);\n            dragStarted = false;\n        }\n    }\n\n    init();\n\n    return { destroy };\n}\n\n", "import { Column, H, parsePx, Position } from \"../core\";\n\n// shared across all grids on the page\nlet maxSupportedCssHeight: number;  // browser's breaking point\nlet scrollbarDimensions: { width: number, height: number };\n\nexport function absBox(elem: HTMLElement): Position {\n    var box: Position = {\n        top: elem.offsetTop,\n        left: elem.offsetLeft,\n        bottom: 0,\n        right: 0,\n        width: elem.offsetWidth,\n        height: elem.offsetHeight,\n        visible: true\n    };\n\n    box.bottom = box.top + box.height;\n    box.right = box.left + box.width;\n\n    // walk up the tree\n    var offsetParent = elem.offsetParent;\n    while ((elem = elem.parentNode as HTMLElement) != document.body && elem != null) {\n        if (box.visible && elem.scrollHeight != elem.offsetHeight && getComputedStyle(elem).overflowY !== \"visible\") {\n            box.visible = box.bottom > elem.scrollTop && box.top < elem.scrollTop + elem.clientHeight;\n        }\n\n        if (box.visible && elem.scrollWidth != elem.offsetWidth && getComputedStyle(elem).overflowX != \"visible\") {\n            box.visible = box.right > elem.scrollLeft && box.left < elem.scrollLeft + elem.clientWidth;\n        }\n\n        box.left -= elem.scrollLeft;\n        box.top -= elem.scrollTop;\n\n        if (elem === offsetParent) {\n            box.left += elem.offsetLeft;\n            box.top += elem.offsetTop;\n            offsetParent = elem.offsetParent;\n        }\n\n        box.bottom = box.top + box.height;\n        box.right = box.left + box.width;\n    }\n\n    return box;\n}\n\nexport function autosizeColumns(cols: Column[], availWidth: number, absoluteColMinWidth: number): boolean {\n    var i, c,\n        widths = [],\n        shrinkLeeway = 0,\n        total = 0,\n        prevTotal;\n\n    for (i = 0; i < cols.length; i++) {\n        c = cols[i];\n        widths.push(c.width);\n        total += c.width;\n        if (c.resizable) {\n            shrinkLeeway += c.width - Math.max(c.minWidth, absoluteColMinWidth);\n        }\n    }\n\n    // shrink\n    prevTotal = total;\n    while (total > availWidth && shrinkLeeway) {\n        var shrinkProportion = (total - availWidth) / shrinkLeeway;\n        for (i = 0; i < cols.length && total > availWidth; i++) {\n            c = cols[i];\n            var width = widths[i];\n            if (!c.resizable || width <= c.minWidth || width <= absoluteColMinWidth) {\n                continue;\n            }\n            var absMinWidth = Math.max(c.minWidth, absoluteColMinWidth);\n            var shrinkSize = Math.floor(shrinkProportion * (width - absMinWidth)) || 1;\n            shrinkSize = Math.min(shrinkSize, width - absMinWidth);\n            total -= shrinkSize;\n            shrinkLeeway -= shrinkSize;\n            widths[i] -= shrinkSize;\n        }\n        if (prevTotal <= total) {  // avoid infinite loop\n            break;\n        }\n        prevTotal = total;\n    }\n\n    // grow\n    prevTotal = total;\n    while (total < availWidth) {\n        var growProportion = availWidth / total;\n        for (i = 0; i < cols.length && total < availWidth; i++) {\n            c = cols[i];\n            var currentWidth = widths[i];\n            var growSize;\n\n            if (!c.resizable || c.maxWidth <= currentWidth) {\n                growSize = 0;\n            } else {\n                growSize = Math.min(Math.floor(growProportion * currentWidth) - currentWidth, (c.maxWidth - currentWidth) || 1000000) || 1;\n            }\n            total += growSize;\n            widths[i] += (total <= availWidth ? growSize : 0);\n        }\n        if (prevTotal >= total) {  // avoid infinite loop\n            break;\n        }\n        prevTotal = total;\n    }\n\n    var reRender = false;\n    for (i = 0; i < cols.length; i++) {\n        if (cols[i].rerenderOnResize && cols[i].width != widths[i]) {\n            reRender = true;\n        }\n        cols[i].width = widths[i];\n    }\n\n    return reRender;\n}\n\nexport function getMaxSupportedCssHeight(recalc?: boolean): number {\n    if (!recalc && maxSupportedCssHeight != null)\n        return maxSupportedCssHeight;\n    return (maxSupportedCssHeight = ((navigator.userAgent.toLowerCase().match(/gecko\\//) ? 4000000 : 32000000)));\n}\n\nexport function getScrollBarDimensions(recalc?: boolean): { width: number; height: number; } {\n    if (!scrollbarDimensions || recalc) {\n        var c = document.body.appendChild(H('div', {\n            style: 'position:absolute;top:-10000px;left:-10000px;width:100px;height:100px;overflow: scroll;border:0'\n        }));\n        scrollbarDimensions = {\n            width: Math.round(c.offsetWidth - c.clientWidth),\n            height: Math.round(c.offsetWidth - c.clientHeight)\n        };\n        c.remove();\n    }\n    return scrollbarDimensions;\n}\n\n\nexport function simpleArrayEquals(arr1: number[], arr2: number[]) {\n    if (!Array.isArray(arr1) || !Array.isArray(arr2) || arr1.length !== arr2.length)\n        return false;\n    arr1 = arr1.slice().sort();\n    arr2 = arr2.slice().sort();\n    for (var i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i])\n            return false;\n    }\n    return true;\n}\n\n/**\n * Helper to sort visible cols, while keeping invisible cols sticky to\n * the previous visible col. For example, if columns are currently in order\n * A, B, C, D, E, F, G, H and desired order is G, D, F (assuming A, B, C, E\n * were invisible) the result is A, B, G, H, D, E, F.\n */\n export function sortToDesiredOrderAndKeepRest(columns: Column[], idOrder: string[]): Column[] {\n    if (idOrder.length == 0)\n        return columns;\n\n    var orderById: { [key: string]: number } = {},\n        colIdxById: { [key: string]: number } = {},\n        result: Column[] = [];\n\n    for (var i = 0; i < idOrder.length; i++)\n        orderById[idOrder[i]] = i;\n\n    for (i = 0; i < columns.length; i++)\n        colIdxById[columns[i].id] = i;\n\n    function takeFrom(i: number) {\n        for (var j = i; j < columns.length; j++) {\n            var c = columns[j];\n            if (i != j && orderById[c.id] != null)\n                break;\n            result.push(c);\n            colIdxById[c.id] = null;\n        }\n    }\n\n    if (orderById[columns[0].id] == null)\n        takeFrom(0);\n\n    for (var id of idOrder) {\n        i = colIdxById[id];\n        if (i != null)\n            takeFrom(i);\n    }\n\n    for (i = 0; i < columns.length; i++) {\n        var c = columns[i];\n        if (colIdxById[c.id] != null) {\n            result.push(c);\n            colIdxById[c.id] = null;\n        }\n    }\n\n    return result;\n}\n\nexport function calcMinMaxPageXOnDragStart(cols: Column[], colIdx: number, pageX: number, forceFit: boolean, absoluteColMinWidth: number): { maxPageX: number; minPageX: number; } {\n    var shrinkLeewayOnRight = null, stretchLeewayOnRight = null, j: number, c: Column;\n    if (forceFit) {\n        shrinkLeewayOnRight = 0;\n        stretchLeewayOnRight = 0;\n        // colums on right affect maxPageX/minPageX\n        for (j = colIdx + 1; j < cols.length; j++) {\n            c = cols[j];\n            if (c.resizable) {\n                if (stretchLeewayOnRight != null) {\n                    if (c.maxWidth) {\n                        stretchLeewayOnRight += c.maxWidth - c.previousWidth;\n                    } else {\n                        stretchLeewayOnRight = null;\n                    }\n                }\n                shrinkLeewayOnRight += c.previousWidth - Math.max(c.minWidth || 0, absoluteColMinWidth);\n            }\n        }\n    }\n    var shrinkLeewayOnLeft = 0, stretchLeewayOnLeft = 0;\n    for (j = 0; j <= colIdx; j++) {\n        // columns on left only affect minPageX\n        c = cols[j];\n        if (c.resizable) {\n            if (stretchLeewayOnLeft != null) {\n                if (c.maxWidth) {\n                    stretchLeewayOnLeft += c.maxWidth - c.previousWidth;\n                } else {\n                    stretchLeewayOnLeft = null;\n                }\n            }\n            shrinkLeewayOnLeft += c.previousWidth - Math.max(c.minWidth || 0, absoluteColMinWidth);\n        }\n    }\n    if (shrinkLeewayOnRight === null) {\n        shrinkLeewayOnRight = 100000;\n    }\n    if (shrinkLeewayOnLeft === null) {\n        shrinkLeewayOnLeft = 100000;\n    }\n    if (stretchLeewayOnRight === null) {\n        stretchLeewayOnRight = 100000;\n    }\n    if (stretchLeewayOnLeft === null) {\n        stretchLeewayOnLeft = 100000;\n    }\n\n    return {\n        maxPageX: pageX + Math.min(shrinkLeewayOnRight, stretchLeewayOnLeft),\n        minPageX: pageX - Math.min(shrinkLeewayOnLeft, stretchLeewayOnRight)\n    }\n}\n\nexport function shrinkOrStretchColumn(cols: Column[], colIdx: number, d: number, forceFit: boolean, absoluteColMinWidth: number): void {\n    var c: Column, j: number, x: number, actualMinWidth: number;\n\n    if (d < 0) { // shrink column\n        x = d;\n\n        for (j = colIdx; j >= 0; j--) {\n            c = cols[j];\n            if (c.resizable) {\n                actualMinWidth = Math.max(c.minWidth || 0, absoluteColMinWidth);\n                if (x && c.previousWidth + x < actualMinWidth) {\n                    x += c.previousWidth - actualMinWidth;\n                    c.width = actualMinWidth;\n                } else {\n                    c.width = c.previousWidth + x;\n                    x = 0;\n                }\n            }\n        }\n\n        if (forceFit) {\n            x = -d;\n            for (j = colIdx + 1; j < cols.length; j++) {\n                c = cols[j];\n                if (c.resizable) {\n                    if (x && c.maxWidth && (c.maxWidth - c.previousWidth < x)) {\n                        x -= c.maxWidth - c.previousWidth;\n                        c.width = c.maxWidth;\n                    } else {\n                        c.width = c.previousWidth + x;\n                        x = 0;\n                    }\n                }\n            }\n        }\n    } else { // stretch column\n        x = d;\n\n        for (j = colIdx; j >= 0; j--) {\n            c = cols[j];\n            if (c.resizable) {\n                if (x && c.maxWidth && (c.maxWidth - c.previousWidth < x)) {\n                    x -= c.maxWidth - c.previousWidth;\n                    c.width = c.maxWidth;\n                } else {\n                    c.width = c.previousWidth + x;\n                    x = 0;\n                }\n            }\n        }\n\n        if (forceFit) {\n            x = -d;\n            for (j = colIdx + 1; j < cols.length; j++) {\n                c = cols[j];\n                if (c.resizable) {\n                    actualMinWidth = Math.max(c.minWidth || 0, absoluteColMinWidth);\n                    if (x && c.previousWidth + x < actualMinWidth) {\n                        x += c.previousWidth - actualMinWidth;\n                        c.width = actualMinWidth;\n\n                    } else {\n                        c.width = c.previousWidth + x;\n                        x = 0;\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport function addUiStateHover() {\n    (this as HTMLElement)?.classList.add(\"ui-state-hover\");\n}\n\nexport function removeUiStateHover() {\n    (this as HTMLElement)?.classList.remove(\"ui-state-hover\");\n}\n\nexport function getVBoxDelta(el: HTMLElement): number {\n    if (!el)\n        return 0;\n\n    var style = getComputedStyle(el);\n    if (style.boxSizing === 'border-box')\n        return 0;\n\n    var p = [\"border-top-width\", \"border-bottom-width\", \"padding-top\", \"padding-bottom\"];\n    var delta = 0;\n    for (var val of p)\n        delta += parsePx(style.getPropertyValue(val)) || 0;\n    return delta;\n}\n\nexport function getInnerWidth(el: HTMLElement): number {\n    var style = getComputedStyle(el);\n    var width = parsePx(style.width) ?? 0;\n    if (style.boxSizing != 'border-box')\n        return Math.max(0, width);\n\n    var p = [\"border-left-width\", \"border-right-width\", \"padding-left\", \"padding-right\"];\n    for (var val of p)\n        width -= parsePx(style.getPropertyValue(val)) || 0;\n\n    return Math.max(width, 0);\n}\n\nexport interface CachedRow {\n    rowNodeL: HTMLElement,\n    rowNodeR: HTMLElement,\n    // ColSpans of rendered cells (by column idx).\n    // Can also be used for checking whether a cell has been rendered.\n    cellColSpans: number[],\n\n    // Cell nodes (by column idx).  Lazy-populated by ensureCellNodesInRowsCache().\n    cellNodesByColumnIdx: { [key: number]: HTMLElement },\n\n    // Column indices of cell nodes that have been rendered, but not yet indexed in\n    // cellNodesByColumnIdx.  These are in the same order as cell nodes added at the\n    // end of the row.\n    cellRenderQueue: number[];\n\n    // Elements returned from formatters for cells in cellRenderQueue.\n    cellRenderContent: (Element | DocumentFragment)[];\n}\n\nexport interface GoToResult {\n    row: number;\n    cell: number;\n    posX: number;\n}\n\nexport interface PostProcessCleanupEntry {\n    groupId: number,\n    cellNode?: HTMLElement,\n    columnIdx?: number,\n    rowNodeL?: HTMLElement;\n    rowNodeR?: HTMLElement;\n    rowIdx?: number;\n}\n\n", "import { CellRange, CellStylesHash, Column, ColumnFormat, ColumnMetadata, ColumnSort, EditCommand, EditController, Editor, EditorClass, EditorHost, EditorLock, EventData, EventEmitter, FormatterContext, FormatterResult, GroupTotals, H, IEventData, ItemMetadata, Position, RowCell, addClass, applyFormatterResultToCellNode, basicRegexSanitizer, columnDefaults, convertCompatFormatter, defaultColumnFormat, disableSelection, escapeHtml, initializeColumns, parsePx, preClickClassName, removeClass } from \"../core\";\nimport { BasicLayout } from \"./basiclayout\";\nimport { CellNavigator } from \"./cellnavigator\";\nimport { Draggable } from \"./draggable\";\nimport { ArgsAddNewRow, ArgsCell, ArgsCellChange, ArgsCellEdit, ArgsColumn, ArgsColumnNode, ArgsCssStyle, ArgsEditorDestroy, ArgsGrid, ArgsScroll, ArgsSelectedRowsChange, ArgsSort, ArgsValidationError } from \"./eventargs\";\nimport { GridOptions, gridDefaults } from \"./gridoptions\";\nimport { CachedRow, PostProcessCleanupEntry, absBox, addUiStateHover, autosizeColumns, calcMinMaxPageXOnDragStart, getInnerWidth, getMaxSupportedCssHeight, getScrollBarDimensions, getVBoxDelta, removeUiStateHover, shrinkOrStretchColumn, simpleArrayEquals, sortToDesiredOrderAndKeepRest } from \"./internal\";\nimport { LayoutEngine } from \"./layout\";\nimport { IPlugin, SelectionModel, ViewRange, ViewportInfo } from \"./types\";\n\nexport class Grid<TItem = any> implements EditorHost {\n    declare private _absoluteColMinWidth: number;\n    declare private _activeCanvasNode: HTMLElement;\n    declare private _activeCell: number;\n    declare private _activeCellNode: HTMLElement;\n    declare private _activePosX: number;\n    declare private _activeRow: number;\n    declare private _activeViewportNode: HTMLElement;\n    private _cellCssClasses: Record<string, CellStylesHash> = {};\n    private _cellHeightDiff: number = 0;\n    private _cellWidthDiff: number = 0;\n    declare private _cellNavigator: CellNavigator;\n    declare private _colById: { [key: string]: number };\n    declare private _colDefaults: Partial<Column>;\n    private _colLeft: number[] = [];\n    private _colRight: number[] = [];\n    declare private _cols: Column<TItem>[];\n    declare private _columnCssRulesL: any;\n    declare private _columnCssRulesR: any;\n    declare private _currentEditor: Editor;\n    declare private _data: any;\n    declare private _draggableInstance: { destroy: () => void };\n    declare private _editController: EditController;\n    declare private _emptyNode: (node: Element) => void;\n    private _headerColumnWidthDiff: number = 0;\n    declare private _hEditorLoader: number;\n    declare private _hPostRender: number;\n    declare private _hPostRenderCleanup: number;\n    declare private _hRender: number;\n    private _ignoreScrollUntil: number = 0;\n    declare private _initColById: { [key: string]: number };\n    declare private _initCols: Column<TItem>[];\n    declare private _initialized;\n    declare private _jQuery: any;\n    declare private _jumpinessCoefficient: number;\n    declare private _lastRenderTime: number;\n    declare private _layout: LayoutEngine;\n    declare private _numberOfPages: number;\n    declare private _options: GridOptions<TItem>;\n    private _page: number = 0;\n    declare private _pageHeight: number;\n    private _pageOffset: number = 0;\n    private _pagingActive: boolean = false;\n    private _pagingIsLastPage: boolean = false;\n    private _plugins: IPlugin[] = [];\n    declare private _postCleanupActive: boolean;\n    private _postProcessCleanupQueue: PostProcessCleanupEntry[] = [];\n    private _postProcessedRows: { [row: number]: { [cell: number]: string } } = {};\n    declare private _postProcessFromRow: number;\n    private _postProcessGroupId: number = 0;\n    declare private _postProcessToRow: number;\n    declare private _postRenderActive: boolean;\n    declare private _removeNode: (node: Element) => void;\n    private _rowsCache: { [key: number]: CachedRow } = {};\n    declare private _scrollDims: { width: number, height: number };\n    private _scrollLeft: number = 0;\n    private _scrollLeftPrev: number = 0;\n    private _scrollLeftRendered: number = 0;\n    private _scrollTop: number = 0;\n    private _scrollTopPrev: number = 0;\n    private _scrollTopRendered: number = 0;\n    private _selectedRows: number[] = [];\n    declare private _selectionModel: SelectionModel;\n    declare private _serializedEditorValue: any;\n    private _sortColumns: ColumnSort[] = [];\n    declare private _styleNode: HTMLStyleElement;\n    declare private _stylesheet: any;\n    private _tabbingDirection: number = 1;\n    private _uid: string = \"sleekgrid_\" + Math.round(1000000 * Math.random());\n    private _viewportInfo: ViewportInfo = {} as any;\n    private _vScrollDir: number = 1;\n\n    private _boundAncestorScroll: HTMLElement[] = [];\n    declare private _container: HTMLElement;\n    declare private _focusSink1: HTMLElement;\n    declare private _focusSink2: HTMLElement;\n    declare private _groupingPanel: HTMLElement;\n\n    readonly onActiveCellChanged = new EventEmitter<ArgsCell>();\n    readonly onActiveCellPositionChanged = new EventEmitter<ArgsGrid>();\n    readonly onAddNewRow = new EventEmitter<ArgsAddNewRow>();\n    readonly onBeforeCellEditorDestroy = new EventEmitter<ArgsEditorDestroy>();\n    readonly onBeforeDestroy = new EventEmitter<ArgsGrid>();\n    readonly onBeforeEditCell = new EventEmitter<ArgsCellEdit>();\n    readonly onBeforeFooterRowCellDestroy = new EventEmitter<ArgsColumnNode>();\n    readonly onBeforeHeaderCellDestroy = new EventEmitter<ArgsColumnNode>();\n    readonly onBeforeHeaderRowCellDestroy = new EventEmitter<ArgsColumnNode>();\n    readonly onCellChange = new EventEmitter<ArgsCellChange>();\n    readonly onCellCssStylesChanged = new EventEmitter<ArgsCssStyle>();\n    readonly onClick = new EventEmitter<ArgsCell, MouseEvent>();\n    readonly onColumnsReordered = new EventEmitter<ArgsGrid>();\n    readonly onColumnsResized = new EventEmitter<ArgsGrid>();\n    readonly onCompositeEditorChange = new EventEmitter<ArgsGrid>();\n    readonly onContextMenu = new EventEmitter<ArgsGrid, UIEvent>();\n    readonly onDblClick = new EventEmitter<ArgsCell, MouseEvent>();\n    readonly onDrag = new EventEmitter<ArgsGrid, UIEvent>();\n    readonly onDragEnd = new EventEmitter<ArgsGrid, UIEvent>();\n    readonly onDragInit = new EventEmitter<ArgsGrid, UIEvent>();\n    readonly onDragStart = new EventEmitter<ArgsGrid, UIEvent>();\n    readonly onFooterRowCellRendered = new EventEmitter<ArgsColumnNode>();\n    readonly onHeaderCellRendered = new EventEmitter<ArgsColumnNode>();\n    readonly onHeaderClick = new EventEmitter<ArgsColumn>();\n    readonly onHeaderContextMenu = new EventEmitter<ArgsColumn>();\n    readonly onHeaderMouseEnter = new EventEmitter<ArgsColumn, MouseEvent>();\n    readonly onHeaderMouseLeave = new EventEmitter<ArgsColumn, MouseEvent>();\n    readonly onHeaderRowCellRendered = new EventEmitter<ArgsColumnNode>();\n    readonly onKeyDown = new EventEmitter<ArgsCell, KeyboardEvent>();\n    readonly onMouseEnter = new EventEmitter<ArgsGrid, MouseEvent>();\n    readonly onMouseLeave = new EventEmitter<ArgsGrid, MouseEvent>();\n    readonly onScroll = new EventEmitter<ArgsScroll>();\n    readonly onSelectedRowsChanged = new EventEmitter<ArgsSelectedRowsChange>();\n    readonly onSort = new EventEmitter<ArgsSort>();\n    readonly onValidationError = new EventEmitter<ArgsValidationError>();\n    readonly onViewportChanged = new EventEmitter<ArgsGrid>();\n\n    constructor(container: HTMLElement | ArrayLike<HTMLElement>, data: any, columns: Column<TItem>[], options: GridOptions<TItem>) {\n\n        this._data = data;\n        this._colDefaults = Object.assign({}, columnDefaults);\n\n        this._options = options = Object.assign({}, gridDefaults, options);\n        // @ts-ignore\n        options.jQuery = this._jQuery = options.jQuery === void 0 ? (typeof jQuery !== \"undefined\" ? jQuery : void 0) : options.jQuery;\n        // @ts-ignore\n        options.sanitizer = options.sanitizer === void 0 ? (typeof DOMPurify !== \"undefined\" && typeof DOMPurify.sanitize == \"function\" ? DOMPurify.sanitize : basicRegexSanitizer) : options.sanitizer;\n\n        if (this._jQuery && container instanceof (this._jQuery as any))\n            this._container = (container as any)[0];\n        else if (container instanceof Element)\n            this._container = container as HTMLElement;\n        else if (typeof container === \"string\")\n            this._container = document.querySelector(container);\n        else if (container.length)\n            container = container[0];\n\n        if (this._container == null) {\n            throw new Error(\"SleekGrid requires a valid container, \" + container + \" does not exist in the DOM.\");\n        }\n\n        this._container.classList.add('slick-container');\n\n        this._emptyNode = options.emptyNode ?? (this._jQuery ? (function(node: Element) { this(node).empty(); }).bind(this._jQuery) : (function(node: Element) { node.innerHTML = \"\"; }));\n        this._removeNode = options.removeNode ?? (this._jQuery ? (function(node: Element) { this(node).remove(); }).bind(this._jQuery) : (function(node: Element) { node.remove(); }));\n\n        if (options?.createPreHeaderPanel) {\n            // for compat, as draggable grouping plugin expects preHeaderPanel for grouping\n            if (options.groupingPanel == null)\n                options.groupingPanel = true;\n            if (options.groupingPanelHeight == null && options.preHeaderPanelHeight != null)\n                options.groupingPanelHeight = options.preHeaderPanelHeight;\n            if (options.showGroupingPanel == null && options.showPreHeaderPanel != null)\n                options.showGroupingPanel = options.showPreHeaderPanel;\n        }\n\n        this._options.rtl = this._options.rtl ??\n            (document.body.classList.contains('rtl') || (typeof getComputedStyle != \"undefined\" &&\n                getComputedStyle(this._container).direction == 'rtl'));\n\n        if (this._options.rtl)\n            this._container.classList.add('rtl');\n        else\n            this._container.classList.add('ltr');\n\n        this.validateAndEnforceOptions();\n        this._colDefaults.width = options.defaultColumnWidth;\n\n        this._editController = {\n            \"commitCurrentEdit\": this.commitCurrentEdit.bind(this),\n            \"cancelCurrentEdit\": this.cancelCurrentEdit.bind(this)\n        };\n\n        if (this._jQuery)\n            this._jQuery(this._container).empty();\n        else\n            this._container.innerHTML = '';\n\n        this._container.style.overflow = \"hidden\";\n        this._container.style.outline = \"0\";\n        this._container.classList.add(this._uid);\n\n        if (this._options.useLegacyUI)\n            this._container.classList.add(\"ui-widget\");\n\n        // set up a positioning container if needed\n        if (!/relative|absolute|fixed/.test(getComputedStyle(this._container).position)) {\n            this._container.style.position = \"relative\";\n        }\n\n        this._container.appendChild(this._focusSink1 = H('div', {\n            class: \"slick-focus-sink\",\n            hideFocus: '',\n            style: 'position:fixed;width:0!important;height:0!important;top:0;left:0;outline:0!important;',\n            tabIndex: '0'\n        }));\n\n        this._layout = options.layoutEngine ?? new BasicLayout();\n        this.setInitialCols(columns);\n        this._scrollDims = getScrollBarDimensions();\n\n        if (options.groupingPanel) {\n            this.createGroupingPanel();\n        }\n\n        this._layout.init({\n            cleanUpAndRenderCells: this.cleanUpAndRenderCells.bind(this),\n            bindAncestorScroll: this.bindAncestorScroll.bind(this),\n            getAvailableWidth: this.getAvailableWidth.bind(this),\n            getCellFromPoint: this.getCellFromPoint.bind(this),\n            getColumnCssRules: this.getColumnCssRules.bind(this),\n            getColumns: this.getColumns.bind(this),\n            getContainerNode: this.getContainerNode.bind(this),\n            getDataLength: this.getDataLength.bind(this),\n            getOptions: this.getOptions.bind(this),\n            getRowFromNode: this.getRowFromNode.bind(this),\n            getScrollDims: this.getScrollBarDimensions.bind(this),\n            getScrollLeft: () => this._scrollLeft,\n            getScrollTop: () => this._scrollTop,\n            getViewportInfo: () => this._viewportInfo,\n            renderRows: this.renderRows.bind(this)\n        });\n\n        this._container.append(this._focusSink2 = this._focusSink1.cloneNode() as HTMLElement);\n\n        if (options.viewportClass)\n            this.getViewports().forEach(vp => addClass(vp, options.viewportClass));\n\n        if (!options.explicitInitialization) {\n            this.init();\n        }\n\n        this.bindToData();\n    }\n\n    private createGroupingPanel() {\n        if (this._groupingPanel || !this._focusSink1)\n            return;\n\n        this._focusSink1.insertAdjacentElement(\"afterend\", this._groupingPanel = H('div', {\n            class: \"slick-grouping-panel\",\n            style: (!this._options.showGroupingPanel ? \"display: none\" : null)\n        }));\n\n        if (this._options.createPreHeaderPanel) {\n            this._groupingPanel.appendChild(H('div', { class: 'slick-preheader-panel' }));\n        }\n    }\n\n    private bindAncestorScroll(elem: HTMLElement) {\n        if (this._jQuery)\n            this._jQuery(elem).on('scroll', this.handleActiveCellPositionChange);\n        else\n            elem.addEventListener('scroll', this.handleActiveCellPositionChange);\n        this._boundAncestorScroll.push(elem);\n    }\n\n    init(): void {\n        if (this._initialized)\n            return;\n\n        this._initialized = true;\n\n        this.calcViewportSize();\n\n        // header columns and cells may have different padding/border skewing width calculations (box-sizing, hello?)\n        // calculate the diff so we can set consistent sizes\n        this.measureCellPaddingAndBorder();\n\n        var viewports = this.getViewports();\n\n        if (this._jQuery && !this._options.enableTextSelectionOnCells) {\n            // disable text selection in grid cells except in input and textarea elements\n            // (this is IE-specific, because selectstart event will only fire in IE)\n            this._jQuery(viewports).on(\"selectstart.ui\", () => {\n                return this._jQuery(this).is(\"input,textarea\");\n            });\n        }\n\n        this._layout.setPaneVisibility();\n        this._layout.setScroller();\n        this.setOverflow();\n\n        this.updateViewColLeftRight();\n        this.createColumnHeaders();\n        this.createColumnFooters();\n        this.setupColumnSort();\n        this.createCssRules();\n        this.resizeCanvas();\n        this._layout.bindAncestorScrollEvents();\n\n        const onEvent = <K extends keyof HTMLElementEventMap>(el: HTMLElement, type: K,\n            listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any) => {\n            if (this._jQuery)\n                this._jQuery(el).on(type, listener as any);\n            else\n                el.addEventListener(type, listener);\n        }\n\n        onEvent(this._container, \"resize\", this.resizeCanvas);\n\n        viewports.forEach(vp => {\n            var scrollTicking = false;\n            onEvent(vp, \"scroll\", (e) => {\n                if (!scrollTicking) {\n                    scrollTicking = true;\n\n                    window.requestAnimationFrame(() => {\n                        this.handleScroll();\n                        scrollTicking = false;\n                    });\n                }\n            });\n        });\n\n        if (this._jQuery && (this._jQuery.fn as any).mousewheel && (this.hasFrozenColumns() || this.hasFrozenRows())) {\n            this._jQuery(viewports).on(\"mousewheel\", this.handleMouseWheel.bind(this));\n        }\n\n        this._layout.getHeaderCols().forEach(hs => {\n            disableSelection(hs);\n            onEvent(hs, \"contextmenu\", this.handleHeaderContextMenu.bind(this));\n            onEvent(hs, \"click\", this.handleHeaderClick.bind(this));\n            if (this._jQuery) {\n                this._jQuery(hs)\n                    .on('mouseenter', '.slick-header-column', this.handleHeaderMouseEnter.bind(this))\n                    .on('mouseleave', '.slick-header-column', this.handleHeaderMouseLeave.bind(this));\n            }\n            else {\n                // need to reimplement this similar to jquery events\n                hs.addEventListener(\"mouseenter\", e => (e.target as HTMLElement).closest(\".slick-header-column\") &&\n                    this.handleHeaderMouseEnter(e));\n                hs.addEventListener(\"mouseleave\", e => (e.target as HTMLElement).closest(\".slick-header-column\") &&\n                    this.handleHeaderMouseLeave(e));\n            }\n        });\n\n        this._layout.getHeaderRowCols().forEach(el => {\n            onEvent(el.parentElement, 'scroll', this.handleHeaderRowScroll);\n        });\n\n        this._layout.getFooterRowCols().forEach(el => {\n            onEvent(el.parentElement, 'scroll', this.handleFooterRowScroll);\n        });\n\n        [this._focusSink1, this._focusSink2].forEach(fs => onEvent(fs, \"keydown\", this.handleKeyDown.bind(this)));\n\n        var canvases = Array.from<HTMLElement>(this.getCanvases());\n        canvases.forEach(canvas => {\n            onEvent(canvas, \"keydown\", this.handleKeyDown.bind(this))\n            onEvent(canvas, \"click\", this.handleClick.bind(this))\n            onEvent(canvas, \"dblclick\", this.handleDblClick.bind(this))\n            onEvent(canvas, \"contextmenu\", this.handleContextMenu.bind(this));\n        });\n\n        if (this._jQuery && (this._jQuery.fn as any).drag) {\n            this._jQuery(canvases)\n                .on(\"draginit\", this.handleDragInit.bind(this))\n                .on(\"dragstart\", { distance: 3 }, this.handleDragStart.bind(this))\n                .on(\"drag\", this.handleDrag.bind(this))\n                .on(\"dragend\", this.handleDragEnd.bind(this))\n        }\n        else {\n            this._draggableInstance = Draggable({\n                containerElement: this._container,\n                //allowDragFrom: 'div.slick-cell',\n                // the slick cell parent must always contain `.dnd` and/or `.cell-reorder` class to be identified as draggable\n                //allowDragFromClosest: 'div.slick-cell.dnd, div.slick-cell.cell-reorder',\n                preventDragFromKeys: ['ctrlKey', 'metaKey'],\n                onDragInit: this.handleDragInit.bind(this),\n                onDragStart: this.handleDragStart.bind(this),\n                onDrag: this.handleDrag.bind(this),\n                onDragEnd: this.handleDragEnd.bind(this)\n            });\n        }\n\n        canvases.forEach(canvas => {\n            if (this._jQuery) {\n                this._jQuery(canvas)\n                    .on('mouseenter', '.slick-cell', this.handleMouseEnter.bind(this))\n                    .on('mouseleave', '.slick-cell', this.handleMouseLeave.bind(this));\n            }\n            else {\n                // need to reimplement this similar to jquery events\n                (canvas as HTMLElement).addEventListener(\"mouseenter\", e => (e.target as HTMLElement).closest(\".slick-cell\") &&\n                    this.handleMouseEnter(e));\n                (canvas as HTMLElement).addEventListener(\"mouseleave\", e => (e.target as HTMLElement).closest(\".slick-cell\") &&\n                    this.handleMouseLeave(e));\n            }\n        });\n\n        // Work around http://crbug.com/312427.\n        if (navigator.userAgent.toLowerCase().match(/webkit/) &&\n            navigator.userAgent.toLowerCase().match(/macintosh/) &&\n            this._jQuery) {\n            this._jQuery(canvases).on(\"mousewheel\", this.handleMouseWheel.bind(this));\n        }\n    }\n\n    private hasFrozenColumns(): boolean {\n        return this._layout.getFrozenCols() > 0;\n    }\n\n    private hasFrozenRows(): boolean {\n        return this._layout.getFrozenRows() > 0;\n    }\n\n    registerPlugin(plugin: IPlugin): void {\n        this._plugins.unshift(plugin);\n        plugin.init(this);\n    }\n\n    unregisterPlugin(plugin: IPlugin): void {\n        for (var i = this._plugins.length; i >= 0; i--) {\n            if (this._plugins[i] === plugin) {\n                if (this._plugins[i].destroy) {\n                    this._plugins[i].destroy();\n                }\n                this._plugins.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    getPluginByName(name: string): IPlugin {\n        for (var i = this._plugins.length - 1; i >= 0; i--) {\n            if (this._plugins[i].pluginName === name)\n                return this._plugins[i];\n        }\n    }\n\n    setSelectionModel(model: SelectionModel): void {\n        this.unregisterSelectionModel();\n\n        this._selectionModel = model;\n        if (this._selectionModel) {\n            this._selectionModel.init(this);\n            this._selectionModel.onSelectedRangesChanged.subscribe(this.handleSelectedRangesChanged);\n        }\n    }\n\n    private unregisterSelectionModel(): void {\n        if (!this._selectionModel)\n            return;\n\n        this._selectionModel.onSelectedRangesChanged.unsubscribe(this.handleSelectedRangesChanged);\n        this._selectionModel.destroy?.();\n    }\n\n    getScrollBarDimensions(): { width: number; height: number; } {\n        return this._scrollDims;\n    }\n\n    getDisplayedScrollbarDimensions(): { width: number; height: number; } {\n        return {\n            width: this._viewportInfo.hasVScroll ? this._scrollDims.width : 0,\n            height: this._viewportInfo.hasHScroll ? this._scrollDims.height : 0\n        };\n    }\n\n    getAbsoluteColumnMinWidth() {\n        return this._absoluteColMinWidth;\n    }\n\n    getSelectionModel(): SelectionModel {\n        return this._selectionModel;\n    }\n\n    private colIdOrIdxToCell(columnIdOrIdx: string | number): number {\n        if (columnIdOrIdx == null)\n            return null;\n\n        if (typeof columnIdOrIdx !== \"number\")\n            return this.getColumnIndex(columnIdOrIdx);\n\n        return columnIdOrIdx;\n    }\n\n    getCanvasNode(columnIdOrIdx?: string | number, row?: number): HTMLElement {\n        return this._layout.getCanvasNodeFor(this.colIdOrIdxToCell(columnIdOrIdx || 0), row || 0);\n    }\n\n    getCanvases(): any | HTMLElement[] {\n        var canvases = this._layout.getCanvasNodes();\n        return this._jQuery ? this._jQuery(canvases) : canvases;\n    }\n\n    getActiveCanvasNode(e?: IEventData): HTMLElement {\n        if (e) { // compatibility with celldecorator plugin\n            this._activeCanvasNode = (e.target as HTMLElement).closest('.grid-canvas');\n        }\n        return this._activeCanvasNode;\n    }\n\n    getViewportNode(columnIdOrIdx?: string | number, row?: number): HTMLElement {\n        return this._layout.getViewportNodeFor(this.colIdOrIdxToCell(columnIdOrIdx || 0), row || 0);\n    }\n\n    private getViewports(): HTMLElement[] {\n        return this._layout.getViewportNodes();\n    }\n\n    getActiveViewportNode(e?: IEventData): HTMLElement {\n        if (e) { // compatibility with celldecorator plugin\n            this._activeViewportNode = (e.target as HTMLElement).closest('.slick-viewport');\n        }\n\n        return this._activeViewportNode;\n    }\n\n    private getAvailableWidth() {\n        return this._viewportInfo.hasVScroll ? this._viewportInfo.width - this._scrollDims.width : this._viewportInfo.width;\n    }\n\n    private updateCanvasWidth(forceColumnWidthsUpdate?: boolean): void {\n        const widthChanged = this._layout.updateCanvasWidth();\n\n        if (widthChanged || forceColumnWidthsUpdate) {\n            this._layout.applyColumnWidths();\n        }\n    }\n\n    private unbindAncestorScrollEvents(): void {\n        if (this._boundAncestorScroll) {\n            for (var x of this._boundAncestorScroll)\n                x.removeEventListener('scroll', this.handleActiveCellPositionChange);\n        }\n        this._boundAncestorScroll = [];\n    }\n\n    updateColumnHeader(columnId: string, title?: string, toolTip?: string): void {\n        if (!this._initialized) {\n            return;\n        }\n\n        var idx = this.getColumnIndex(columnId);\n        if (idx == null) {\n            return;\n        }\n\n        var columnDef = this._cols[idx];\n        var header = this._layout.getHeaderColumn(idx);\n        if (!header)\n            return;\n\n        if (title !== undefined) {\n            columnDef.name = title;\n        }\n        if (toolTip !== undefined) {\n            columnDef.toolTip = toolTip;\n        }\n\n        this.trigger(this.onBeforeHeaderCellDestroy, {\n            node: header,\n            column: columnDef\n        });\n\n        if (toolTip !== undefined)\n            header.title = toolTip || \"\";\n\n        if (title !== undefined) {\n            var child = header.firstElementChild;\n            if (columnDef.nameIsHtml)\n                child && (child.innerHTML = title ?? '');\n            else\n                child && (child.textContent = title ?? '')\n        }\n\n        this.trigger(this.onHeaderCellRendered, {\n            node: header,\n            column: columnDef\n        });\n    }\n\n    getHeader(): HTMLElement {\n        return this._layout.getHeaderCols()[0];\n    }\n\n    getHeaderColumn(columnIdOrIdx: string | number): HTMLElement {\n        var cell = this.colIdOrIdxToCell(columnIdOrIdx);\n        if (cell == null)\n            return null;\n\n        return this._layout.getHeaderColumn(cell);\n    }\n\n    getGroupingPanel(): HTMLElement {\n        return this._groupingPanel;\n    }\n\n    getPreHeaderPanel(): HTMLElement {\n        return this._groupingPanel?.querySelector('.slick-preheader-panel');\n    }\n\n    getHeaderRow(): HTMLElement {\n        return this._layout.getHeaderRowCols()[0];\n    }\n\n    getHeaderRowColumn(columnIdOrIdx: string | number): HTMLElement {\n        var cell = this.colIdOrIdxToCell(columnIdOrIdx);\n        if (cell == null)\n            return;\n\n        return this._layout.getHeaderRowColumn(cell);\n    }\n\n    getFooterRow(): HTMLElement {\n        return this._layout.getFooterRowCols()[0];\n    }\n\n    getFooterRowColumn(columnIdOrIdx: string | number): HTMLElement {\n        var cell = this.colIdOrIdxToCell(columnIdOrIdx);\n        if (cell == null)\n            return null;\n\n        return this._layout.getFooterRowColumn(cell);\n    }\n\n    private createColumnFooters(): void {\n        var footerRowCols = this._layout.getFooterRowCols();\n        footerRowCols.forEach(frc => {\n            frc.querySelectorAll(\".slick-footerrow-column\")\n                .forEach((el) => {\n                    var columnDef = this.getColumnFromNode(el);\n                    if (columnDef) {\n                        this.trigger(this.onBeforeFooterRowCellDestroy, {\n                            node: el as HTMLElement,\n                            column: columnDef\n                        });\n                    }\n                })\n\n            if (this._jQuery) {\n                this._jQuery(frc).empty();\n            }\n            else\n                frc.innerHTML = '';\n        });\n\n        var cols = this._cols;\n        for (var i = 0; i < cols.length; i++) {\n            var m = cols[i];\n\n            var footerRowCell = H(\"div\", { class: \"slick-footerrow-column l\" + i + \" r\" + i + (this._options.useLegacyUI ? ' ui-state-default' : '') });\n            footerRowCell.dataset.c = i.toString();\n            this._jQuery && this._jQuery(footerRowCell).data(\"column\", m);\n\n            if (m.footerCssClass)\n                addClass(footerRowCell, m.footerCssClass);\n            else if (m.cssClass)\n                addClass(footerRowCell, m.cssClass);\n\n            this._layout.getFooterRowColsFor(i).appendChild(footerRowCell);\n\n            this.trigger(this.onFooterRowCellRendered, {\n                node: footerRowCell,\n                column: m\n            });\n        }\n    }\n\n    private createColumnHeaders(): void {\n        const headerCols = this._layout.getHeaderCols();\n        headerCols.forEach(hc => {\n            hc.querySelectorAll(\".slick-header-column\")\n                .forEach((el) => {\n                    var columnDef = this.getColumnFromNode(el);\n                    if (columnDef) {\n                        this.trigger(this.onBeforeHeaderCellDestroy, {\n                            node: el as HTMLElement,\n                            column: columnDef\n                        });\n                    }\n                });\n\n            this._emptyNode(hc);\n        });\n\n        this._layout.updateHeadersWidth();\n\n        const headerRowCols = this._layout.getHeaderRowCols();\n        headerRowCols.forEach(hrc => {\n            hrc.querySelectorAll(\".slick-headerrow-column\")\n                .forEach((el) => {\n                    var columnDef = this.getColumnFromNode(el);\n                    if (columnDef) {\n                        this.trigger(this.onBeforeHeaderRowCellDestroy, {\n                            node: el as HTMLElement,\n                            column: columnDef,\n                            grid: this\n                        });\n                    }\n                });\n            if (this._jQuery) {\n                this._jQuery(hrc).empty();\n            } else {\n                hrc.innerHTML = \"\";\n            }\n        });\n\n        var cols = this._cols, frozenCols = this._layout.getFrozenCols();\n        for (var i = 0; i < cols.length; i++) {\n            var m = cols[i];\n\n            var headerTarget = this._layout.getHeaderColsFor(i);\n\n            var name = document.createElement(\"span\");\n            name.className = \"slick-column-name\";\n            if (m.nameIsHtml)\n                name.innerHTML = m.name ?? '';\n            else\n                name.textContent = (m.name ?? '');\n\n            var header = H(\"div\", {\n                class: \"slick-header-column\" + (this._options.useLegacyUI ? \" ui-state-default \" : \"\"),\n                [\"data-id\"]: m.id,\n                id: \"\" + this._uid + m.id,\n                title: m.toolTip || \"\",\n                style: \"width: \" + (m.width - this._headerColumnWidthDiff) + \"px\"\n            }, name);\n\n            header.dataset.c = i.toString();\n            this._jQuery && this._jQuery(header).data(\"column\", m);\n\n            m.headerCssClass && addClass(header, m.headerCssClass);\n\n            (i < frozenCols) && header.classList.add(\"frozen\");\n\n            headerTarget.appendChild(header);\n\n            if ((this._options.enableColumnReorder || m.sortable) && this._options.useLegacyUI) {\n                if (this._jQuery) {\n                    this._jQuery(header).on(\"mouseenter\", addUiStateHover);\n                    this._jQuery(header).on(\"mouseleave\", removeUiStateHover);\n                }\n                else {\n                    header.addEventListener('mouseenter', addUiStateHover);\n                    header.addEventListener('mouseleave', removeUiStateHover);\n                }\n            }\n\n            if (m.sortable) {\n                header.classList.add(\"slick-header-sortable\");\n                header.appendChild(H(\"span\", { class: \"slick-sort-indicator\" }));\n            }\n\n            this.trigger(this.onHeaderCellRendered, {\n                node: header,\n                column: m\n            });\n\n            if (this._options.showHeaderRow) {\n                var headerRowTarget = this._layout.getHeaderRowColsFor(i);\n\n                var headerRowCell = H(\"div\", { class: \"slick-headerrow-column l\" + i + \" r\" + i + (this._options.useLegacyUI ? \" ui-state-default\" : \"\") });\n                headerRowCell.dataset.c = i.toString();\n                this._jQuery && this._jQuery(headerRowCell).data(\"column\", m);\n                headerRowTarget.appendChild(headerRowCell);\n\n                this.trigger(this.onHeaderRowCellRendered, {\n                    node: headerRowCell,\n                    column: m\n                });\n            }\n        }\n\n        this.setSortColumns(this._sortColumns);\n        this.setupColumnResize();\n        if (this._options.enableColumnReorder) {\n            this.setupColumnReorder();\n            // sortable js removes draggable attribute after disposing / recreating\n            this._layout.getHeaderCols().forEach(el => el.querySelectorAll<HTMLDivElement>(\".slick-resizable-handle\").forEach(x => x.draggable = true));\n        }\n    }\n\n    private setupColumnSort(): void {\n        const handler = (e: MouseEvent) => {\n            var tgt = e.target as Element;\n            if (tgt.classList.contains(\"slick-resizable-handle\")) {\n                return;\n            }\n\n            var colNode = tgt.closest(\".slick-header-column\");\n            if (!colNode) {\n                return;\n            }\n\n            var column = this.getColumnFromNode(colNode);\n            if (column.sortable) {\n                if (!this.getEditorLock().commitCurrentEdit()) {\n                    return;\n                }\n\n                var sortOpts = null;\n                var i = 0;\n                for (; i < this._sortColumns.length; i++) {\n                    if (this._sortColumns[i].columnId == column.id) {\n                        sortOpts = this._sortColumns[i];\n                        sortOpts.sortAsc = !sortOpts.sortAsc;\n                        break;\n                    }\n                }\n\n                if (e.metaKey && this._options.multiColumnSort) {\n                    if (sortOpts) {\n                        this._sortColumns.splice(i, 1);\n                    }\n                }\n                else {\n                    if ((!e.shiftKey && !e.metaKey) || !this._options.multiColumnSort) {\n                        this._sortColumns = [];\n                    }\n\n                    if (!sortOpts) {\n                        sortOpts = { columnId: column.id, sortAsc: column.defaultSortAsc };\n                        this._sortColumns.push(sortOpts);\n                    } else if (this._sortColumns.length == 0) {\n                        this._sortColumns.push(sortOpts);\n                    }\n                }\n\n                this.setSortColumns(this._sortColumns);\n\n                if (!this._options.multiColumnSort) {\n                    this.trigger(this.onSort, {\n                        multiColumnSort: false,\n                        sortCol: column,\n                        sortAsc: sortOpts.sortAsc\n                    }, e);\n                } else {\n                    var cols = this._initCols;\n                    this.trigger(this.onSort, {\n                        multiColumnSort: true,\n                        sortCols: this._sortColumns.map(col => ({ sortCol: cols[this.getInitialColumnIndex(col.columnId)], sortAsc: col.sortAsc }))\n                    }, e);\n                }\n            }\n        };\n\n        this._layout.getHeaderCols().forEach(el => {\n            if (this._jQuery)\n                this._jQuery(el).on('click', handler as any);\n            else\n                el.addEventListener(\"click\", handler);\n        });\n    }\n\n    private static offset(el: HTMLElement | null) {\n        if (!el || !el.getBoundingClientRect)\n            return;\n        const box = el.getBoundingClientRect();\n        const docElem = document.documentElement;\n        return {\n            top: box.top + window.scrollY - docElem.clientTop,\n            left: box.left + window.scrollX - docElem.clientLeft\n        };\n    }\n\n    declare private sortableColInstances: any[];\n\n    private setupColumnReorder(): void {\n\n        // @ts-ignore\n        if (typeof Sortable === \"undefined\")\n            return;\n\n        this.sortableColInstances?.forEach(x => x.destroy());\n        let columnScrollTimer: number = null;\n\n        const scrollColumnsLeft = () => this._layout.getScrollContainerX().scrollLeft = this._layout.getScrollContainerX().scrollLeft + 10;\n        const scrollColumnsRight = () => this._layout.getScrollContainerX().scrollLeft = this._layout.getScrollContainerX().scrollLeft - 10;\n\n        let canDragScroll;\n        const sortableOptions: any = {\n            animation: 50,\n            direction: 'horizontal',\n            chosenClass: 'slick-header-column-active',\n            ghostClass: 'slick-sortable-placeholder',\n            draggable: '.slick-header-column',\n            filter: \".slick-resizable-handle\",\n            preventOnFilter: false,\n            dragoverBubble: false,\n            revertClone: true,\n            scroll: !this.hasFrozenColumns(), // enable auto-scroll\n            onStart: (e: { item: any; originalEvent: MouseEvent; }) => {\n                canDragScroll = !this.hasFrozenColumns() ||\n                    Grid.offset(e.item)!.left > Grid.offset(this._layout.getScrollContainerX())!.left;\n\n                if (canDragScroll && e.originalEvent && e.originalEvent.pageX > this._container.clientWidth) {\n                    if (!(columnScrollTimer)) {\n                        columnScrollTimer = setInterval(scrollColumnsRight, 100);\n                    }\n                } else if (canDragScroll && e.originalEvent && e.originalEvent.pageX < Grid.offset(this._layout.getScrollContainerX())!.left) {\n                    if (!(columnScrollTimer)) {\n                        columnScrollTimer = setInterval(scrollColumnsLeft, 100);\n                    }\n                } else {\n                    clearInterval(columnScrollTimer);\n                    columnScrollTimer = null;\n                }\n            },\n            onEnd: (e: MouseEvent & { item: any; originalEvent: MouseEvent; }) => {\n                const cancel = false;\n                clearInterval(columnScrollTimer);\n                columnScrollTimer = null;\n                if (cancel || !this.getEditorLock()?.commitCurrentEdit()) {\n                    return;\n                }\n\n                var reorderedCols;\n                this._layout.getHeaderCols().forEach((el, i) => reorderedCols = sortToDesiredOrderAndKeepRest(\n                    this._initCols,\n                    (this.sortableColInstances[i]?.toArray?.() ?? [])\n                ));\n\n                this.setColumns(reorderedCols);\n                this.trigger(this.onColumnsReordered, {});\n                e.stopPropagation();\n                this.setupColumnResize();\n                if (this._activeCellNode) {\n                    this.setFocus(); // refocus on active cell\n                }\n            }\n        }\n\n        // @ts-ignore\n        this.sortableColInstances = this._layout.getHeaderCols().map(x => Sortable.create(x, sortableOptions));\n    }\n\n    private setupColumnResize(): void {\n\n        var minPageX: number, pageX: number, maxPageX: number, cols = this._cols;\n        var columnElements: Element[] = [];\n        this._layout.getHeaderCols().forEach(el => {\n            columnElements = columnElements.concat(Array.from(el.children));\n        });\n\n        var j: number, c: Column<TItem>, pageX: number, minPageX: number, maxPageX: number, firstResizable: number, lastResizable: number, cols = this._cols;\n        var firstResizable: number, lastResizable: number;\n        columnElements.forEach((el, i) => {\n            var handle = el.querySelector(\".slick-resizable-handle\");\n            handle && this._removeNode(handle);\n            if (cols[i].resizable) {\n                if (firstResizable === undefined) {\n                    firstResizable = i;\n                }\n                lastResizable = i;\n            }\n        });\n\n        if (firstResizable === undefined) {\n            return;\n        }\n\n        const noJQueryDrag = !this._jQuery || !this._jQuery.fn || !(this._jQuery.fn as any).drag;\n        columnElements.forEach((el, colIdx) => {\n\n            if (colIdx < firstResizable || (this._options.forceFitColumns && colIdx >= lastResizable)) {\n                return;\n            }\n\n            const handle = el.appendChild(document.createElement('div'));\n            handle.classList.add('slick-resizable-handle');\n            handle.draggable = true;\n\n            var docDragOver: any = null;\n            var lastDragOverPos: any = null;\n\n            const dragStart = (e: DragEvent) => {\n                if (!this.getEditorLock().commitCurrentEdit()) {\n                    !noJQueryDrag && e.preventDefault();\n                    return;\n                }\n\n                if (noJQueryDrag) {\n                    docDragOver = (z: DragEvent) => {\n                        lastDragOverPos = { pageX: z.pageX, pageY: z.pageY };\n                        z.preventDefault();\n                    }\n                    document.addEventListener('dragover', docDragOver);\n                }\n\n                pageX = e.pageX;\n                (e.target as HTMLElement).parentElement?.classList.add(\"slick-header-column-active\");\n\n                // lock each column's width option to current width\n                columnElements.forEach((e, z) => {\n                    cols[z].previousWidth = (e as HTMLElement).offsetWidth;\n                });\n\n                const minMax = calcMinMaxPageXOnDragStart(cols, colIdx, pageX, this._options.forceFitColumns, this._absoluteColMinWidth);\n                maxPageX = minMax.maxPageX;\n                minPageX = minMax.minPageX;\n\n                noJQueryDrag && (e.dataTransfer.effectAllowed = 'move');\n            };\n\n            const drag = (e: DragEvent) => {\n                var dist;\n                if (noJQueryDrag) {\n                    var thisPageX = (!e.pageX && !e.pageY) ? lastDragOverPos?.pageX : e.pageX;\n                    var thisPageY = (!e.pageX && !e.pageY) ? lastDragOverPos?.pageY : e.pageY;\n                    if (!thisPageX && !e.clientX && !thisPageY && !e.clientY)\n                        return;\n                    dist = Math.min(maxPageX, Math.max(minPageX, thisPageX)) - pageX;\n                    e.dataTransfer.effectAllowed = 'none';\n                    e.preventDefault();\n                }\n                else {\n                    dist = Math.min(maxPageX, Math.max(minPageX, e.pageX)) - pageX;\n                }\n                if (isNaN(dist)) {\n                    return;\n                }\n                shrinkOrStretchColumn(cols, colIdx, dist, this._options.forceFitColumns, this._absoluteColMinWidth);\n\n                this._layout.afterHeaderColumnDrag();\n\n                this.applyColumnHeaderWidths();\n                if (this._options.syncColumnCellResize) {\n                    this._layout.applyColumnWidths();\n                }\n            }\n\n            const dragEnd = (e: any) => {\n                if (docDragOver) {\n                    document.removeEventListener('dragover', docDragOver);\n                    docDragOver = null;\n                }\n                (e.target.parentElement as HTMLElement)?.classList.remove(\"slick-header-column-active\");\n                for (j = 0; j < columnElements.length; j++) {\n                    c = cols[j];\n                    var newWidth = (columnElements[j] as HTMLElement).offsetWidth;\n\n                    if (c.previousWidth !== newWidth && c.rerenderOnResize) {\n                        this.invalidateAllRows();\n                    }\n                }\n                this.columnsResized(false);\n            }\n\n            if (noJQueryDrag) {\n                handle.addEventListener(\"dragstart\", dragStart);\n                handle.addEventListener(\"drag\", drag);\n                handle.addEventListener(\"dragend\", dragEnd);\n                handle.addEventListener(\"dragover\", (e: any) => { e.preventDefault(); e.dataTransfer.effectAllowed = \"move\"; });\n            }\n            else {\n                (this._jQuery(handle) as any)\n                    .on(\"dragstart\", dragStart)\n                    .on(\"drag\", drag)\n                    .on(\"dragend\", dragEnd);\n            }\n        });\n    }\n\n    public columnsResized(invalidate = true) {\n        this.applyColumnHeaderWidths();\n        this._layout.applyColumnWidths();\n        invalidate && this.invalidateAllRows();\n        this.updateCanvasWidth(true);\n        this.render();\n        this.trigger(this.onColumnsResized);\n    }\n\n    private setOverflow(): void {\n        this._layout.setOverflow();\n        if (this._options.viewportClass)\n            this.getViewports().forEach(vp => addClass(vp, this._options.viewportClass));\n    }\n\n    private measureCellPaddingAndBorder(): void {\n        const h = [\"border-left-width\", \"border-right-width\", \"padding-left\", \"padding-right\"];\n        const v = [\"border-top-width\", \"border-bottom-width\", \"padding-top\", \"padding-bottom\"];\n\n        var el = this._layout.getHeaderColsFor(0).appendChild(H(\"div\", { class: \"slick-header-column\" + (this._options.useLegacyUI ? \" ui-state-default\" : \"\"), style: \"visibility:hidden\" }));\n        this._headerColumnWidthDiff = 0;\n        var cs = getComputedStyle(el);\n        if (cs.boxSizing != \"border-box\")\n            h.forEach(val => this._headerColumnWidthDiff += parsePx(cs.getPropertyValue(val)) || 0);\n        el.remove();\n\n        var r = this._layout.getCanvasNodeFor(0, 0).appendChild(H(\"div\", { class: \"slick-row\" },\n            el = H(\"div\", { class: \"slick-cell\", id: \"\", style: \"visibility: hidden\" })));\n        el.innerHTML = \"-\";\n        this._cellWidthDiff = this._cellHeightDiff = 0;\n        cs = getComputedStyle(el);\n        if (cs.boxSizing != \"border-box\") {\n            h.forEach(val => this._cellWidthDiff += parsePx(cs.getPropertyValue(val)) || 0);\n            v.forEach(val => this._cellHeightDiff += parsePx(cs.getPropertyValue(val)) || 0);\n        }\n        r.remove();\n\n        this._absoluteColMinWidth = Math.max(this._headerColumnWidthDiff, this._cellWidthDiff);\n    }\n\n    private createCssRules() {\n        var cellHeight = (this._options.rowHeight - this._cellHeightDiff);\n\n        if (this._options.useCssVars && this.getColumns().length > 50)\n            this._options.useCssVars = false;\n\n        this._container.classList.toggle('sleek-vars', !!this._options.useCssVars);\n\n        if (this._options.useCssVars) {\n            var style = this._container.style;\n            style.setProperty(\"--sleek-row-height\", this._options.rowHeight + \"px\");\n            style.setProperty(\"--sleek-cell-height\", cellHeight + \"px\");\n            style.setProperty(\"--sleek-top-panel-height\", this._options.topPanelHeight + \"px\");\n            style.setProperty(\"--sleek-grouping-panel-height\", this._options.groupingPanelHeight + \"px\");\n            style.setProperty(\"--sleek-headerrow-height\", this._options.headerRowHeight + \"px\");\n            style.setProperty(\"--sleek-footerrow-height\", this._options.footerRowHeight + \"px\");\n            return;\n        }\n\n        var el = this._styleNode = document.createElement('style');\n        el.dataset.uid = this._uid;\n        var rules = [\n            \".\" + this._uid + \" { --slick-cell-height: \" + this._options.rowHeight + \"px; }\",\n            \".\" + this._uid + \" .slick-group-header-column { \" + (this._options.rtl ? 'right' : 'left') + \": 1000px; }\",\n            \".\" + this._uid + \" .slick-header-column { \" + (this._options.rtl ? 'right' : 'left') + \": 1000px; }\",\n            \".\" + this._uid + \" .slick-top-panel { height:\" + this._options.topPanelHeight + \"px; }\",\n            \".\" + this._uid + \" .slick-grouping-panel { height:\" + this._options.groupingPanelHeight + \"px; }\",\n            \".\" + this._uid + \" .slick-headerrow-columns { height:\" + this._options.headerRowHeight + \"px; }\",\n            \".\" + this._uid + \" .slick-cell { height:\" + cellHeight + \"px; }\",\n            \".\" + this._uid + \" .slick-row { height:\" + this._options.rowHeight + \"px; }\",\n            \".\" + this._uid + \" .slick-footerrow-columns { height:\" + this._options.footerRowHeight + \"px; }\",\n        ];\n\n        var cols = this._cols;\n        for (var i = 0; i < cols.length; i++) {\n            rules.push(\".\" + this._uid + \" .l\" + i + \" { }\");\n            rules.push(\".\" + this._uid + \" .r\" + i + \" { }\");\n        }\n\n        el.appendChild(document.createTextNode(rules.join(\" \")));\n        document.head.appendChild(el);\n    }\n\n    private getColumnCssRules(idx: number): { right: any; left: any; } {\n        if (this._options.useCssVars)\n            return null;\n\n        if (!this._stylesheet) {\n            var stylesheetFromUid = document.querySelector(\"style[data-uid='\" + this._uid + \"']\") as any\n            if (stylesheetFromUid && stylesheetFromUid.sheet) {\n                this._stylesheet = stylesheetFromUid.sheet;\n            } else {\n                var sheets = document.styleSheets;\n                for (var i = 0; i < sheets.length; i++) {\n                    if ((sheets[i].ownerNode || (sheets[i] as any).owningElement) == this._styleNode) {\n                        this._stylesheet = sheets[i];\n                        break;\n                    }\n                }\n            }\n\n            if (!this._stylesheet) {\n                throw new Error(\"Cannot find stylesheet.\");\n            }\n\n            // find and cache column CSS rules\n            this._columnCssRulesL = [];\n            this._columnCssRulesR = [];\n            var cssRules = (this._stylesheet.cssRules || this._stylesheet.rules);\n            var matches, columnIdx;\n            for (var i = 0; i < cssRules.length; i++) {\n                var selector = cssRules[i].selectorText;\n                if (matches = /\\.l\\d+/.exec(selector)) {\n                    columnIdx = parseInt(matches[0].substring(2, matches[0].length), 10);\n                    this._columnCssRulesL[columnIdx] = cssRules[i];\n                } else if (matches = /\\.r\\d+/.exec(selector)) {\n                    columnIdx = parseInt(matches[0].substring(2, matches[0].length), 10);\n                    this._columnCssRulesR[columnIdx] = cssRules[i];\n                }\n            }\n        }\n\n        return this._options.rtl ? {\n            \"right\": this._columnCssRulesL[idx],\n            \"left\": this._columnCssRulesR[idx]\n        } : {\n            \"left\": this._columnCssRulesL[idx],\n            \"right\": this._columnCssRulesR[idx]\n        }\n    }\n\n    private removeCssRules() {\n        this._styleNode?.remove();\n        this._styleNode = null;\n        this._stylesheet = null;\n    }\n\n    destroy() {\n        this.getEditorLock().cancelCurrentEdit();\n\n        this.trigger(this.onBeforeDestroy);\n\n        var i = this._plugins.length;\n        while (i--) {\n            this.unregisterPlugin(this._plugins[i]);\n        }\n\n        if (this._draggableInstance) {\n            this._draggableInstance.destroy();\n            this._draggableInstance = null;\n        }\n\n        if (this._options.enableColumnReorder && this._jQuery && (this._jQuery.fn as any).sortable) {\n            (this._jQuery(this._layout.getHeaderCols()).filter(\":ui-sortable\") as any).sortable(\"destroy\");\n        }\n\n        this.unbindAncestorScrollEvents();\n        this.unbindFromData();\n        this.unregisterSelectionModel();\n        this._jQuery?.(this._container).off(\".slickgrid\");\n        this.removeCssRules();\n\n        var canvasNodes = this._layout.getCanvasNodes();\n        if (this._jQuery)\n            this._jQuery(canvasNodes).off(\"draginit dragstart dragend drag\");\n        else\n            canvasNodes.forEach(el => this._removeNode(el));\n\n        for (var k in this) {\n            if (!Object.prototype.hasOwnProperty.call(this, k))\n                continue;\n            if (k.startsWith('on')) {\n                var ev: any = this[k];\n                if ((ev as EventEmitter)?.clear && (ev as EventEmitter)?.subscribe)\n                    (ev as EventEmitter)?.clear();\n            }\n            delete this[k];\n        }\n    }\n\n\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    // General\n\n    private trigger<TArgs extends ArgsGrid, TEventData extends IEventData = IEventData>(\n        evt: EventEmitter<TArgs, TEventData>, args?: TArgs, e?: TEventData) {\n        e = e || new EventData() as any;\n        args = args || {} as any;\n        args.grid = this;\n        return evt.notify(args, e, this);\n    }\n\n    getEditorLock(): EditorLock {\n        return this._options.editorLock;\n    }\n\n    getEditController(): EditController {\n        return this._editController;\n    }\n\n    /** Gets a column by its ID. May also return non visible columns */\n    getColumnById(id: string): Column<TItem> {\n        return id ? this._cols[this._colById[id]] : null;\n    }\n\n    /** Returns a column's index in the visible columns list by its column ID */\n    getColumnIndex(id: string): number {\n        return id ? this._colById[id] : null;\n    }\n\n    /** Gets index of a column in the initial column list passed to the grid, or setColumns method. May include invisible cols and index does not have to match visible column order. */\n    getInitialColumnIndex(id: string): number {\n        return id ? this._initColById[id] : null;\n    }\n\n    /** Gets a view (e.g. visible) column by its column ID */\n    getVisibleColumnById(id: string): Column<TItem> {\n        return id ? this._cols[this._colById[id]] : null;\n    }\n\n    autosizeColumns(): void {\n        var vpi = this._viewportInfo,\n            availWidth = vpi.hasVScroll ? vpi.width - this._scrollDims.width : vpi.width;\n\n        var reRender = autosizeColumns(this._cols, availWidth, this._absoluteColMinWidth);\n\n        this.applyColumnHeaderWidths();\n        this.updateCanvasWidth(true);\n        if (reRender) {\n            this.invalidateAllRows();\n            this.render();\n        }\n    }\n\n    private applyColumnHeaderWidths(): void {\n        if (!this._initialized) { return; }\n\n        var h: HTMLElement;\n        for (var i = 0, cols = this._cols, colCount = cols.length, diff = this._headerColumnWidthDiff; i < colCount; i++) {\n            h = this._layout.getHeaderColumn(i);\n            if (h) {\n                var target = cols[i].width - diff;\n                if (h.offsetWidth !== target) {\n                    h.style.width = target + 'px'\n                }\n            }\n        }\n\n        this.updateViewColLeftRight();\n    }\n\n    setSortColumn(columnId: string, ascending: boolean) {\n        this.setSortColumns([{ columnId: columnId, sortAsc: ascending }]);\n    }\n\n    setSortColumns(cols: ColumnSort[]) {\n        this._sortColumns = cols || [];\n\n        var headerColumnEls: Element[] = [];\n        this._layout.getHeaderCols().forEach(el => headerColumnEls = headerColumnEls.concat(Array.from(el.children)));\n        headerColumnEls.forEach(hel => {\n            hel.classList.remove(\"slick-header-column-sorted\");\n            var si = hel.querySelector(\".slick-sort-indicator\");\n            si && si.classList.remove(\"slick-sort-indicator-asc\", \"slick-sort-indicator-desc\");\n        });\n\n        this._sortColumns.forEach(col => {\n            if (col.sortAsc == null) {\n                col.sortAsc = true;\n            }\n            var columnIndex = this.getColumnIndex(col.columnId);\n            if (columnIndex != null) {\n                var header = headerColumnEls[columnIndex];\n                if (header) {\n                    header.classList.add(\"slick-header-column-sorted\");\n                    var si = header.querySelector(\".slick-sort-indicator\");\n                    si && si.classList.add(col.sortAsc ? \"slick-sort-indicator-asc\" : \"slick-sort-indicator-desc\");\n                }\n            }\n        });\n    }\n\n    getSortColumns(): ColumnSort[] {\n        return this._sortColumns;\n    }\n\n    private handleSelectedRangesChanged = (e: IEventData, ranges: CellRange[]): void => {\n        var previousSelectedRows = this._selectedRows.slice(0); // shallow copy previously selected rows for later comparison\n        this._selectedRows = [];\n        var hash: any = {}, cols = this._cols;\n        for (var i = 0; i < ranges.length; i++) {\n            for (var j = ranges[i].fromRow; j <= ranges[i].toRow; j++) {\n                if (!hash[j]) {  // prevent duplicates\n                    this._selectedRows.push(j);\n                    hash[j] = {};\n                }\n                for (var k = ranges[i].fromCell; k <= ranges[i].toCell; k++) {\n                    if (this.canCellBeSelected(j, k)) {\n                        hash[j][cols[k].id] = this._options.selectedCellCssClass;\n                    }\n                }\n            }\n        }\n\n        this.setCellCssStyles(this._options.selectedCellCssClass, hash);\n\n        if (!simpleArrayEquals(previousSelectedRows, this._selectedRows)) {\n            var caller = e && (e as any).detail && (e as any).detail.caller || 'click';\n            var newSelectedAdditions = this._selectedRows.filter(i => previousSelectedRows.indexOf(i) < 0);\n            var newSelectedDeletions = previousSelectedRows.filter(i => this._selectedRows.indexOf(i) < 0);\n\n            this.trigger(this.onSelectedRowsChanged, {\n                rows: this.getSelectedRows(),\n                previousSelectedRows: previousSelectedRows,\n                caller: caller,\n                changedSelectedRows: newSelectedAdditions,\n                changedUnselectedRows: newSelectedDeletions\n            }, e);\n        }\n\n        this._selectedRows = [];\n        hash = {}, cols = this._cols;\n        for (var i = 0; i < ranges.length; i++) {\n            for (var j = ranges[i].fromRow; j <= ranges[i].toRow; j++) {\n                if (!hash[j]) {  // prevent duplicates\n                    this._selectedRows.push(j);\n                    hash[j] = {};\n                }\n                for (var k = ranges[i].fromCell; k <= ranges[i].toCell; k++) {\n                    if (this.canCellBeSelected(j, k)) {\n                        hash[j][cols[k].id] = this._options.selectedCellCssClass;\n                    }\n                }\n            }\n        }\n    }\n\n    /** Returns only the visible columns in order */\n    getColumns(): Column<TItem>[] {\n        return this._cols;\n    }\n\n    /** Returns list of columns passed to the grid constructor, or setColumns method. May include invisible columns and order does not match visible column order. */\n    getInitialColumns(): Column<TItem>[] {\n        return this._initCols;\n    }\n\n    private updateViewColLeftRight(): void {\n        this._colLeft = [];\n        this._colRight = [];\n        var x = 0, r: number, cols = this._cols, i: number, l: number = cols.length, frozenCols = this._layout.getFrozenCols();\n        for (var i = 0; i < l; i++) {\n            if (frozenCols === i)\n                x = 0;\n            r = x + cols[i].width;\n            this._colLeft[i] = x;\n            this._colRight[i] = r;\n            x = r;\n        }\n    }\n\n    private setInitialCols(initCols: Column[]) {\n\n        initializeColumns(initCols, this._colDefaults);\n\n        var initColById: any = {};\n        var viewCols: Column[] = [];\n        var viewColById: { [key: string]: number } = {};\n        var i: number, m: Column;\n        for (i = 0; i < initCols.length; i++) {\n            m = initCols[i];\n            initColById[m.id] = i;\n            if (m.visible !== false)\n                viewCols.push(m);\n        }\n\n        viewCols = this._layout.reorderViewColumns(viewCols, this._options);\n\n        this._postRenderActive = this._options.enableAsyncPostRender ?? false;\n        this._postCleanupActive = this._options.enableAsyncPostRenderCleanup ?? false;\n        for (i = 0; i < viewCols.length; i++) {\n            m = viewCols[i];\n            viewColById[m.id] = i;\n            if (m.asyncPostRenderCleanup != null)\n                this._postCleanupActive = true;\n            if (m.asyncPostRender != null)\n                this._postRenderActive = true;\n        }\n\n        this._initCols = initCols;\n        this._initColById = initColById;\n        this._cols = viewCols;\n        this._colById = viewColById;\n    }\n\n    setColumns(columns: Column<TItem>[]): void {\n\n        if (columns &&\n            this._initCols &&\n            this._cols &&\n            columns.length === this._cols.length &&\n            this._initCols.length > this._cols.length &&\n            !columns.some(x => this._cols.indexOf(x) < 0) &&\n            !this._cols.some(x => columns.indexOf(x) < 0)) {\n            // probably called with grid.setColumns(grid.getColumns()) potentially changing orders / widths etc\n            // try to preserve initial columns\n            sortToDesiredOrderAndKeepRest(\n                this._initCols,\n                columns.map(x => x.id));\n            columns = this._initCols;\n        }\n\n        this.setInitialCols(columns);\n        this.updateViewColLeftRight();\n\n        if (this._initialized) {\n            this._layout.setPaneVisibility();\n            this.setOverflow();\n\n            this.invalidateAllRows();\n            this.createColumnHeaders();\n            this.createColumnFooters();\n            this.updateGrandTotals();\n            this.removeCssRules();\n            this.createCssRules();\n            this.resizeCanvas();\n            this.updateCanvasWidth();\n            this._layout.applyColumnWidths();\n            this.handleScroll();\n            this.getSelectionModel()?.refreshSelections?.();\n        }\n    }\n\n    getOptions(): GridOptions<TItem> {\n        return this._options;\n    }\n\n    setOptions(args: GridOptions<TItem>, suppressRender?: boolean, suppressColumnSet?: boolean, suppressSetOverflow?: boolean): void {\n        if (!this.getEditorLock().commitCurrentEdit()) {\n            return;\n        }\n\n        this.makeActiveCellNormal();\n\n        if (args.groupingPanel && !this._options.groupingPanel)\n            this.createGroupingPanel();\n        else if (args.groupingPanel != void 0 && !args.groupingPanel && this._groupingPanel)\n            this._removeNode(this._groupingPanel);\n\n        if (args.showColumnHeader !== undefined) {\n            this.setColumnHeaderVisibility(args.showColumnHeader);\n        }\n\n        if (this._options.enableAddRow !== args.enableAddRow) {\n            this.invalidateRow(this.getDataLength());\n        }\n\n        this._options = Object.assign(this._options, args);\n        this.validateAndEnforceOptions();\n        this._layout.afterSetOptions(args);\n\n        if (args.columns && !suppressColumnSet) {\n            this.setColumns(args.columns ?? this._initCols);\n        }\n\n        if (!suppressSetOverflow) {\n            this.setOverflow();\n        }\n\n        this._layout.setScroller();\n        if (!suppressRender)\n            this.render();\n    }\n\n    private validateAndEnforceOptions(): void {\n        if (this._options.autoHeight) {\n            this._options.leaveSpaceForNewRows = false;\n        }\n    }\n\n    private viewOnRowCountChanged = () => {\n        this.updateRowCount();\n        this.render();\n    }\n\n    private viewOnRowsChanged = (_: any, args: { rows: number[] }): void => {\n        this.invalidateRows(args.rows);\n        this.render();\n        this.updateGrandTotals();\n    }\n\n    private viewOnDataChanged = (): void => {\n        this.invalidate();\n        this.render();\n    }\n\n    private bindToData(): void {\n        if (this._data) {\n            this._data.onRowCountChanged && this._data.onRowCountChanged.subscribe(this.viewOnRowCountChanged);\n            this._data.onRowsChanged && this._data.onRowsChanged.subscribe(this.viewOnRowsChanged);\n            this._data.onDataChanged && this._data.onDataChanged.subscribe(this.viewOnDataChanged);\n        }\n    }\n\n    private unbindFromData(): void {\n        if (this._data) {\n            this._data.onRowCountChanged && this._data.onRowCountChanged.unsubscribe(this.viewOnRowCountChanged);\n            this._data.onRowsChanged && this._data.onRowsChanged.unsubscribe(this.viewOnRowsChanged);\n            this._data.onDataChanged && this._data.onDataChanged.unsubscribe(this.viewOnDataChanged);\n        }\n    }\n\n    setData(newData: any, scrollToTop?: boolean) {\n        this.unbindFromData();\n        this._data = newData;\n        this.bindToData();\n        this.invalidateAllRows();\n        this.updateRowCount();\n        if (scrollToTop) {\n            this.scrollTo(0);\n        }\n    }\n\n    getData(): any {\n        return this._data;\n    }\n\n    getDataLength(): number {\n        if (this._data.getLength) {\n            return this._data.getLength();\n        } else {\n            return this._data.length;\n        }\n    }\n\n    private getDataLengthIncludingAddNew(): number {\n        return this.getDataLength() + (!this._options.enableAddRow ? 0 :\n            (!this._pagingActive || this._pagingIsLastPage ? 1 : 0));\n    }\n\n    getDataItem(i: number): TItem {\n        if (this._data.getItem) {\n            return this._data.getItem(i);\n        } else {\n            return this._data[i];\n        }\n    }\n\n    getTopPanel(): HTMLElement {\n        return this._layout.getTopPanelFor(0);\n    }\n\n    setTopPanelVisibility(visible: boolean): void {\n        if (this._options.showTopPanel != visible) {\n            this._options.showTopPanel = !!visible;\n\n            this._layout.getTopPanelNodes().forEach(el => {\n                if (this._jQuery)\n                    this._jQuery(el)[visible ? \"slideDown\" : \"slideUp\"](\"fast\", this.resizeCanvas);\n                else {\n                    el.style.display = visible ? '' : 'none';\n                    this.resizeCanvas();\n                }\n            });\n        }\n    }\n\n    setColumnHeaderVisibility(visible: boolean, animate?: boolean) {\n        if (this._options.showColumnHeader != visible) {\n            this._options.showColumnHeader = visible;\n            this._layout.getHeaderCols().forEach(n => {\n                const el = n.parentElement;\n                if (animate && this._jQuery)\n                    this._jQuery(el)[visible ? \"slideDown\" : \"slideUp\"](\"fast\", this.resizeCanvas);\n                else {\n                    el.style.display = visible ? '' : 'none';\n                    this.resizeCanvas();\n                }\n            });\n        }\n    }\n\n    setFooterRowVisibility(visible: boolean): void {\n        if (this._options.showFooterRow != visible) {\n            this._options.showFooterRow = !!visible;\n            this._layout.getFooterRowCols().forEach(n => {\n                const el = n.parentElement;\n                if (this._jQuery)\n                    this._jQuery(el)[visible ? \"slideDown\" : \"slideUp\"](\"fast\", this.resizeCanvas);\n                else {\n                    el.style.display = visible ? '' : 'none';\n                    this.resizeCanvas();\n                }\n            });\n        }\n    }\n\n    setGroupingPanelVisibility(visible: boolean): void {\n        if (this._options.showGroupingPanel != visible) {\n            this._options.showGroupingPanel = visible;\n            if (!this._options.groupingPanel)\n                return;\n\n            const el = this._groupingPanel;\n            if (this._jQuery)\n                this._jQuery(el)[visible ? \"slideDown\" : \"slideUp\"](\"fast\", this.resizeCanvas);\n            else {\n                el.style.display = visible ? '' : 'none';\n                this.resizeCanvas();\n            }\n        }\n    }\n\n    setPreHeaderPanelVisibility(visible: boolean): void {\n        this.setGroupingPanelVisibility(visible);\n    }\n\n    setHeaderRowVisibility(visible: boolean): void {\n        if (this._options.showHeaderRow != visible) {\n            this._options.showHeaderRow = visible;\n            this._layout.getHeaderRowCols().forEach(n => {\n                const el = n.parentElement;\n                if (this._jQuery)\n                    this._jQuery(el)[visible ? \"slideDown\" : \"slideUp\"](\"fast\", this.resizeCanvas);\n                else {\n                    el.style.display = visible ? '' : 'none';\n                    this.resizeCanvas();\n                }\n            });\n        }\n    }\n\n    getContainerNode(): HTMLElement {\n        return this._container;\n    }\n\n    getUID(): string {\n        return this._uid;\n    }\n\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    // Rendering / Scrolling\n\n    private getRowTop(row: number): number {\n        return this._options.rowHeight * row - this._pageOffset;\n    }\n\n    private getRowFromPosition(y: number): number {\n        return Math.floor((y + this._pageOffset) / this._options.rowHeight);\n    }\n\n    private scrollTo(y: number): void {\n        const vpi = this._viewportInfo;\n        y = Math.max(y, 0);\n        y = Math.min(y, vpi.virtualHeight - Math.round(this._layout.getScrollContainerY().clientHeight) + ((vpi.hasHScroll || this.hasFrozenColumns()) ? this._scrollDims.height : 0));\n\n        var oldOffset = this._pageOffset;\n\n        this._page = Math.min(this._numberOfPages - 1, Math.floor(y / this._pageHeight));\n        this._pageOffset = Math.round(this._page * this._jumpinessCoefficient);\n        var newScrollTop = y - this._pageOffset;\n\n        if (this._pageOffset != oldOffset) {\n            var range = this.getVisibleRange(newScrollTop);\n            this.cleanupRows(range);\n            this.updateRowPositions();\n        }\n\n        if (this._scrollTopPrev != newScrollTop) {\n            this._vScrollDir = (this._scrollTopPrev + oldOffset < newScrollTop + this._pageOffset) ? 1 : -1;\n\n            this._scrollTopRendered = (this._scrollTop = this._scrollTopPrev = newScrollTop);\n\n            this._layout.handleScrollV();\n            this._layout.getScrollContainerY().scrollTop = newScrollTop;\n\n            this.trigger(this.onViewportChanged);\n        }\n    }\n\n    getFormatter(row: number, column: Column<TItem>): ColumnFormat<TItem> {\n        var data = this._data;\n\n        if (data.getItemMetadata) {\n            const itemMetadata = data.getItemMetadata(row) as ItemMetadata;\n            if (itemMetadata) {\n                const colsMetadata = itemMetadata.columns;\n                if (colsMetadata) {\n                    var columnMetadata: ColumnMetadata = colsMetadata[column.id] || colsMetadata[this.getColumnIndex(column.id)];\n                    if (columnMetadata) {\n                        if (columnMetadata.format)\n                            return columnMetadata.format;\n                        if (columnMetadata.formatter)\n                            return convertCompatFormatter(columnMetadata.formatter);\n                    }\n                }\n                if (itemMetadata.format)\n                    return itemMetadata.format;\n                if (itemMetadata.formatter)\n                    return convertCompatFormatter(itemMetadata.formatter);\n            }\n        }\n\n        if (column.format)\n            return column.format;\n\n        if (column.formatter)\n            return convertCompatFormatter(column.formatter);\n\n        var opt = this._options;\n\n        var factory = opt.formatterFactory;\n        if (factory) {\n            if (factory.getFormat) {\n                var format = factory.getFormat(column);\n                if (format)\n                    return format;\n            }\n            else if (factory.getFormatter) {\n                var compat = factory.getFormatter(column);\n                if (compat)\n                    return convertCompatFormatter(compat);\n            }\n        }\n\n        if (opt.defaultFormat)\n            return opt.defaultFormat;\n\n        if (opt.defaultFormatter)\n            return convertCompatFormatter(opt.defaultFormatter);\n\n        return defaultColumnFormat;\n    }\n\n    getFormatterContext(row: number, cell: number): FormatterContext {\n        var column = this._cols[cell];\n        var item = this.getDataItem(row);\n        const ctx: FormatterContext = {\n            cell,\n            column,\n            grid: this,\n            escape: escapeHtml,\n            item,\n            row\n        }\n        if (item)\n            ctx.value = this.getDataItemValueForColumn(item, column);\n        return ctx;\n    }\n\n    private getEditor(row: number, cell: number): EditorClass {\n        var column = this._cols[cell];\n        var itemMetadata = this._data.getItemMetadata && this._data.getItemMetadata(row) as ItemMetadata;\n        var colsMetadata = itemMetadata && itemMetadata.columns;\n\n        if (colsMetadata && colsMetadata[column.id] && colsMetadata[column.id].editor !== undefined) {\n            return colsMetadata[column.id].editor;\n        }\n        if (colsMetadata && colsMetadata[cell] && colsMetadata[cell].editor !== undefined) {\n            return colsMetadata[cell].editor;\n        }\n\n        return column.editor || (this._options.editorFactory && this._options.editorFactory.getEditor(column, row));\n    }\n\n    getDataItemValueForColumn(item: TItem, columnDef: Column<TItem>): any {\n        if (this._options.dataItemColumnValueExtractor)\n            return this._options.dataItemColumnValueExtractor(item, columnDef);\n        return (item as any)[columnDef.field];\n    }\n\n    private appendRowHtml(stringArrayL: string[], stringArrayR: string[], row: number, range: ViewRange, dataLength: number): void {\n        var d = this.getDataItem(row);\n        var dataLoading = row < dataLength && !d;\n        var rowCss = \"slick-row\" +\n            (this._layout.isFrozenRow(row) ? ' frozen' : '') +\n            (dataLoading ? \" loading\" : \"\") +\n            (row === this._activeRow ? \" active\" : \"\") +\n            (row % 2 == 1 ? \" odd\" : \" even\");\n\n        if (!d) {\n            rowCss += \" \" + this._options.addNewRowCssClass;\n        }\n\n        var itemMetadata = this._data.getItemMetadata?.(row) as ItemMetadata;\n\n        if (itemMetadata && itemMetadata.cssClasses) {\n            rowCss += \" \" + itemMetadata.cssClasses;\n        }\n\n        var rowOffset = this._layout.getFrozenRowOffset(row);\n\n        var rowHtml = \"<div class='\" + (this._options.useLegacyUI ? \"ui-widget-content \" : \"\") + rowCss + \"' style='top:\"\n            + (this.getRowTop(row) - rowOffset)\n            + \"px'>\";\n\n        stringArrayL.push(rowHtml);\n\n        const frozenCols = this._layout.getFrozenCols();\n\n        if (frozenCols) {\n            stringArrayR.push(rowHtml);\n        }\n\n        var colspan, m, cols = this._cols;\n        for (var i = 0, ii = cols.length; i < ii; i++) {\n            var columnData: ColumnMetadata = null;\n            m = cols[i];\n            colspan = 1;\n            if (itemMetadata && itemMetadata.columns) {\n                columnData = itemMetadata.columns[m.id] || itemMetadata.columns[i];\n                colspan = (columnData && columnData.colspan) || 1;\n                if (colspan === \"*\") {\n                    colspan = ii - i;\n                }\n            }\n\n            const isFrozen = frozenCols && i < frozenCols;\n            // Do not render cells outside of the viewport.\n            if (isFrozen || this._colRight[Math.min(ii - 1, i + colspan - 1)] > range.leftPx) {\n                if (!isFrozen && this._colLeft[i] > range.rightPx) {\n                    // All columns to the right are outside the range.\n                    break;\n                }\n\n                this.appendCellHtml(frozenCols > 0 && i >= frozenCols ? stringArrayR : stringArrayL, row, i, colspan, d, columnData);\n            }\n\n            if (colspan > 1) {\n                i += (colspan - 1);\n            }\n        }\n\n        stringArrayL.push(\"</div>\");\n\n        if (frozenCols) {\n            stringArrayR.push(\"</div>\");\n        }\n    }\n\n    private appendCellHtml(sb: string[], row: number, cell: number, colspan: number, item: TItem, metadata: ColumnMetadata): void {\n        var cols = this._cols, frozenCols = this._layout.getFrozenCols(), column = cols[cell];\n        var klass = \"slick-cell l\" + cell + \" r\" + Math.min(cols.length - 1, cell + colspan - 1) +\n            (column.cssClass ? \" \" + column.cssClass : \"\");\n\n        if (cell < frozenCols)\n            klass += ' frozen';\n\n        if (row === this._activeRow && cell === this._activeCell)\n            klass += \" active\";\n\n        if (metadata && metadata.cssClasses) {\n            klass += \" \" + metadata.cssClasses;\n        }\n\n        for (var key in this._cellCssClasses) {\n            if (this._cellCssClasses[key][row] && (this._cellCssClasses[key][row] as any)[column.id]) {\n                klass += (\" \" + this._cellCssClasses[key][row][column.id]);\n            }\n        }\n\n        // if there is a corresponding row (if not, this is the Add New row or this data hasn't been loaded yet)\n        var formatResult: FormatterResult;\n        const ctx: FormatterContext = {\n            cell,\n            column,\n            escape: escapeHtml,\n            grid: this,\n            item,\n            row\n        }\n\n        if (item) {\n            ctx.value = this.getDataItemValueForColumn(item, column);\n            formatResult = this.getFormatter(row, column)(ctx);\n            if (typeof formatResult === \"string\" && formatResult.length) {\n                formatResult = this._options.sanitizer?.(formatResult);\n            }\n        }\n\n        klass = escapeHtml(klass);\n\n        if (ctx.addClass?.length || ctx.addAttrs?.length || ctx.tooltip?.length) {\n            if (ctx.addClass?.length)\n                klass += (\" \" + escapeHtml(ctx.addClass));\n\n            sb.push('<div class=\"' + klass + '\"');\n\n            if (ctx.addClass?.length)\n                sb.push(' data-fmtcls=\"' + escapeHtml(ctx.addClass) + '\"');\n\n            var attrs = ctx.addAttrs;\n            if (attrs != null) {\n                var ks = [];\n                for (var k in attrs) {\n                    sb.push(k + '=\"' + escapeHtml(attrs[k]) + '\"');\n                    ks.push(k);\n                }\n                sb.push(' data-fmtatt=\"' + escapeHtml(ks.join(',')) + '\"');\n            }\n\n            var toolTip = ctx.tooltip;\n            if (toolTip != null && toolTip.length)\n                sb.push('tooltip=\"' + escapeHtml(toolTip) + '\"');\n\n            if (formatResult != null)\n                sb.push('>' + formatResult + '</div>');\n            else\n                sb.push('></div>');\n        }\n        else if (formatResult != null &&  !(formatResult instanceof Node))\n            sb.push('<div class=\"' + klass + '\">' + formatResult + '</div>');\n        else\n            sb.push('<div class=\"' + klass + '\"></div>');\n\n        var cache = this._rowsCache[row];\n        cache.cellRenderQueue.push(cell);\n        cache.cellRenderContent.push(formatResult instanceof Node ? formatResult : void 0);\n        this._rowsCache[row].cellColSpans[cell] = colspan;\n    }\n\n    private cleanupRows(rangeToKeep: ViewRange): void {\n        var i: number;\n        for (var x in this._rowsCache) {\n            i = parseInt(x, 10);\n            if (i !== this._activeRow && (i < rangeToKeep.top || i > rangeToKeep.bottom)\n                && !this._layout.isFrozenRow(i))\n                this.removeRowFromCache(i);\n        }\n\n        this.startPostProcessingCleanup();\n    }\n\n    invalidate(): void {\n        this.updateRowCount();\n        this.invalidateAllRows();\n        this.render();\n        this.updateGrandTotals();\n    }\n\n    invalidateAllRows(): void {\n        if (this._currentEditor) {\n            this.makeActiveCellNormal();\n        }\n        for (var row in this._rowsCache) {\n            this.removeRowFromCache(parseInt(row, 10));\n        }\n\n        this.startPostProcessingCleanup();\n    }\n\n    private queuePostProcessedRowForCleanup(cacheEntry: CachedRow, row: number): void {\n\n        var postProcessedRow = this._postProcessedRows[row];\n        if (!postProcessedRow)\n            return;\n\n        this._postProcessGroupId++;\n\n        // store and detach node for later async cleanup\n        for (var x in postProcessedRow) {\n            var columnIdx = parseInt(x, 10);\n            this._postProcessCleanupQueue.push({\n                groupId: this._postProcessGroupId,\n                cellNode: cacheEntry.cellNodesByColumnIdx[columnIdx | 0],\n                columnIdx: columnIdx | 0,\n                rowIdx: row\n            });\n        }\n\n        this._postProcessCleanupQueue.push({\n            groupId: this._postProcessGroupId,\n            rowNodeL: cacheEntry.rowNodeL,\n            rowNodeR: cacheEntry.rowNodeR\n        });\n\n        cacheEntry.rowNodeL?.remove();\n        cacheEntry.rowNodeR?.remove();\n    }\n\n    private queuePostProcessedCellForCleanup(cellnode: HTMLElement, columnIdx: number, rowIdx: number): void {\n        this._postProcessCleanupQueue.push({\n            groupId: this._postProcessGroupId,\n            cellNode: cellnode,\n            columnIdx: columnIdx,\n            rowIdx: rowIdx\n        });\n        cellnode.remove(); // cleanup should be handled by postprocess\n    }\n\n    private removeRowFromCache(row: number): void {\n        var cacheEntry = this._rowsCache[row];\n        if (!cacheEntry) {\n            return;\n        }\n\n        if (this._postCleanupActive && this._postProcessedRows[row]) {\n            this.queuePostProcessedRowForCleanup(cacheEntry, row);\n        }\n        else {\n            cacheEntry.rowNodeL?.parentElement?.removeChild(cacheEntry.rowNodeL);\n            cacheEntry.rowNodeR?.parentElement?.removeChild(cacheEntry.rowNodeR);\n        }\n\n        delete this._rowsCache[row];\n        delete this._postProcessedRows[row];\n    }\n\n    invalidateRows(rows: number[]): void {\n        var i, rl;\n        if (!rows || !rows.length) {\n            return;\n        }\n        this._vScrollDir = 0;\n        for (i = 0, rl = rows.length; i < rl; i++) {\n            if (this._currentEditor && this._activeRow === rows[i]) {\n                this.makeActiveCellNormal();\n            }\n            if (this._rowsCache[rows[i]]) {\n                this.removeRowFromCache(rows[i]);\n            }\n        }\n\n        this.startPostProcessingCleanup();\n    }\n\n    invalidateRow(row: number): void {\n        this.invalidateRows([row]);\n    }\n\n    updateCell(row: number, cell: number): void {\n        var cellNode = this.getCellNode(row, cell);\n        if (!cellNode)\n            return;\n\n        if (this._currentEditor && this._activeRow === row && this._activeCell === cell) {\n            this._currentEditor.loadValue(this.getDataItem(row));\n        } else {\n            this.updateCellWithFormatter(cellNode, row, cell);\n            this.invalidatePostProcessingResults(row);\n        }\n    }\n\n    private updateCellWithFormatter(cellNode: HTMLElement, row: number, cell: number): void {\n        var formatResult: string | Element | DocumentFragment;\n        const ctx = this.getFormatterContext(row, cell);\n        if (ctx.item) {\n            formatResult = this.getFormatter(row, ctx.column)(ctx);\n            if (typeof formatResult === \"string\" && formatResult.length) {\n                formatResult = this._options.sanitizer?.(formatResult);\n            }\n        }\n        this._emptyNode(cellNode);\n        applyFormatterResultToCellNode(ctx, formatResult, cellNode);\n    }\n\n    updateRow(row: number): void {\n        var cacheEntry = this._rowsCache[row];\n        if (!cacheEntry) {\n            return;\n        }\n\n        this.ensureCellNodesInRowsCache(row);\n\n        var d = this.getDataItem(row);\n\n        for (var x in cacheEntry.cellNodesByColumnIdx) {\n            var cell = parseInt(x, 10);\n            if (row === this._activeRow && cell === this._activeCell && this._currentEditor) {\n                this._currentEditor.loadValue(d);\n            }\n            else {\n                this.updateCellWithFormatter(cacheEntry.cellNodesByColumnIdx[cell], row, cell);\n            }\n        }\n\n        this.invalidatePostProcessingResults(row);\n    }\n\n    private calcViewportSize(): void {\n        const layout = this._layout;\n        const vs = this._viewportInfo;\n        vs.width = getInnerWidth(this._container);\n        vs.groupingPanelHeight = (this._options.groupingPanel && this._options.showGroupingPanel) ? (this._options.groupingPanelHeight + getVBoxDelta(this._groupingPanel)) : 0\n        vs.topPanelHeight = this._options.showTopPanel ? (this._options.topPanelHeight + getVBoxDelta(layout.getTopPanelFor(0).parentElement)) : 0;\n        vs.headerRowHeight = this._options.showHeaderRow ? (this._options.headerRowHeight + getVBoxDelta(layout.getHeaderRowColsFor(0).parentElement)) : 0;\n        vs.footerRowHeight = this._options.showFooterRow ? (this._options.footerRowHeight + getVBoxDelta(layout.getFooterRowColsFor(0).parentElement)) : 0;\n        vs.headerHeight = (this._options.showColumnHeader) ? (parsePx(getComputedStyle(layout.getHeaderColsFor(0).parentElement).height) + getVBoxDelta(layout.getHeaderColsFor(0).parentElement)) : 0;\n\n        if (this._options.autoHeight) {\n            vs.height = this._options.rowHeight * this.getDataLengthIncludingAddNew();\n            if (this._layout.calcCanvasWidth() > vs.width)\n                vs.height += this._scrollDims.height;\n        } else {\n\n            var style = getComputedStyle(this._container);\n            vs.height = parsePx(style.height)\n                - parsePx(style.paddingTop)\n                - parsePx(style.paddingBottom)\n                - vs.headerHeight\n                - vs.topPanelHeight\n                - vs.headerRowHeight\n                - vs.footerRowHeight\n                - vs.groupingPanelHeight;\n        }\n\n        vs.numVisibleRows = Math.ceil(vs.height / this._options.rowHeight);\n    }\n\n    resizeCanvas = (): void => {\n        if (!this._initialized) {\n            return;\n        }\n\n        this.calcViewportSize();\n        this._layout.resizeCanvas();\n\n        if (!this._scrollDims || !this._scrollDims.width) {\n            this._scrollDims = getScrollBarDimensions(true);\n        }\n\n        if (this._options.forceFitColumns) {\n            this.autosizeColumns();\n        }\n\n        this.updateRowCount();\n        this.handleScroll();\n        // Since the width has changed, force the render() to reevaluate virtually rendered cells.\n        this._scrollLeftRendered = -1;\n        this.render();\n    }\n\n    updatePagingStatusFromView(pagingInfo: { pageSize: number, pageNum: number, totalPages: number }) {\n        this._pagingActive = (pagingInfo.pageSize !== 0);\n        this._pagingIsLastPage = (pagingInfo.pageNum == pagingInfo.totalPages - 1);\n    }\n\n    updateRowCount(): void {\n        if (!this._initialized) {\n            return;\n        }\n\n        var dataLengthIncludingAddNew = this.getDataLengthIncludingAddNew();\n        var scrollCanvas = this._layout.getScrollCanvasY();\n        var oldH = Math.round(parsePx(getComputedStyle(scrollCanvas).height));\n\n        var numberOfRows;\n        const frozenRows = this._layout.getFrozenRows();\n        if (frozenRows) {\n            numberOfRows = this.getDataLength() - frozenRows;\n        } else {\n            numberOfRows = dataLengthIncludingAddNew + (this._options.leaveSpaceForNewRows ? this._viewportInfo.numVisibleRows - 1 : 0);\n        }\n\n        var tempViewportH = Math.round(parsePx(getComputedStyle(this._layout.getScrollContainerY()).height));\n        const vpi = this._viewportInfo;\n        var oldViewportHasVScroll = vpi.hasVScroll;\n        // with autoHeight, we do not need to accommodate the vertical scroll bar\n        vpi.hasVScroll = !this._options.autoHeight && (numberOfRows * this._options.rowHeight > tempViewportH);\n\n        this.makeActiveCellNormal();\n\n        // remove the rows that are now outside of the data range\n        // this helps avoid redundant calls to .removeRow() when the size of the data decreased by thousands of rows\n        var l = dataLengthIncludingAddNew - 1;\n        for (var x in this._rowsCache) {\n            var i = parseInt(x, 10);\n            if (i >= l) {\n                this.removeRowFromCache(i);\n            }\n        }\n\n        this.startPostProcessingCleanup();\n\n        vpi.virtualHeight = Math.max(this._options.rowHeight * numberOfRows, tempViewportH - this._scrollDims.height);\n\n        if (this._activeCellNode && this._activeRow > l) {\n            this.resetActiveCell();\n        }\n\n        if (vpi.virtualHeight < getMaxSupportedCssHeight()) {\n            // just one page\n            vpi.realScrollHeight = this._pageHeight = vpi.virtualHeight;\n            this._numberOfPages = 1;\n            this._jumpinessCoefficient = 0;\n        } else {\n            // break into pages\n            vpi.realScrollHeight = getMaxSupportedCssHeight();\n            this._pageHeight = vpi.realScrollHeight / 100;\n            this._numberOfPages = Math.floor(vpi.virtualHeight / this._pageHeight);\n            this._jumpinessCoefficient = (vpi.virtualHeight - vpi.realScrollHeight) / (this._numberOfPages - 1);\n        }\n\n        if (vpi.realScrollHeight !== oldH) {\n            this._layout.realScrollHeightChange();\n            this._scrollTop = this._layout.getScrollContainerY().scrollTop;\n        }\n\n        var oldScrollTopInRange = (this._scrollTop + this._pageOffset <= vpi.virtualHeight - tempViewportH);\n\n        if (vpi.virtualHeight == 0 || this._scrollTop == 0) {\n            this._page = this._pageOffset = 0;\n        } else if (oldScrollTopInRange) {\n            // maintain virtual position\n            this.scrollTo(this._scrollTop + this._pageOffset);\n        } else {\n            // scroll to bottom\n            this.scrollTo(vpi.virtualHeight - tempViewportH);\n        }\n\n        if (vpi.realScrollHeight != oldH && this._options.autoHeight) {\n            this.resizeCanvas();\n        }\n\n        if (this._options.forceFitColumns && oldViewportHasVScroll != vpi.hasVScroll) {\n            this.autosizeColumns();\n        }\n        this.updateCanvasWidth(false);\n    }\n\n    /**\n     * @param viewportTop optional viewport top\n     * @param viewportLeft optional viewport left\n     * @returns viewport range\n     */\n    getViewport(viewportTop?: number, viewportLeft?: number): ViewRange {\n        return this.getVisibleRange(viewportTop, viewportLeft);\n    }\n\n    getVisibleRange(viewportTop?: number, viewportLeft?: number): ViewRange {\n        if (viewportTop == null) {\n            viewportTop = this._scrollTop;\n        }\n        if (viewportLeft == null) {\n            viewportLeft = this._scrollLeft;\n        }\n        if (this._options.rtl) {\n            viewportLeft = Math.abs(viewportLeft);\n        }\n        return {\n            top: this.getRowFromPosition(viewportTop),\n            bottom: this.getRowFromPosition(viewportTop + this._viewportInfo.height) + 1,\n            leftPx: viewportLeft,\n            rightPx: viewportLeft + this._viewportInfo.width\n        };\n    }\n\n    getRenderedRange(viewportTop?: number, viewportLeft?: number): ViewRange {\n        var range = this.getVisibleRange(viewportTop, viewportLeft);\n        if (this._options.renderAllRows) {\n            range.top = 0;\n            range.bottom = this.getDataLengthIncludingAddNew() - 1;\n        }\n        else {\n            var buffer = Math.round(this._viewportInfo.height / this._options.rowHeight);\n            var minBuffer = this._options.minBuffer || 3;\n            if (this._vScrollDir == -1) {\n                range.top -= buffer;\n                range.bottom += minBuffer;\n            } else if (this._vScrollDir == 1) {\n                range.top -= minBuffer;\n                range.bottom += buffer;\n            } else {\n                range.top -= minBuffer;\n                range.bottom += minBuffer;\n            }\n\n            range.top = Math.max(0, range.top);\n            range.bottom = Math.min(this.getDataLengthIncludingAddNew() - 1, range.bottom);\n        }\n\n        if (this._options.renderAllCells) {\n            range.leftPx = 0;\n            range.rightPx = this._layout.getCanvasWidth();\n        }\n        else {\n            range.leftPx -= this._viewportInfo.width;\n            range.rightPx += this._viewportInfo.width;\n\n            range.leftPx = Math.max(0, range.leftPx);\n            range.rightPx = Math.min(this._layout.getCanvasWidth(), range.rightPx);\n        }\n\n        return range;\n    }\n\n    private ensureCellNodesInRowsCache(row: number): void {\n        var cacheEntry = this._rowsCache[row];\n        if (cacheEntry) {\n            if (cacheEntry.cellRenderQueue.length) {\n                var lastChild = cacheEntry.rowNodeR?.lastElementChild ?? cacheEntry.rowNodeL?.lastElementChild;\n                while (lastChild && cacheEntry.cellRenderQueue.length) {\n                    var columnIdx = cacheEntry.cellRenderQueue.pop();\n                    var element = cacheEntry.cellRenderContent.pop();\n\n                    cacheEntry.cellNodesByColumnIdx[columnIdx] = lastChild as HTMLElement;\n                    if (element instanceof Node)\n                        lastChild.appendChild(element);\n                    lastChild = lastChild.previousElementSibling;\n\n                    if (lastChild == null)\n                        lastChild = cacheEntry.rowNodeL?.lastElementChild;\n                }\n            }\n        }\n    }\n\n    private cleanUpCells(rangeToKeep: ViewRange, row: number): void {\n        // Ignore frozen rows\n        if (this._layout.isFrozenRow(row))\n            return;\n\n        var cacheEntry = this._rowsCache[row];\n\n        // Remove cells outside the range.\n        var cellsToRemove = [], frozenCols = this._layout.getFrozenCols();\n        for (var x in cacheEntry.cellNodesByColumnIdx) {\n\n            var i = parseInt(x, 10);\n\n            // Ignore frozen columns\n            if (i < frozenCols) {\n                continue;\n            }\n\n            var colspan = cacheEntry.cellColSpans[i], cols = this._cols;\n            if (this._colLeft[i] > rangeToKeep.rightPx || this._colRight[Math.min(cols.length - 1, i + colspan - 1)] < rangeToKeep.leftPx) {\n                if (!(row == this._activeRow && i === this._activeCell)) {\n                    cellsToRemove.push(i);\n                }\n            }\n        }\n\n        var cellToRemove, node;\n        this._postProcessGroupId++;\n        while ((cellToRemove = cellsToRemove.pop()) != null) {\n            node = cacheEntry.cellNodesByColumnIdx[cellToRemove];\n\n            if (this._postCleanupActive && this._postProcessedRows[row] && this._postProcessedRows[row][cellToRemove]) {\n                this.queuePostProcessedCellForCleanup(node, cellToRemove, row);\n            } else {\n                this._removeNode(node);\n            }\n\n            delete cacheEntry.cellColSpans[cellToRemove];\n            delete cacheEntry.cellNodesByColumnIdx[cellToRemove];\n            if (this._postProcessedRows[row]) {\n                delete this._postProcessedRows[row][cellToRemove];\n            }\n        }\n    }\n\n    private cleanUpAndRenderCells(range: ViewRange) {\n        var cacheEntry;\n        var stringArray: string[] = [];\n        var processedRows = [];\n        var cellsAdded;\n        var colspan;\n        var cols = this._cols;\n        var cellContents: Element[] = [];\n\n        for (var row = range.top, btm = range.bottom; row <= btm; row++) {\n            cacheEntry = this._rowsCache[row];\n            if (!cacheEntry) {\n                continue;\n            }\n\n            // cellRenderQueue populated in renderRows() needs to be cleared first\n            this.ensureCellNodesInRowsCache(row);\n\n            this.cleanUpCells(range, row);\n\n            // Render missing cells.\n            cellsAdded = 0;\n\n            var itemMetadata = this._data.getItemMetadata && this._data.getItemMetadata(row) as ItemMetadata;\n            var colsMetadata = itemMetadata && itemMetadata.columns;\n\n            var d = this.getDataItem(row);\n\n            // TODO:  shorten this loop (index? heuristics? binary search?)\n            for (var i = 0, ii = cols.length; i < ii; i++) {\n                // Cells to the right are outside the range.\n                if (this._colLeft[i] > range.rightPx) {\n                    break;\n                }\n\n                // Already rendered.\n                if ((colspan = cacheEntry.cellColSpans[i]) != null) {\n                    i += (colspan > 1 ? colspan - 1 : 0);\n                    continue;\n                }\n\n                var columnData: ColumnMetadata = null;\n                colspan = 1;\n                if (colsMetadata) {\n                    columnData = colsMetadata[cols[i].id] || colsMetadata[i];\n                    colspan = (columnData && columnData.colspan) || 1;\n                    if (colspan === \"*\") {\n                        colspan = ii - i;\n                    }\n                }\n\n                if (this._colRight[Math.min(ii - 1, i + colspan - 1)] > range.leftPx) {\n                    this.appendCellHtml(stringArray, row, i, colspan, d, columnData);\n                    cellsAdded++;\n                }\n\n                i += (colspan > 1 ? colspan - 1 : 0);\n            }\n\n            if (cellsAdded) {\n                processedRows.push(row);\n            }\n        }\n\n        if (!stringArray.length) {\n            return;\n        }\n\n        var x = document.createElement(\"div\");\n        x.innerHTML = stringArray.join(\"\");\n\n        var processedRow;\n        var node: HTMLElement, frozenCols = this._layout.getFrozenCols();\n        while ((processedRow = processedRows.pop()) != null) {\n            cacheEntry = this._rowsCache[processedRow];\n            var columnIdx;\n            while ((columnIdx = cacheEntry.cellRenderQueue.pop()) != null) {\n                var element = cacheEntry.cellRenderContent.pop();\n                node = x.lastElementChild as HTMLElement;\n                if (element instanceof Node)\n                    node.appendChild(element);\n\n                if (frozenCols > 0 && columnIdx >= frozenCols) {\n                    cacheEntry.rowNodeR.appendChild(node);\n                } else {\n                    cacheEntry.rowNodeL.appendChild(node);\n                }\n\n                cacheEntry.cellNodesByColumnIdx[columnIdx] = node;\n            }\n        }\n    }\n\n    private renderRows(range: ViewRange): void {\n        var stringArrayL: string[] = [],\n            stringArrayR: string[] = [],\n            rows = [],\n            needToReselectCell = false,\n            dataLength = this.getDataLength();\n\n        for (var i = range.top, ii = range.bottom; i <= ii; i++) {\n\n            if (this._rowsCache[i] || (this.hasFrozenRows() && this._options.frozenBottom && i == dataLength)) {\n                continue;\n            }\n\n            rows.push(i);\n\n            // Create an entry right away so that appendRowHtml() can\n            // start populatating it.\n            this._rowsCache[i] = {\n                rowNodeL: null,\n                rowNodeR: null,\n\n                // ColSpans of rendered cells (by column idx).\n                // Can also be used for checking whether a cell has been rendered.\n                cellColSpans: [],\n\n                // Cell nodes (by column idx).  Lazy-populated by ensureCellNodesInRowsCache().\n                cellNodesByColumnIdx: [],\n\n                // Column indices of cell nodes that have been rendered, but not yet indexed in\n                // cellNodesByColumnIdx.  These are in the same order as cell nodes added at the\n                // end of the row.\n                cellRenderQueue: [],\n\n                cellRenderContent: []\n            };\n\n            this.appendRowHtml(stringArrayL, stringArrayR, i, range, dataLength);\n            if (this._activeCellNode && this._activeRow === i) {\n                needToReselectCell = true;\n            }\n        }\n\n        if (!rows.length) {\n            return;\n        }\n\n        var l = document.createElement(\"div\"),\n            r = document.createElement(\"div\");\n\n        l.innerHTML = stringArrayL.join(\"\");\n        r.innerHTML = stringArrayR.join(\"\");\n\n\n        const layout = this._layout;\n        for (var i = 0, ii = rows.length; i < ii; i++) {\n            var row = rows[i];\n            var cache = this._rowsCache[row];\n            cache.rowNodeL = l.firstElementChild as HTMLElement;\n            cache.rowNodeR = r.firstElementChild as HTMLElement;\n            layout.appendCachedRow(row, cache.rowNodeL, cache.rowNodeR);\n            if (cache.cellRenderContent.some(x => x instanceof Node))\n                this.ensureCellNodesInRowsCache(row);\n        }\n\n        if (needToReselectCell) {\n            this._activeCellNode = this.getCellNode(this._activeRow, this._activeCell);\n        }\n    }\n\n    private startPostProcessing(): void {\n        if (!this._postRenderActive) {\n            return;\n        }\n\n        clearTimeout(this._hPostRender);\n\n        if (this._options.asyncPostRenderDelay < 0) {\n            this.asyncPostProcessRows();\n        } else {\n            this._hPostRender = setTimeout(this.asyncPostProcessRows, this._options.asyncPostRenderDelay);\n        }\n    }\n\n    private startPostProcessingCleanup(): void {\n        if (!this._postCleanupActive) {\n            return;\n        }\n\n        clearTimeout(this._hPostRenderCleanup);\n\n        if (this._options.asyncPostCleanupDelay < 0) {\n            this.asyncPostProcessCleanupRows();\n        }\n        else {\n            this._hPostRenderCleanup = setTimeout(this.asyncPostProcessCleanupRows.bind(this), this._options.asyncPostCleanupDelay);\n        }\n    }\n\n    private invalidatePostProcessingResults(row: number): void {\n        if (this._options.enableAsyncPostRenderCleanup) {\n            var postProcessed = this._postProcessedRows[row];\n            if (postProcessed) {\n                // change status of columns to be re-rendered\n                for (var columnIdx in postProcessed) {\n                    postProcessed[columnIdx] = 'C';\n                }\n            }\n        }\n        else {\n            delete this._postProcessedRows[row];\n        }\n\n        this._postProcessFromRow = Math.min(this._postProcessFromRow, row);\n        this._postProcessToRow = Math.max(this._postProcessToRow, row);\n        this.startPostProcessing();\n    }\n\n    private updateRowPositions(): void {\n        for (var row in this._rowsCache) {\n            var c = this._rowsCache[row];\n            var p = this.getRowTop(parseInt(row, 10)) + \"px\";\n            c.rowNodeL && (c.rowNodeL.style.top = p);\n            c.rowNodeR && (c.rowNodeR.style.top = p);\n        }\n    }\n\n    private updateGrandTotals(): void {\n        if (!this._options.showFooterRow || !this._initialized)\n            return;\n\n        var totals;\n        if (this._data && this._data.getGrandTotals)\n            totals = this._data.getGrandTotals();\n        totals = totals ?? {};\n\n        var cols = this._cols;\n        for (var m of cols) {\n            if (m.id != void 0) {\n                var formatter = m.groupTotalsFormatter ?? this._options.groupTotalsFormatter;\n                if (!formatter)\n                    continue;\n                var content = formatter(totals, m, this) ?? '';\n                this.getFooterRowColumn(m.id).innerHTML = content;\n            }\n        }\n    }\n\n    // for usage as fallback by the groupmetadataitemprovider\n    groupTotalsFormatter(p1?: GroupTotals<TItem>, p2?: Column<TItem>, grid?: any): string {\n        return this._options.groupTotalsFormatter ? this._options.groupTotalsFormatter(p1, p2, grid ?? this) : \"\";\n    }\n\n    public render = (): void => {\n        if (!this._initialized) { return; }\n        var visible = this.getVisibleRange();\n        var rendered = this.getRenderedRange();\n\n        // remove rows no longer in the viewport\n        this.cleanupRows(rendered);\n\n        // add new rows & missing cells in existing rows\n        if (this._scrollLeftRendered != this._scrollLeft) {\n            this._layout.beforeCleanupAndRenderCells(rendered);\n            this.cleanUpAndRenderCells(rendered);\n        }\n\n        // render missing rows\n        this.renderRows(rendered);\n        this._layout.afterRenderRows(rendered);\n\n        this._postProcessFromRow = visible.top;\n        this._postProcessToRow = Math.min(this.getDataLengthIncludingAddNew() - 1, visible.bottom);\n        this.startPostProcessing();\n\n        this._scrollTopRendered = this._scrollTop;\n        this._scrollLeftRendered = this._scrollLeft;\n        this._lastRenderTime = new Date().getTime();\n        this._hRender = null;\n    }\n\n    private handleHeaderRowScroll = (e: IEventData): void => {\n        if (this._ignoreScrollUntil >= new Date().getTime())\n            return;\n\n        var scrollLeft = (e.target as HTMLElement).scrollLeft;\n        if (scrollLeft != this._layout.getScrollContainerX().scrollLeft) {\n            this._layout.getScrollContainerX().scrollLeft = scrollLeft;\n        }\n    }\n\n    private handleFooterRowScroll = (e: IEventData): void => {\n        if (this._ignoreScrollUntil >= new Date().getTime())\n            return;\n\n        var scrollLeft = (e.target as HTMLElement).scrollLeft;\n        if (scrollLeft != this._layout.getScrollContainerX().scrollLeft) {\n            this._layout.getScrollContainerX().scrollLeft = scrollLeft;\n        }\n    }\n\n    private handleMouseWheel(e: MouseEvent, delta: number, deltaX: number, deltaY: number): void {\n        deltaX = (typeof deltaX == \"undefined\" ? (e as any).originalEvent?.deltaX : deltaX) || 0;\n        deltaY = (typeof deltaY == \"undefined\" ? (e as any).originalEvent?.deltaY : deltaY) || 0;\n        this._scrollTop = Math.max(0, this._layout.getScrollContainerY().scrollTop - (deltaY * this._options.rowHeight));\n        this._scrollLeft = this._layout.getScrollContainerX().scrollLeft + (deltaX * 10);\n        this.handleScroll(true);\n    }\n\n    private handleScroll(isMouseWheel?: boolean) {\n        this._scrollTop = this._layout.getScrollContainerY().scrollTop;\n        this._scrollLeft = this._layout.getScrollContainerX().scrollLeft;\n\n        var vScrollDist = Math.abs(this._scrollTop - this._scrollTopPrev);\n        var hScrollDist = Math.abs(this._scrollLeft - this._scrollLeftPrev);\n\n        if (hScrollDist || vScrollDist)\n            this._ignoreScrollUntil = new Date().getTime() + 100;\n\n        if (hScrollDist) {\n            this._scrollLeftPrev = this._scrollLeft;\n\n            this._layout.getScrollContainerX().scrollLeft = this._scrollLeft;\n\n            this._layout.handleScrollH();\n        }\n\n        const vpi = this._viewportInfo;\n\n        if (vScrollDist) {\n            this._vScrollDir = this._scrollTopPrev < this._scrollTop ? 1 : -1;\n            this._scrollTopPrev = this._scrollTop;\n\n            if (isMouseWheel === true) {\n                this._layout.getScrollContainerY().scrollTop = this._scrollTop;\n            }\n\n            this._layout.handleScrollV();\n\n            // switch virtual pages if needed\n            if (vScrollDist < this._viewportInfo.height) {\n                this.scrollTo(this._scrollTop + this._pageOffset);\n            } else {\n                var oldOffset = this._pageOffset;\n                if (vpi.realScrollHeight == vpi.height) {\n                    this._page = 0;\n                } else {\n                    this._page = Math.min(this._numberOfPages - 1, Math.floor(this._scrollTop * ((vpi.virtualHeight - this._viewportInfo.height) / (vpi.realScrollHeight - this._viewportInfo.height)) * (1 / this._pageHeight)));\n                }\n                this._pageOffset = Math.round(this._page * this._jumpinessCoefficient);\n                if (oldOffset != this._pageOffset) {\n                    this.invalidateAllRows();\n                }\n            }\n        }\n\n        if (hScrollDist || vScrollDist) {\n            if (this._hRender) {\n                clearTimeout(this._hRender);\n            }\n\n            if (Math.abs(this._scrollTopRendered - this._scrollTop) > 20 ||\n                Math.abs(this._scrollLeftRendered - this._scrollLeft) > 20) {\n                if (this._options.forceSyncScrolling ||\n                    (this._options.forceSyncScrollInterval &&\n                        (this._lastRenderTime < new Date().getTime() - this._options.forceSyncScrollInterval))) {\n                    this.render();\n                } else {\n                    this._hRender = setTimeout(this.render, 50);\n                }\n\n                this.trigger(this.onViewportChanged);\n            }\n        }\n\n        this.trigger(this.onScroll, { scrollLeft: this._scrollLeft, scrollTop: this._scrollTop });\n\n        return !!(hScrollDist || vScrollDist);\n    }\n\n    private asyncPostProcessRows = () => {\n        var dataLength = this.getDataLength();\n        var cols = this._cols;\n        while (this._postProcessFromRow <= this._postProcessToRow) {\n            var row = (this._vScrollDir >= 0) ? this._postProcessFromRow++ : this._postProcessToRow--;\n            var cacheEntry = this._rowsCache[row];\n            if (!cacheEntry || row >= dataLength) {\n                continue;\n            }\n\n            if (!this._postProcessedRows[row]) {\n                this._postProcessedRows[row] = {};\n            }\n\n            this.ensureCellNodesInRowsCache(row);\n            for (var x in cacheEntry.cellNodesByColumnIdx) {\n                var columnIdx = parseInt(x, 10);\n\n                var m = cols[columnIdx];\n                var processedStatus = this._postProcessedRows[row][columnIdx]; // C=cleanup and re-render, R=render\n                if (processedStatus !== 'R') {\n                    if (m.asyncPostRender || m.asyncPostRenderCleanup) {\n                        var node = cacheEntry.cellNodesByColumnIdx[columnIdx];\n                        if (node) {\n                            m.asyncPostRender && m.asyncPostRender(node, row, this.getDataItem(row), m, processedStatus === 'C');\n                        }\n                    }\n                    this._postProcessedRows[row][columnIdx] = 'R';\n                }\n            }\n\n            if (this._options.asyncPostRenderDelay >= 0) {\n                this._hPostRender = setTimeout(this.asyncPostProcessRows, this._options.asyncPostRenderDelay);\n                return;\n            }\n        }\n    }\n\n    private asyncPostProcessCleanupRows(): void {\n        var cols = this._cols;\n        while (this._postProcessCleanupQueue?.length > 0) {\n            var groupId = this._postProcessCleanupQueue[0].groupId;\n\n            // loop through all queue members with this groupID\n            while (this._postProcessCleanupQueue.length > 0 && this._postProcessCleanupQueue[0].groupId == groupId) {\n                var entry = this._postProcessCleanupQueue.shift();\n                entry.rowNodeL && entry.rowNodeL.remove();\n                entry.rowNodeR && entry.rowNodeR.remove();\n                if (entry.cellNode != null) {\n                    var column = cols[entry.columnIdx];\n                    if (column && column.asyncPostRenderCleanup) {\n                        column.asyncPostRenderCleanup(entry.cellNode, entry.rowIdx, column);\n                        this._removeNode(entry.cellNode);\n                    }\n                }\n            }\n\n            // call this function again after the specified delay\n            if (this._options.asyncPostRenderDelay >= 0) {\n                this._hPostRenderCleanup = setTimeout(this.asyncPostProcessCleanupRows.bind(this), this._options.asyncPostCleanupDelay);\n                return;\n            }\n        }\n    }\n\n    private updateCellCssStylesOnRenderedRows(addedHash: CellStylesHash, removedHash: CellStylesHash) {\n        var node, columnId, addedRowHash, removedRowHash;\n        for (var row in this._rowsCache) {\n            removedRowHash = removedHash && removedHash[row];\n            addedRowHash = addedHash && addedHash[row];\n\n            if (removedRowHash) {\n                for (columnId in removedRowHash) {\n                    if (!addedRowHash || removedRowHash[columnId] != addedRowHash[columnId]) {\n                        node = this.getCellNode(parseInt(row, 10), this.getColumnIndex(columnId));\n                        if (node) {\n                            const r = removedRowHash[columnId];\n                            removeClass(node, r);\n                        }\n                    }\n                }\n            }\n\n            if (addedRowHash) {\n                for (columnId in addedRowHash) {\n                    if (!removedRowHash || removedRowHash[columnId] != addedRowHash[columnId]) {\n                        node = this.getCellNode(parseInt(row, 10), this.getColumnIndex(columnId));\n                        if (node) {\n                            const a = addedRowHash[columnId];\n                            addClass(node, a);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    addCellCssStyles(key: string, hash: CellStylesHash): void {\n        if (this._cellCssClasses[key]) {\n            throw \"addCellCssStyles: cell CSS hash with key '\" + key + \"' already exists.\";\n        }\n\n        this._cellCssClasses[key] = hash;\n        this.updateCellCssStylesOnRenderedRows(hash, null);\n\n        this.trigger(this.onCellCssStylesChanged, { key: key, hash: hash });\n    }\n\n    removeCellCssStyles(key: string): void {\n        if (!this._cellCssClasses[key]) {\n            return;\n        }\n\n        this.updateCellCssStylesOnRenderedRows(null, this._cellCssClasses[key]);\n        delete this._cellCssClasses[key];\n\n        this.trigger(this.onCellCssStylesChanged, { key: key, hash: null });\n    }\n\n    setCellCssStyles(key: string, hash: CellStylesHash): void {\n        var prevHash = this._cellCssClasses[key];\n\n        this._cellCssClasses[key] = hash;\n        this.updateCellCssStylesOnRenderedRows(hash, prevHash);\n\n        this.trigger(this.onCellCssStylesChanged, { key: key, hash: hash });\n    }\n\n    getCellCssStyles(key: string): CellStylesHash {\n        return this._cellCssClasses[key];\n    }\n\n    flashCell(row: number, cell: number, speed?: number): void {\n        speed = speed || 100;\n        if (this._rowsCache[row]) {\n            var cellEl = this._jQuery(this.getCellNode(row, cell));\n            toggleCellClass(4);\n        }\n\n        var klass = this._options.cellFlashingCssClass;\n\n        function toggleCellClass(times: number) {\n            if (!times) {\n                return;\n            }\n            setTimeout(function () {\n                cellEl.queue(function () {\n                    cellEl.toggleClass(klass).dequeue();\n                    toggleCellClass(times - 1);\n                });\n            }, speed);\n        }\n    }\n\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    // Interactivity\n\n    private handleDragInit(e: UIEvent, dd: any): boolean {\n        var cell = this.getCellFromEvent(e);\n        if (!cell || !this.cellExists(cell.row, cell.cell)) {\n            return false;\n        }\n\n        var retval = this.trigger(this.onDragInit, dd, e);\n        if ((e as IEventData).isImmediatePropagationStopped && (e as IEventData).isImmediatePropagationStopped()) {\n            e.preventDefault();\n            return retval;\n        }\n\n        // if nobody claims to be handling drag'n'drop by stopping immediate propagation,\n        // cancel out of it\n        return false;\n    }\n\n    private handleDragStart(e: UIEvent, dd: any): boolean {\n        var cell = this.getCellFromEvent(e);\n        if (!cell || !this.cellExists(cell.row, cell.cell)) {\n            return false;\n        }\n\n        var retval = this.trigger(this.onDragStart, dd, e);\n        if ((e as IEventData).isImmediatePropagationStopped && (e as IEventData).isImmediatePropagationStopped()) {\n            return retval;\n        }\n\n        return false;\n    }\n\n    private handleDrag(e: UIEvent, dd: any): any {\n        return this.trigger(this.onDrag, dd, e);\n    }\n\n    private handleDragEnd(e: UIEvent, dd: any): void {\n        this.trigger(this.onDragEnd, dd, e);\n    }\n\n    private handleKeyDown(e: KeyboardEvent): void {\n        this.trigger(this.onKeyDown, { row: this._activeRow, cell: this._activeCell }, e);\n        var handled = (e as IEventData).isImmediatePropagationStopped && (e as IEventData).isImmediatePropagationStopped();\n\n        if (!handled) {\n            if (!e.shiftKey && !e.altKey) {\n                if (this._options.editable && this._currentEditor && this._currentEditor.keyCaptureList) {\n                    if (this._currentEditor.keyCaptureList.indexOf(e.which) >= 0) {\n                        return;\n                    }\n                }\n\n                if (e.key === \"Home\") {\n                    if (e.ctrlKey) {\n                        this.navigateTop();\n                        handled = true;\n                    }\n                    else\n                        handled = this.navigateRowStart();\n                }\n                else if (e.key === \"End\") {\n                    if (e.ctrlKey) {\n                        this.navigateBottom();\n                        handled = true;\n                    }\n                    else\n                        handled = this.navigateRowEnd();\n                }\n            }\n        }\n\n        if (!handled) {\n            if (!e.shiftKey && !e.altKey && !e.ctrlKey) {\n\n                if (this._options.editable && this._currentEditor && this._currentEditor.keyCaptureList) {\n                    if (this._currentEditor.keyCaptureList.indexOf(e.which) >= 0) {\n                        return;\n                    }\n                }\n\n                if (e.key === \"Esc\" || e.key === \"Escape\") {\n                    if (!this.getEditorLock().isActive()) {\n                        return; // no editing mode to cancel, allow bubbling and default processing (exit without cancelling the event)\n                    }\n                    this.cancelEditAndSetFocus();\n                } else if (e.key === \"PageDown\") {\n                    this.navigatePageDown();\n                    handled = true;\n                } else if (e.key === \"PageUp\") {\n                    this.navigatePageUp();\n                    handled = true;\n                } else if (e.key === \"Left\" || e.key === \"ArrowLeft\") {\n                    handled = this.navigateLeft();\n                } else if (e.key === \"Right\" || e.key === \"ArrowRight\") {\n                    handled = this.navigateRight();\n                } else if (e.key === \"Up\" || e.key === \"ArrowUp\") {\n                    handled = this.navigateUp();\n                } else if (e.key === \"Down\" || e.key === \"ArrowDown\") {\n                    handled = this.navigateDown();\n                } else if (e.key === \"Tab\") {\n                    if (this._options.enableTabKeyNavigation)\n                        handled = this.navigateNext();\n                } else if (e.key === \"Enter\") {\n                    if (this._options.editable) {\n                        if (this._currentEditor) {\n                            // adding new row\n                            if (this._activeRow === this.getDataLength()) {\n                                this.navigateDown();\n                            } else {\n                                this.commitEditAndSetFocus();\n                            }\n                        } else {\n                            if (this.getEditorLock().commitCurrentEdit()) {\n                                this.makeActiveCellEditable();\n                            }\n                        }\n                    }\n                    handled = true;\n                }\n            } else if (e.key === \"Tab\" && e.shiftKey && !e.ctrlKey && !e.altKey) {\n                handled = this.navigatePrev();\n            }\n        }\n\n        if (handled) {\n            // the event has been handled so don't let parent element (bubbling/propagation) or browser (default) handle it\n            e.stopPropagation();\n            e.preventDefault();\n            try {\n                ((e as IEventData).originalEvent as any).keyCode = 0; // prevent default behaviour for special keys in IE browsers (F3, F5, etc.)\n            }\n            // ignore exceptions - setting the original event's keycode throws access denied exception for \"Ctrl\"\n            // (hitting control key only, nothing else), \"Shift\" (maybe others)\n            catch (error) {\n            }\n        }\n    }\n\n    private getTextSelection(){\n        var selection = null;\n\n        if (window.getSelection && window.getSelection().rangeCount > 0) {\n          selection = window.getSelection().getRangeAt(0);\n        }\n\n        return selection;\n    }\n\n    private setTextSelection(selection: Range){\n        if (window.getSelection && selection) {\n            var target = window.getSelection();\n            target.removeAllRanges();\n            target.addRange(selection);\n        }\n    }\n\n    private handleClick(e: MouseEvent): void {\n        if (!this._currentEditor) {\n            // if this click resulted in some cell child node getting focus,\n            // don't steal it back - keyboard events will still bubble up\n            // IE9+ seems to default DIVs to tabIndex=0 instead of -1, so check for cell clicks directly.\n            if (e.target != document.activeElement || (e.target as HTMLElement)?.classList?.contains?.(\"slick-cell\")) {\n                var selection = this.getTextSelection();\n                this.setFocus();\n                if (selection && this._options.enableTextSelectionOnCells) {\n                    this.setTextSelection(selection);\n                }\n            }\n        }\n\n        var cell = this.getCellFromEvent(e as any);\n        if (!cell || (this._currentEditor != null && this._activeRow == cell.row && this._activeCell == cell.cell)) {\n            return;\n        }\n\n        this.trigger(this.onClick, { row: cell.row, cell: cell.cell }, e);\n        if ((e as IEventData).isImmediatePropagationStopped && (e as IEventData).isImmediatePropagationStopped()) {\n            return;\n        }\n\n        if (this.canCellBeActive(cell.row, cell.cell)) {\n            if (!this.getEditorLock().isActive() || this.getEditorLock().commitCurrentEdit()) {\n\n                var preClickModeOn = (e.target && (e.target as HTMLElement).classList.contains(preClickClassName));\n                var column = this._cols[cell.cell];\n                var suppressActiveCellChangedEvent = !!(this._options.editable && column && column.editor && this._options.suppressActiveCellChangeOnEdit);\n                this.setActiveCellInternal(this.getCellNode(cell.row, cell.cell), null, preClickModeOn, suppressActiveCellChangedEvent, e);\n            }\n        }\n    }\n\n    private handleContextMenu(e: MouseEvent): void {\n        var cellEl = (e.target as HTMLElement).closest(\".slick-cell\");\n        if (!cellEl) {\n            return;\n        }\n\n        // are we editing this cell?\n        if (this._activeCellNode === cellEl && this._currentEditor != null) {\n            return;\n        }\n\n        this.trigger(this.onContextMenu, {}, e);\n    }\n\n    private handleDblClick(e: MouseEvent): void {\n        var cell = this.getCellFromEvent(e as any);\n        if (!cell || (this._currentEditor != null && this._activeRow == cell.row && this._activeCell == cell.cell)) {\n            return;\n        }\n\n        this.trigger(this.onDblClick, { row: cell.row, cell: cell.cell }, e);\n        if ((e as IEventData).isImmediatePropagationStopped && (e as IEventData).isImmediatePropagationStopped()) {\n            return;\n        }\n\n        if (this._options.editable) {\n            this.gotoCell(cell.row, cell.cell, true);\n        }\n    }\n\n    private handleHeaderMouseEnter(e: MouseEvent): void {\n        const column = this.getColumnFromNode(e.target as HTMLElement)\n        column && this.trigger(this.onHeaderMouseEnter, { column }, e);\n    }\n\n    private handleHeaderMouseLeave(e: MouseEvent): void {\n        const column = this.getColumnFromNode(e.target as HTMLElement)\n        column && this.trigger(this.onHeaderMouseLeave, { column }, e);\n    }\n\n    private handleHeaderContextMenu(e: any): void {\n        var header = e.target.closest(\".slick-header-column\");\n        var column = this.getColumnFromNode(header);\n        column && this.trigger(this.onHeaderContextMenu, { column }, e);\n    }\n\n    private handleHeaderClick(e: any): void {\n        var header = e.target.closest(\".slick-header-column\");\n        var column = this.getColumnFromNode(header);\n        column && this.trigger(this.onHeaderClick, { column: column }, e);\n    }\n\n    private handleMouseEnter(e: MouseEvent): void {\n        this.trigger(this.onMouseEnter, {}, e);\n    }\n\n    private handleMouseLeave(e: MouseEvent): void {\n        this.trigger(this.onMouseLeave, {}, e);\n    }\n\n    private cellExists(row: number, cell: number): boolean {\n        return !(row < 0 || row >= this.getDataLength() || cell < 0 || cell >= this._cols.length);\n    }\n\n    getCellFromPoint(x: number, y: number): { row: number; cell: number; } {\n        var row = this.getRowFromPosition(y);\n        var cell = 0;\n        var cols = this._cols;\n        var w = 0;\n        for (var i = 0; i < cols.length && w < x; i++) {\n            w += cols[i].width;\n            cell++;\n        }\n\n        if (cell < 0) {\n            cell = 0;\n        }\n\n        return { row: row, cell: cell - 1 };\n    }\n\n    getCellFromNode(cellNode: Element): number {\n        if (cellNode == null)\n            return null;\n\n        var c = (cellNode as HTMLElement).dataset.c;\n        if (c != null)\n            return parseInt(c, 10);\n\n        // read column number from .l<columnNumber> CSS class\n        var cls = /\\sl(\\d+)\\s/.exec(' ' + cellNode.className + ' ');\n        if (!cls) {\n            return null;\n        }\n        return parseInt(cls[1], 10);\n    }\n\n    getColumnFromNode(cellNode: Element): Column<TItem> {\n        if (cellNode == null)\n            return null;\n\n        var cell = this.getCellFromNode(cellNode);\n        if (cell === null && this._jQuery)\n            return this._jQuery(cell).data(\"column\") as Column<TItem>;\n\n        return this._cols[cell];\n    }\n\n    getRowFromNode(rowNode: Element): number {\n        if (rowNode != null) {\n            for (var row in this._rowsCache) {\n                var c = this._rowsCache[row];\n                if (c.rowNodeL === rowNode || c.rowNodeR === rowNode)\n                    return parseInt(row, 10);\n            }\n        }\n        return null;\n    }\n\n    getCellFromEvent(e: any): { row: number; cell: number; } {\n        var row, cell;\n        var cellEl = (e.target as HTMLElement).closest(\".slick-cell\") as HTMLElement;\n        if (!cellEl) {\n            return null;\n        }\n\n        row = this._layout.getRowFromCellNode(cellEl, e.clientX, e.clientY);\n        cell = this.getCellFromNode(cellEl);\n\n        if (row == null || cell == null) {\n            return null;\n        } else {\n            return {\n                \"row\": row,\n                \"cell\": cell\n            };\n        }\n    }\n\n    getCellNodeBox(row: number, cell: number): { top: number; right: number; bottom: number; left: number; } {\n        if (!this.cellExists(row, cell)) {\n            return null;\n        }\n\n        var rowOffset = this._layout.getFrozenRowOffset(row);\n        var cols = this._cols, frozenCols = this._layout.getFrozenCols();\n        var y1 = this.getRowTop(row) - rowOffset;\n        var y2 = y1 + this._options.rowHeight - 1;\n        var x1 = 0;\n        for (var i = 0; i < cell; i++) {\n            x1 += cols[i].width;\n            if (i == frozenCols - 1) {\n                x1 = 0;\n            }\n        }\n        var x2 = x1 + cols[cell].width;\n\n        return this._options.rtl ? {\n            top: y1,\n            right: x1,\n            bottom: y2,\n            left: x2\n        } : {\n            top: y1,\n            left: x1,\n            bottom: y2,\n            right: x2\n        }\n    }\n\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    // Cell switching\n\n    resetActiveCell(): void {\n        this.setActiveCellInternal(null, false);\n    }\n\n    focus(): void {\n        this.setFocus();\n    }\n\n    private setFocus(): void {\n        if (this._tabbingDirection == -1) {\n            this._focusSink1.focus();\n        } else {\n            this._focusSink2.focus();\n        }\n    }\n\n    scrollCellIntoView(row: number, cell: number, doPaging?: boolean): void {\n        this.scrollRowIntoView(row, doPaging);\n\n        if (cell < this._layout.getFrozenCols())\n            return;\n\n        var colspan = this.getColspan(row, cell);\n        this.internalScrollColumnIntoView(this._colLeft[cell], this._colRight[cell + (colspan > 1 ? colspan - 1 : 0)]);\n    }\n\n    scrollColumnIntoView(cell: number): void {\n        this.internalScrollColumnIntoView(this._colLeft[cell], this._colRight[cell]);\n    }\n\n    private internalScrollColumnIntoView(left: number, right: number): void {\n\n        var scrollRight = this._scrollLeft + parsePx(getComputedStyle(this._layout.getScrollContainerX()).width) -\n            (this._viewportInfo.hasVScroll ? this._scrollDims.width : 0);\n\n        var target;\n        if (left < this._scrollLeft)\n            target = left;\n        else if (right > scrollRight)\n            target = Math.min(left, right - this._layout.getScrollContainerX().clientWidth);\n        else\n            return;\n\n        this._layout.getScrollContainerX().scrollLeft = target;\n        this.handleScroll();\n        this.render();\n    }\n\n    private setActiveCellInternal(newCell: HTMLElement, opt_editMode?: boolean, preClickModeOn?: boolean, suppressActiveCellChangedEvent?: boolean, e?: any): void {\n        if (this._activeCellNode) {\n            this.makeActiveCellNormal();\n            this._activeCellNode.classList.remove(\"active\");\n            var c = this._rowsCache[this._activeRow];\n            if (c) {\n                c.rowNodeL && c.rowNodeL.classList.remove(\"active\");\n                c.rowNodeR && c.rowNodeR.classList.remove(\"active\");\n            }\n        }\n\n        this._activeCellNode = newCell;\n\n        if (this._activeCellNode) {\n            var bcl = this._activeCellNode.getBoundingClientRect();\n\n            var rowOffset = Math.floor(this._activeCellNode.closest('.grid-canvas')?.getBoundingClientRect().top ?? 0 + document.body.scrollTop);\n            var isBottom = this._activeCellNode.closest('.grid-canvas-bottom') != null;\n            if (this.hasFrozenRows() && isBottom) {\n                rowOffset -= (this._options.frozenBottom)\n                    ? Math.round(parsePx(getComputedStyle(this._layout.getCanvasNodeFor(0, 0)).height))\n                    : this._layout.getFrozenRows() * this._options.rowHeight;\n            }\n\n            var cell = this.getCellFromPoint(bcl[this._options.rtl ? 'right' : 'left'] + document.body.scrollLeft, Math.ceil(bcl.top + document.body.scrollTop) - rowOffset);\n\n            this._activeRow = cell.row;\n            this._activeCell = this._activePosX = this.getCellFromNode(this._activeCellNode);\n\n            if (this._options.showCellSelection) {\n                this._activeCellNode.classList.add(\"active\");\n                var c = this._rowsCache[this._activeRow];\n                if (c) {\n                    c.rowNodeL && c.rowNodeL.classList.add(\"active\");\n                    c.rowNodeR && c.rowNodeR.classList.add(\"active\");\n                }\n            }\n\n            if (opt_editMode == null) {\n                opt_editMode = (this._activeRow == this.getDataLength()) || this._options.autoEdit;\n            }\n\n            if (this._options.editable && opt_editMode && this.isCellPotentiallyEditable(this._activeRow, this._activeCell)) {\n                clearTimeout(this._hEditorLoader);\n\n                if (this._options.asyncEditorLoading) {\n                    this._hEditorLoader = setTimeout(() => {\n                        this.makeActiveCellEditable(undefined, preClickModeOn, e);\n                    }, this._options.asyncEditorLoadDelay);\n                } else {\n                    this.makeActiveCellEditable(undefined, preClickModeOn, e);\n                }\n            }\n        } else {\n            this._activeRow = this._activeCell = null;\n        }\n\n        if (!suppressActiveCellChangedEvent) {\n            this.trigger(this.onActiveCellChanged, this.getActiveCell() as ArgsCell);\n        }\n    }\n\n    clearTextSelection(): void {\n        if ((document as any).selection && (document as any).selection.empty) {\n            try {\n                //IE fails here if selected element is not in dom\n                (document as any).selection.empty();\n            } catch (e) { }\n        } else if (window.getSelection) {\n            var sel = window.getSelection();\n            if (sel && sel.removeAllRanges) {\n                sel.removeAllRanges();\n            }\n        }\n    }\n\n    private isCellPotentiallyEditable(row: number, cell: number): boolean {\n        var dataLength = this.getDataLength();\n        // is the data for this row loaded?\n        if (row < dataLength && !this.getDataItem(row)) {\n            return false;\n        }\n\n        // are we in the Add New row?  can we create new from this cell?\n        if (this._cols[cell].cannotTriggerInsert && row >= dataLength) {\n            return false;\n        }\n\n        // does this cell have an editor?\n        if (!this.getEditor(row, cell)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private makeActiveCellNormal(): void {\n        if (!this._currentEditor) {\n            return;\n        }\n        this.trigger(this.onBeforeCellEditorDestroy, { editor: this._currentEditor });\n        this._currentEditor.destroy();\n        this._currentEditor = null;\n\n        if (this._activeCellNode) {\n            this._activeCellNode.classList.remove(\"editable\", \"invalid\");\n            this.updateCellWithFormatter(this._activeCellNode, this._activeRow, this._activeCell);\n            this.invalidatePostProcessingResults(this._activeRow);\n        }\n\n        // if there previously was text selected on a page (such as selected text in the edit cell just removed),\n        // IE can't set focus to anything else correctly\n        if (navigator.userAgent.toLowerCase().match(/msie/)) {\n            this.clearTextSelection();\n        }\n\n        this.getEditorLock().deactivate(this._editController);\n    }\n\n    editActiveCell(editor?: EditorClass): void {\n        this.makeActiveCellEditable(editor);\n    }\n\n    private makeActiveCellEditable(editor?: EditorClass, preClickModeOn?: boolean, e?: any): void {\n        if (!this._activeCellNode) {\n            return;\n        }\n        if (!this._options.editable) {\n            throw \"Grid : makeActiveCellEditable : should never get called when options.editable is false\";\n        }\n\n        // cancel pending async call if there is one\n        clearTimeout(this._hEditorLoader);\n\n        if (!this.isCellPotentiallyEditable(this._activeRow, this._activeCell)) {\n            return;\n        }\n\n        var columnDef = this._cols[this._activeCell];\n        var item = this.getDataItem(this._activeRow);\n\n        if (this.trigger(this.onBeforeEditCell, { row: this._activeRow, cell: this._activeCell, item: item, column: columnDef }) === false) {\n            this.setFocus();\n            return;\n        }\n\n        this.getEditorLock().activate(this._editController);\n        this._activeCellNode.classList.add(\"editable\");\n\n        var useEditor = editor || this.getEditor(this._activeRow, this._activeCell);\n\n        // don't clear the cell if a custom editor is passed through\n        if (!editor && !useEditor.suppressClearOnEdit) {\n            this._activeCellNode.innerHTML = \"\";\n        }\n\n        var itemMetadata = this._data.getItemMetadata && this._data.getItemMetadata(this._activeRow) as ItemMetadata;\n        var colsMetadata = itemMetadata && itemMetadata.columns;\n        var columnMetadata = colsMetadata && (colsMetadata[columnDef.id] || colsMetadata[this._activeCell]);\n\n        this._currentEditor = new useEditor({\n            grid: this,\n            gridPosition: absBox(this._container),\n            position: absBox(this._activeCellNode),\n            container: this._activeCellNode,\n            column: columnDef,\n            columnMetaData: columnMetadata,\n            item: item || {},\n            event: e,\n            editorCellNavOnLRKeys: this._options.editorCellNavOnLRKeys,\n            commitChanges: this.commitEditAndSetFocus.bind(this),\n            cancelChanges: this.cancelEditAndSetFocus.bind(this)\n        });\n\n        if (item) {\n            this._currentEditor.loadValue(item);\n            if (preClickModeOn && this._currentEditor.preClick) {\n                this._currentEditor.preClick();\n            }\n        }\n\n        this._serializedEditorValue = this._currentEditor.serializeValue();\n\n        if (this._currentEditor.position) {\n            this.handleActiveCellPositionChange();\n        }\n    }\n\n    private commitEditAndSetFocus(): void {\n        // if the commit fails, it would do so due to a validation error\n        // if so, do not steal the focus from the editor\n        if (this.getEditorLock().commitCurrentEdit()) {\n            this.setFocus();\n            if (this._options.autoEdit) {\n                this.navigateDown();\n            }\n        }\n    }\n\n    private cancelEditAndSetFocus(): void {\n        if (this.getEditorLock().cancelCurrentEdit()) {\n            this.setFocus();\n        }\n    }\n\n    private getActiveCellPosition(): Position {\n        return absBox(this._activeCellNode);\n    }\n\n    getGridPosition(): Position {\n        return absBox(this._container);\n    }\n\n    private handleActiveCellPositionChange = (): void => {\n        if (!this._activeCellNode) {\n            return;\n        }\n\n        this.trigger(this.onActiveCellPositionChanged, {});\n\n        if (this._currentEditor) {\n            var cellBox = this.getActiveCellPosition();\n            if (this._currentEditor.show && this._currentEditor.hide) {\n                if (!cellBox.visible) {\n                    this._currentEditor.hide();\n                } else {\n                    this._currentEditor.show();\n                }\n            }\n\n            if (this._currentEditor.position) {\n                this._currentEditor.position(cellBox);\n            }\n        }\n    }\n\n    getCellEditor(): Editor {\n        return this._currentEditor;\n    }\n\n    getActiveCell(): RowCell {\n        if (!this._activeCellNode) {\n            return null;\n        } else {\n            return { row: this._activeRow, cell: this._activeCell };\n        }\n    }\n\n    getActiveCellNode(): HTMLElement {\n        return this._activeCellNode;\n    }\n\n    scrollActiveCellIntoView(): void {\n        if (this._activeRow != null && this._activeCell != null) {\n            this.scrollCellIntoView(this._activeRow, this._activeCell);\n        }\n    }\n\n    scrollRowIntoView(row: number, doPaging?: boolean): void {\n\n        if (!this._layout.isFrozenRow(row)) {\n\n            var viewportScrollH = Math.round(parsePx(getComputedStyle(this._layout.getScrollContainerY()).height));\n\n            var rowNumber = (this.hasFrozenRows() && !this._options.frozenBottom ? row - this._layout.getFrozenRows() + 1 : row);\n\n            // if frozen row on top subtract number of frozen row\n            var rowAtTop = rowNumber * this._options.rowHeight;\n            var rowAtBottom = (rowNumber + 1) * this._options.rowHeight\n                - viewportScrollH\n                + (this._viewportInfo.hasHScroll ? this._scrollDims.height : 0);\n\n            // need to page down?\n            if ((rowNumber + 1) * this._options.rowHeight > this._scrollTop + viewportScrollH + this._pageOffset) {\n                this.scrollTo(doPaging ? rowAtTop : rowAtBottom);\n                this.render();\n            }\n            // or page up?\n            else if (rowNumber * this._options.rowHeight < this._scrollTop + this._pageOffset) {\n                this.scrollTo(doPaging ? rowAtBottom : rowAtTop);\n                this.render();\n            }\n        }\n    }\n\n    scrollRowToTop(row: number): void {\n        this.scrollTo(row * this._options.rowHeight);\n        this.render();\n    }\n\n    private scrollPage(dir: number): void {\n        var deltaRows = dir * this._viewportInfo.numVisibleRows;\n        this.scrollTo((this.getRowFromPosition(this._scrollTop) + deltaRows) * this._options.rowHeight);\n        this.render();\n\n        if (this._options.enableCellNavigation && this._activeRow != null) {\n            var row = this._activeRow + deltaRows;\n            var dataLengthIncludingAddNew = this.getDataLengthIncludingAddNew();\n            if (row >= dataLengthIncludingAddNew) {\n                row = dataLengthIncludingAddNew - 1;\n            }\n            if (row < 0) {\n                row = 0;\n            }\n\n            var cell = 0, prevCell = null;\n            var prevActivePosX = this._activePosX;\n            while (cell <= this._activePosX) {\n                if (this.canCellBeActive(row, cell)) {\n                    prevCell = cell;\n                }\n                cell += this.getColspan(row, cell);\n            }\n\n            if (prevCell != null) {\n                this.setActiveCellInternal(this.getCellNode(row, prevCell));\n                this._activePosX = prevActivePosX;\n            } else {\n                this.resetActiveCell();\n            }\n        }\n    }\n\n    navigatePageDown(): void {\n        this.scrollPage(1);\n    }\n\n    navigatePageUp(): void {\n        this.scrollPage(-1);\n    }\n\n    navigateTop(): void {\n        this.navigateToRow(0);\n    }\n\n    navigateBottom(): void {\n        this.navigateToRow(this.getDataLength() - 1);\n    }\n\n    navigateToRow(row: number) {\n        var dataLength = this.getDataLength();\n        if (!dataLength) {\n            return true;\n        }\n\n        if (row < 0)\n            row = 0;\n        else if (row >= dataLength)\n            row = dataLength - 1;\n\n        this.scrollCellIntoView(row, 0, true);\n\n        if (this._options.enableCellNavigation && this._activeRow != null) {\n            var cell = 0, prevCell = null;\n            var prevActivePosX = this._activePosX;\n            while (cell <= this._activePosX) {\n                if (this.canCellBeActive(row, cell))\n                    prevCell = cell;\n                cell += this.getColspan(row, cell);\n            }\n\n            if (prevCell != null) {\n                this.setActiveCellInternal(this.getCellNode(row, prevCell));\n                this._activePosX = prevActivePosX;\n            }\n            else\n                this.resetActiveCell();\n        }\n\n        return true;\n    }\n\n    getColspan(row: number, cell: number): number {\n        var itemMetadata = this._data.getItemMetadata && this._data.getItemMetadata(row) as ItemMetadata;\n        if (!itemMetadata || !itemMetadata.columns) {\n            return 1;\n        }\n\n        var cols = this._cols;\n        var columnData = cols[cell] && (itemMetadata.columns[cols[cell].id] || itemMetadata.columns[cell]);\n        var colspan = (columnData && columnData.colspan);\n        if (colspan === \"*\") {\n            colspan = cols.length - cell;\n        } else {\n            colspan = colspan || 1;\n        }\n\n        return colspan;\n    }\n\n    navigateRight(): boolean {\n        return this.navigate(\"right\");\n    }\n\n    navigateLeft(): boolean {\n        return this.navigate(\"left\");\n    }\n\n    navigateDown(): boolean {\n        return this.navigate(\"down\");\n    }\n\n    navigateUp(): boolean {\n        return this.navigate(\"up\");\n    }\n\n    navigateNext(): boolean {\n        return this.navigate(\"next\");\n    }\n\n    navigatePrev(): boolean {\n        return this.navigate(\"prev\");\n    }\n\n    navigateRowStart(): boolean {\n        return this.navigate(\"home\");\n    }\n\n    navigateRowEnd(): boolean {\n        return this.navigate(\"end\");\n    }\n\n    /**\n     * @param {string} dir Navigation direction.\n     * @return {boolean} Whether navigation resulted in a change of active cell.\n     */\n    navigate(dir: string): boolean {\n        if (!this._options.enableCellNavigation) {\n            return false;\n        }\n\n        if (!this._activeCellNode && dir != \"prev\" && dir != \"next\") {\n            return false;\n        }\n\n        if (!this.getEditorLock().commitCurrentEdit()) {\n            return true;\n        }\n\n        this.setFocus();\n\n        if (!this._cellNavigator) {\n            this._cellNavigator = new CellNavigator({\n                getColumnCount: () => this._cols.length,\n                getRowCount: () => this.getDataLengthIncludingAddNew(),\n                getColspan: this.getColspan.bind(this),\n                canCellBeActive: this.canCellBeActive.bind(this),\n                setTabbingDirection: dir => this._tabbingDirection = dir,\n                isRTL: () => this._options.rtl\n            });\n        }\n\n        var pos = this._cellNavigator.navigate(dir, this._activeRow, this._activeCell, this._activePosX);\n        if (pos) {\n            if (this.hasFrozenRows() && this._options.frozenBottom && pos.row == this.getDataLength()) {\n                return;\n            }\n\n            var isAddNewRow = (pos.row == this.getDataLength());\n\n            if (!this._layout.isFrozenRow(pos.row)) {\n                this.scrollCellIntoView(pos.row, pos.cell, !isAddNewRow);\n            }\n\n            this.setActiveCellInternal(this.getCellNode(pos.row, pos.cell))\n            this._activePosX = pos.posX;\n            return true;\n        } else {\n            this.setActiveCellInternal(this.getCellNode(this._activeRow, this._activeCell));\n            return false;\n        }\n    }\n\n    getCellNode(row: number, cell: number): HTMLElement {\n        if (this._rowsCache[row]) {\n            this.ensureCellNodesInRowsCache(row);\n            return this._rowsCache[row].cellNodesByColumnIdx[cell];\n        }\n        return null;\n    }\n\n    setActiveCell(row: number, cell: number) {\n        if (!this._initialized) { return; }\n        var cols = this._cols;\n        if (row > this.getDataLength() || row < 0 || cell >= cols.length || cell < 0) {\n            return;\n        }\n\n        if (!this._options.enableCellNavigation) {\n            return;\n        }\n\n        this.scrollCellIntoView(row, cell, false);\n        this.setActiveCellInternal(this.getCellNode(row, cell), false);\n    }\n\n    setActiveRow(row: number, cell: number, suppressScrollIntoView?: boolean) {\n        if (!this._initialized)\n            return;\n\n        if (row > this.getDataLength() || row < 0 || cell >= this._cols.length || cell < 0)\n            return;\n\n        this._activeRow = row;\n        if (!suppressScrollIntoView)\n            this.scrollCellIntoView(row, cell || 0, false);\n    }\n\n    canCellBeActive(row: number, cell: number): boolean {\n        var cols = this._cols;\n        if (!this._options.enableCellNavigation || row >= this.getDataLengthIncludingAddNew() ||\n            row < 0 || cell >= cols.length || cell < 0) {\n            return false;\n        }\n\n        var rowMetadata = this._data.getItemMetadata && this._data.getItemMetadata(row);\n        if (rowMetadata && typeof rowMetadata.focusable === \"boolean\") {\n            return rowMetadata.focusable;\n        }\n\n        var colsMetadata = rowMetadata && rowMetadata.columns;\n        if (colsMetadata && cols[cell] && colsMetadata[cols[cell].id] && typeof colsMetadata[cols[cell].id].focusable === \"boolean\") {\n            return colsMetadata[cols[cell].id].focusable;\n        }\n        if (colsMetadata && colsMetadata[cell] && typeof colsMetadata[cell].focusable === \"boolean\") {\n            return colsMetadata[cell].focusable;\n        }\n\n        return cols[cell].focusable;\n    }\n\n    canCellBeSelected(row: number, cell: number) {\n        var cols = this._cols;\n        if (row >= this.getDataLength() || row < 0 || cell >= cols.length || cell < 0) {\n            return false;\n        }\n\n        var itemMetadata = this._data.getItemMetadata && this._data.getItemMetadata(row);\n        if (itemMetadata && typeof itemMetadata.selectable === \"boolean\") {\n            return itemMetadata.selectable;\n        }\n\n        var columnMetadata = itemMetadata && itemMetadata.columns && (itemMetadata.columns[cols[cell].id] || itemMetadata.columns[cell]);\n        if (columnMetadata && typeof columnMetadata.selectable === \"boolean\") {\n            return columnMetadata.selectable;\n        }\n\n        return cols[cell].selectable;\n    }\n\n    gotoCell(row: number, cell: number, forceEdit?: boolean) {\n        if (!this._initialized) { return; }\n        if (!this.canCellBeActive(row, cell)) {\n            return;\n        }\n\n        if (!this.getEditorLock().commitCurrentEdit()) {\n            return;\n        }\n\n        this.scrollCellIntoView(row, cell, false);\n\n        var newCell = this.getCellNode(row, cell);\n\n        // if selecting the 'add new' row, start editing right away\n        this.setActiveCellInternal(newCell, forceEdit || (row === this.getDataLength()) || this._options.autoEdit);\n\n        // if no editor was created, set the focus back on the grid\n        if (!this._currentEditor) {\n            this.setFocus();\n        }\n    }\n\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    // IEditor implementation for the editor lock\n\n    commitCurrentEdit(): boolean {\n        var item = this.getDataItem(this._activeRow);\n        var column = this._cols[this._activeCell];\n        var self = this;\n\n        if (this._currentEditor) {\n            if (this._currentEditor.isValueChanged()) {\n                var validationResults = this._currentEditor.validate();\n\n                if (validationResults.valid) {\n                    if (this._activeRow < this.getDataLength()) {\n                        var editCommand: EditCommand = {\n                            row: this._activeRow,\n                            cell: self._activeCell,\n                            editor: this._currentEditor,\n                            serializedValue: this._currentEditor.serializeValue(),\n                            prevSerializedValue: this._serializedEditorValue,\n                            execute: function () {\n                                this.editor.applyValue(item, this.serializedValue);\n                                self.updateRow(this.row);\n                                self.trigger(self.onCellChange, {\n                                    row: this.activeRow,\n                                    cell: self._activeCell,\n                                    item: item\n                                });\n                            },\n                            undo: function () {\n                                this.editor.applyValue(item, this.prevSerializedValue);\n                                self.updateRow(this.row);\n                                self.trigger(self.onCellChange, {\n                                    row: this.activeRow,\n                                    cell: self._activeCell,\n                                    item: item\n                                });\n                            }\n                        };\n\n                        if (this._options.editCommandHandler) {\n                            this.makeActiveCellNormal();\n                            this._options.editCommandHandler(item, column, editCommand);\n                        } else {\n                            editCommand.execute();\n                            this.makeActiveCellNormal();\n                        }\n\n                    } else {\n                        var newItem = {} as TItem;\n                        this._currentEditor.applyValue(newItem, this._currentEditor.serializeValue());\n                        this.makeActiveCellNormal();\n                        this.trigger(this.onAddNewRow, { item: newItem, column: column });\n                    }\n\n                    // check whether the lock has been re-acquired by event handlers\n                    return !this.getEditorLock().isActive();\n                } else {\n                    // Re-add the CSS class to trigger transitions, if any.\n                    this._activeCellNode.classList.remove(\"invalid\");\n                    this._activeCellNode.offsetWidth;  // force layout\n                    this._activeCellNode.classList.add(\"invalid\");\n\n                    this.trigger(this.onValidationError, {\n                        editor: this._currentEditor,\n                        cellNode: this._activeCellNode,\n                        validationResults: validationResults,\n                        row: this._activeRow,\n                        cell: this._activeCell,\n                        column: column\n                    });\n\n                    this._currentEditor.focus();\n                    return false;\n                }\n            }\n\n            this.makeActiveCellNormal();\n        }\n        return true;\n    }\n\n    private cancelCurrentEdit() {\n        this.makeActiveCellNormal();\n        return true;\n    }\n\n    private rowsToRanges(rows: number[]): CellRange[] {\n        var ranges = [];\n        var lastCell = this._cols.length - 1;\n        for (var i = 0; i < rows.length; i++) {\n            ranges.push(new CellRange(rows[i], 0, rows[i], lastCell));\n        }\n        return ranges;\n    }\n\n    getSelectedRows(): number[] {\n        if (!this._selectionModel) {\n            throw \"Selection model is not set\";\n        }\n        return this._selectedRows;\n    }\n\n    setSelectedRows(rows: number[]) {\n        if (!this._selectionModel) {\n            throw \"Selection model is not set\";\n        }\n        this._selectionModel.setSelectedRanges(this.rowsToRanges(rows));\n    }\n}\n\n"],
  "mappings": "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",
  "names": ["grid_exports", "__export", "BasicLayout", "Grid", "gridDefaults", "addClass", "applyFormatterResultToCellNode", "basicRegexSanitizer", "columnDefaults", "convertCompatFormatter", "ensureUniqueColumnIds", "escapeHtml", "defaultColumnFormat", "disableSelection", "EventEmitter", "EventData", "GlobalEditorLock", "initializeColumns", "H", "keyCode", "NonDataRow", "parsePx", "preClickClassName", "CellRange", "removeClass", "RowCell", "spacerDiv", "titleize", "gridDefaults", "defaultColumnFormat", "GlobalEditorLock", "BasicLayout", "host", "canvasWidth", "headersWidth", "canvas", "headerCols", "headerRowCols", "headerRowSpacer", "footerRowCols", "footerRowSpacer", "topPanel", "viewport", "init", "hostGrid", "spacerW", "calcCanvasWidth", "options", "uisd", "H", "headerColsS", "updateHeadersWidth", "spacerDiv", "headerRow", "topPanelS", "footerRow", "appendCachedRow", "_", "rowNode", "applyColumnWidths", "x", "w", "rule", "cols", "opts", "rtl", "styles", "i", "prop", "oldVal", "newVal", "bindAncestorScrollEvents", "elem", "rowWidth", "scrollWidth", "ii", "destroy", "getCanvasNodeFor", "getCanvasNodes", "getCanvasWidth", "getHeaderCols", "getHeaderColumn", "cell", "getHeaderRowCols", "getHeaderRowColumn", "getHeaderRowColsFor", "getFooterRowColumn", "getFooterRowColsFor", "getHeaderColsFor", "getFooterRowCols", "getRowFromCellNode", "cellNode", "getTopPanelFor", "getTopPanelNodes", "getViewportNodeFor", "getViewportNodes", "handleScrollH", "noop", "realScrollHeightChange", "reorderViewColumns", "viewCols", "returnFalse", "setOverflow", "alwaysVS", "updateCanvasWidth", "oldCanvasWidth", "vpi", "canvasWidthPx", "spacerWidthPx", "resizeCanvas", "vs", "_paneTopH", "parsePx", "returnZero", "intf", "CellNavigator", "h", "row", "cell", "cols", "lastFocusableCell", "firstFocusableCell", "prev", "pos", "posX", "prevCell", "rowCount", "dataLengthIncludingAddNew", "lastSelectableCell", "newCell", "dir", "activeRow", "activeCell", "activePosX", "tabbingDirections", "rtl", "stepFunctions", "stepFn", "windowScrollPosition", "_a", "_b", "_c", "_d", "Draggable", "options", "containerElement", "onDragInit", "onDragStart", "onDrag", "onDragEnd", "preventDragFromKeys", "element", "startX", "startY", "deltaX", "deltaY", "dragStarted", "originaldd", "init", "userPressed", "executeDragCallbackWhenDefined", "callback", "evt", "dd", "destroy", "preventDrag", "event", "eventPrevented", "key", "targetEvent", "target", "winScrollPos", "userMoved", "userReleased", "maxSupportedCssHeight", "scrollbarDimensions", "absBox", "elem", "box", "offsetParent", "autosizeColumns", "cols", "availWidth", "absoluteColMinWidth", "c", "widths", "shrinkLeeway", "total", "prevTotal", "shrinkProportion", "width", "absMinWidth", "shrinkSize", "growProportion", "currentWidth", "growSize", "reRender", "getMaxSupportedCssHeight", "recalc", "getScrollBarDimensions", "H", "simpleArrayEquals", "arr1", "arr2", "i", "sortToDesiredOrderAndKeepRest", "columns", "idOrder", "orderById", "colIdxById", "result", "takeFrom", "j", "id", "calcMinMaxPageXOnDragStart", "colIdx", "pageX", "forceFit", "shrinkLeewayOnRight", "stretchLeewayOnRight", "shrinkLeewayOnLeft", "stretchLeewayOnLeft", "shrinkOrStretchColumn", "d", "x", "actualMinWidth", "addUiStateHover", "removeUiStateHover", "getVBoxDelta", "el", "style", "p", "delta", "val", "parsePx", "getInnerWidth", "_a", "Grid", "_Grid", "container", "data", "columns", "options", "EventEmitter", "ranges", "previousSelectedRows", "hash", "cols", "i", "j", "k", "simpleArrayEquals", "caller", "newSelectedAdditions", "newSelectedDeletions", "_", "args", "getScrollBarDimensions", "visible", "rendered", "scrollLeft", "dataLength", "row", "cacheEntry", "x", "columnIdx", "m", "processedStatus", "node", "cellBox", "_a", "_b", "_c", "_d", "columnDefaults", "gridDefaults", "basicRegexSanitizer", "H", "BasicLayout", "vp", "addClass", "elem", "viewports", "onEvent", "el", "type", "listener", "scrollTicking", "e", "hs", "disableSelection", "fs", "canvases", "canvas", "Draggable", "plugin", "name", "model", "columnIdOrIdx", "forceColumnWidthsUpdate", "columnId", "title", "toolTip", "idx", "columnDef", "header", "child", "cell", "footerRowCols", "frc", "footerRowCell", "hc", "hrc", "frozenCols", "headerTarget", "addUiStateHover", "removeUiStateHover", "headerRowTarget", "headerRowCell", "handler", "tgt", "colNode", "column", "sortOpts", "col", "box", "docElem", "columnScrollTimer", "scrollColumnsLeft", "scrollColumnsRight", "canDragScroll", "sortableOptions", "reorderedCols", "sortToDesiredOrderAndKeepRest", "minPageX", "pageX", "maxPageX", "columnElements", "c", "firstResizable", "lastResizable", "handle", "noJQueryDrag", "colIdx", "docDragOver", "lastDragOverPos", "dragStart", "z", "minMax", "calcMinMaxPageXOnDragStart", "drag", "dist", "thisPageX", "thisPageY", "shrinkOrStretchColumn", "dragEnd", "newWidth", "invalidate", "h", "v", "cs", "val", "parsePx", "r", "cellHeight", "style", "rules", "stylesheetFromUid", "sheets", "cssRules", "matches", "selector", "canvasNodes", "ev", "evt", "EventData", "id", "vpi", "availWidth", "reRender", "autosizeColumns", "colCount", "diff", "target", "ascending", "headerColumnEls", "hel", "si", "columnIndex", "l", "initCols", "initializeColumns", "initColById", "viewCols", "viewColById", "suppressRender", "suppressColumnSet", "suppressSetOverflow", "newData", "scrollToTop", "animate", "n", "y", "oldOffset", "newScrollTop", "range", "itemMetadata", "colsMetadata", "columnMetadata", "convertCompatFormatter", "opt", "factory", "format", "compat", "defaultColumnFormat", "item", "ctx", "escapeHtml", "stringArrayL", "stringArrayR", "d", "dataLoading", "rowCss", "rowOffset", "rowHtml", "colspan", "ii", "columnData", "isFrozen", "sb", "metadata", "_e", "_f", "_g", "klass", "key", "formatResult", "attrs", "ks", "cache", "rangeToKeep", "postProcessedRow", "cellnode", "rowIdx", "rows", "rl", "cellNode", "applyFormatterResultToCellNode", "layout", "vs", "getInnerWidth", "getVBoxDelta", "pagingInfo", "dataLengthIncludingAddNew", "scrollCanvas", "oldH", "numberOfRows", "frozenRows", "tempViewportH", "oldViewportHasVScroll", "getMaxSupportedCssHeight", "oldScrollTopInRange", "viewportTop", "viewportLeft", "buffer", "minBuffer", "lastChild", "element", "cellsToRemove", "cellToRemove", "stringArray", "processedRows", "cellsAdded", "cellContents", "btm", "processedRow", "needToReselectCell", "postProcessed", "p", "totals", "formatter", "content", "p1", "p2", "grid", "delta", "deltaX", "deltaY", "isMouseWheel", "vScrollDist", "hScrollDist", "groupId", "entry", "addedHash", "removedHash", "addedRowHash", "removedRowHash", "removeClass", "prevHash", "speed", "cellEl", "toggleCellClass", "times", "dd", "retval", "handled", "error", "selection", "preClickModeOn", "preClickClassName", "suppressActiveCellChangedEvent", "w", "cls", "rowNode", "y1", "y2", "x1", "x2", "doPaging", "left", "right", "scrollRight", "newCell", "opt_editMode", "bcl", "isBottom", "sel", "editor", "useEditor", "absBox", "viewportScrollH", "rowNumber", "rowAtTop", "rowAtBottom", "dir", "deltaRows", "prevCell", "prevActivePosX", "CellNavigator", "pos", "isAddNewRow", "suppressScrollIntoView", "rowMetadata", "forceEdit", "self", "validationResults", "editCommand", "newItem", "lastCell", "CellRange"]
}

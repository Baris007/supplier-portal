{
  "version": 3,
  "sources": ["../../src/core/index.ts", "../../src/core/base.ts", "../../src/core/column.ts", "../../src/core/editing.ts", "../../src/core/event.ts", "../../src/core/util.ts", "../../src/core/formatting.ts", "../../src/core/group.ts", "../../src/core/cellrange.ts"],
  "sourcesContent": ["export * from \"./base\";\nexport * from \"./column\";\nexport * from \"./editing\";\nexport * from \"./event\";\nexport * from \"./formatting\";\nexport * from \"./group\";\nexport * from \"./cellrange\";\nexport * from \"./util\";\n\n", "/***\n * A base class that all special / non-data rows (like Group and GroupTotals) derive from.\n */\nexport class NonDataRow {\n    __nonDataRow: boolean = true;\n}\n\nexport const preClickClassName = \"slick-edit-preclick\";", "import { EditorClass, ValidationResult } from \"./editing\";\nimport type { AsyncPostCleanup, AsyncPostRender, ColumnFormat, CompatFormatter } from \"./formatting\";\nimport { GroupTotals } from \"./group\";\n\nexport interface Column<TItem = any> {\n    asyncPostRender?: AsyncPostRender<TItem>;\n    asyncPostRenderCleanup?: AsyncPostCleanup<TItem>;\n    behavior?: any;\n    cannotTriggerInsert?: boolean;\n    cssClass?: string;\n    defaultSortAsc?: boolean;\n    editor?: EditorClass;\n    editorFixedDecimalPlaces?: number;\n    field?: string;\n    frozen?: boolean;\n    focusable?: boolean;\n    footerCssClass?: string;\n    format?: ColumnFormat<TItem>;\n    /** @deprecated */\n    formatter?: CompatFormatter<TItem>;\n    groupTotalsFormatter?: (p1?: GroupTotals<TItem>, p2?: Column<TItem>, grid?: unknown) => string;\n    headerCssClass?: string;\n    id?: string;\n    maxWidth?: any;\n    minWidth?: number;\n    name?: string;\n    nameIsHtml?: boolean;\n    previousWidth?: number;\n    referencedFields?: string[];\n    rerenderOnResize?: boolean;\n    resizable?: boolean;\n    selectable?: boolean;\n    sortable?: boolean;\n    sortOrder?: number;\n    toolTip?: string;\n    validator?: (value: any, editorArgs?: any) => ValidationResult;\n    visible?: boolean;\n    width?: number;\n}\n\nexport const columnDefaults: Partial<Column> = {\n    nameIsHtml: false,\n    resizable: true,\n    sortable: false,\n    minWidth: 30,\n    rerenderOnResize: false,\n    defaultSortAsc: true,\n    focusable: true,\n    selectable: true\n};\n\nexport interface ColumnMetadata<TItem = any> {\n    colspan: number | '*';\n    cssClasses?: string;\n    editor?: EditorClass;\n    format?: ColumnFormat<TItem>;\n    /** @deprecated */\n    formatter?: CompatFormatter<TItem>;\n}\n\nexport interface ColumnSort {\n    columnId: string;\n    sortAsc?: boolean;\n}\n\nexport interface ItemMetadata<TItem = any> {\n    cssClasses?: string;\n    columns?: { [key: string]: ColumnMetadata<TItem> };\n    focusable?: boolean;\n    format?: ColumnFormat<TItem>;\n    /** @deprecated */\n    formatter?: CompatFormatter<TItem>;\n    selectable?: boolean;\n}\n\nexport function initializeColumns(columns: Column[], defaults: Partial<Column<any>>) {\n    var usedIds: { [key: string]: boolean } = {};\n\n    for (var i = 0; i < columns.length; i++) {\n        var m = columns[i];\n\n        if (defaults != null) {\n            for (var k in defaults) {\n                if ((m as any)[k] === undefined)\n                    (m as any)[k] = (defaults as any)[k];\n            }\n        }\n\n        if (m.minWidth && m.width < m.minWidth)\n            m.width = m.minWidth;\n\n        if (m.maxWidth && m.width > m.maxWidth)\n            m.width = m.maxWidth;\n\n        if (m.id == null ||\n            usedIds[m.id]) {\n            const prefix = m.id != null && m.id.length ? m.id :\n                m.field != null ? m.field : ('col');\n            var x = 0;\n            while (usedIds[(m.id = prefix + (x == 0 ? \"\" : '_' + x.toString()))]) x++;\n        }\n\n        usedIds[m.id] = true;\n\n        if (m.name === void 0) {\n            m.name = titleize(m.field ?? m.id);\n            delete m.nameIsHtml;\n        }\n    }\n}\n\nexport function titleize(str: string) {\n    if (!str)\n        return str;\n\n    str = (\"\" + str).replace(/([A-Z]+)([A-Z][a-z])/, \"$1_$2\")\n        .replace(/([a-z\\d])([A-Z])/, \"$1_$2\")\n        .replace(/[-\\s]/, \"_\").toLowerCase();\n\n    return str.replace(/\\s/, '_').split('_').filter(x => x.length)\n        .map(x => x.charAt(0).toUpperCase() + x.substring(1).toLowerCase()).join(' ');\n}\n", "import { Column, ColumnMetadata } from \"./column\";\nimport { EventEmitter, IEventData } from \"./event\";\n\nexport interface Position {\n    bottom?: number;\n    height?: number;\n    left?: number;\n    right?: number;\n    top?: number;\n    visible?: boolean;\n    width?: number;\n}\n\nexport interface ValidationResult {\n    valid: boolean;\n    msg?: string;\n}\n\nexport interface RowCell {\n    row: number;\n    cell: number;\n}\n\nexport interface EditorHost {\n    getActiveCell(): RowCell;\n    navigateNext(): boolean;\n    navigatePrev(): boolean;\n    onCompositeEditorChange: EventEmitter<any>;\n}\n\ninterface CompositeEditorOptions {\n    formValues: any;\n}\n\nexport interface EditorOptions {\n    grid: EditorHost;\n    gridPosition?: Position;\n    position?: Position;\n    editorCellNavOnLRKeys?: boolean;\n    column?: Column;\n    columnMetaData?: ColumnMetadata<any>;\n    compositeEditorOptions?: CompositeEditorOptions;\n    container?: HTMLElement;\n    item?: any;\n    event?: IEventData;\n    commitChanges?: () => void,\n    cancelChanges?: () => void\n}\n\nexport interface EditorFactory {\n    getEditor(column: Column, row?: number): EditorClass;\n}\n\nexport interface EditCommand {\n    row: number;\n    cell: number;\n    editor: Editor;\n    serializedValue: any;\n    prevSerializedValue: any;\n    execute: () => void;\n    undo: () => void;\n}\n\nexport interface EditorClass {\n    new(options: EditorOptions): Editor;\n    suppressClearOnEdit?: boolean;\n}\n\nexport interface Editor {\n    destroy(): void;\n    applyValue(item: any, value: any): void;\n    focus(): void;\n    isValueChanged(): boolean;\n    keyCaptureList?: number[];\n    loadValue(value: any): void;\n    serializeValue(): any;\n    position?(pos: Position): void;\n    preClick?(): void;\n    hide?(): void;\n    show?(): void;\n    validate?(): ValidationResult;\n}\n\nexport interface EditController {\n    commitCurrentEdit(): boolean;\n    cancelCurrentEdit(): boolean;\n}\n\n/***\n * A locking helper to track the active edit controller and ensure that only a single controller\n * can be active at a time.  This prevents a whole class of state and validation synchronization\n * issues.  An edit controller (such as SleekGrid) can query if an active edit is in progress\n * and attempt a commit or cancel before proceeding.\n * @class EditorLock\n * @constructor\n */\nexport class EditorLock {\n    declare private activeEditController: EditController;\n\n    /***\n     * Returns true if a specified edit controller is active (has the edit lock).\n     * If the parameter is not specified, returns true if any edit controller is active.\n     * @method isActive\n     * @param editController {EditController}\n     * @return {Boolean}\n     */\n    isActive(editController?: EditController): boolean {\n        return (editController ? this.activeEditController === editController : this.activeEditController != null);\n    }\n\n    /***\n     * Sets the specified edit controller as the active edit controller (acquire edit lock).\n     * If another edit controller is already active, and exception will be thrown.\n     * @method activate\n     * @param editController {EditController} edit controller acquiring the lock\n     */\n    activate(editController: EditController) {\n        if (editController === this.activeEditController) { // already activated?\n            return;\n        }\n        if (this.activeEditController != null) {\n            throw \"SleekGrid.EditorLock.activate: an editController is still active, can't activate another editController\";\n        }\n        if (!editController.commitCurrentEdit) {\n            throw \"SleekGrid.EditorLock.activate: editController must implement .commitCurrentEdit()\";\n        }\n        if (!editController.cancelCurrentEdit) {\n            throw \"SleekGrid.EditorLock.activate: editController must implement .cancelCurrentEdit()\";\n        }\n        this.activeEditController = editController;\n    }\n\n    /***\n     * Unsets the specified edit controller as the active edit controller (release edit lock).\n     * If the specified edit controller is not the active one, an exception will be thrown.\n     * @method deactivate\n     * @param editController {EditController} edit controller releasing the lock\n     */\n    deactivate(editController: EditController) {\n        if (this.activeEditController !== editController) {\n            throw \"SleekGrid.EditorLock.deactivate: specified editController is not the currently active one\";\n        }\n        this.activeEditController = null;\n    }\n\n    /***\n     * Attempts to commit the current edit by calling \"commitCurrentEdit\" method on the active edit\n     * controller and returns whether the commit attempt was successful (commit may fail due to validation\n     * errors, etc.).  Edit controller's \"commitCurrentEdit\" must return true if the commit has succeeded\n     * and false otherwise.  If no edit controller is active, returns true.\n     * @method commitCurrentEdit\n     * @return {Boolean}\n     */\n    commitCurrentEdit(): boolean {\n        return (this.activeEditController ? this.activeEditController.commitCurrentEdit() : true);\n    }\n\n    /***\n     * Attempts to cancel the current edit by calling \"cancelCurrentEdit\" method on the active edit\n     * controller and returns whether the edit was successfully cancelled.  If no edit controller is\n     * active, returns true.\n     * @method cancelCurrentEdit\n     * @return {Boolean}\n     */\n    cancelCurrentEdit(): boolean {\n        return (this.activeEditController ? this.activeEditController.cancelCurrentEdit() : true);\n    }\n}\n\n/***\n * A global singleton editor lock.\n * @class GlobalEditorLock\n * @static\n * @constructor\n */\nexport const GlobalEditorLock = new EditorLock();\n", "export interface IEventData {\n    readonly type?: string;\n    currentTarget?: EventTarget | null;\n    target?: EventTarget | null;\n    originalEvent?: any;\n    defaultPrevented?: boolean;\n    preventDefault?(): void;\n    stopPropagation?(): void;\n    stopImmediatePropagation?(): void;\n    isDefaultPrevented?(): boolean;\n    isImmediatePropagationStopped?(): boolean;\n    isPropagationStopped?(): boolean;\n}\n\n/***\n * An event object for passing data to event handlers and letting them control propagation.\n * <p>This is pretty much identical to how W3C and jQuery implement events.</p>\n */\nexport class EventData implements IEventData {\n    private _isPropagationStopped = false;\n    private _isImmediatePropagationStopped = false;\n\n    /***\n     * Stops event from propagating up the DOM tree.\n     * @method stopPropagation\n     */\n    stopPropagation() {\n        this._isPropagationStopped = true;\n    }\n\n    /***\n     * Returns whether stopPropagation was called on this event object.\n     */\n    isPropagationStopped(): boolean {\n        return this._isPropagationStopped;\n    }\n\n    /***\n     * Prevents the rest of the handlers from being executed.\n     */\n    stopImmediatePropagation() {\n        this._isImmediatePropagationStopped = true;\n    }\n\n    /***\n     * Returns whether stopImmediatePropagation was called on this event object.\\\n     */\n    isImmediatePropagationStopped(): boolean {\n        return this._isImmediatePropagationStopped;\n    }\n}\n\n/***\n * A simple publisher-subscriber implementation.\n */\nexport class EventEmitter<TArgs = any, TEventData extends IEventData = IEventData> {\n\n    private _handlers: ((e: TEventData, args: TArgs) => void)[] = [];\n\n    /***\n     * Adds an event handler to be called when the event is fired.\n     * <p>Event handler will receive two arguments - an <code>EventData</code> and the <code>data</code>\n     * object the event was fired with.<p>\n     * @method subscribe\n     * @param fn {Function} Event handler.\n     */\n    subscribe(fn: ((e: TEventData, args: TArgs) => void)) {\n        this._handlers.push(fn);\n    }\n\n    /***\n     * Removes an event handler added with <code>subscribe(fn)</code>.\n     * @method unsubscribe\n     * @param fn {Function} Event handler to be removed.\n     */\n    unsubscribe(fn: ((e: TEventData, args: TArgs) => void)) {\n        for (var i = this._handlers.length - 1; i >= 0; i--) {\n            if (this._handlers[i] === fn) {\n                this._handlers.splice(i, 1);\n            }\n        }\n    }\n\n    /***\n     * Fires an event notifying all subscribers.\n     * @param args {Object} Additional data object to be passed to all handlers.\n     * @param e {EventData}\n     *      Optional.\n     *      An <code>EventData</code> object to be passed to all handlers.\n     *      For DOM events, an existing W3C/jQuery event object can be passed in.\n     * @param scope {Object}\n     *      Optional.\n     *      The scope (\"this\") within which the handler will be executed.\n     *      If not specified, the scope will be set to the <code>Event</code> instance.\n     */\n    notify(args?: any, e?: TEventData, scope?: object) {\n        e = patchEvent(e) || new EventData() as any;\n        scope = scope || this;\n\n        var returnValue;\n        for (var i = 0; i < this._handlers.length && !(e.isPropagationStopped() || e.isImmediatePropagationStopped()); i++) {\n            returnValue = this._handlers[i].call(scope, e, args);\n        }\n\n        return returnValue;\n    }\n\n    clear() {\n        this._handlers = [];\n    }\n}\n\ninterface EventSubscriberEntry<TArgs = any, TEventData extends IEventData = IEventData> {\n    event: EventEmitter<TArgs, TEventData>;\n    handler: ((e: TEventData, args: TArgs) => void);\n}\n\nexport class EventSubscriber<TArgs = any, TEventData extends IEventData = IEventData>  {\n    private _handlers: EventSubscriberEntry<TArgs, TEventData>[] = [];\n\n    subscribe(event: EventEmitter<TArgs, TEventData>, handler: ((e: TEventData, args: TArgs) => void)): this {\n        this._handlers.push({\n            event: event,\n            handler: handler\n        });\n        event.subscribe(handler);\n\n        return this;\n    }\n\n    unsubscribe(event: EventEmitter<TArgs, TEventData>, handler: ((e: TEventData, args: TArgs) => void)): this {\n        var i = this._handlers.length;\n        while (i--) {\n            if (this._handlers[i].event === event &&\n                this._handlers[i].handler === handler) {\n                this._handlers.splice(i, 1);\n                event.unsubscribe(handler);\n                return this;\n            }\n        }\n\n        return this;\n    }\n\n    unsubscribeAll(): EventSubscriber<TArgs, TEventData> {\n        var i = this._handlers.length;\n        while (i--) {\n            this._handlers[i].event.unsubscribe(this._handlers[i].handler);\n        }\n        this._handlers = [];\n\n        return this;  // allow chaining\n    }\n}\n\n/** @deprecated */\nexport const keyCode = {\n    BACKSPACE: 8,\n    DELETE: 46,\n    DOWN: 40,\n    END: 35,\n    ENTER: 13,\n    ESCAPE: 27,\n    HOME: 36,\n    INSERT: 45,\n    LEFT: 37,\n    PAGEDOWN: 34,\n    PAGEUP: 33,\n    RIGHT: 39,\n    TAB: 9,\n    UP: 38\n}\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// patches event so that it has methods jQuery event objects provides, for backward compatibility when jQuery is not loaded\nexport function patchEvent(e: IEventData) {\n    if (e == null)\n        return e;\n\n    if (!e.isDefaultPrevented && e.preventDefault)\n        e.isDefaultPrevented = function() { return this.defaultPrevented; }\n\n    var org1: () => void, org2: () => void;\n    if (!e.isImmediatePropagationStopped && (org1 = e.stopImmediatePropagation)) {\n        e.isImmediatePropagationStopped = returnFalse;\n        e.stopImmediatePropagation = function() { this.isImmediatePropagationStopped = returnTrue; org1.call(this); }\n    }\n\n    if (!e.isPropagationStopped && (org2 = e.stopPropagation)) {\n        e.isPropagationStopped = returnFalse;\n        e.stopPropagation = function() { this.isPropagationStopped = returnTrue; org2.call(this); }\n    }\n\n    return e;\n}\n", "export function addClass(el: Element, cls: string) {\n    if (cls == null || !cls.length)\n        return;\n\n    if (cls.indexOf(' ') >= 0) {\n        var arr = cls.split(' ').map(x => x.trim()).filter(x => x.length);\n        for (var a of arr)\n            el.classList.add(a);\n    }\n    else\n        el.classList.add(cls);\n}\n\nconst esc: Record<string, string> = {\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": \"&apos;\",\n    '&': '&amp;',\n}\n\nfunction escFunc(a: string) {\n    return esc[a];\n}\n\nexport function escapeHtml(s: any) {\n    if (!arguments.length && this) {\n        s = this.value;\n    }\n\n    if (s == null)\n        return '';\n\n    if (typeof s !== \"string\")\n        s = \"\" + s;\n\n    return s.replace(/[<>\"'&]/g, escFunc)\n}\n\nexport function basicRegexSanitizer(dirtyHtml: string) {\n    return (dirtyHtml ?? \"\").replace(/(\\b)(on[a-z]+)(\\s*)=|javascript:([^>]*)[^>]*|(<\\s*)(\\/*)script([<>]*).*(<\\s*)(\\/*)script(>*)|(&lt;)(\\/*)(script|script defer)(.*)(&gt;|&gt;\">)/gi, '');\n}\n\nexport function disableSelection(target: HTMLElement) {\n    if (target) {\n        target.setAttribute('unselectable', 'on');\n        target.style.userSelect = \"none\";\n        target.addEventListener('selectstart', () => false);\n    }\n}\n\nexport function removeClass(el: Element, cls: string) {\n    if (cls == null || !cls.length)\n        return;\n\n    if (cls.indexOf(' ') >= 0) {\n        var arr = cls.split(' ').map(x => x.trim()).filter(x => x.length);\n        for (var a of arr)\n            el.classList.remove(a);\n    }\n    else\n        el.classList.remove(cls);\n}\n\nexport function H<K extends keyof HTMLElementTagNameMap>(tag: K, attr?: { ref?: (el?: HTMLElementTagNameMap[K]) => void, [key: string]: string | number | boolean | ((el?: HTMLElementTagNameMap[K]) => void) | null | undefined }, ...children: (string | Node)[]): HTMLElementTagNameMap[K] {\n    var el = document.createElement(tag);\n    var k: string, v: any, c: Node | string;\n    if (attr) {\n        for (k in attr) {\n            v = attr[k];\n            if (v != null && v !== false) {\n                if (k === \"ref\" && typeof v === \"function\") {\n                    (v as any)(el);\n                    continue;\n                }\n\n                var key = k === \"className\" ? \"class\" : k;\n                el.setAttribute(key, v === true ? '' : v as string);\n            }\n        }\n    }\n\n    if (children && children.length)\n        el.append(...children);\n\n    return el;\n}\n\nexport function spacerDiv(width: string): HTMLDivElement {\n    return H('div', { style: 'display:block;height:1px;position:absolute;top:0;left:0;', width });\n}\n\nexport function parsePx(str: string) {\n    var value = parseFloat(str);\n    if (isNaN(value))\n        return 0;\n    return value;\n}\n", "import type { Column } from \"./column\";\nimport { addClass, escapeHtml, removeClass } from \"./util\";\n\n/**\n * Context object for column formatters. It provides access to the\n * current cell value, row index, column index, etc.\n * Use grid.getFormatterContext() to create a new instance.\n */\nexport interface FormatterContext<TItem = any> {\n\n    /**\n     * Additional attributes to be added to the cell node.\n     */\n    addAttrs?: { [key: string]: string; };\n\n    /**\n     * Additional classes to be added to the cell node.\n     */\n    addClass?: string;\n\n    /**\n     * Returns html escaped ctx.value if called without arguments.\n     * prefer this over ctx.value to avoid html injection attacks!\n     */\n    escape(value?: any): string;\n\n    /**\n     * The row index of the cell.\n     */\n    row?: number;\n\n    /**\n     * The column index of the cell.\n     */\n    cell?: number;\n\n    /**\n     * The column definition of the cell.\n     */\n    column?: Column<TItem>;\n\n    /**\n     * The grid instance.\n     */\n    grid?: any;\n\n    /**\n     * The item of the row.\n     */\n    item?: TItem;\n\n    /**\n     * Tooltip text to be added to the cell node as title attribute.\n     */\n    tooltip?: string;\n\n    /** when returning a formatter result, prefer ctx.escape() to avoid script injection attacks! */\n    value?: any;\n}\n\nexport type FormatterResult = (string | Element | DocumentFragment);\nexport type ColumnFormat<TItem = any> = (ctx: FormatterContext<TItem>) => FormatterResult;\n\nexport interface CompatFormatterResult {\n    addClasses?: string;\n    text?: FormatterResult;\n    toolTip?: string;\n}\n\nexport type CompatFormatter<TItem = any> = (row: number, cell: number, value: any, column: Column<TItem>, item: TItem, grid?: any) => string | CompatFormatterResult;\n\nexport interface FormatterFactory<TItem = any> {\n    getFormat?(column: Column<TItem>): ColumnFormat<TItem>;\n    getFormatter?(column: Column<TItem>): CompatFormatter<TItem>;\n}\n\nexport type AsyncPostRender<TItem = any> = (cellNode: HTMLElement, row: number, item: TItem, column: Column<TItem>, reRender: boolean) => void;\nexport type AsyncPostCleanup<TItem = any> = (cellNode: HTMLElement, row?: number, column?: Column<TItem>) => void;\n\nexport type CellStylesHash = { [row: number]: { [columnId: string]: string } }\n\nexport function defaultColumnFormat(ctx: FormatterContext) {\n    return escapeHtml(ctx.value);\n}\n\nexport function convertCompatFormatter(compatFormatter: CompatFormatter): ColumnFormat {\n    if (compatFormatter == null)\n        return null;\n\n    return function(ctx: FormatterContext): FormatterResult {\n        var fmtResult = compatFormatter(ctx.row, ctx.cell, ctx.value, ctx.column, ctx.item, ctx.grid);\n        if (fmtResult != null && typeof fmtResult !== 'string' && Object.prototype.toString.call(fmtResult) === '[object Object]') {\n            ctx.addClass = fmtResult.addClasses;\n            ctx.tooltip = fmtResult.toolTip;\n            return fmtResult.text;\n        }\n        return fmtResult as string;\n    }\n}\n\nexport function applyFormatterResultToCellNode(ctx: FormatterContext, html: FormatterResult, node: HTMLElement) {\n    var oldFmtAtt = node.dataset.fmtatt as string;\n    if (oldFmtAtt?.length > 0) {\n        for (var k of oldFmtAtt.split(','))\n            node.removeAttribute(k);\n        delete node.dataset.fmtatt;\n    }\n\n    var oldFmtCls = node.dataset.fmtcls;\n    if (oldFmtCls?.length && (ctx.addClass != oldFmtCls)) {\n        removeClass(node, oldFmtCls);\n        if (!ctx.addClass?.length)\n            delete node.dataset.fmtcls;\n    }\n\n    var oldTooltip = node.getAttribute('tooltip');\n    if (oldTooltip != null && ctx.tooltip != oldTooltip)\n        node.removeAttribute('tooltip');\n\n    if (ctx.tooltip !== undefined && oldTooltip != ctx.tooltip)\n        node.setAttribute('tooltip', ctx.tooltip);\n\n    if (html == void 0)\n        node.innerHTML = \"\";\n    else if (html instanceof Node) {\n        node.appendChild(html);\n    }\n    else\n        node.innerHTML = \"\" + html;\n\n    if (ctx.addAttrs != null) {\n        var keys = Object.keys(ctx.addAttrs);\n        if (keys.length) {\n            for (var k of keys) {\n                node.setAttribute(k, ctx.addAttrs[k]);\n            }\n            node.dataset.fmtatt = keys.join(',');\n        }\n    }\n\n    if (ctx.addClass?.length) {\n        addClass(node, ctx.addClass);\n        node.dataset.fmtcls = ctx.addClass;\n    }\n}\n", "import { NonDataRow } from \"./base\";\n\n/***\n * Information about a group of rows.\n */\nexport class Group<TEntity = any> extends NonDataRow {\n    readonly __group = true;\n\n    /**\n     * Grouping level, starting with 0.\n     * @property level\n     * @type {Number}\n     */\n    level: number = 0;\n\n    /***\n     * Number of rows in the group.\n     * @property count\n     * @type {Number}\n     */\n    count: number = 0;\n\n    /***\n     * Grouping value.\n     * @property value\n     * @type {Object}\n     */\n    value: any;\n\n    /***\n     * Formatted display value of the group.\n     * @property title\n     * @type {String}\n     */\n    title: string;\n\n    /***\n     * Whether a group is collapsed.\n     * @property collapsed\n     * @type {Boolean}\n     */\n    collapsed: boolean = false;\n\n    /***\n     * GroupTotals, if any.\n     * @property totals\n     * @type {GroupTotals}\n     */\n    totals: GroupTotals<TEntity>;\n\n    /**\n     * Rows that are part of the group.\n     * @property rows\n     * @type {Array}\n     */\n    rows: TEntity[] = [];\n\n    /**\n     * Sub-groups that are part of the group.\n     * @property groups\n     * @type {Array}\n     */\n    groups: Group<TEntity>[];\n\n    /**\n     * A unique key used to identify the group.  This key can be used in calls to DataView\n     * collapseGroup() or expandGroup().\n     * @property groupingKey\n     * @type {Object}\n     */\n    groupingKey: string;\n\n\n  /***\n   * Compares two Group instances.\n   * @method equals\n   * @return {Boolean}\n   * @param group {Group} Group instance to compare to.\n   */\n    equals(group: Group): boolean {\n        return this.value === group.value &&\n            this.count === group.count &&\n            this.collapsed === group.collapsed &&\n            this.title === group.title;\n    }\n}\n\n/***\n * Information about group totals.\n * An instance of GroupTotals will be created for each totals row and passed to the aggregators\n * so that they can store arbitrary data in it.  That data can later be accessed by group totals\n * formatters during the display.\n * @class GroupTotals\n * @extends NonDataRow\n * @constructor\n */\n export class GroupTotals<TEntity = any> extends NonDataRow {\n\n    readonly __groupTotals = true;\n\n    /***\n     * Parent Group.\n     * @param group\n     * @type {Group}\n     */\n    group: Group<TEntity>;\n\n    /***\n     * Whether the totals have been fully initialized / calculated.\n     * Will be set to false for lazy-calculated group totals.\n     * @param initialized\n     * @type {Boolean}\n     */\n    initialized: boolean = false;\n\n    /**\n     * Contains sum\n     */\n    sum?: number;\n\n    /**\n     * Contains avg\n     */\n    avg?: number;\n\n    /**\n     * Contains min\n     */\n    min?: any;\n\n    /**\n     * Contains max\n     */\n    max?: any;\n}\n", "/*\n * A structure containing a range of cells.\n * @param fromRow {Integer} Starting row.\n * @param fromCell {Integer} Starting cell.\n * @param toRow {Integer} Optional. Ending row. Defaults to <code>fromRow</code>.\n * @param toCell {Integer} Optional. Ending cell. Defaults to <code>fromCell</code>.\n */\nexport class CellRange {\n\n    declare public fromRow: number;\n    declare public fromCell: number;\n    declare public toRow: number;\n    declare public toCell: number;\n\n    constructor(fromRow: number, fromCell: number, toRow?: number, toCell?: number) {\n        if (toRow === undefined && toCell === undefined) {\n            toRow = fromRow;\n            toCell = fromCell;\n        }\n\n        this.fromRow = Math.min(fromRow, toRow);\n        this.fromCell = Math.min(fromCell, toCell);\n        this.toRow = Math.max(fromRow, toRow);\n        this.toCell = Math.max(fromCell, toCell);\n    }\n\n    /***\n     * Returns whether a range represents a single row.\n     */\n    isSingleRow(): boolean {\n        return this.fromRow == this.toRow;\n    }\n\n    /***\n     * Returns whether a range represents a single cell.\n     */\n    isSingleCell(): boolean {\n        return this.fromRow == this.toRow && this.fromCell == this.toCell;\n    }\n\n    /***\n     * Returns whether a range contains a given cell.\n     */\n    contains(row: number, cell: number): boolean {\n        return row >= this.fromRow && row <= this.toRow &&\n            cell >= this.fromCell && cell <= this.toCell;\n    }\n\n    /***\n     * Returns a readable representation of a range.\n     */\n    toString(): string {\n        if (this.isSingleCell()) {\n            return \"(\" + this.fromRow + \":\" + this.fromCell + \")\";\n        }\n        else {\n            return \"(\" + this.fromRow + \":\" + this.fromCell + \" - \" + this.toRow + \":\" + this.toCell + \")\";\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["core_exports", "__export", "CellRange", "EditorLock", "EventData", "EventEmitter", "EventSubscriber", "GlobalEditorLock", "Group", "GroupTotals", "H", "NonDataRow", "addClass", "applyFormatterResultToCellNode", "basicRegexSanitizer", "columnDefaults", "convertCompatFormatter", "defaultColumnFormat", "disableSelection", "escapeHtml", "initializeColumns", "keyCode", "parsePx", "patchEvent", "preClickClassName", "removeClass", "spacerDiv", "titleize", "NonDataRow", "preClickClassName", "columnDefaults", "initializeColumns", "columns", "defaults", "_a", "usedIds", "i", "m", "k", "prefix", "x", "titleize", "str", "EditorLock", "editController", "GlobalEditorLock", "EventData", "EventEmitter", "fn", "i", "args", "e", "scope", "patchEvent", "returnValue", "EventSubscriber", "event", "handler", "keyCode", "returnTrue", "returnFalse", "org1", "org2", "addClass", "el", "cls", "arr", "x", "a", "esc", "escFunc", "escapeHtml", "s", "basicRegexSanitizer", "dirtyHtml", "disableSelection", "target", "removeClass", "H", "tag", "attr", "children", "k", "v", "c", "key", "spacerDiv", "width", "parsePx", "str", "value", "defaultColumnFormat", "ctx", "escapeHtml", "convertCompatFormatter", "compatFormatter", "fmtResult", "applyFormatterResultToCellNode", "html", "node", "_a", "_b", "oldFmtAtt", "k", "oldFmtCls", "removeClass", "oldTooltip", "keys", "addClass", "Group", "NonDataRow", "group", "GroupTotals", "CellRange", "fromRow", "fromCell", "toRow", "toCell", "row", "cell"]
}

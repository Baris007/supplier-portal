{
  "version": 3,
  "sources": ["../../../src/plugins/autotooltips.ts"],
  "sourcesContent": ["import { ArgsColumn, Grid, IPlugin } from \"../grid\";\n\nexport interface AutoTooltipsOptions {\n    enableForCells?: boolean;\n    enableForHeaderCells?: boolean;\n    maxToolTipLength?: number;\n    replaceExisting?: boolean;\n}\n\nexport class AutoTooltips implements IPlugin {\n\n    declare private grid: Grid;\n    declare private options: AutoTooltipsOptions;\n\n    constructor(options?: AutoTooltipsOptions) {\n        this.options = Object.assign({}, AutoTooltips.defaults, options);\n    }\n\n    public static readonly defaults: AutoTooltipsOptions = {\n        enableForCells: true,\n        enableForHeaderCells: false,\n        maxToolTipLength: null,\n        replaceExisting: true\n    }\n\n    init(grid: Grid) {\n        this.grid = grid;\n\n        if (this.options.enableForCells)\n            this.grid.onMouseEnter.subscribe(this.handleMouseEnter);\n\n        if (this.options.enableForHeaderCells)\n            this.grid.onHeaderMouseEnter.subscribe(this.handleHeaderMouseEnter);\n    }\n\n    destroy() {\n        if (this.options.enableForCells)\n            this.grid.onMouseEnter.unsubscribe(this.handleMouseEnter);\n\n        if (this.options.enableForHeaderCells)\n            this.grid.onHeaderMouseEnter.unsubscribe(this.handleHeaderMouseEnter);\n    }\n\n    private handleMouseEnter = (e: MouseEvent) => {\n        var cell = this.grid.getCellFromEvent(e);\n        if (!cell)\n            return;\n        var node = this.grid.getCellNode(cell.row, cell.cell);\n        if (!node)\n            return;\n        var text;\n        if (!node.title || this.options.replaceExisting) {\n            if (node.clientWidth < node.scrollWidth) {\n                text = node.textContent?.trim() ?? \"\";\n                if (this.options.maxToolTipLength &&\n                    text.length > this.options.maxToolTipLength) {\n                    text = text.substring(0, this.options.maxToolTipLength - 3) + \"...\";\n                }\n            } else {\n                text = \"\";\n            }\n            node.title = text;\n        }\n        node = null;\n    }\n\n    private handleHeaderMouseEnter = (e: MouseEvent, args: ArgsColumn) => {\n        var column = args.column;\n        if (column && !column.toolTip) {\n            var node = (e.target as HTMLElement).closest(\".slick-header-column\") as HTMLElement;\n            node && (node.title = (node.clientWidth < node.scrollWidth ? column.name : \"\"));\n        }\n    }\n\n    public pluginName = \"AutoTooltips\";\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AASO,MAAM,gBAAN,MAAM,cAAgC;AAAA,IAKzC,YAAY,SAA+B;AA6B3C,WAAQ,mBAAmB,CAAC,MAAkB;AA3ClD;AA4CQ,YAAI,OAAO,KAAK,KAAK,iBAAiB,CAAC;AACvC,YAAI,CAAC;AACD;AACJ,YAAI,OAAO,KAAK,KAAK,YAAY,KAAK,KAAK,KAAK,IAAI;AACpD,YAAI,CAAC;AACD;AACJ,YAAI;AACJ,YAAI,CAAC,KAAK,SAAS,KAAK,QAAQ,iBAAiB;AAC7C,cAAI,KAAK,cAAc,KAAK,aAAa;AACrC,oBAAO,gBAAK,gBAAL,mBAAkB,WAAlB,YAA4B;AACnC,gBAAI,KAAK,QAAQ,oBACb,KAAK,SAAS,KAAK,QAAQ,kBAAkB;AAC7C,qBAAO,KAAK,UAAU,GAAG,KAAK,QAAQ,mBAAmB,CAAC,IAAI;AAAA,YAClE;AAAA,UACJ,OAAO;AACH,mBAAO;AAAA,UACX;AACA,eAAK,QAAQ;AAAA,QACjB;AACA,eAAO;AAAA,MACX;AAEA,WAAQ,yBAAyB,CAAC,GAAe,SAAqB;AAClE,YAAI,SAAS,KAAK;AAClB,YAAI,UAAU,CAAC,OAAO,SAAS;AAC3B,cAAI,OAAQ,EAAE,OAAuB,QAAQ,sBAAsB;AACnE,mBAAS,KAAK,QAAS,KAAK,cAAc,KAAK,cAAc,OAAO,OAAO;AAAA,QAC/E;AAAA,MACJ;AAEA,WAAO,aAAa;AA3DhB,WAAK,UAAU,OAAO,OAAO,CAAC,GAAG,cAAa,UAAU,OAAO;AAAA,IACnE;AAAA,IASA,KAAK,MAAY;AACb,WAAK,OAAO;AAEZ,UAAI,KAAK,QAAQ;AACb,aAAK,KAAK,aAAa,UAAU,KAAK,gBAAgB;AAE1D,UAAI,KAAK,QAAQ;AACb,aAAK,KAAK,mBAAmB,UAAU,KAAK,sBAAsB;AAAA,IAC1E;AAAA,IAEA,UAAU;AACN,UAAI,KAAK,QAAQ;AACb,aAAK,KAAK,aAAa,YAAY,KAAK,gBAAgB;AAE5D,UAAI,KAAK,QAAQ;AACb,aAAK,KAAK,mBAAmB,YAAY,KAAK,sBAAsB;AAAA,IAC5E;AAAA,EAkCJ;AAzDI,EATS,cASc,WAAgC;AAAA,IACnD,gBAAgB;AAAA,IAChB,sBAAsB;AAAA,IACtB,kBAAkB;AAAA,IAClB,iBAAiB;AAAA,EACrB;AAdG,MAAM,eAAN;",
  "names": []
}

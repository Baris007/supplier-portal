{
  "version": 3,
  "sources": ["../../../src/plugins/autotooltips.ts"],
  "sourcesContent": ["import { ArgsColumn, Grid, IPlugin } from \"../grid\";\n\nexport interface AutoTooltipsOptions {\n    enableForCells?: boolean;\n    enableForHeaderCells?: boolean;\n    maxToolTipLength?: number;\n    replaceExisting?: boolean;\n}\n\nexport class AutoTooltips implements IPlugin {\n\n    declare private grid: Grid;\n    declare private options: AutoTooltipsOptions;\n\n    constructor(options?: AutoTooltipsOptions) {\n        this.options = Object.assign({}, AutoTooltips.defaults, options);\n    }\n\n    public static readonly defaults: AutoTooltipsOptions = {\n        enableForCells: true,\n        enableForHeaderCells: false,\n        maxToolTipLength: null,\n        replaceExisting: true\n    }\n\n    init(grid: Grid) {\n        this.grid = grid;\n\n        if (this.options.enableForCells)\n            this.grid.onMouseEnter.subscribe(this.handleMouseEnter);\n\n        if (this.options.enableForHeaderCells)\n            this.grid.onHeaderMouseEnter.subscribe(this.handleHeaderMouseEnter);\n    }\n\n    destroy() {\n        if (this.options.enableForCells)\n            this.grid.onMouseEnter.unsubscribe(this.handleMouseEnter);\n\n        if (this.options.enableForHeaderCells)\n            this.grid.onHeaderMouseEnter.unsubscribe(this.handleHeaderMouseEnter);\n    }\n\n    private handleMouseEnter = (e: MouseEvent) => {\n        var cell = this.grid.getCellFromEvent(e);\n        if (!cell)\n            return;\n        var node = this.grid.getCellNode(cell.row, cell.cell);\n        if (!node)\n            return;\n        var text;\n        if (!node.title || this.options.replaceExisting) {\n            if (node.clientWidth < node.scrollWidth) {\n                text = node.textContent?.trim() ?? \"\";\n                if (this.options.maxToolTipLength &&\n                    text.length > this.options.maxToolTipLength) {\n                    text = text.substring(0, this.options.maxToolTipLength - 3) + \"...\";\n                }\n            } else {\n                text = \"\";\n            }\n            node.title = text;\n        }\n        node = null;\n    }\n\n    private handleHeaderMouseEnter = (e: MouseEvent, args: ArgsColumn) => {\n        var column = args.column;\n        if (column && !column.toolTip) {\n            var node = (e.target as HTMLElement).closest(\".slick-header-column\") as HTMLElement;\n            node && (node.title = (node.clientWidth < node.scrollWidth ? column.name : \"\"));\n        }\n    }\n\n    public pluginName = \"AutoTooltips\";\n}\n"],
  "mappings": "8bAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,kBAAAE,IASO,IAAMC,EAAN,MAAMA,CAAgC,CAKzC,YAAYC,EAA+B,CA6B3C,KAAQ,iBAAoB,GAAkB,CA3ClD,IAAAC,EAAAC,EA4CQ,IAAIC,EAAO,KAAK,KAAK,iBAAiB,CAAC,EACvC,GAAKA,EAEL,KAAIC,EAAO,KAAK,KAAK,YAAYD,EAAK,IAAKA,EAAK,IAAI,EACpD,GAAKC,EAEL,KAAIC,GACA,CAACD,EAAK,OAAS,KAAK,QAAQ,mBACxBA,EAAK,YAAcA,EAAK,aACxBC,GAAOH,GAAAD,EAAAG,EAAK,cAAL,YAAAH,EAAkB,SAAlB,KAAAC,EAA4B,GAC/B,KAAK,QAAQ,kBACbG,EAAK,OAAS,KAAK,QAAQ,mBAC3BA,EAAOA,EAAK,UAAU,EAAG,KAAK,QAAQ,iBAAmB,CAAC,EAAI,QAGlEA,EAAO,GAEXD,EAAK,MAAQC,GAEjBD,EAAO,MACX,EAEA,KAAQ,uBAAyB,CAAC,EAAeE,IAAqB,CAClE,IAAIC,EAASD,EAAK,OAClB,GAAIC,GAAU,CAACA,EAAO,QAAS,CAC3B,IAAIH,EAAQ,EAAE,OAAuB,QAAQ,sBAAsB,EACnEA,IAASA,EAAK,MAASA,EAAK,YAAcA,EAAK,YAAcG,EAAO,KAAO,GAC/E,CACJ,EAEA,KAAO,WAAa,eA3DhB,KAAK,QAAU,OAAO,OAAO,CAAC,EAAGR,EAAa,SAAUC,CAAO,CACnE,CASA,KAAKQ,EAAY,CACb,KAAK,KAAOA,EAER,KAAK,QAAQ,gBACb,KAAK,KAAK,aAAa,UAAU,KAAK,gBAAgB,EAEtD,KAAK,QAAQ,sBACb,KAAK,KAAK,mBAAmB,UAAU,KAAK,sBAAsB,CAC1E,CAEA,SAAU,CACF,KAAK,QAAQ,gBACb,KAAK,KAAK,aAAa,YAAY,KAAK,gBAAgB,EAExD,KAAK,QAAQ,sBACb,KAAK,KAAK,mBAAmB,YAAY,KAAK,sBAAsB,CAC5E,CAkCJ,EAlEaT,EASc,SAAgC,CACnD,eAAgB,GAChB,qBAAsB,GACtB,iBAAkB,KAClB,gBAAiB,EACrB,EAdG,IAAMD,EAANC",
  "names": ["autotooltips_exports", "__export", "AutoTooltips", "_AutoTooltips", "options", "_a", "_b", "cell", "node", "text", "args", "column", "grid"]
}

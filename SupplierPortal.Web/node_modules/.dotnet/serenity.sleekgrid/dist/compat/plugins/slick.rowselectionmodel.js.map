{
  "version": 3,
  "sources": ["../../../src/plugins/rowselectionmodel.ts", "global-externals:_"],
  "sourcesContent": ["import { EventEmitter, EventSubscriber, IEventData, CellRange } from \"../core\";\nimport { ArgsCell, Grid, IPlugin, SelectionModel } from \"../grid\";\n\nexport interface RowSelectionModelOptions {\n    selectActiveRow?: boolean;\n}\n\nfunction getRowsRange(from: number, to: number): number[] {\n    let i: number, rows: number[] = [];\n    for (i = from; i <= to; i++) {\n        rows.push(i);\n    }\n    for (i = to; i < from; i++) {\n        rows.push(i);\n    }\n    return rows;\n}\n\nfunction rangesToRows(ranges: CellRange[]) {\n    let rows = [];\n    for (let i = 0; i < ranges.length; i++) {\n        for (let j = ranges[i].fromRow; j <= ranges[i].toRow; j++) {\n            rows.push(j);\n        }\n    }\n    return rows;\n}\n\nexport class RowSelectionModel implements IPlugin, SelectionModel {\n    declare private grid: Grid;\n    private handler = new EventSubscriber();\n    declare private options: RowSelectionModelOptions;\n    declare private ranges: CellRange[];\n    onSelectedRangesChanged = new EventEmitter<CellRange[]>();\n\n    constructor(options?: RowSelectionModelOptions) {\n        this.options = Object.assign({}, RowSelectionModel.defaults, options);\n    }\n\n    public static readonly defaults: RowSelectionModelOptions = {\n        selectActiveRow: true\n    }\n\n    init(grid: Grid): void {\n        this.grid = grid;\n        this.handler.subscribe(grid.onActiveCellChanged, this.wrapHandler(this.handleActiveCellChange));\n        this.handler.subscribe(grid.onKeyDown, this.wrapHandler(this.handleKeyDown));\n        this.handler.subscribe(grid.onClick, this.wrapHandler(this.handleClick));\n    }\n\n    destroy(): void {\n        this.handler?.unsubscribeAll();\n    }\n\n    private wrapHandler(handler: Function): () => void {\n        return (function() {\n            if (!this.inHandler) {\n                this.inHandler = true;\n                handler.apply(this, arguments);\n                this.inHandler = false;\n            }\n        }).bind(this);\n    }\n\n    private rowsToRanges(rows: number[]): CellRange[] {\n        let ranges = [];\n        let lastCell = this.grid.getColumns().length - 1;\n        for (let i = 0; i < rows.length; i++) {\n            ranges.push(new CellRange(rows[i], 0, rows[i], lastCell));\n        }\n        return ranges;\n    }\n\n\n    getSelectedRows(): number[] {\n        return rangesToRows(this.ranges);\n    }\n\n    setSelectedRows(rows: number[]): void {\n        this.setSelectedRanges(this.rowsToRanges(rows));\n    }\n\n    setSelectedRanges(ranges: CellRange[]): void {\n        // simle check for: empty selection didn't change, prevent firing onSelectedRangesChanged\n        if ((!this.ranges || this.ranges.length === 0) && (!ranges || ranges.length === 0))\n            return;\n        this.ranges = ranges;\n        this.onSelectedRangesChanged.notify(this.ranges);\n    }\n\n    getSelectedRanges(): CellRange[] {\n        return this.ranges;\n    }\n\n    private handleActiveCellChange(_: IEventData, data: ArgsCell) {\n        if (this.options.selectActiveRow && data.row != null) {\n            this.setSelectedRanges([new CellRange(data.row, 0, data.row, this.grid.getColumns().length - 1)]);\n        }\n    }\n\n    private handleKeyDown(e: KeyboardEvent) {\n        let activeRow = this.grid.getActiveCell();\n        if (!(activeRow && e.shiftKey && !e.ctrlKey && !e.altKey && !e.metaKey && (e.which == 38 || e.which == 40)))\n            return;\n\n        let selectedRows = this.getSelectedRows();\n        selectedRows.sort(function (x, y) {\n            return x - y\n        });\n\n        if (!selectedRows.length) {\n            selectedRows = [activeRow.row];\n        }\n\n        let top = selectedRows[0];\n        let bottom = selectedRows[selectedRows.length - 1];\n        let active;\n\n        if (e.which == 40) {\n            active = activeRow.row < bottom || top == bottom ? ++bottom : ++top;\n        } else {\n            active = activeRow.row < bottom ? --bottom : --top;\n        }\n\n        if (active >= 0 && active < this.grid.getDataLength()) {\n            this.grid.scrollRowIntoView(active);\n            this.ranges = this.rowsToRanges(getRowsRange(top, bottom));\n            this.setSelectedRanges(this.ranges);\n        }\n\n        e.preventDefault();\n        e.stopPropagation();\n    }\n\n    private handleClick(e: MouseEvent) {\n        let cell = this.grid.getCellFromEvent(e);\n        if (!cell || !this.grid.canCellBeActive(cell.row, cell.cell)) {\n            return false;\n        }\n\n        if (!this.grid.getOptions().multiSelect || (\n            !e.ctrlKey && !e.shiftKey && !e.metaKey)) {\n            return false;\n        }\n\n        let selection = rangesToRows(this.ranges);\n        let idx = selection.indexOf(cell.row);\n\n        if (idx === -1 && (e.ctrlKey || e.metaKey)) {\n            selection.push(cell.row);\n            this.grid.setActiveCell(cell.row, cell.cell);\n        } else if (idx !== -1 && (e.ctrlKey || e.metaKey)) {\n            selection = selection.filter(o => {\n                return (o !== cell.row);\n            });\n            this.grid.setActiveCell(cell.row, cell.cell);\n        } else if (selection.length && e.shiftKey) {\n            let last = selection.pop();\n            let from = Math.min(cell.row, last);\n            let to = Math.max(cell.row, last);\n            selection = [];\n            for (let i = from; i <= to; i++) {\n                if (i !== last) {\n                    selection.push(i);\n                }\n            }\n            selection.push(last);\n            this.grid.setActiveCell(cell.row, cell.cell);\n        }\n\n        this.ranges = this.rowsToRanges(selection);\n        this.setSelectedRanges(this.ranges);\n        e.stopImmediatePropagation();\n\n        return true;\n    }\n}\n", "const { EventEmitter, EventSubscriber, CellRange } = Slick;export {\n     EventEmitter, EventSubscriber, CellRange\n};"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;;;ACAA,MAAM,EAAE,cAAc,iBAAiB,UAAU,IAAI;;;ADOrD,WAAS,aAAa,MAAc,IAAsB;AACtD,QAAI,GAAW,OAAiB,CAAC;AACjC,SAAK,IAAI,MAAM,KAAK,IAAI,KAAK;AACzB,WAAK,KAAK,CAAC;AAAA,IACf;AACA,SAAK,IAAI,IAAI,IAAI,MAAM,KAAK;AACxB,WAAK,KAAK,CAAC;AAAA,IACf;AACA,WAAO;AAAA,EACX;AAEA,WAAS,aAAa,QAAqB;AACvC,QAAI,OAAO,CAAC;AACZ,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,eAAS,IAAI,OAAO,CAAC,EAAE,SAAS,KAAK,OAAO,CAAC,EAAE,OAAO,KAAK;AACvD,aAAK,KAAK,CAAC;AAAA,MACf;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAEO,MAAM,qBAAN,MAAM,mBAAqD;AAAA,IAO9D,YAAY,SAAoC;AALhD,WAAQ,UAAU,IAAI,gBAAgB;AAGtC,qCAA0B,IAAI,aAA0B;AAGpD,WAAK,UAAU,OAAO,OAAO,CAAC,GAAG,mBAAkB,UAAU,OAAO;AAAA,IACxE;AAAA,IAMA,KAAK,MAAkB;AACnB,WAAK,OAAO;AACZ,WAAK,QAAQ,UAAU,KAAK,qBAAqB,KAAK,YAAY,KAAK,sBAAsB,CAAC;AAC9F,WAAK,QAAQ,UAAU,KAAK,WAAW,KAAK,YAAY,KAAK,aAAa,CAAC;AAC3E,WAAK,QAAQ,UAAU,KAAK,SAAS,KAAK,YAAY,KAAK,WAAW,CAAC;AAAA,IAC3E;AAAA,IAEA,UAAgB;AAlDpB;AAmDQ,iBAAK,YAAL,mBAAc;AAAA,IAClB;AAAA,IAEQ,YAAY,SAA+B;AAC/C,aAAQ,WAAW;AACf,YAAI,CAAC,KAAK,WAAW;AACjB,eAAK,YAAY;AACjB,kBAAQ,MAAM,MAAM,SAAS;AAC7B,eAAK,YAAY;AAAA,QACrB;AAAA,MACJ,EAAG,KAAK,IAAI;AAAA,IAChB;AAAA,IAEQ,aAAa,MAA6B;AAC9C,UAAI,SAAS,CAAC;AACd,UAAI,WAAW,KAAK,KAAK,WAAW,EAAE,SAAS;AAC/C,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,eAAO,KAAK,IAAI,UAAU,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,QAAQ,CAAC;AAAA,MAC5D;AACA,aAAO;AAAA,IACX;AAAA,IAGA,kBAA4B;AACxB,aAAO,aAAa,KAAK,MAAM;AAAA,IACnC;AAAA,IAEA,gBAAgB,MAAsB;AAClC,WAAK,kBAAkB,KAAK,aAAa,IAAI,CAAC;AAAA,IAClD;AAAA,IAEA,kBAAkB,QAA2B;AAEzC,WAAK,CAAC,KAAK,UAAU,KAAK,OAAO,WAAW,OAAO,CAAC,UAAU,OAAO,WAAW;AAC5E;AACJ,WAAK,SAAS;AACd,WAAK,wBAAwB,OAAO,KAAK,MAAM;AAAA,IACnD;AAAA,IAEA,oBAAiC;AAC7B,aAAO,KAAK;AAAA,IAChB;AAAA,IAEQ,uBAAuB,GAAe,MAAgB;AAC1D,UAAI,KAAK,QAAQ,mBAAmB,KAAK,OAAO,MAAM;AAClD,aAAK,kBAAkB,CAAC,IAAI,UAAU,KAAK,KAAK,GAAG,KAAK,KAAK,KAAK,KAAK,WAAW,EAAE,SAAS,CAAC,CAAC,CAAC;AAAA,MACpG;AAAA,IACJ;AAAA,IAEQ,cAAc,GAAkB;AACpC,UAAI,YAAY,KAAK,KAAK,cAAc;AACxC,UAAI,EAAE,aAAa,EAAE,YAAY,CAAC,EAAE,WAAW,CAAC,EAAE,UAAU,CAAC,EAAE,YAAY,EAAE,SAAS,MAAM,EAAE,SAAS;AACnG;AAEJ,UAAI,eAAe,KAAK,gBAAgB;AACxC,mBAAa,KAAK,SAAU,GAAG,GAAG;AAC9B,eAAO,IAAI;AAAA,MACf,CAAC;AAED,UAAI,CAAC,aAAa,QAAQ;AACtB,uBAAe,CAAC,UAAU,GAAG;AAAA,MACjC;AAEA,UAAI,MAAM,aAAa,CAAC;AACxB,UAAI,SAAS,aAAa,aAAa,SAAS,CAAC;AACjD,UAAI;AAEJ,UAAI,EAAE,SAAS,IAAI;AACf,iBAAS,UAAU,MAAM,UAAU,OAAO,SAAS,EAAE,SAAS,EAAE;AAAA,MACpE,OAAO;AACH,iBAAS,UAAU,MAAM,SAAS,EAAE,SAAS,EAAE;AAAA,MACnD;AAEA,UAAI,UAAU,KAAK,SAAS,KAAK,KAAK,cAAc,GAAG;AACnD,aAAK,KAAK,kBAAkB,MAAM;AAClC,aAAK,SAAS,KAAK,aAAa,aAAa,KAAK,MAAM,CAAC;AACzD,aAAK,kBAAkB,KAAK,MAAM;AAAA,MACtC;AAEA,QAAE,eAAe;AACjB,QAAE,gBAAgB;AAAA,IACtB;AAAA,IAEQ,YAAY,GAAe;AAC/B,UAAI,OAAO,KAAK,KAAK,iBAAiB,CAAC;AACvC,UAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,gBAAgB,KAAK,KAAK,KAAK,IAAI,GAAG;AAC1D,eAAO;AAAA,MACX;AAEA,UAAI,CAAC,KAAK,KAAK,WAAW,EAAE,eACxB,CAAC,EAAE,WAAW,CAAC,EAAE,YAAY,CAAC,EAAE,SAAU;AAC1C,eAAO;AAAA,MACX;AAEA,UAAI,YAAY,aAAa,KAAK,MAAM;AACxC,UAAI,MAAM,UAAU,QAAQ,KAAK,GAAG;AAEpC,UAAI,QAAQ,OAAO,EAAE,WAAW,EAAE,UAAU;AACxC,kBAAU,KAAK,KAAK,GAAG;AACvB,aAAK,KAAK,cAAc,KAAK,KAAK,KAAK,IAAI;AAAA,MAC/C,WAAW,QAAQ,OAAO,EAAE,WAAW,EAAE,UAAU;AAC/C,oBAAY,UAAU,OAAO,OAAK;AAC9B,iBAAQ,MAAM,KAAK;AAAA,QACvB,CAAC;AACD,aAAK,KAAK,cAAc,KAAK,KAAK,KAAK,IAAI;AAAA,MAC/C,WAAW,UAAU,UAAU,EAAE,UAAU;AACvC,YAAI,OAAO,UAAU,IAAI;AACzB,YAAI,OAAO,KAAK,IAAI,KAAK,KAAK,IAAI;AAClC,YAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI;AAChC,oBAAY,CAAC;AACb,iBAAS,IAAI,MAAM,KAAK,IAAI,KAAK;AAC7B,cAAI,MAAM,MAAM;AACZ,sBAAU,KAAK,CAAC;AAAA,UACpB;AAAA,QACJ;AACA,kBAAU,KAAK,IAAI;AACnB,aAAK,KAAK,cAAc,KAAK,KAAK,KAAK,IAAI;AAAA,MAC/C;AAEA,WAAK,SAAS,KAAK,aAAa,SAAS;AACzC,WAAK,kBAAkB,KAAK,MAAM;AAClC,QAAE,yBAAyB;AAE3B,aAAO;AAAA,IACX;AAAA,EACJ;AAzII,EAXS,mBAWc,WAAqC;AAAA,IACxD,iBAAiB;AAAA,EACrB;AAbG,MAAM,oBAAN;",
  "names": []
}

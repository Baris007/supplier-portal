{
  "version": 3,
  "sources": ["../../src/data/groupitemmetadataprovider.ts", "global-externals:_"],
  "sourcesContent": ["import { Column, ColumnFormat, CompatFormatter, convertCompatFormatter, FormatterContext, Group, GroupTotals, ItemMetadata } from \"../core\";\nimport { ArgsCell, Grid } from \"../grid\";\n\nexport interface GroupItemMetadataProviderOptions {\n    enableExpandCollapse?: boolean;\n    groupCellCssClass?: string;\n    groupCssClass?: string;\n    groupIndentation?: number;\n    groupFocusable?: boolean;\n    groupFormat?: ColumnFormat<Group>;\n    groupFormatter?: CompatFormatter<Group>;\n    groupLevelPrefix?: string;\n    groupRowTotals?: boolean;\n    groupTitleCssClass?: string;\n    hasSummaryType?: (column: Column) => boolean;\n    toggleCssClass?: string;\n    toggleExpandedCssClass?: string;\n    toggleCollapsedCssClass?: string;\n    totalsCssClass?: string;\n    totalsFocusable?: boolean;\n    totalsFormat?: ColumnFormat<GroupTotals>;\n    totalsFormatter?: CompatFormatter<GroupTotals>;\n}\n\nexport class GroupItemMetadataProvider {\n    declare protected grid: Grid;\n    declare private options: GroupItemMetadataProviderOptions;\n\n    constructor(opt?: GroupItemMetadataProviderOptions) {\n        this.options = Object.assign({}, GroupItemMetadataProvider.defaults, opt);\n        this.options.groupFormat ??= opt?.groupFormatter ? convertCompatFormatter(opt.groupFormatter) :\n            ctx => GroupItemMetadataProvider.defaultGroupFormat(ctx, this.options);\n        this.options.totalsFormat ??= opt?.totalsFormatter ? convertCompatFormatter(opt.totalsFormatter) :\n            ctx => GroupItemMetadataProvider.defaultTotalsFormat(ctx, this.grid);\n    }\n\n    public static readonly defaults: GroupItemMetadataProviderOptions = {\n        enableExpandCollapse: true,\n        groupCellCssClass: \"slick-group-cell\",\n        groupCssClass: \"slick-group\",\n        groupFocusable: true,\n        groupIndentation: 15,\n        groupLevelPrefix: \"slick-group-level-\",\n        groupTitleCssClass: \"slick-group-title\",\n        hasSummaryType: (col: any) => col.summaryType && col.summaryType != -1,\n        totalsCssClass: \"slick-group-totals\",\n        toggleCssClass: \"slick-group-toggle\",\n        toggleCollapsedCssClass: \"collapsed\",\n        toggleExpandedCssClass: \"expanded\",\n        totalsFocusable: false\n    }\n\n    public static defaultGroupFormat(ctx: FormatterContext, opt?: GroupItemMetadataProviderOptions) {\n        opt ??= GroupItemMetadataProvider.defaults;\n        let item = ctx.item as Group;\n        if (!opt.enableExpandCollapse)\n            return item?.title;\n        let indentation = item.level * opt.groupIndentation;\n        return `<span class=\"${ctx.escape(opt.toggleCssClass + \" \" + (item.collapsed ? opt.toggleCollapsedCssClass : opt.toggleExpandedCssClass))}\" style=\"margin-left: ${indentation}px\">\n<span class=\"${ctx.escape(opt.groupTitleCssClass)}\" level=\"${ctx.escape(item.level)}\">${item.title}</span>`;\n    }\n\n    public static defaultTotalsFormat(ctx: FormatterContext, grid?: Grid): string {\n        var item = ctx.item as GroupTotals;\n        if (!item.__groupTotals && (item as any).totals)\n            item = (item as any).totals;\n        return (ctx.column?.groupTotalsFormatter?.(item, ctx.column)) ??\n            ((grid ?? ctx.grid)?.groupTotalsFormatter?.(item, ctx.column)) ?? \"\";\n    }\n\n    init(grid: Grid) {\n        this.grid = grid;\n        grid.onClick.subscribe(this.handleGridClick);\n        grid.onKeyDown.subscribe(this.handleGridKeyDown);\n    }\n\n    readonly pluginName = \"GroupItemMetadataProvider\";\n\n    destroy() {\n        if (this.grid) {\n            this.grid.onClick?.unsubscribe(this.handleGridClick);\n            this.grid.onKeyDown?.unsubscribe(this.handleGridKeyDown);\n        }\n    }\n\n    getOptions() {\n        return this.options;\n    }\n\n    setOptions(value: GroupItemMetadataProviderOptions) {\n        Object.assign(this.options, value);\n    }\n\n    handleGridClick = (e: MouseEvent, args: ArgsCell) => {\n        let grid = args?.grid ?? this.grid;\n        if (!grid)\n            return;\n        var item = grid.getDataItem(args.row);\n        if (!item ||\n            !(item instanceof Group) ||\n            !this.options.toggleCssClass ||\n            !(e.target as HTMLElement).classList.contains(this.options.toggleCssClass))\n            return;\n\n        e.stopImmediatePropagation();\n        e.preventDefault();\n\n        var range = grid.getRenderedRange();\n        grid.getData().setRefreshHints?.({\n            ignoreDiffsBefore: range.top,\n            ignoreDiffsAfter: range.bottom + 1\n        });\n\n        if (item.collapsed)\n            grid.getData().expandGroup?.(item.groupingKey);\n        else\n            grid.getData().collapseGroup?.(item.groupingKey);\n    }\n\n    handleGridKeyDown = (e: KeyboardEvent, args: ArgsCell) => {\n        if (!this.options.enableExpandCollapse ||\n            (e.key !== \" \" && e.key !== \"-\" && e.key !== \"+\"))\n            return;\n\n        let grid = args?.grid ?? this.grid;\n        if (!grid)\n            return;\n\n        var activeCell = grid.getActiveCell();\n        if (!activeCell)\n            return;\n\n        var item = grid.getDataItem(activeCell.row);\n        if (!item || !(item instanceof Group))\n            return;\n\n        e.stopImmediatePropagation();\n        e.preventDefault();\n\n        if ((e.key == \"+\" && !item.collapsed) ||\n            (e.key == \"-\" && item.collapsed))\n            return;\n\n        var range = (grid.getRenderedRange as any)();\n        grid.getData().setRefreshHints?.({\n            ignoreDiffsBefore: range.top,\n            ignoreDiffsAfter: range.bottom + 1\n        });\n\n        if (item.collapsed)\n            grid.getData().expandGroup?.(item.groupingKey);\n        else\n            grid.getData().collapseGroup?.(item.groupingKey);\n    }\n\n    groupCellPosition = () => {\n\n        const result = {\n            cell: 0,\n            colspan: <\"*\" | number>\"*\"\n        }\n\n        if (!this.options.groupRowTotals ||\n            !this.grid) {\n            return result;\n        }\n\n        var cols = this.grid.getColumns();\n        var col1: Column;\n        for (var idx = 0; idx < cols.length; idx++) {\n            col1 = cols[idx];\n            if (!this.options.hasSummaryType?.(cols[idx])) {\n                result.cell = idx;\n                break;\n            }\n        }\n\n        result.colspan = 0;\n        for (var idx = result.cell + 1; idx < cols.length; idx++) {\n            var col2 = cols[idx];\n            if (!this.options.hasSummaryType?.(col2) &&\n                (!!(col1?.frozen) === !!(col2?.frozen))) {\n                result.colspan++;\n            }\n            else\n                break;\n        }\n\n        result.colspan = Math.max(1, result.colspan);\n        return result;\n    }\n\n    getGroupRowMetadata: ((item: Group) => ItemMetadata) = (item) => {\n\n        const opt = this.options;\n        const gcp = this.groupCellPosition();\n        const result: ItemMetadata = {\n            selectable: false,\n            focusable: opt.groupFocusable,\n            cssClasses: opt.groupCssClass + \" \" + opt.groupLevelPrefix + item?.level,\n            columns: {\n                [gcp.cell]: {\n                    colspan: gcp.colspan,\n                    cssClasses: opt.groupCellCssClass,\n                    format: opt.groupFormat,\n                    editor: null\n                }\n            }\n        };\n\n        if (opt.groupRowTotals)\n            result.format = opt.totalsFormat;\n\n        return result;\n    }\n\n    getTotalsRowMetadata: ((item: GroupTotals) => ItemMetadata) = (item) => {\n        const opt = this.options;\n        return {\n          selectable: false,\n          focusable: opt.totalsFocusable,\n          cssClasses: opt.totalsCssClass + \" \" + opt.groupLevelPrefix + item?.group?.level,\n          format: opt.totalsFormat,\n          editor: null\n        };\n      }\n\n}\n", "const { convertCompatFormatter, Group } = Slick;export {\n     convertCompatFormatter, Group\n};"],
  "mappings": "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",
  "names": ["groupitemmetadataprovider_exports", "__export", "GroupItemMetadataProvider", "convertCompatFormatter", "Group", "_GroupItemMetadataProvider", "opt", "e", "args", "_a", "_b", "_c", "_d", "_e", "_f", "_g", "grid", "item", "Group", "range", "activeCell", "result", "cols", "col1", "idx", "col2", "gcp", "convertCompatFormatter", "ctx", "indentation", "value", "col", "GroupItemMetadataProvider"]
}
